[1mdiff --git a/application/.htaccess b/application/.htaccess[m
[1mnew file mode 100644[m
[1mindex 0000000..6c63ed4[m
[1m--- /dev/null[m
[1m+++ b/application/.htaccess[m
[36m@@ -0,0 +1,6 @@[m
[32m+[m[32m<IfModule authz_core_module>[m
[32m+[m[32m    Require all denied[m
[32m+[m[32m</IfModule>[m
[32m+[m[32m<IfModule !authz_core_module>[m
[32m+[m[32m    Deny from all[m
[32m+[m[32m</IfModule>[m
\ No newline at end of file[m
[1mdiff --git a/application/cache/index.html b/application/cache/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/application/cache/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/application/config/autoload.php b/application/config/autoload.php[m
[1mnew file mode 100644[m
[1mindex 0000000..7cdc901[m
[1m--- /dev/null[m
[1m+++ b/application/config/autoload.php[m
[36m@@ -0,0 +1,135 @@[m
[32m+[m[32m<?php[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m| -------------------------------------------------------------------[m
[32m+[m[32m| AUTO-LOADER[m
[32m+[m[32m| -------------------------------------------------------------------[m
[32m+[m[32m| This file specifies which systems should be loaded by default.[m
[32m+[m[32m|[m
[32m+[m[32m| In order to keep the framework as light-weight as possible only the[m
[32m+[m[32m| absolute minimal resources are loaded by default. For example,[m
[32m+[m[32m| the database is not connected to automatically since no assumption[m
[32m+[m[32m| is made regarding whether you intend to use it.  This file lets[m
[32m+[m[32m| you globally define which systems you would like loaded with every[m
[32m+[m[32m| request.[m
[32m+[m[32m|[m
[32m+[m[32m| -------------------------------------------------------------------[m
[32m+[m[32m| Instructions[m
[32m+[m[32m| -------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| These are the things you can load automatically:[m
[32m+[m[32m|[m
[32m+[m[32m| 1. Packages[m
[32m+[m[32m| 2. Libraries[m
[32m+[m[32m| 3. Drivers[m
[32m+[m[32m| 4. Helper files[m
[32m+[m[32m| 5. Custom config files[m
[32m+[m[32m| 6. Language files[m
[32m+[m[32m| 7. Models[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m| -------------------------------------------------------------------[m
[32m+[m[32m|  Auto-load Packages[m
[32m+[m[32m| -------------------------------------------------------------------[m
[32m+[m[32m| Prototype:[m
[32m+[m[32m|[m
[32m+[m[32m|  $autoload['packages'] = array(APPPATH.'third_party', '/usr/local/shared');[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$autoload['packages'] = array();[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m| -------------------------------------------------------------------[m
[32m+[m[32m|  Auto-load Libraries[m
[32m+[m[32m| -------------------------------------------------------------------[m
[32m+[m[32m| These are the classes located in system/libraries/ or your[m
[32m+[m[32m| application/libraries/ directory, with the addition of the[m
[32m+[m[32m| 'database' library, which is somewhat of a special case.[m
[32m+[m[32m|[m
[32m+[m[32m| Prototype:[m
[32m+[m[32m|[m
[32m+[m[32m|	$autoload['libraries'] = array('database', 'email', 'session');[m
[32m+[m[32m|[m
[32m+[m[32m| You can also supply an alternative library name to be assigned[m
[32m+[m[32m| in the controller:[m
[32m+[m[32m|[m
[32m+[m[32m|	$autoload['libraries'] = array('user_agent' => 'ua');[m
[32m+[m[32m*/[m
[32m+[m[32m$autoload['libraries'] = array();[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m| -------------------------------------------------------------------[m
[32m+[m[32m|  Auto-load Drivers[m
[32m+[m[32m| -------------------------------------------------------------------[m
[32m+[m[32m| These classes are located in system/libraries/ or in your[m
[32m+[m[32m| application/libraries/ directory, but are also placed inside their[m
[32m+[m[32m| own subdirectory and they extend the CI_Driver_Library class. They[m
[32m+[m[32m| offer multiple interchangeable driver options.[m
[32m+[m[32m|[m
[32m+[m[32m| Prototype:[m
[32m+[m[32m|[m
[32m+[m[32m|	$autoload['drivers'] = array('cache');[m
[32m+[m[32m|[m
[32m+[m[32m| You can also supply an alternative property name to be assigned in[m
[32m+[m[32m| the controller:[m
[32m+[m[32m|[m
[32m+[m[32m|	$autoload['drivers'] = array('cache' => 'cch');[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$autoload['drivers'] = array();[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m| -------------------------------------------------------------------[m
[32m+[m[32m|  Auto-load Helper Files[m
[32m+[m[32m| -------------------------------------------------------------------[m
[32m+[m[32m| Prototype:[m
[32m+[m[32m|[m
[32m+[m[32m|	$autoload['helper'] = array('url', 'file');[m
[32m+[m[32m*/[m
[32m+[m[32m$autoload['helper'] = array();[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m| -------------------------------------------------------------------[m
[32m+[m[32m|  Auto-load Config files[m
[32m+[m[32m| -------------------------------------------------------------------[m
[32m+[m[32m| Prototype:[m
[32m+[m[32m|[m
[32m+[m[32m|	$autoload['config'] = array('config1', 'config2');[m
[32m+[m[32m|[m
[32m+[m[32m| NOTE: This item is intended for use ONLY if you have created custom[m
[32m+[m[32m| config files.  Otherwise, leave it blank.[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$autoload['config'] = array();[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m| -------------------------------------------------------------------[m
[32m+[m[32m|  Auto-load Language files[m
[32m+[m[32m| -------------------------------------------------------------------[m
[32m+[m[32m| Prototype:[m
[32m+[m[32m|[m
[32m+[m[32m|	$autoload['language'] = array('lang1', 'lang2');[m
[32m+[m[32m|[m
[32m+[m[32m| NOTE: Do not include the "_lang" part of your file.  For example[m
[32m+[m[32m| "codeigniter_lang.php" would be referenced as array('codeigniter');[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$autoload['language'] = array();[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m| -------------------------------------------------------------------[m
[32m+[m[32m|  Auto-load Models[m
[32m+[m[32m| -------------------------------------------------------------------[m
[32m+[m[32m| Prototype:[m
[32m+[m[32m|[m
[32m+[m[32m|	$autoload['model'] = array('first_model', 'second_model');[m
[32m+[m[32m|[m
[32m+[m[32m| You can also supply an alternative model name to be assigned[m
[32m+[m[32m| in the controller:[m
[32m+[m[32m|[m
[32m+[m[32m|	$autoload['model'] = array('first_model' => 'first');[m
[32m+[m[32m*/[m
[32m+[m[32m$autoload['model'] = array();[m
[1mdiff --git a/application/config/config.php b/application/config/config.php[m
[1mnew file mode 100644[m
[1mindex 0000000..1031522[m
[1m--- /dev/null[m
[1m+++ b/application/config/config.php[m
[36m@@ -0,0 +1,523 @@[m
[32m+[m[32m<?php[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Base Site URL[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| URL to your CodeIgniter root. Typically this will be your base URL,[m
[32m+[m[32m| WITH a trailing slash:[m
[32m+[m[32m|[m
[32m+[m[32m|	http://example.com/[m
[32m+[m[32m|[m
[32m+[m[32m| WARNING: You MUST set this value![m
[32m+[m[32m|[m
[32m+[m[32m| If it is not set, then CodeIgniter will try guess the protocol and path[m
[32m+[m[32m| your installation, but due to security concerns the hostname will be set[m
[32m+[m[32m| to $_SERVER['SERVER_ADDR'] if available, or localhost otherwise.[m
[32m+[m[32m| The auto-detection mechanism exists only for convenience during[m
[32m+[m[32m| development and MUST NOT be used in production![m
[32m+[m[32m|[m
[32m+[m[32m| If you need to allow multiple domains, remember that this file is still[m
[32m+[m[32m| a PHP script and you can easily do that on your own.[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$config['base_url'] = '';[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Index File[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| Typically this will be your index.php file, unless you've renamed it to[m
[32m+[m[32m| something else. If you are using mod_rewrite to remove the page set this[m
[32m+[m[32m| variable so that it is blank.[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$config['index_page'] = 'index.php';[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| URI PROTOCOL[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| This item determines which server global should be used to retrieve the[m
[32m+[m[32m| URI string.  The default setting of 'REQUEST_URI' works for most servers.[m
[32m+[m[32m| If your links do not seem to work, try one of the other delicious flavors:[m
[32m+[m[32m|[m
[32m+[m[32m| 'REQUEST_URI'    Uses $_SERVER['REQUEST_URI'][m
[32m+[m[32m| 'QUERY_STRING'   Uses $_SERVER['QUERY_STRING'][m
[32m+[m[32m| 'PATH_INFO'      Uses $_SERVER['PATH_INFO'][m
[32m+[m[32m|[m
[32m+[m[32m| WARNING: If you set this to 'PATH_INFO', URIs will always be URL-decoded![m
[32m+[m[32m*/[m
[32m+[m[32m$config['uri_protocol']	= 'REQUEST_URI';[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| URL suffix[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| This option allows you to add a suffix to all URLs generated by CodeIgniter.[m
[32m+[m[32m| For more information please see the user guide:[m
[32m+[m[32m|[m
[32m+[m[32m| https://codeigniter.com/user_guide/general/urls.html[m
[32m+[m[32m*/[m
[32m+[m[32m$config['url_suffix'] = '';[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Default Language[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| This determines which set of language files should be used. Make sure[m
[32m+[m[32m| there is an available translation if you intend to use something other[m
[32m+[m[32m| than english.[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$config['language']	= 'english';[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Default Character Set[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| This determines which character set is used by default in various methods[m
[32m+[m[32m| that require a character set to be provided.[m
[32m+[m[32m|[m
[32m+[m[32m| See http://php.net/htmlspecialchars for a list of supported charsets.[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$config['charset'] = 'UTF-8';[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Enable/Disable System Hooks[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| If you would like to use the 'hooks' feature you must enable it by[m
[32m+[m[32m| setting this variable to TRUE (boolean).  See the user guide for details.[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$config['enable_hooks'] = FALSE;[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Class Extension Prefix[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| This item allows you to set the filename/classname prefix when extending[m
[32m+[m[32m| native libraries.  For more information please see the user guide:[m
[32m+[m[32m|[m
[32m+[m[32m| https://codeigniter.com/user_guide/general/core_classes.html[m
[32m+[m[32m| https://codeigniter.com/user_guide/general/creating_libraries.html[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$config['subclass_prefix'] = 'MY_';[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Composer auto-loading[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| Enabling this setting will tell CodeIgniter to look for a Composer[m
[32m+[m[32m| package auto-loader script in application/vendor/autoload.php.[m
[32m+[m[32m|[m
[32m+[m[32m|	$config['composer_autoload'] = TRUE;[m
[32m+[m[32m|[m
[32m+[m[32m| Or if you have your vendor/ directory located somewhere else, you[m
[32m+[m[32m| can opt to set a specific path as well:[m
[32m+[m[32m|[m
[32m+[m[32m|	$config['composer_autoload'] = '/path/to/vendor/autoload.php';[m
[32m+[m[32m|[m
[32m+[m[32m| For more information about Composer, please visit http://getcomposer.org/[m
[32m+[m[32m|[m
[32m+[m[32m| Note: This will NOT disable or override the CodeIgniter-specific[m
[32m+[m[32m|	autoloading (application/config/autoload.php)[m
[32m+[m[32m*/[m
[32m+[m[32m$config['composer_autoload'] = FALSE;[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Allowed URL Characters[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| This lets you specify which characters are permitted within your URLs.[m
[32m+[m[32m| When someone tries to submit a URL with disallowed characters they will[m
[32m+[m[32m| get a warning message.[m
[32m+[m[32m|[m
[32m+[m[32m| As a security measure you are STRONGLY encouraged to restrict URLs to[m
[32m+[m[32m| as few characters as possible.  By default only these are allowed: a-z 0-9~%.:_-[m
[32m+[m[32m|[m
[32m+[m[32m| Leave blank to allow all characters -- but only if you are insane.[m
[32m+[m[32m|[m
[32m+[m[32m| The configured value is actually a regular expression character group[m
[32m+[m[32m| and it will be executed as: ! preg_match('/^[<permitted_uri_chars>]+$/i[m
[32m+[m[32m|[m
[32m+[m[32m| DO NOT CHANGE THIS UNLESS YOU FULLY UNDERSTAND THE REPERCUSSIONS!![m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$config['permitted_uri_chars'] = 'a-z 0-9~%.:_\-';[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Enable Query Strings[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| By default CodeIgniter uses search-engine friendly segment based URLs:[m
[32m+[m[32m| example.com/who/what/where/[m
[32m+[m[32m|[m
[32m+[m[32m| You can optionally enable standard query string based URLs:[m
[32m+[m[32m| example.com?who=me&what=something&where=here[m
[32m+[m[32m|[m
[32m+[m[32m| Options are: TRUE or FALSE (boolean)[m
[32m+[m[32m|[m
[32m+[m[32m| The other items let you set the query string 'words' that will[m
[32m+[m[32m| invoke your controllers and its functions:[m
[32m+[m[32m| example.com/index.php?c=controller&m=function[m
[32m+[m[32m|[m
[32m+[m[32m| Please note that some of the helpers won't work as expected when[m
[32m+[m[32m| this feature is enabled, since CodeIgniter is designed primarily to[m
[32m+[m[32m| use segment based URLs.[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$config['enable_query_strings'] = FALSE;[m
[32m+[m[32m$config['controller_trigger'] = 'c';[m
[32m+[m[32m$config['function_trigger'] = 'm';[m
[32m+[m[32m$config['directory_trigger'] = 'd';[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Allow $_GET array[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| By default CodeIgniter enables access to the $_GET array.  If for some[m
[32m+[m[32m| reason you would like to disable it, set 'allow_get_array' to FALSE.[m
[32m+[m[32m|[m
[32m+[m[32m| WARNING: This feature is DEPRECATED and currently available only[m
[32m+[m[32m|          for backwards compatibility purposes![m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$config['allow_get_array'] = TRUE;[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Error Logging Threshold[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| You can enable error logging by setting a threshold over zero. The[m
[32m+[m[32m| threshold determines what gets logged. Threshold options are:[m
[32m+[m[32m|[m
[32m+[m[32m|	0 = Disables logging, Error logging TURNED OFF[m
[32m+[m[32m|	1 = Error Messages (including PHP errors)[m
[32m+[m[32m|	2 = Debug Messages[m
[32m+[m[32m|	3 = Informational Messages[m
[32m+[m[32m|	4 = All Messages[m
[32m+[m[32m|[m
[32m+[m[32m| You can also pass an array with threshold levels to show individual error types[m
[32m+[m[32m|[m
[32m+[m[32m| 	array(2) = Debug Messages, without Error Messages[m
[32m+[m[32m|[m
[32m+[m[32m| For a live site you'll usually only enable Errors (1) to be logged otherwise[m
[32m+[m[32m| your log files will fill up very fast.[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$config['log_threshold'] = 0;[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Error Logging Directory Path[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| Leave this BLANK unless you would like to set something other than the default[m
[32m+[m[32m| application/logs/ directory. Use a full server path with trailing slash.[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$config['log_path'] = '';[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Log File Extension[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| The default filename extension for log files. The default 'php' allows for[m
[32m+[m[32m| protecting the log files via basic scripting, when they are to be stored[m
[32m+[m[32m| under a publicly accessible directory.[m
[32m+[m[32m|[m
[32m+[m[32m| Note: Leaving it blank will default to 'php'.[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$config['log_file_extension'] = '';[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Log File Permissions[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| The file system permissions to be applied on newly created log files.[m
[32m+[m[32m|[m
[32m+[m[32m| IMPORTANT: This MUST be an integer (no quotes) and you MUST use octal[m
[32m+[m[32m|            integer notation (i.e. 0700, 0644, etc.)[m
[32m+[m[32m*/[m
[32m+[m[32m$config['log_file_permissions'] = 0644;[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Date Format for Logs[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| Each item that is logged has an associated date. You can use PHP date[m
[32m+[m[32m| codes to set your own date formatting[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$config['log_date_format'] = 'Y-m-d H:i:s';[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Error Views Directory Path[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| Leave this BLANK unless you would like to set something other than the default[m
[32m+[m[32m| application/views/errors/ directory.  Use a full server path with trailing slash.[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$config['error_views_path'] = '';[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Cache Directory Path[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| Leave this BLANK unless you would like to set something other than the default[m
[32m+[m[32m| application/cache/ directory.  Use a full server path with trailing slash.[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$config['cache_path'] = '';[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Cache Include Query String[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| Whether to take the URL query string into consideration when generating[m
[32m+[m[32m| output cache files. Valid options are:[m
[32m+[m[32m|[m
[32m+[m[32m|	FALSE      = Disabled[m
[32m+[m[32m|	TRUE       = Enabled, take all query parameters into account.[m
[32m+[m[32m|	             Please be aware that this may result in numerous cache[m
[32m+[m[32m|	             files generated for the same page over and over again.[m
[32m+[m[32m|	array('q') = Enabled, but only take into account the specified list[m
[32m+[m[32m|	             of query parameters.[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$config['cache_query_string'] = FALSE;[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Encryption Key[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| If you use the Encryption class, you must set an encryption key.[m
[32m+[m[32m| See the user guide for more info.[m
[32m+[m[32m|[m
[32m+[m[32m| https://codeigniter.com/user_guide/libraries/encryption.html[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$config['encryption_key'] = '';[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Session Variables[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| 'sess_driver'[m
[32m+[m[32m|[m
[32m+[m[32m|	The storage driver to use: files, database, redis, memcached[m
[32m+[m[32m|[m
[32m+[m[32m| 'sess_cookie_name'[m
[32m+[m[32m|[m
[32m+[m[32m|	The session cookie name, must contain only [0-9a-z_-] characters[m
[32m+[m[32m|[m
[32m+[m[32m| 'sess_expiration'[m
[32m+[m[32m|[m
[32m+[m[32m|	The number of SECONDS you want the session to last.[m
[32m+[m[32m|	Setting to 0 (zero) means expire when the browser is closed.[m
[32m+[m[32m|[m
[32m+[m[32m| 'sess_save_path'[m
[32m+[m[32m|[m
[32m+[m[32m|	The location to save sessions to, driver dependent.[m
[32m+[m[32m|[m
[32m+[m[32m|	For the 'files' driver, it's a path to a writable directory.[m
[32m+[m[32m|	WARNING: Only absolute paths are supported![m
[32m+[m[32m|[m
[32m+[m[32m|	For the 'database' driver, it's a table name.[m
[32m+[m[32m|	Please read up the manual for the format with other session drivers.[m
[32m+[m[32m|[m
[32m+[m[32m|	IMPORTANT: You are REQUIRED to set a valid save path![m
[32m+[m[32m|[m
[32m+[m[32m| 'sess_match_ip'[m
[32m+[m[32m|[m
[32m+[m[32m|	Whether to match the user's IP address when reading the session data.[m
[32m+[m[32m|[m
[32m+[m[32m|	WARNING: If you're using the database driver, don't forget to update[m
[32m+[m[32m|	         your session table's PRIMARY KEY when changing this setting.[m
[32m+[m[32m|[m
[32m+[m[32m| 'sess_time_to_update'[m
[32m+[m[32m|[m
[32m+[m[32m|	How many seconds between CI regenerating the session ID.[m
[32m+[m[32m|[m
[32m+[m[32m| 'sess_regenerate_destroy'[m
[32m+[m[32m|[m
[32m+[m[32m|	Whether to destroy session data associated with the old session ID[m
[32m+[m[32m|	when auto-regenerating the session ID. When set to FALSE, the data[m
[32m+[m[32m|	will be later deleted by the garbage collector.[m
[32m+[m[32m|[m
[32m+[m[32m| Other session cookie settings are shared with the rest of the application,[m
[32m+[m[32m| except for 'cookie_prefix' and 'cookie_httponly', which are ignored here.[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$config['sess_driver'] = 'files';[m
[32m+[m[32m$config['sess_cookie_name'] = 'ci_session';[m
[32m+[m[32m$config['sess_expiration'] = 7200;[m
[32m+[m[32m$config['sess_save_path'] = NULL;[m
[32m+[m[32m$config['sess_match_ip'] = FALSE;[m
[32m+[m[32m$config['sess_time_to_update'] = 300;[m
[32m+[m[32m$config['sess_regenerate_destroy'] = FALSE;[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Cookie Related Variables[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| 'cookie_prefix'   = Set a cookie name prefix if you need to avoid collisions[m
[32m+[m[32m| 'cookie_domain'   = Set to .your-domain.com for site-wide cookies[m
[32m+[m[32m| 'cookie_path'     = Typically will be a forward slash[m
[32m+[m[32m| 'cookie_secure'   = Cookie will only be set if a secure HTTPS connection exists.[m
[32m+[m[32m| 'cookie_httponly' = Cookie will only be accessible via HTTP(S) (no javascript)[m
[32m+[m[32m|[m
[32m+[m[32m| Note: These settings (with the exception of 'cookie_prefix' and[m
[32m+[m[32m|       'cookie_httponly') will also affect sessions.[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$config['cookie_prefix']	= '';[m
[32m+[m[32m$config['cookie_domain']	= '';[m
[32m+[m[32m$config['cookie_path']		= '/';[m
[32m+[m[32m$config['cookie_secure']	= FALSE;[m
[32m+[m[32m$config['cookie_httponly'] 	= FALSE;[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Standardize newlines[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| Determines whether to standardize newline characters in input data,[m
[32m+[m[32m| meaning to replace \r\n, \r, \n occurrences with the PHP_EOL value.[m
[32m+[m[32m|[m
[32m+[m[32m| WARNING: This feature is DEPRECATED and currently available only[m
[32m+[m[32m|          for backwards compatibility purposes![m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$config['standardize_newlines'] = FALSE;[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Global XSS Filtering[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| Determines whether the XSS filter is always active when GET, POST or[m
[32m+[m[32m| COOKIE data is encountered[m
[32m+[m[32m|[m
[32m+[m[32m| WARNING: This feature is DEPRECATED and currently available only[m
[32m+[m[32m|          for backwards compatibility purposes![m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$config['global_xss_filtering'] = FALSE;[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Cross Site Request Forgery[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Enables a CSRF cookie token to be set. When set to TRUE, token will be[m
[32m+[m[32m| checked on a submitted form. If you are accepting user data, it is strongly[m
[32m+[m[32m| recommended CSRF protection be enabled.[m
[32m+[m[32m|[m
[32m+[m[32m| 'csrf_token_name' = The token name[m
[32m+[m[32m| 'csrf_cookie_name' = The cookie name[m
[32m+[m[32m| 'csrf_expire' = The number in seconds the token should expire.[m
[32m+[m[32m| 'csrf_regenerate' = Regenerate token on every submission[m
[32m+[m[32m| 'csrf_exclude_uris' = Array of URIs which ignore CSRF checks[m
[32m+[m[32m*/[m
[32m+[m[32m$config['csrf_protection'] = FALSE;[m
[32m+[m[32m$config['csrf_token_name'] = 'csrf_test_name';[m
[32m+[m[32m$config['csrf_cookie_name'] = 'csrf_cookie_name';[m
[32m+[m[32m$config['csrf_expire'] = 7200;[m
[32m+[m[32m$config['csrf_regenerate'] = TRUE;[m
[32m+[m[32m$config['csrf_exclude_uris'] = array();[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Output Compression[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| Enables Gzip output compression for faster page loads.  When enabled,[m
[32m+[m[32m| the output class will test whether your server supports Gzip.[m
[32m+[m[32m| Even if it does, however, not all browsers support compression[m
[32m+[m[32m| so enable only if you are reasonably sure your visitors can handle it.[m
[32m+[m[32m|[m
[32m+[m[32m| Only used if zlib.output_compression is turned off in your php.ini.[m
[32m+[m[32m| Please do not use it together with httpd-level output compression.[m
[32m+[m[32m|[m
[32m+[m[32m| VERY IMPORTANT:  If you are getting a blank page when compression is enabled it[m
[32m+[m[32m| means you are prematurely outputting something to your browser. It could[m
[32m+[m[32m| even be a line of whitespace at the end of one of your scripts.  For[m
[32m+[m[32m| compression to work, nothing can be sent before the output buffer is called[m
[32m+[m[32m| by the output class.  Do not 'echo' any values with compression enabled.[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$config['compress_output'] = FALSE;[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Master Time Reference[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| Options are 'local' or any PHP supported timezone. This preference tells[m
[32m+[m[32m| the system whether to use your server's local time as the master 'now'[m
[32m+[m[32m| reference, or convert it to the configured one timezone. See the 'date[m
[32m+[m[32m| helper' page of the user guide for information regarding date handling.[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$config['time_reference'] = 'local';[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Rewrite PHP Short Tags[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| If your PHP installation does not have short tag support enabled CI[m
[32m+[m[32m| can rewrite the tags on-the-fly, enabling you to utilize that syntax[m
[32m+[m[32m| in your view files.  Options are TRUE or FALSE (boolean)[m
[32m+[m[32m|[m
[32m+[m[32m| Note: You need to have eval() enabled for this to work.[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$config['rewrite_short_tags'] = FALSE;[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Reverse Proxy IPs[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| If your server is behind a reverse proxy, you must whitelist the proxy[m
[32m+[m[32m| IP addresses from which CodeIgniter should trust headers such as[m
[32m+[m[32m| HTTP_X_FORWARDED_FOR and HTTP_CLIENT_IP in order to properly identify[m
[32m+[m[32m| the visitor's IP address.[m
[32m+[m[32m|[m
[32m+[m[32m| You can use both an array or a comma-separated list of proxy addresses,[m
[32m+[m[32m| as well as specifying whole subnets. Here are a few examples:[m
[32m+[m[32m|[m
[32m+[m[32m| Comma-separated:	'10.0.1.200,192.168.5.0/24'[m
[32m+[m[32m| Array:		array('10.0.1.200', '192.168.5.0/24')[m
[32m+[m[32m*/[m
[32m+[m[32m$config['proxy_ips'] = '';[m
[1mdiff --git a/application/config/constants.php b/application/config/constants.php[m
[1mnew file mode 100644[m
[1mindex 0000000..18d3b4b[m
[1m--- /dev/null[m
[1m+++ b/application/config/constants.php[m
[36m@@ -0,0 +1,85 @@[m
[32m+[m[32m<?php[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Display Debug backtrace[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| If set to TRUE, a backtrace will be displayed along with php errors. If[m
[32m+[m[32m| error_reporting is disabled, the backtrace will not display, regardless[m
[32m+[m[32m| of this setting[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32mdefined('SHOW_DEBUG_BACKTRACE') OR define('SHOW_DEBUG_BACKTRACE', TRUE);[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| File and Directory Modes[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| These prefs are used when checking and setting modes when working[m
[32m+[m[32m| with the file system.  The defaults are fine on servers with proper[m
[32m+[m[32m| security, but you may wish (or even need) to change the values in[m
[32m+[m[32m| certain environments (Apache running a separate process for each[m
[32m+[m[32m| user, PHP under CGI with Apache suEXEC, etc.).  Octal values should[m
[32m+[m[32m| always be used to set the mode correctly.[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32mdefined('FILE_READ_MODE')  OR define('FILE_READ_MODE', 0644);[m
[32m+[m[32mdefined('FILE_WRITE_MODE') OR define('FILE_WRITE_MODE', 0666);[m
[32m+[m[32mdefined('DIR_READ_MODE')   OR define('DIR_READ_MODE', 0755);[m
[32m+[m[32mdefined('DIR_WRITE_MODE')  OR define('DIR_WRITE_MODE', 0755);[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| File Stream Modes[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| These modes are used when working with fopen()/popen()[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32mdefined('FOPEN_READ')                           OR define('FOPEN_READ', 'rb');[m
[32m+[m[32mdefined('FOPEN_READ_WRITE')                     OR define('FOPEN_READ_WRITE', 'r+b');[m
[32m+[m[32mdefined('FOPEN_WRITE_CREATE_DESTRUCTIVE')       OR define('FOPEN_WRITE_CREATE_DESTRUCTIVE', 'wb'); // truncates existing file data, use with care[m
[32m+[m[32mdefined('FOPEN_READ_WRITE_CREATE_DESTRUCTIVE')  OR define('FOPEN_READ_WRITE_CREATE_DESTRUCTIVE', 'w+b'); // truncates existing file data, use with care[m
[32m+[m[32mdefined('FOPEN_WRITE_CREATE')                   OR define('FOPEN_WRITE_CREATE', 'ab');[m
[32m+[m[32mdefined('FOPEN_READ_WRITE_CREATE')              OR define('FOPEN_READ_WRITE_CREATE', 'a+b');[m
[32m+[m[32mdefined('FOPEN_WRITE_CREATE_STRICT')            OR define('FOPEN_WRITE_CREATE_STRICT', 'xb');[m
[32m+[m[32mdefined('FOPEN_READ_WRITE_CREATE_STRICT')       OR define('FOPEN_READ_WRITE_CREATE_STRICT', 'x+b');[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Exit Status Codes[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| Used to indicate the conditions under which the script is exit()ing.[m
[32m+[m[32m| While there is no universal standard for error codes, there are some[m
[32m+[m[32m| broad conventions.  Three such conventions are mentioned below, for[m
[32m+[m[32m| those who wish to make use of them.  The CodeIgniter defaults were[m
[32m+[m[32m| chosen for the least overlap with these conventions, while still[m
[32m+[m[32m| leaving room for others to be defined in future versions and user[m
[32m+[m[32m| applications.[m
[32m+[m[32m|[m
[32m+[m[32m| The three main conventions used for determining exit status codes[m
[32m+[m[32m| are as follows:[m
[32m+[m[32m|[m
[32m+[m[32m|    Standard C/C++ Library (stdlibc):[m
[32m+[m[32m|       http://www.gnu.org/software/libc/manual/html_node/Exit-Status.html[m
[32m+[m[32m|       (This link also contains other GNU-specific conventions)[m
[32m+[m[32m|    BSD sysexits.h:[m
[32m+[m[32m|       http://www.gsp.com/cgi-bin/man.cgi?section=3&topic=sysexits[m
[32m+[m[32m|    Bash scripting:[m
[32m+[m[32m|       http://tldp.org/LDP/abs/html/exitcodes.html[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32mdefined('EXIT_SUCCESS')        OR define('EXIT_SUCCESS', 0); // no errors[m
[32m+[m[32mdefined('EXIT_ERROR')          OR define('EXIT_ERROR', 1); // generic error[m
[32m+[m[32mdefined('EXIT_CONFIG')         OR define('EXIT_CONFIG', 3); // configuration error[m
[32m+[m[32mdefined('EXIT_UNKNOWN_FILE')   OR define('EXIT_UNKNOWN_FILE', 4); // file not found[m
[32m+[m[32mdefined('EXIT_UNKNOWN_CLASS')  OR define('EXIT_UNKNOWN_CLASS', 5); // unknown class[m
[32m+[m[32mdefined('EXIT_UNKNOWN_METHOD') OR define('EXIT_UNKNOWN_METHOD', 6); // unknown class member[m
[32m+[m[32mdefined('EXIT_USER_INPUT')     OR define('EXIT_USER_INPUT', 7); // invalid user input[m
[32m+[m[32mdefined('EXIT_DATABASE')       OR define('EXIT_DATABASE', 8); // database error[m
[32m+[m[32mdefined('EXIT__AUTO_MIN')      OR define('EXIT__AUTO_MIN', 9); // lowest automatically-assigned error code[m
[32m+[m[32mdefined('EXIT__AUTO_MAX')      OR define('EXIT__AUTO_MAX', 125); // highest automatically-assigned error code[m
[1mdiff --git a/application/config/database.php b/application/config/database.php[m
[1mnew file mode 100644[m
[1mindex 0000000..30ad27c[m
[1m--- /dev/null[m
[1m+++ b/application/config/database.php[m
[36m@@ -0,0 +1,96 @@[m
[32m+[m[32m<?php[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m| -------------------------------------------------------------------[m
[32m+[m[32m| DATABASE CONNECTIVITY SETTINGS[m
[32m+[m[32m| -------------------------------------------------------------------[m
[32m+[m[32m| This file will contain the settings needed to access your database.[m
[32m+[m[32m|[m
[32m+[m[32m| For complete instructions please consult the 'Database Connection'[m
[32m+[m[32m| page of the User Guide.[m
[32m+[m[32m|[m
[32m+[m[32m| -------------------------------------------------------------------[m
[32m+[m[32m| EXPLANATION OF VARIABLES[m
[32m+[m[32m| -------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m|	['dsn']      The full DSN string describe a connection to the database.[m
[32m+[m[32m|	['hostname'] The hostname of your database server.[m
[32m+[m[32m|	['username'] The username used to connect to the database[m
[32m+[m[32m|	['password'] The password used to connect to the database[m
[32m+[m[32m|	['database'] The name of the database you want to connect to[m
[32m+[m[32m|	['dbdriver'] The database driver. e.g.: mysqli.[m
[32m+[m[32m|			Currently supported:[m
[32m+[m[32m|				 cubrid, ibase, mssql, mysql, mysqli, oci8,[m
[32m+[m[32m|				 odbc, pdo, postgre, sqlite, sqlite3, sqlsrv[m
[32m+[m[32m|	['dbprefix'] You can add an optional prefix, which will be added[m
[32m+[m[32m|				 to the table name when using the  Query Builder class[m
[32m+[m[32m|	['pconnect'] TRUE/FALSE - Whether to use a persistent connection[m
[32m+[m[32m|	['db_debug'] TRUE/FALSE - Whether database errors should be displayed.[m
[32m+[m[32m|	['cache_on'] TRUE/FALSE - Enables/disables query caching[m
[32m+[m[32m|	['cachedir'] The path to the folder where cache files should be stored[m
[32m+[m[32m|	['char_set'] The character set used in communicating with the database[m
[32m+[m[32m|	['dbcollat'] The character collation used in communicating with the database[m
[32m+[m[32m|				 NOTE: For MySQL and MySQLi databases, this setting is only used[m
[32m+[m[32m| 				 as a backup if your server is running PHP < 5.2.3 or MySQL < 5.0.7[m
[32m+[m[32m|				 (and in table creation queries made with DB Forge).[m
[32m+[m[32m| 				 There is an incompatibility in PHP with mysql_real_escape_string() which[m
[32m+[m[32m| 				 can make your site vulnerable to SQL injection if you are using a[m
[32m+[m[32m| 				 multi-byte character set and are running versions lower than these.[m
[32m+[m[32m| 				 Sites using Latin-1 or UTF-8 database character set and collation are unaffected.[m
[32m+[m[32m|	['swap_pre'] A default table prefix that should be swapped with the dbprefix[m
[32m+[m[32m|	['encrypt']  Whether or not to use an encrypted connection.[m
[32m+[m[32m|[m
[32m+[m[32m|			'mysql' (deprecated), 'sqlsrv' and 'pdo/sqlsrv' drivers accept TRUE/FALSE[m
[32m+[m[32m|			'mysqli' and 'pdo/mysql' drivers accept an array with the following options:[m
[32m+[m[32m|[m
[32m+[m[32m|				'ssl_key'    - Path to the private key file[m
[32m+[m[32m|				'ssl_cert'   - Path to the public key certificate file[m
[32m+[m[32m|				'ssl_ca'     - Path to the certificate authority file[m
[32m+[m[32m|				'ssl_capath' - Path to a directory containing trusted CA certificates in PEM format[m
[32m+[m[32m|				'ssl_cipher' - List of *allowed* ciphers to be used for the encryption, separated by colons (':')[m
[32m+[m[32m|				'ssl_verify' - TRUE/FALSE; Whether verify the server certificate or not ('mysqli' only)[m
[32m+[m[32m|[m
[32m+[m[32m|	['compress'] Whether or not to use client compression (MySQL only)[m
[32m+[m[32m|	['stricton'] TRUE/FALSE - forces 'Strict Mode' connections[m
[32m+[m[32m|							- good for ensuring strict SQL while developing[m
[32m+[m[32m|	['ssl_options']	Used to set various SSL options that can be used when making SSL connections.[m
[32m+[m[32m|	['failover'] array - A array with 0 or more data for connections if the main should fail.[m
[32m+[m[32m|	['save_queries'] TRUE/FALSE - Whether to "save" all executed queries.[m
[32m+[m[32m| 				NOTE: Disabling this will also effectively disable both[m
[32m+[m[32m| 				$this->db->last_query() and profiling of DB queries.[m
[32m+[m[32m| 				When you run a query, with this setting set to TRUE (default),[m
[32m+[m[32m| 				CodeIgniter will store the SQL statement for debugging purposes.[m
[32m+[m[32m| 				However, this may cause high memory usage, especially if you run[m
[32m+[m[32m| 				a lot of SQL queries ... disable this to avoid that problem.[m
[32m+[m[32m|[m
[32m+[m[32m| The $active_group variable lets you choose which connection group to[m
[32m+[m[32m| make active.  By default there is only one group (the 'default' group).[m
[32m+[m[32m|[m
[32m+[m[32m| The $query_builder variables lets you determine whether or not to load[m
[32m+[m[32m| the query builder class.[m
[32m+[m[32m*/[m
[32m+[m[32m$active_group = 'default';[m
[32m+[m[32m$query_builder = TRUE;[m
[32m+[m
[32m+[m[32m$db['default'] = array([m
[32m+[m	[32m'dsn'	=> '',[m
[32m+[m	[32m'hostname' => '10.60.161.77',[m
[32m+[m	[32m'username' => 'detactapp',[m
[32m+[m	[32m'password' => 'fr4udche4ting',[m
[32m+[m	[32m'database' => 'detact_db',[m
[32m+[m	[32m'dbdriver' => 'mysqli',[m
[32m+[m	[32m'dbprefix' => '',[m
[32m+[m	[32m'pconnect' => FALSE,[m
[32m+[m	[32m'db_debug' => (ENVIRONMENT !== 'production'),[m
[32m+[m	[32m'cache_on' => FALSE,[m
[32m+[m	[32m'cachedir' => '',[m
[32m+[m	[32m'char_set' => 'utf8',[m
[32m+[m	[32m'dbcollat' => 'utf8_general_ci',[m
[32m+[m	[32m'swap_pre' => '',[m
[32m+[m	[32m'encrypt' => FALSE,[m
[32m+[m	[32m'compress' => FALSE,[m
[32m+[m	[32m'stricton' => FALSE,[m
[32m+[m	[32m'failover' => array(),[m
[32m+[m	[32m'save_queries' => TRUE[m
[32m+[m[32m);[m
[1mdiff --git a/application/config/doctypes.php b/application/config/doctypes.php[m
[1mnew file mode 100644[m
[1mindex 0000000..59a7991[m
[1m--- /dev/null[m
[1m+++ b/application/config/doctypes.php[m
[36m@@ -0,0 +1,24 @@[m
[32m+[m[32m<?php[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m$_doctypes = array([m
[32m+[m	[32m'xhtml11' => '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">',[m
[32m+[m	[32m'xhtml1-strict' => '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">',[m
[32m+[m	[32m'xhtml1-trans' => '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">',[m
[32m+[m	[32m'xhtml1-frame' => '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">',[m
[32m+[m	[32m'xhtml-basic11' => '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN" "http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd">',[m
[32m+[m	[32m'html5' => '<!DOCTYPE html>',[m
[32m+[m	[32m'html4-strict' => '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">',[m
[32m+[m	[32m'html4-trans' => '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">',[m
[32m+[m	[32m'html4-frame' => '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.org/TR/html4/frameset.dtd">',[m
[32m+[m	[32m'mathml1' => '<!DOCTYPE math SYSTEM "http://www.w3.org/Math/DTD/mathml1/mathml.dtd">',[m
[32m+[m	[32m'mathml2' => '<!DOCTYPE math PUBLIC "-//W3C//DTD MathML 2.0//EN" "http://www.w3.org/Math/DTD/mathml2/mathml2.dtd">',[m
[32m+[m	[32m'svg10' => '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.0//EN" "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">',[m
[32m+[m	[32m'svg11' => '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">',[m
[32m+[m	[32m'svg11-basic' => '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1 Basic//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11-basic.dtd">',[m
[32m+[m	[32m'svg11-tiny' => '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1 Tiny//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11-tiny.dtd">',[m
[32m+[m	[32m'xhtml-math-svg-xh' => '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0 plus SVG 1.1//EN" "http://www.w3.org/2002/04/xhtml-math-svg/xhtml-math-svg.dtd">',[m
[32m+[m	[32m'xhtml-math-svg-sh' => '<!DOCTYPE svg:svg PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0 plus SVG 1.1//EN" "http://www.w3.org/2002/04/xhtml-math-svg/xhtml-math-svg.dtd">',[m
[32m+[m	[32m'xhtml-rdfa-1' => '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML+RDFa 1.0//EN" "http://www.w3.org/MarkUp/DTD/xhtml-rdfa-1.dtd">',[m
[32m+[m	[32m'xhtml-rdfa-2' => '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML+RDFa 1.1//EN" "http://www.w3.org/MarkUp/DTD/xhtml-rdfa-2.dtd">'[m
[32m+[m[32m);[m
[1mdiff --git a/application/config/foreign_chars.php b/application/config/foreign_chars.php[m
[1mnew file mode 100644[m
[1mindex 0000000..995f483[m
[1m--- /dev/null[m
[1m+++ b/application/config/foreign_chars.php[m
[36m@@ -0,0 +1,103 @@[m
[32m+[m[32m<?php[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m| -------------------------------------------------------------------[m
[32m+[m[32m| Foreign Characters[m
[32m+[m[32m| -------------------------------------------------------------------[m
[32m+[m[32m| This file contains an array of foreign characters for transliteration[m
[32m+[m[32m| conversion used by the Text helper[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$foreign_characters = array([m
[32m+[m	[32m'/ä|æ|ǽ/' => 'ae',[m
[32m+[m	[32m'/ö|œ/' => 'oe',[m
[32m+[m	[32m'/ü/' => 'ue',[m
[32m+[m	[32m'/Ä/' => 'Ae',[m
[32m+[m	[32m'/Ü/' => 'Ue',[m
[32m+[m	[32m'/Ö/' => 'Oe',[m
[32m+[m	[32m'/À|Á|Â|Ã|Ä|Å|Ǻ|Ā|Ă|Ą|Ǎ|Α|Ά|Ả|Ạ|Ầ|Ẫ|Ẩ|Ậ|Ằ|Ắ|Ẵ|Ẳ|Ặ|А/' => 'A',[m
[32m+[m	[32m'/à|á|â|ã|å|ǻ|ā|ă|ą|ǎ|ª|α|ά|ả|ạ|ầ|ấ|ẫ|ẩ|ậ|ằ|ắ|ẵ|ẳ|ặ|а/' => 'a',[m
[32m+[m	[32m'/Б/' => 'B',[m
[32m+[m	[32m'/б/' => 'b',[m
[32m+[m	[32m'/Ç|Ć|Ĉ|Ċ|Č/' => 'C',[m
[32m+[m	[32m'/ç|ć|ĉ|ċ|č/' => 'c',[m
[32m+[m	[32m'/Д/' => 'D',[m
[32m+[m	[32m'/д/' => 'd',[m
[32m+[m	[32m'/Ð|Ď|Đ|Δ/' => 'Dj',[m
[32m+[m	[32m'/ð|ď|đ|δ/' => 'dj',[m
[32m+[m	[32m'/È|É|Ê|Ë|Ē|Ĕ|Ė|Ę|Ě|Ε|Έ|Ẽ|Ẻ|Ẹ|Ề|Ế|Ễ|Ể|Ệ|Е|Э/' => 'E',[m
[32m+[m	[32m'/è|é|ê|ë|ē|ĕ|ė|ę|ě|έ|ε|ẽ|ẻ|ẹ|ề|ế|ễ|ể|ệ|е|э/' => 'e',[m
[32m+[m	[32m'/Ф/' => 'F',[m
[32m+[m	[32m'/ф/' => 'f',[m
[32m+[m	[32m'/Ĝ|Ğ|Ġ|Ģ|Γ|Г|Ґ/' => 'G',[m
[32m+[m	[32m'/ĝ|ğ|ġ|ģ|γ|г|ґ/' => 'g',[m
[32m+[m	[32m'/Ĥ|Ħ/' => 'H',[m
[32m+[m	[32m'/ĥ|ħ/' => 'h',[m
[32m+[m	[32m'/Ì|Í|Î|Ï|Ĩ|Ī|Ĭ|Ǐ|Į|İ|Η|Ή|Ί|Ι|Ϊ|Ỉ|Ị|И|Ы/' => 'I',[m
[32m+[m	[32m'/ì|í|î|ï|ĩ|ī|ĭ|ǐ|į|ı|η|ή|ί|ι|ϊ|ỉ|ị|и|ы|ї/' => 'i',[m
[32m+[m	[32m'/Ĵ/' => 'J',[m
[32m+[m	[32m'/ĵ/' => 'j',[m
[32m+[m	[32m'/Ķ|Κ|К/' => 'K',[m
[32m+[m	[32m'/ķ|κ|к/' => 'k',[m
[32m+[m	[32m'/Ĺ|Ļ|Ľ|Ŀ|Ł|Λ|Л/' => 'L',[m
[32m+[m	[32m'/ĺ|ļ|ľ|ŀ|ł|λ|л/' => 'l',[m
[32m+[m	[32m'/М/' => 'M',[m
[32m+[m	[32m'/м/' => 'm',[m
[32m+[m	[32m'/Ñ|Ń|Ņ|Ň|Ν|Н/' => 'N',[m
[32m+[m	[32m'/ñ|ń|ņ|ň|ŉ|ν|н/' => 'n',[m
[32m+[m	[32m'/Ò|Ó|Ô|Õ|Ō|Ŏ|Ǒ|Ő|Ơ|Ø|Ǿ|Ο|Ό|Ω|Ώ|Ỏ|Ọ|Ồ|Ố|Ỗ|Ổ|Ộ|Ờ|Ớ|Ỡ|Ở|Ợ|О/' => 'O',[m
[32m+[m	[32m'/ò|ó|ô|õ|ō|ŏ|ǒ|ő|ơ|ø|ǿ|º|ο|ό|ω|ώ|ỏ|ọ|ồ|ố|ỗ|ổ|ộ|ờ|ớ|ỡ|ở|ợ|о/' => 'o',[m
[32m+[m	[32m'/П/' => 'P',[m
[32m+[m	[32m'/п/' => 'p',[m
[32m+[m	[32m'/Ŕ|Ŗ|Ř|Ρ|Р/' => 'R',[m
[32m+[m	[32m'/ŕ|ŗ|ř|ρ|р/' => 'r',[m
[32m+[m	[32m'/Ś|Ŝ|Ş|Ș|Š|Σ|С/' => 'S',[m
[32m+[m	[32m'/ś|ŝ|ş|ș|š|ſ|σ|ς|с/' => 's',[m
[32m+[m	[32m'/Ț|Ţ|Ť|Ŧ|τ|Т/' => 'T',[m
[32m+[m	[32m'/ț|ţ|ť|ŧ|т/' => 't',[m
[32m+[m	[32m'/Þ|þ/' => 'th',[m
[32m+[m	[32m'/Ù|Ú|Û|Ũ|Ū|Ŭ|Ů|Ű|Ų|Ư|Ǔ|Ǖ|Ǘ|Ǚ|Ǜ|Ũ|Ủ|Ụ|Ừ|Ứ|Ữ|Ử|Ự|У/' => 'U',[m
[32m+[m	[32m'/ù|ú|û|ũ|ū|ŭ|ů|ű|ų|ư|ǔ|ǖ|ǘ|ǚ|ǜ|υ|ύ|ϋ|ủ|ụ|ừ|ứ|ữ|ử|ự|у/' => 'u',[m
[32m+[m	[32m'/Ƴ|Ɏ|Ỵ|Ẏ|Ӳ|Ӯ|Ў|Ý|Ÿ|Ŷ|Υ|Ύ|Ϋ|Ỳ|Ỹ|Ỷ|Ỵ|Й/' => 'Y',[m
[32m+[m	[32m'/ẙ|ʏ|ƴ|ɏ|ỵ|ẏ|ӳ|ӯ|ў|ý|ÿ|ŷ|ỳ|ỹ|ỷ|ỵ|й/' => 'y',[m
[32m+[m	[32m'/В/' => 'V',[m
[32m+[m	[32m'/в/' => 'v',[m
[32m+[m	[32m'/Ŵ/' => 'W',[m
[32m+[m	[32m'/ŵ/' => 'w',[m
[32m+[m	[32m'/Ź|Ż|Ž|Ζ|З/' => 'Z',[m
[32m+[m	[32m'/ź|ż|ž|ζ|з/' => 'z',[m
[32m+[m	[32m'/Æ|Ǽ/' => 'AE',[m
[32m+[m	[32m'/ß/' => 'ss',[m
[32m+[m	[32m'/Ĳ/' => 'IJ',[m
[32m+[m	[32m'/ĳ/' => 'ij',[m
[32m+[m	[32m'/Œ/' => 'OE',[m
[32m+[m	[32m'/ƒ/' => 'f',[m
[32m+[m	[32m'/ξ/' => 'ks',[m
[32m+[m	[32m'/π/' => 'p',[m
[32m+[m	[32m'/β/' => 'v',[m
[32m+[m	[32m'/μ/' => 'm',[m
[32m+[m	[32m'/ψ/' => 'ps',[m
[32m+[m	[32m'/Ё/' => 'Yo',[m
[32m+[m	[32m'/ё/' => 'yo',[m
[32m+[m	[32m'/Є/' => 'Ye',[m
[32m+[m	[32m'/є/' => 'ye',[m
[32m+[m	[32m'/Ї/' => 'Yi',[m
[32m+[m	[32m'/Ж/' => 'Zh',[m
[32m+[m	[32m'/ж/' => 'zh',[m
[32m+[m	[32m'/Х/' => 'Kh',[m
[32m+[m	[32m'/х/' => 'kh',[m
[32m+[m	[32m'/Ц/' => 'Ts',[m
[32m+[m	[32m'/ц/' => 'ts',[m
[32m+[m	[32m'/Ч/' => 'Ch',[m
[32m+[m	[32m'/ч/' => 'ch',[m
[32m+[m	[32m'/Ш/' => 'Sh',[m
[32m+[m	[32m'/ш/' => 'sh',[m
[32m+[m	[32m'/Щ/' => 'Shch',[m
[32m+[m	[32m'/щ/' => 'shch',[m
[32m+[m	[32m'/Ъ|ъ|Ь|ь/' => '',[m
[32m+[m	[32m'/Ю/' => 'Yu',[m
[32m+[m	[32m'/ю/' => 'yu',[m
[32m+[m	[32m'/Я/' => 'Ya',[m
[32m+[m	[32m'/я/' => 'ya'[m
[32m+[m[32m);[m
[1mdiff --git a/application/config/hooks.php b/application/config/hooks.php[m
[1mnew file mode 100644[m
[1mindex 0000000..a8f38a5[m
[1m--- /dev/null[m
[1m+++ b/application/config/hooks.php[m
[36m@@ -0,0 +1,13 @@[m
[32m+[m[32m<?php[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m| -------------------------------------------------------------------------[m
[32m+[m[32m| Hooks[m
[32m+[m[32m| -------------------------------------------------------------------------[m
[32m+[m[32m| This file lets you define "hooks" to extend CI without hacking the core[m
[32m+[m[32m| files.  Please see the user guide for info:[m
[32m+[m[32m|[m
[32m+[m[32m|	https://codeigniter.com/user_guide/general/hooks.html[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[1mdiff --git a/application/config/index.html b/application/config/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/application/config/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/application/config/memcached.php b/application/config/memcached.php[m
[1mnew file mode 100644[m
[1mindex 0000000..5c23b39[m
[1m--- /dev/null[m
[1m+++ b/application/config/memcached.php[m
[36m@@ -0,0 +1,19 @@[m
[32m+[m[32m<?php[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m| -------------------------------------------------------------------------[m
[32m+[m[32m| Memcached settings[m
[32m+[m[32m| -------------------------------------------------------------------------[m
[32m+[m[32m| Your Memcached servers can be specified below.[m
[32m+[m[32m|[m
[32m+[m[32m|	See: https://codeigniter.com/user_guide/libraries/caching.html#memcached[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$config = array([m
[32m+[m	[32m'default' => array([m
[32m+[m		[32m'hostname' => '127.0.0.1',[m
[32m+[m		[32m'port'     => '11211',[m
[32m+[m		[32m'weight'   => '1',[m
[32m+[m	[32m),[m
[32m+[m[32m);[m
[1mdiff --git a/application/config/migration.php b/application/config/migration.php[m
[1mnew file mode 100644[m
[1mindex 0000000..4b585a6[m
[1m--- /dev/null[m
[1m+++ b/application/config/migration.php[m
[36m@@ -0,0 +1,84 @@[m
[32m+[m[32m<?php[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Enable/Disable Migrations[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| Migrations are disabled by default for security reasons.[m
[32m+[m[32m| You should enable migrations whenever you intend to do a schema migration[m
[32m+[m[32m| and disable it back when you're done.[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$config['migration_enabled'] = FALSE;[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Migration Type[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| Migration file names may be based on a sequential identifier or on[m
[32m+[m[32m| a timestamp. Options are:[m
[32m+[m[32m|[m
[32m+[m[32m|   'sequential' = Sequential migration naming (001_add_blog.php)[m
[32m+[m[32m|   'timestamp'  = Timestamp migration naming (20121031104401_add_blog.php)[m
[32m+[m[32m|                  Use timestamp format YYYYMMDDHHIISS.[m
[32m+[m[32m|[m
[32m+[m[32m| Note: If this configuration value is missing the Migration library[m
[32m+[m[32m|       defaults to 'sequential' for backward compatibility with CI2.[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$config['migration_type'] = 'timestamp';[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Migrations table[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| This is the name of the table that will store the current migrations state.[m
[32m+[m[32m| When migrations runs it will store in a database table which migration[m
[32m+[m[32m| level the system is at. It then compares the migration level in this[m
[32m+[m[32m| table to the $config['migration_version'] if they are not the same it[m
[32m+[m[32m| will migrate up. This must be set.[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$config['migration_table'] = 'migrations';[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Auto Migrate To Latest[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| If this is set to TRUE when you load the migrations class and have[m
[32m+[m[32m| $config['migration_enabled'] set to TRUE the system will auto migrate[m
[32m+[m[32m| to your latest migration (whatever $config['migration_version'] is[m
[32m+[m[32m| set to). This way you do not have to call migrations anywhere else[m
[32m+[m[32m| in your code to have the latest migration.[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$config['migration_auto_latest'] = FALSE;[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Migrations version[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| This is used to set migration version that the file system should be on.[m
[32m+[m[32m| If you run $this->migration->current() this is the version that schema will[m
[32m+[m[32m| be upgraded / downgraded to.[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$config['migration_version'] = 0;[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m| Migrations Path[m
[32m+[m[32m|--------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| Path to your migrations folder.[m
[32m+[m[32m| Typically, it will be within your application path.[m
[32m+[m[32m| Also, writing permission is required within the migrations path.[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$config['migration_path'] = APPPATH.'migrations/';[m
[1mdiff --git a/application/config/mimes.php b/application/config/mimes.php[m
[1mnew file mode 100644[m
[1mindex 0000000..0ec9db0[m
[1m--- /dev/null[m
[1m+++ b/application/config/mimes.php[m
[36m@@ -0,0 +1,184 @@[m
[32m+[m[32m<?php[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m| -------------------------------------------------------------------[m
[32m+[m[32m| MIME TYPES[m
[32m+[m[32m| -------------------------------------------------------------------[m
[32m+[m[32m| This file contains an array of mime types.  It is used by the[m
[32m+[m[32m| Upload class to help identify allowed file types.[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32mreturn array([m
[32m+[m	[32m'hqx'	=>	array('application/mac-binhex40', 'application/mac-binhex', 'application/x-binhex40', 'application/x-mac-binhex40'),[m
[32m+[m	[32m'cpt'	=>	'application/mac-compactpro',[m
[32m+[m	[32m'csv'	=>	array('text/x-comma-separated-values', 'text/comma-separated-values', 'application/octet-stream', 'application/vnd.ms-excel', 'application/x-csv', 'text/x-csv', 'text/csv', 'application/csv', 'application/excel', 'application/vnd.msexcel', 'text/plain'),[m
[32m+[m	[32m'bin'	=>	array('application/macbinary', 'application/mac-binary', 'application/octet-stream', 'application/x-binary', 'application/x-macbinary'),[m
[32m+[m	[32m'dms'	=>	'application/octet-stream',[m
[32m+[m	[32m'lha'	=>	'application/octet-stream',[m
[32m+[m	[32m'lzh'	=>	'application/octet-stream',[m
[32m+[m	[32m'exe'	=>	array('application/octet-stream', 'application/x-msdownload'),[m
[32m+[m	[32m'class'	=>	'application/octet-stream',[m
[32m+[m	[32m'psd'	=>	array('application/x-photoshop', 'image/vnd.adobe.photoshop'),[m
[32m+[m	[32m'so'	=>	'application/octet-stream',[m
[32m+[m	[32m'sea'	=>	'application/octet-stream',[m
[32m+[m	[32m'dll'	=>	'application/octet-stream',[m
[32m+[m	[32m'oda'	=>	'application/oda',[m
[32m+[m	[32m'pdf'	=>	array('application/pdf', 'application/force-download', 'application/x-download', 'binary/octet-stream'),[m
[32m+[m	[32m'ai'	=>	array('application/pdf', 'application/postscript'),[m
[32m+[m	[32m'eps'	=>	'application/postscript',[m
[32m+[m	[32m'ps'	=>	'application/postscript',[m
[32m+[m	[32m'smi'	=>	'application/smil',[m
[32m+[m	[32m'smil'	=>	'application/smil',[m
[32m+[m	[32m'mif'	=>	'application/vnd.mif',[m
[32m+[m	[32m'xls'	=>	array('application/vnd.ms-excel', 'application/msexcel', 'application/x-msexcel', 'application/x-ms-excel', 'application/x-excel', 'application/x-dos_ms_excel', 'application/xls', 'application/x-xls', 'application/excel', 'application/download', 'application/vnd.ms-office', 'application/msword'),[m
[32m+[m	[32m'ppt'	=>	array('application/powerpoint', 'application/vnd.ms-powerpoint', 'application/vnd.ms-office', 'application/msword'),[m
[32m+[m	[32m'pptx'	=> 	array('application/vnd.openxmlformats-officedocument.presentationml.presentation', 'application/x-zip', 'application/zip'),[m
[32m+[m	[32m'wbxml'	=>	'application/wbxml',[m
[32m+[m	[32m'wmlc'	=>	'application/wmlc',[m
[32m+[m	[32m'dcr'	=>	'application/x-director',[m
[32m+[m	[32m'dir'	=>	'application/x-director',[m
[32m+[m	[32m'dxr'	=>	'application/x-director',[m
[32m+[m	[32m'dvi'	=>	'application/x-dvi',[m
[32m+[m	[32m'gtar'	=>	'application/x-gtar',[m
[32m+[m	[32m'gz'	=>	'application/x-gzip',[m
[32m+[m	[32m'gzip'  =>	'application/x-gzip',[m
[32m+[m	[32m'php'	=>	array('application/x-httpd-php', 'application/php', 'application/x-php', 'text/php', 'text/x-php', 'application/x-httpd-php-source'),[m
[32m+[m	[32m'php4'	=>	'application/x-httpd-php',[m
[32m+[m	[32m'php3'	=>	'application/x-httpd-php',[m
[32m+[m	[32m'phtml'	=>	'application/x-httpd-php',[m
[32m+[m	[32m'phps'	=>	'application/x-httpd-php-source',[m
[32m+[m	[32m'js'	=>	array('application/x-javascript', 'text/plain'),[m
[32m+[m	[32m'swf'	=>	'application/x-shockwave-flash',[m
[32m+[m	[32m'sit'	=>	'application/x-stuffit',[m
[32m+[m	[32m'tar'	=>	'application/x-tar',[m
[32m+[m	[32m'tgz'	=>	array('application/x-tar', 'application/x-gzip-compressed'),[m
[32m+[m	[32m'z'	=>	'application/x-compress',[m
[32m+[m	[32m'xhtml'	=>	'application/xhtml+xml',[m
[32m+[m	[32m'xht'	=>	'application/xhtml+xml',[m
[32m+[m	[32m'zip'	=>	array('application/x-zip', 'application/zip', 'application/x-zip-compressed', 'application/s-compressed', 'multipart/x-zip'),[m
[32m+[m	[32m'rar'	=>	array('application/x-rar', 'application/rar', 'application/x-rar-compressed'),[m
[32m+[m	[32m'mid'	=>	'audio/midi',[m
[32m+[m	[32m'midi'	=>	'audio/midi',[m
[32m+[m	[32m'mpga'	=>	'audio/mpeg',[m
[32m+[m	[32m'mp2'	=>	'audio/mpeg',[m
[32m+[m	[32m'mp3'	=>	array('audio/mpeg', 'audio/mpg', 'audio/mpeg3', 'audio/mp3'),[m
[32m+[m	[32m'aif'	=>	array('audio/x-aiff', 'audio/aiff'),[m
[32m+[m	[32m'aiff'	=>	array('audio/x-aiff', 'audio/aiff'),[m
[32m+[m	[32m'aifc'	=>	'audio/x-aiff',[m
[32m+[m	[32m'ram'	=>	'audio/x-pn-realaudio',[m
[32m+[m	[32m'rm'	=>	'audio/x-pn-realaudio',[m
[32m+[m	[32m'rpm'	=>	'audio/x-pn-realaudio-plugin',[m
[32m+[m	[32m'ra'	=>	'audio/x-realaudio',[m
[32m+[m	[32m'rv'	=>	'video/vnd.rn-realvideo',[m
[32m+[m	[32m'wav'	=>	array('audio/x-wav', 'audio/wave', 'audio/wav'),[m
[32m+[m	[32m'bmp'	=>	array('image/bmp', 'image/x-bmp', 'image/x-bitmap', 'image/x-xbitmap', 'image/x-win-bitmap', 'image/x-windows-bmp', 'image/ms-bmp', 'image/x-ms-bmp', 'application/bmp', 'application/x-bmp', 'application/x-win-bitmap'),[m
[32m+[m	[32m'gif'	=>	'image/gif',[m
[32m+[m	[32m'jpeg'	=>	array('image/jpeg', 'image/pjpeg'),[m
[32m+[m	[32m'jpg'	=>	array('image/jpeg', 'image/pjpeg'),[m
[32m+[m	[32m'jpe'	=>	array('image/jpeg', 'image/pjpeg'),[m
[32m+[m	[32m'jp2'	=>	array('image/jp2', 'video/mj2', 'image/jpx', 'image/jpm'),[m
[32m+[m	[32m'j2k'	=>	array('image/jp2', 'video/mj2', 'image/jpx', 'image/jpm'),[m
[32m+[m	[32m'jpf'	=>	array('image/jp2', 'video/mj2', 'image/jpx', 'image/jpm'),[m
[32m+[m	[32m'jpg2'	=>	array('image/jp2', 'video/mj2', 'image/jpx', 'image/jpm'),[m
[32m+[m	[32m'jpx'	=>	array('image/jp2', 'video/mj2', 'image/jpx', 'image/jpm'),[m
[32m+[m	[32m'jpm'	=>	array('image/jp2', 'video/mj2', 'image/jpx', 'image/jpm'),[m
[32m+[m	[32m'mj2'	=>	array('image/jp2', 'video/mj2', 'image/jpx', 'image/jpm'),[m
[32m+[m	[32m'mjp2'	=>	array('image/jp2', 'video/mj2', 'image/jpx', 'image/jpm'),[m
[32m+[m	[32m'png'	=>	array('image/png',  'image/x-png'),[m
[32m+[m	[32m'tiff'	=>	'image/tiff',[m
[32m+[m	[32m'tif'	=>	'image/tiff',[m
[32m+[m	[32m'css'	=>	array('text/css', 'text/plain'),[m
[32m+[m	[32m'html'	=>	array('text/html', 'text/plain'),[m
[32m+[m	[32m'htm'	=>	array('text/html', 'text/plain'),[m
[32m+[m	[32m'shtml'	=>	array('text/html', 'text/plain'),[m
[32m+[m	[32m'txt'	=>	'text/plain',[m
[32m+[m	[32m'text'	=>	'text/plain',[m
[32m+[m	[32m'log'	=>	array('text/plain', 'text/x-log'),[m
[32m+[m	[32m'rtx'	=>	'text/richtext',[m
[32m+[m	[32m'rtf'	=>	'text/rtf',[m
[32m+[m	[32m'xml'	=>	array('application/xml', 'text/xml', 'text/plain'),[m
[32m+[m	[32m'xsl'	=>	array('application/xml', 'text/xsl', 'text/xml'),[m
[32m+[m	[32m'mpeg'	=>	'video/mpeg',[m
[32m+[m	[32m'mpg'	=>	'video/mpeg',[m
[32m+[m	[32m'mpe'	=>	'video/mpeg',[m
[32m+[m	[32m'qt'	=>	'video/quicktime',[m
[32m+[m	[32m'mov'	=>	'video/quicktime',[m
[32m+[m	[32m'avi'	=>	array('video/x-msvideo', 'video/msvideo', 'video/avi', 'application/x-troff-msvideo'),[m
[32m+[m	[32m'movie'	=>	'video/x-sgi-movie',[m
[32m+[m	[32m'doc'	=>	array('application/msword', 'application/vnd.ms-office'),[m
[32m+[m	[32m'docx'	=>	array('application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/zip', 'application/msword', 'application/x-zip'),[m
[32m+[m	[32m'dot'	=>	array('application/msword', 'application/vnd.ms-office'),[m
[32m+[m	[32m'dotx'	=>	array('application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/zip', 'application/msword'),[m
[32m+[m	[32m'xlsx'	=>	array('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/zip', 'application/vnd.ms-excel', 'application/msword', 'application/x-zip'),[m
[32m+[m	[32m'word'	=>	array('application/msword', 'application/octet-stream'),[m
[32m+[m	[32m'xl'	=>	'application/excel',[m
[32m+[m	[32m'eml'	=>	'message/rfc822',[m
[32m+[m	[32m'json'  =>	array('application/json', 'text/json'),[m
[32m+[m	[32m'pem'   =>	array('application/x-x509-user-cert', 'application/x-pem-file', 'application/octet-stream'),[m
[32m+[m	[32m'p10'   =>	array('application/x-pkcs10', 'application/pkcs10'),[m
[32m+[m	[32m'p12'   =>	'application/x-pkcs12',[m
[32m+[m	[32m'p7a'   =>	'application/x-pkcs7-signature',[m
[32m+[m	[32m'p7c'   =>	array('application/pkcs7-mime', 'application/x-pkcs7-mime'),[m
[32m+[m	[32m'p7m'   =>	array('application/pkcs7-mime', 'application/x-pkcs7-mime'),[m
[32m+[m	[32m'p7r'   =>	'application/x-pkcs7-certreqresp',[m
[32m+[m	[32m'p7s'   =>	'application/pkcs7-signature',[m
[32m+[m	[32m'crt'   =>	array('application/x-x509-ca-cert', 'application/x-x509-user-cert', 'application/pkix-cert'),[m
[32m+[m	[32m'crl'   =>	array('application/pkix-crl', 'application/pkcs-crl'),[m
[32m+[m	[32m'der'   =>	'application/x-x509-ca-cert',[m
[32m+[m	[32m'kdb'   =>	'application/octet-stream',[m
[32m+[m	[32m'pgp'   =>	'application/pgp',[m
[32m+[m	[32m'gpg'   =>	'application/gpg-keys',[m
[32m+[m	[32m'sst'   =>	'application/octet-stream',[m
[32m+[m	[32m'csr'   =>	'application/octet-stream',[m
[32m+[m	[32m'rsa'   =>	'application/x-pkcs7',[m
[32m+[m	[32m'cer'   =>	array('application/pkix-cert', 'application/x-x509-ca-cert'),[m
[32m+[m	[32m'3g2'   =>	'video/3gpp2',[m
[32m+[m	[32m'3gp'   =>	array('video/3gp', 'video/3gpp'),[m
[32m+[m	[32m'mp4'   =>	'video/mp4',[m
[32m+[m	[32m'm4a'   =>	'audio/x-m4a',[m
[32m+[m	[32m'f4v'   =>	array('video/mp4', 'video/x-f4v'),[m
[32m+[m	[32m'flv'	=>	'video/x-flv',[m
[32m+[m	[32m'webm'	=>	'video/webm',[m
[32m+[m	[32m'aac'   =>	'audio/x-acc',[m
[32m+[m	[32m'm4u'   =>	'application/vnd.mpegurl',[m
[32m+[m	[32m'm3u'   =>	'text/plain',[m
[32m+[m	[32m'xspf'  =>	'application/xspf+xml',[m
[32m+[m	[32m'vlc'   =>	'application/videolan',[m
[32m+[m	[32m'wmv'   =>	array('video/x-ms-wmv', 'video/x-ms-asf'),[m
[32m+[m	[32m'au'    =>	'audio/x-au',[m
[32m+[m	[32m'ac3'   =>	'audio/ac3',[m
[32m+[m	[32m'flac'  =>	'audio/x-flac',[m
[32m+[m	[32m'ogg'   =>	array('audio/ogg', 'video/ogg', 'application/ogg'),[m
[32m+[m	[32m'kmz'	=>	array('application/vnd.google-earth.kmz', 'application/zip', 'application/x-zip'),[m
[32m+[m	[32m'kml'	=>	array('application/vnd.google-earth.kml+xml', 'application/xml', 'text/xml'),[m
[32m+[m	[32m'ics'	=>	'text/calendar',[m
[32m+[m	[32m'ical'	=>	'text/calendar',[m
[32m+[m	[32m'zsh'	=>	'text/x-scriptzsh',[m
[32m+[m	[32m'7z'	=>	array('application/x-7z-compressed', 'application/x-compressed', 'application/x-zip-compressed', 'application/zip', 'multipart/x-zip'),[m
[32m+[m	[32m'7zip'	=>	array('application/x-7z-compressed', 'application/x-compressed', 'application/x-zip-compressed', 'application/zip', 'multipart/x-zip'),[m
[32m+[m	[32m'cdr'	=>	array('application/cdr', 'application/coreldraw', 'application/x-cdr', 'application/x-coreldraw', 'image/cdr', 'image/x-cdr', 'zz-application/zz-winassoc-cdr'),[m
[32m+[m	[32m'wma'	=>	array('audio/x-ms-wma', 'video/x-ms-asf'),[m
[32m+[m	[32m'jar'	=>	array('application/java-archive', 'application/x-java-application', 'application/x-jar', 'application/x-compressed'),[m
[32m+[m	[32m'svg'	=>	array('image/svg+xml', 'application/xml', 'text/xml'),[m
[32m+[m	[32m'vcf'	=>	'text/x-vcard',[m
[32m+[m	[32m'srt'	=>	array('text/srt', 'text/plain'),[m
[32m+[m	[32m'vtt'	=>	array('text/vtt', 'text/plain'),[m
[32m+[m	[32m'ico'	=>	array('image/x-icon', 'image/x-ico', 'image/vnd.microsoft.icon'),[m
[32m+[m	[32m'odc'	=>	'application/vnd.oasis.opendocument.chart',[m
[32m+[m	[32m'otc'	=>	'application/vnd.oasis.opendocument.chart-template',[m
[32m+[m	[32m'odf'	=>	'application/vnd.oasis.opendocument.formula',[m
[32m+[m	[32m'otf'	=>	'application/vnd.oasis.opendocument.formula-template',[m
[32m+[m	[32m'odg'	=>	'application/vnd.oasis.opendocument.graphics',[m
[32m+[m	[32m'otg'	=>	'application/vnd.oasis.opendocument.graphics-template',[m
[32m+[m	[32m'odi'	=>	'application/vnd.oasis.opendocument.image',[m
[32m+[m	[32m'oti'	=>	'application/vnd.oasis.opendocument.image-template',[m
[32m+[m	[32m'odp'	=>	'application/vnd.oasis.opendocument.presentation',[m
[32m+[m	[32m'otp'	=>	'application/vnd.oasis.opendocument.presentation-template',[m
[32m+[m	[32m'ods'	=>	'application/vnd.oasis.opendocument.spreadsheet',[m
[32m+[m	[32m'ots'	=>	'application/vnd.oasis.opendocument.spreadsheet-template',[m
[32m+[m	[32m'odt'	=>	'application/vnd.oasis.opendocument.text',[m
[32m+[m	[32m'odm'	=>	'application/vnd.oasis.opendocument.text-master',[m
[32m+[m	[32m'ott'	=>	'application/vnd.oasis.opendocument.text-template',[m
[32m+[m	[32m'oth'	=>	'application/vnd.oasis.opendocument.text-web'[m
[32m+[m[32m);[m
[1mdiff --git a/application/config/profiler.php b/application/config/profiler.php[m
[1mnew file mode 100644[m
[1mindex 0000000..3db22e3[m
[1m--- /dev/null[m
[1m+++ b/application/config/profiler.php[m
[36m@@ -0,0 +1,14 @@[m
[32m+[m[32m<?php[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m| -------------------------------------------------------------------------[m
[32m+[m[32m| Profiler Sections[m
[32m+[m[32m| -------------------------------------------------------------------------[m
[32m+[m[32m| This file lets you determine whether or not various sections of Profiler[m
[32m+[m[32m| data are displayed when the Profiler is enabled.[m
[32m+[m[32m| Please see the user guide for info:[m
[32m+[m[32m|[m
[32m+[m[32m|	https://codeigniter.com/user_guide/general/profiling.html[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[1mdiff --git a/application/config/routes.php b/application/config/routes.php[m
[1mnew file mode 100644[m
[1mindex 0000000..1b45740[m
[1m--- /dev/null[m
[1m+++ b/application/config/routes.php[m
[36m@@ -0,0 +1,54 @@[m
[32m+[m[32m<?php[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m| -------------------------------------------------------------------------[m
[32m+[m[32m| URI ROUTING[m
[32m+[m[32m| -------------------------------------------------------------------------[m
[32m+[m[32m| This file lets you re-map URI requests to specific controller functions.[m
[32m+[m[32m|[m
[32m+[m[32m| Typically there is a one-to-one relationship between a URL string[m
[32m+[m[32m| and its corresponding controller class/method. The segments in a[m
[32m+[m[32m| URL normally follow this pattern:[m
[32m+[m[32m|[m
[32m+[m[32m|	example.com/class/method/id/[m
[32m+[m[32m|[m
[32m+[m[32m| In some instances, however, you may want to remap this relationship[m
[32m+[m[32m| so that a different class/function is called than the one[m
[32m+[m[32m| corresponding to the URL.[m
[32m+[m[32m|[m
[32m+[m[32m| Please see the user guide for complete details:[m
[32m+[m[32m|[m
[32m+[m[32m|	https://codeigniter.com/user_guide/general/routing.html[m
[32m+[m[32m|[m
[32m+[m[32m| -------------------------------------------------------------------------[m
[32m+[m[32m| RESERVED ROUTES[m
[32m+[m[32m| -------------------------------------------------------------------------[m
[32m+[m[32m|[m
[32m+[m[32m| There are three reserved routes:[m
[32m+[m[32m|[m
[32m+[m[32m|	$route['default_controller'] = 'welcome';[m
[32m+[m[32m|[m
[32m+[m[32m| This route indicates which controller class should be loaded if the[m
[32m+[m[32m| URI contains no data. In the above example, the "welcome" class[m
[32m+[m[32m| would be loaded.[m
[32m+[m[32m|[m
[32m+[m[32m|	$route['404_override'] = 'errors/page_missing';[m
[32m+[m[32m|[m
[32m+[m[32m| This route will tell the Router which controller/method to use if those[m
[32m+[m[32m| provided in the URL cannot be matched to a valid route.[m
[32m+[m[32m|[m
[32m+[m[32m|	$route['translate_uri_dashes'] = FALSE;[m
[32m+[m[32m|[m
[32m+[m[32m| This is not exactly a route, but allows you to automatically route[m
[32m+[m[32m| controller and method names that contain dashes. '-' isn't a valid[m
[32m+[m[32m| class or method name character, so it requires translation.[m
[32m+[m[32m| When you set this option to TRUE, it will replace ALL dashes in the[m
[32m+[m[32m| controller and method URI segments.[m
[32m+[m[32m|[m
[32m+[m[32m| Examples:	my-controller/index	-> my_controller/index[m
[32m+[m[32m|		my-controller/my-method	-> my_controller/my_method[m
[32m+[m[32m*/[m
[32m+[m[32m$route['default_controller'] = 'welcome';[m
[32m+[m[32m$route['404_override'] = '';[m
[32m+[m[32m$route['translate_uri_dashes'] = FALSE;[m
[1mdiff --git a/application/config/smileys.php b/application/config/smileys.php[m
[1mnew file mode 100644[m
[1mindex 0000000..abf9a89[m
[1m--- /dev/null[m
[1m+++ b/application/config/smileys.php[m
[36m@@ -0,0 +1,64 @@[m
[32m+[m[32m<?php[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m| -------------------------------------------------------------------[m
[32m+[m[32m| SMILEYS[m
[32m+[m[32m| -------------------------------------------------------------------[m
[32m+[m[32m| This file contains an array of smileys for use with the emoticon helper.[m
[32m+[m[32m| Individual images can be used to replace multiple smileys.  For example:[m
[32m+[m[32m| :-) and :) use the same image replacement.[m
[32m+[m[32m|[m
[32m+[m[32m| Please see user guide for more info:[m
[32m+[m[32m| https://codeigniter.com/user_guide/helpers/smiley_helper.html[m
[32m+[m[32m|[m
[32m+[m[32m*/[m
[32m+[m[32m$smileys = array([m
[32m+[m
[32m+[m[32m//	smiley			image name						width	height	alt[m
[32m+[m
[32m+[m	[32m':-)'			=>	array('grin.gif',			'19',	'19',	'grin'),[m
[32m+[m	[32m':lol:'			=>	array('lol.gif',			'19',	'19',	'LOL'),[m
[32m+[m	[32m':cheese:'		=>	array('cheese.gif',			'19',	'19',	'cheese'),[m
[32m+[m	[32m':)'			=>	array('smile.gif',			'19',	'19',	'smile'),[m
[32m+[m	[32m';-)'			=>	array('wink.gif',			'19',	'19',	'wink'),[m
[32m+[m	[32m';)'			=>	array('wink.gif',			'19',	'19',	'wink'),[m
[32m+[m	[32m':smirk:'		=>	array('smirk.gif',			'19',	'19',	'smirk'),[m
[32m+[m	[32m':roll:'		=>	array('rolleyes.gif',		'19',	'19',	'rolleyes'),[m
[32m+[m	[32m':-S'			=>	array('confused.gif',		'19',	'19',	'confused'),[m
[32m+[m	[32m':wow:'			=>	array('surprise.gif',		'19',	'19',	'surprised'),[m
[32m+[m	[32m':bug:'			=>	array('bigsurprise.gif',	'19',	'19',	'big surprise'),[m
[32m+[m	[32m':-P'			=>	array('tongue_laugh.gif',	'19',	'19',	'tongue laugh'),[m
[32m+[m	[32m'%-P'			=>	array('tongue_rolleye.gif',	'19',	'19',	'tongue rolleye'),[m
[32m+[m	[32m';-P'			=>	array('tongue_wink.gif',	'19',	'19',	'tongue wink'),[m
[32m+[m	[32m':P'			=>	array('raspberry.gif',		'19',	'19',	'raspberry'),[m
[32m+[m	[32m':blank:'		=>	array('blank.gif',			'19',	'19',	'blank stare'),[m
[32m+[m	[32m':long:'		=>	array('longface.gif',		'19',	'19',	'long face'),[m
[32m+[m	[32m':ohh:'			=>	array('ohh.gif',			'19',	'19',	'ohh'),[m
[32m+[m	[32m':grrr:'		=>	array('grrr.gif',			'19',	'19',	'grrr'),[m
[32m+[m	[32m':gulp:'		=>	array('gulp.gif',			'19',	'19',	'gulp'),[m
[32m+[m	[32m'8-/'			=>	array('ohoh.gif',			'19',	'19',	'oh oh'),[m
[32m+[m	[32m':down:'		=>	array('downer.gif',			'19',	'19',	'downer'),[m
[32m+[m	[32m':red:'			=>	array('embarrassed.gif',	'19',	'19',	'red face'),[m
[32m+[m	[32m':sick:'		=>	array('sick.gif',			'19',	'19',	'sick'),[m
[32m+[m	[32m':shut:'		=>	array('shuteye.gif',		'19',	'19',	'shut eye'),[m
[32m+[m	[32m':-/'			=>	array('hmm.gif',			'19',	'19',	'hmmm'),[m
[32m+[m	[32m'>:('			=>	array('mad.gif',			'19',	'19',	'mad'),[m
[32m+[m	[32m':mad:'			=>	array('mad.gif',			'19',	'19',	'mad'),[m
[32m+[m	[32m'>:-('			=>	array('angry.gif',			'19',	'19',	'angry'),[m
[32m+[m	[32m':angry:'		=>	array('angry.gif',			'19',	'19',	'angry'),[m
[32m+[m	[32m':zip:'			=>	array('zip.gif',			'19',	'19',	'zipper'),[m
[32m+[m	[32m':kiss:'		=>	array('kiss.gif',			'19',	'19',	'kiss'),[m
[32m+[m	[32m':ahhh:'		=>	array('shock.gif',			'19',	'19',	'shock'),[m
[32m+[m	[32m':coolsmile:'	=>	array('shade_smile.gif',	'19',	'19',	'cool smile'),[m
[32m+[m	[32m':coolsmirk:'	=>	array('shade_smirk.gif',	'19',	'19',	'cool smirk'),[m
[32m+[m	[32m':coolgrin:'	=>	array('shade_grin.gif',		'19',	'19',	'cool grin'),[m
[32m+[m	[32m':coolhmm:'		=>	array('shade_hmm.gif',		'19',	'19',	'cool hmm'),[m
[32m+[m	[32m':coolmad:'		=>	array('shade_mad.gif',		'19',	'19',	'cool mad'),[m
[32m+[m	[32m':coolcheese:'	=>	array('shade_cheese.gif',	'19',	'19',	'cool cheese'),[m
[32m+[m	[32m':vampire:'		=>	array('vampire.gif',		'19',	'19',	'vampire'),[m
[32m+[m	[32m':snake:'		=>	array('snake.gif',			'19',	'19',	'snake'),[m
[32m+[m	[32m':exclaim:'		=>	array('exclaim.gif',		'19',	'19',	'exclaim'),[m
[32m+[m	[32m':question:'	=>	array('question.gif',		'19',	'19',	'question')[m
[32m+[m
[32m+[m[32m);[m
[1mdiff --git a/application/config/user_agents.php b/application/config/user_agents.php[m
[1mnew file mode 100644[m
[1mindex 0000000..b6c8563[m
[1m--- /dev/null[m
[1m+++ b/application/config/user_agents.php[m
[36m@@ -0,0 +1,214 @@[m
[32m+[m[32m<?php[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m| -------------------------------------------------------------------[m
[32m+[m[32m| USER AGENT TYPES[m
[32m+[m[32m| -------------------------------------------------------------------[m
[32m+[m[32m| This file contains four arrays of user agent data. It is used by the[m
[32m+[m[32m| User Agent Class to help identify browser, platform, robot, and[m
[32m+[m[32m| mobile device data. The array keys are used to identify the device[m
[32m+[m[32m| and the array values are used to set the actual name of the item.[m
[32m+[m[32m*/[m
[32m+[m[32m$platforms = array([m
[32m+[m	[32m'windows nt 10.0'	=> 'Windows 10',[m
[32m+[m	[32m'windows nt 6.3'	=> 'Windows 8.1',[m
[32m+[m	[32m'windows nt 6.2'	=> 'Windows 8',[m
[32m+[m	[32m'windows nt 6.1'	=> 'Windows 7',[m
[32m+[m	[32m'windows nt 6.0'	=> 'Windows Vista',[m
[32m+[m	[32m'windows nt 5.2'	=> 'Windows 2003',[m
[32m+[m	[32m'windows nt 5.1'	=> 'Windows XP',[m
[32m+[m	[32m'windows nt 5.0'	=> 'Windows 2000',[m
[32m+[m	[32m'windows nt 4.0'	=> 'Windows NT 4.0',[m
[32m+[m	[32m'winnt4.0'			=> 'Windows NT 4.0',[m
[32m+[m	[32m'winnt 4.0'			=> 'Windows NT',[m
[32m+[m	[32m'winnt'				=> 'Windows NT',[m
[32m+[m	[32m'windows 98'		=> 'Windows 98',[m
[32m+[m	[32m'win98'				=> 'Windows 98',[m
[32m+[m	[32m'windows 95'		=> 'Windows 95',[m
[32m+[m	[32m'win95'				=> 'Windows 95',[m
[32m+[m	[32m'windows phone'			=> 'Windows Phone',[m
[32m+[m	[32m'windows'			=> 'Unknown Windows OS',[m
[32m+[m	[32m'android'			=> 'Android',[m
[32m+[m	[32m'blackberry'		=> 'BlackBerry',[m
[32m+[m	[32m'iphone'			=> 'iOS',[m
[32m+[m	[32m'ipad'				=> 'iOS',[m
[32m+[m	[32m'ipod'				=> 'iOS',[m
[32m+[m	[32m'os x'				=> 'Mac OS X',[m
[32m+[m	[32m'ppc mac'			=> 'Power PC Mac',[m
[32m+[m	[32m'freebsd'			=> 'FreeBSD',[m
[32m+[m	[32m'ppc'				=> 'Macintosh',[m
[32m+[m	[32m'linux'				=> 'Linux',[m
[32m+[m	[32m'debian'			=> 'Debian',[m
[32m+[m	[32m'sunos'				=> 'Sun Solaris',[m
[32m+[m	[32m'beos'				=> 'BeOS',[m
[32m+[m	[32m'apachebench'		=> 'ApacheBench',[m
[32m+[m	[32m'aix'				=> 'AIX',[m
[32m+[m	[32m'irix'				=> 'Irix',[m
[32m+[m	[32m'osf'				=> 'DEC OSF',[m
[32m+[m	[32m'hp-ux'				=> 'HP-UX',[m
[32m+[m	[32m'netbsd'			=> 'NetBSD',[m
[32m+[m	[32m'bsdi'				=> 'BSDi',[m
[32m+[m	[32m'openbsd'			=> 'OpenBSD',[m
[32m+[m	[32m'gnu'				=> 'GNU/Linux',[m
[32m+[m	[32m'unix'				=> 'Unknown Unix OS',[m
[32m+[m	[32m'symbian' 			=> 'Symbian OS'[m
[32m+[m[32m);[m
[32m+[m
[32m+[m
[32m+[m[32m// The order of this array should NOT be changed. Many browsers return[m
[32m+[m[32m// multiple browser types so we want to identify the sub-type first.[m
[32m+[m[32m$browsers = array([m
[32m+[m	[32m'OPR'			=> 'Opera',[m
[32m+[m	[32m'Flock'			=> 'Flock',[m
[32m+[m	[32m'Edge'			=> 'Edge',[m
[32m+[m	[32m'Chrome'		=> 'Chrome',[m
[32m+[m	[32m// Opera 10+ always reports Opera/9.80 and appends Version/<real version> to the user agent string[m
[32m+[m	[32m'Opera.*?Version'	=> 'Opera',[m
[32m+[m	[32m'Opera'			=> 'Opera',[m
[32m+[m	[32m'MSIE'			=> 'Internet Explorer',[m
[32m+[m	[32m'Internet Explorer'	=> 'Internet Explorer',[m
[32m+[m	[32m'Trident.* rv'	=> 'Internet Explorer',[m
[32m+[m	[32m'Shiira'		=> 'Shiira',[m
[32m+[m	[32m'Firefox'		=> 'Firefox',[m
[32m+[m	[32m'Chimera'		=> 'Chimera',[m
[32m+[m	[32m'Phoenix'		=> 'Phoenix',[m
[32m+[m	[32m'Firebird'		=> 'Firebird',[m
[32m+[m	[32m'Camino'		=> 'Camino',[m
[32m+[m	[32m'Netscape'		=> 'Netscape',[m
[32m+[m	[32m'OmniWeb'		=> 'OmniWeb',[m
[32m+[m	[32m'Safari'		=> 'Safari',[m
[32m+[m	[32m'Mozilla'		=> 'Mozilla',[m
[32m+[m	[32m'Konqueror'		=> 'Konqueror',[m
[32m+[m	[32m'icab'			=> 'iCab',[m
[32m+[m	[32m'Lynx'			=> 'Lynx',[m
[32m+[m	[32m'Links'			=> 'Links',[m
[32m+[m	[32m'hotjava'		=> 'HotJava',[m
[32m+[m	[32m'amaya'			=> 'Amaya',[m
[32m+[m	[32m'IBrowse'		=> 'IBrowse',[m
[32m+[m	[32m'Maxthon'		=> 'Maxthon',[m
[32m+[m	[32m'Ubuntu'		=> 'Ubuntu Web Browser'[m
[32m+[m[32m);[m
[32m+[m
[32m+[m[32m$mobiles = array([m
[32m+[m	[32m// legacy array, old values commented out[m
[32m+[m	[32m'mobileexplorer'	=> 'Mobile Explorer',[m
[32m+[m[32m//  'openwave'			=> 'Open Wave',[m
[32m+[m[32m//	'opera mini'		=> 'Opera Mini',[m
[32m+[m[32m//	'operamini'			=> 'Opera Mini',[m
[32m+[m[32m//	'elaine'			=> 'Palm',[m
[32m+[m	[32m'palmsource'		=> 'Palm',[m
[32m+[m[32m//	'digital paths'		=> 'Palm',[m
[32m+[m[32m//	'avantgo'			=> 'Avantgo',[m
[32m+[m[32m//	'xiino'				=> 'Xiino',[m
[32m+[m	[32m'palmscape'			=> 'Palmscape',[m
[32m+[m[32m//	'nokia'				=> 'Nokia',[m
[32m+[m[32m//	'ericsson'			=> 'Ericsson',[m
[32m+[m[32m//	'blackberry'		=> 'BlackBerry',[m
[32m+[m[32m//	'motorola'			=> 'Motorola'[m
[32m+[m
[32m+[m	[32m// Phones and Manufacturers[m
[32m+[m	[32m'motorola'		=> 'Motorola',[m
[32m+[m	[32m'nokia'			=> 'Nokia',[m
[32m+[m	[32m'palm'			=> 'Palm',[m
[32m+[m	[32m'iphone'		=> 'Apple iPhone',[m
[32m+[m	[32m'ipad'			=> 'iPad',[m
[32m+[m	[32m'ipod'			=> 'Apple iPod Touch',[m
[32m+[m	[32m'sony'			=> 'Sony Ericsson',[m
[32m+[m	[32m'ericsson'		=> 'Sony Ericsson',[m
[32m+[m	[32m'blackberry'	=> 'BlackBerry',[m
[32m+[m	[32m'cocoon'		=> 'O2 Cocoon',[m
[32m+[m	[32m'blazer'		=> 'Treo',[m
[32m+[m	[32m'lg'			=> 'LG',[m
[32m+[m	[32m'amoi'			=> 'Amoi',[m
[32m+[m	[32m'xda'			=> 'XDA',[m
[32m+[m	[32m'mda'			=> 'MDA',[m
[32m+[m	[32m'vario'			=> 'Vario',[m
[32m+[m	[32m'htc'			=> 'HTC',[m
[32m+[m	[32m'samsung'		=> 'Samsung',[m
[32m+[m	[32m'sharp'			=> 'Sharp',[m
[32m+[m	[32m'sie-'			=> 'Siemens',[m
[32m+[m	[32m'alcatel'		=> 'Alcatel',[m
[32m+[m	[32m'benq'			=> 'BenQ',[m
[32m+[m	[32m'ipaq'			=> 'HP iPaq',[m
[32m+[m	[32m'mot-'			=> 'Motorola',[m
[32m+[m	[32m'playstation portable'	=> 'PlayStation Portable',[m
[32m+[m	[32m'playstation 3'		=> 'PlayStation 3',[m
[32m+[m	[32m'playstation vita'  	=> 'PlayStation Vita',[m
[32m+[m	[32m'hiptop'		=> 'Danger Hiptop',[m
[32m+[m	[32m'nec-'			=> 'NEC',[m
[32m+[m	[32m'panasonic'		=> 'Panasonic',[m
[32m+[m	[32m'philips'		=> 'Philips',[m
[32m+[m	[32m'sagem'			=> 'Sagem',[m
[32m+[m	[32m'sanyo'			=> 'Sanyo',[m
[32m+[m	[32m'spv'			=> 'SPV',[m
[32m+[m	[32m'zte'			=> 'ZTE',[m
[32m+[m	[32m'sendo'			=> 'Sendo',[m
[32m+[m	[32m'nintendo dsi'	=> 'Nintendo DSi',[m
[32m+[m	[32m'nintendo ds'	=> 'Nintendo DS',[m
[32m+[m	[32m'nintendo 3ds'	=> 'Nintendo 3DS',[m
[32m+[m	[32m'wii'			=> 'Nintendo Wii',[m
[32m+[m	[32m'open web'		=> 'Open Web',[m
[32m+[m	[32m'openweb'		=> 'OpenWeb',[m
[32m+[m
[32m+[m	[32m// Operating Systems[m
[32m+[m	[32m'android'		=> 'Android',[m
[32m+[m	[32m'symbian'		=> 'Symbian',[m
[32m+[m	[32m'SymbianOS'		=> 'SymbianOS',[m
[32m+[m	[32m'elaine'		=> 'Palm',[m
[32m+[m	[32m'series60'		=> 'Symbian S60',[m
[32m+[m	[32m'windows ce'	=> 'Windows CE',[m
[32m+[m
[32m+[m	[32m// Browsers[m
[32m+[m	[32m'obigo'			=> 'Obigo',[m
[32m+[m	[32m'netfront'		=> 'Netfront Browser',[m
[32m+[m	[32m'openwave'		=> 'Openwave Browser',[m
[32m+[m	[32m'mobilexplorer'	=> 'Mobile Explorer',[m
[32m+[m	[32m'operamini'		=> 'Opera Mini',[m
[32m+[m	[32m'opera mini'	=> 'Opera Mini',[m
[32m+[m	[32m'opera mobi'	=> 'Opera Mobile',[m
[32m+[m	[32m'fennec'		=> 'Firefox Mobile',[m
[32m+[m
[32m+[m	[32m// Other[m
[32m+[m	[32m'digital paths'	=> 'Digital Paths',[m
[32m+[m	[32m'avantgo'		=> 'AvantGo',[m
[32m+[m	[32m'xiino'			=> 'Xiino',[m
[32m+[m	[32m'novarra'		=> 'Novarra Transcoder',[m
[32m+[m	[32m'vodafone'		=> 'Vodafone',[m
[32m+[m	[32m'docomo'		=> 'NTT DoCoMo',[m
[32m+[m	[32m'o2'			=> 'O2',[m
[32m+[m
[32m+[m	[32m// Fallback[m
[32m+[m	[32m'mobile'		=> 'Generic Mobile',[m
[32m+[m	[32m'wireless'		=> 'Generic Mobile',[m
[32m+[m	[32m'j2me'			=> 'Generic Mobile',[m
[32m+[m	[32m'midp'			=> 'Generic Mobile',[m
[32m+[m	[32m'cldc'			=> 'Generic Mobile',[m
[32m+[m	[32m'up.link'		=> 'Generic Mobile',[m
[32m+[m	[32m'up.browser'	=> 'Generic Mobile',[m
[32m+[m	[32m'smartphone'	=> 'Generic Mobile',[m
[32m+[m	[32m'cellphone'		=> 'Generic Mobile'[m
[32m+[m[32m);[m
[32m+[m
[32m+[m[32m// There are hundreds of bots but these are the most common.[m
[32m+[m[32m$robots = array([m
[32m+[m	[32m'googlebot'		=> 'Googlebot',[m
[32m+[m	[32m'msnbot'		=> 'MSNBot',[m
[32m+[m	[32m'baiduspider'		=> 'Baiduspider',[m
[32m+[m	[32m'bingbot'		=> 'Bing',[m
[32m+[m	[32m'slurp'			=> 'Inktomi Slurp',[m
[32m+[m	[32m'yahoo'			=> 'Yahoo',[m
[32m+[m	[32m'ask jeeves'		=> 'Ask Jeeves',[m
[32m+[m	[32m'fastcrawler'		=> 'FastCrawler',[m
[32m+[m	[32m'infoseek'		=> 'InfoSeek Robot 1.0',[m
[32m+[m	[32m'lycos'			=> 'Lycos',[m
[32m+[m	[32m'yandex'		=> 'YandexBot',[m
[32m+[m	[32m'mediapartners-google'	=> 'MediaPartners Google',[m
[32m+[m	[32m'CRAZYWEBCRAWLER'	=> 'Crazy Webcrawler',[m
[32m+[m	[32m'adsbot-google'		=> 'AdsBot Google',[m
[32m+[m	[32m'feedfetcher-google'	=> 'Feedfetcher Google',[m
[32m+[m	[32m'curious george'	=> 'Curious George',[m
[32m+[m	[32m'ia_archiver'		=> 'Alexa Crawler',[m
[32m+[m	[32m'MJ12bot'		=> 'Majestic-12',[m
[32m+[m	[32m'Uptimebot'		=> 'Uptimebot'[m
[32m+[m[32m);[m
[1mdiff --git a/application/controllers/Welcome.php b/application/controllers/Welcome.php[m
[1mnew file mode 100644[m
[1mindex 0000000..9213c0c[m
[1m--- /dev/null[m
[1m+++ b/application/controllers/Welcome.php[m
[36m@@ -0,0 +1,25 @@[m
[32m+[m[32m<?php[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32mclass Welcome extends CI_Controller {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Index Page for this controller.[m
[32m+[m	[32m *[m
[32m+[m	[32m * Maps to the following URL[m
[32m+[m	[32m * 		http://example.com/index.php/welcome[m
[32m+[m	[32m *	- or -[m
[32m+[m	[32m * 		http://example.com/index.php/welcome/index[m
[32m+[m	[32m *	- or -[m
[32m+[m	[32m * Since this controller is set as the default controller in[m
[32m+[m	[32m * config/routes.php, it's displayed at http://example.com/[m
[32m+[m	[32m *[m
[32m+[m	[32m * So any other public methods not prefixed with an underscore will[m
[32m+[m	[32m * map to /index.php/welcome/<method_name>[m
[32m+[m	[32m * @see https://codeigniter.com/user_guide/general/urls.html[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function index()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->load->view('welcome_message');[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/application/controllers/index.html b/application/controllers/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/application/controllers/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/application/core/index.html b/application/core/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/application/core/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/application/helpers/index.html b/application/helpers/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/application/helpers/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/application/hooks/index.html b/application/hooks/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/application/hooks/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/application/index.html b/application/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/application/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/application/language/english/index.html b/application/language/english/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/application/language/english/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/application/language/index.html b/application/language/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/application/language/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/application/libraries/index.html b/application/libraries/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/application/libraries/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/application/logs/index.html b/application/logs/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/application/logs/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/application/models/index.html b/application/models/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/application/models/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/application/third_party/index.html b/application/third_party/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/application/third_party/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/application/views/errors/cli/error_404.php b/application/views/errors/cli/error_404.php[m
[1mnew file mode 100644[m
[1mindex 0000000..6984b61[m
[1m--- /dev/null[m
[1m+++ b/application/views/errors/cli/error_404.php[m
[36m@@ -0,0 +1,8 @@[m
[32m+[m[32m<?php[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32mecho "\nERROR: ",[m
[32m+[m	[32m$heading,[m
[32m+[m	[32m"\n\n",[m
[32m+[m	[32m$message,[m
[32m+[m	[32m"\n\n";[m
\ No newline at end of file[m
[1mdiff --git a/application/views/errors/cli/error_db.php b/application/views/errors/cli/error_db.php[m
[1mnew file mode 100644[m
[1mindex 0000000..2ff43ff[m
[1m--- /dev/null[m
[1m+++ b/application/views/errors/cli/error_db.php[m
[36m@@ -0,0 +1,8 @@[m
[32m+[m[32m<?php[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32mecho "\nDatabase error: ",[m
[32m+[m	[32m$heading,[m
[32m+[m	[32m"\n\n",[m
[32m+[m	[32m$message,[m
[32m+[m	[32m"\n\n";[m
\ No newline at end of file[m
[1mdiff --git a/application/views/errors/cli/error_exception.php b/application/views/errors/cli/error_exception.php[m
[1mnew file mode 100644[m
[1mindex 0000000..efa6a66[m
[1m--- /dev/null[m
[1m+++ b/application/views/errors/cli/error_exception.php[m
[36m@@ -0,0 +1,21 @@[m
[32m+[m[32m<?php defined('BASEPATH') OR exit('No direct script access allowed'); ?>[m
[32m+[m
[32m+[m[32mAn uncaught Exception was encountered[m
[32m+[m
[32m+[m[32mType:        <?php echo get_class($exception), "\n"; ?>[m
[32m+[m[32mMessage:     <?php echo $message, "\n"; ?>[m
[32m+[m[32mFilename:    <?php echo $exception->getFile(), "\n"; ?>[m
[32m+[m[32mLine Number: <?php echo $exception->getLine(); ?>[m
[32m+[m
[32m+[m[32m<?php if (defined('SHOW_DEBUG_BACKTRACE') && SHOW_DEBUG_BACKTRACE === TRUE): ?>[m
[32m+[m
[32m+[m[32mBacktrace:[m
[32m+[m[32m<?php	foreach ($exception->getTrace() as $error): ?>[m
[32m+[m[32m<?php		if (isset($error['file']) && strpos($error['file'], realpath(BASEPATH)) !== 0): ?>[m
[32m+[m	[32mFile: <?php echo $error['file'], "\n"; ?>[m
[32m+[m	[32mLine: <?php echo $error['line'], "\n"; ?>[m
[32m+[m	[32mFunction: <?php echo $error['function'], "\n\n"; ?>[m
[32m+[m[32m<?php		endif ?>[m
[32m+[m[32m<?php	endforeach ?>[m
[32m+[m
[32m+[m[32m<?php endif ?>[m
[1mdiff --git a/application/views/errors/cli/error_general.php b/application/views/errors/cli/error_general.php[m
[1mnew file mode 100644[m
[1mindex 0000000..6984b61[m
[1m--- /dev/null[m
[1m+++ b/application/views/errors/cli/error_general.php[m
[36m@@ -0,0 +1,8 @@[m
[32m+[m[32m<?php[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32mecho "\nERROR: ",[m
[32m+[m	[32m$heading,[m
[32m+[m	[32m"\n\n",[m
[32m+[m	[32m$message,[m
[32m+[m	[32m"\n\n";[m
\ No newline at end of file[m
[1mdiff --git a/application/views/errors/cli/error_php.php b/application/views/errors/cli/error_php.php[m
[1mnew file mode 100644[m
[1mindex 0000000..8a24b64[m
[1m--- /dev/null[m
[1m+++ b/application/views/errors/cli/error_php.php[m
[36m@@ -0,0 +1,21 @@[m
[32m+[m[32m<?php defined('BASEPATH') OR exit('No direct script access allowed'); ?>[m
[32m+[m
[32m+[m[32mA PHP Error was encountered[m
[32m+[m
[32m+[m[32mSeverity:    <?php echo $severity, "\n"; ?>[m
[32m+[m[32mMessage:     <?php echo $message, "\n"; ?>[m
[32m+[m[32mFilename:    <?php echo $filepath, "\n"; ?>[m
[32m+[m[32mLine Number: <?php echo $line; ?>[m
[32m+[m
[32m+[m[32m<?php if (defined('SHOW_DEBUG_BACKTRACE') && SHOW_DEBUG_BACKTRACE === TRUE): ?>[m
[32m+[m
[32m+[m[32mBacktrace:[m
[32m+[m[32m<?php	foreach (debug_backtrace() as $error): ?>[m
[32m+[m[32m<?php		if (isset($error['file']) && strpos($error['file'], realpath(BASEPATH)) !== 0): ?>[m
[32m+[m	[32mFile: <?php echo $error['file'], "\n"; ?>[m
[32m+[m	[32mLine: <?php echo $error['line'], "\n"; ?>[m
[32m+[m	[32mFunction: <?php echo $error['function'], "\n\n"; ?>[m
[32m+[m[32m<?php		endif ?>[m
[32m+[m[32m<?php	endforeach ?>[m
[32m+[m
[32m+[m[32m<?php endif ?>[m
[1mdiff --git a/application/views/errors/cli/index.html b/application/views/errors/cli/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/application/views/errors/cli/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/application/views/errors/html/error_404.php b/application/views/errors/html/error_404.php[m
[1mnew file mode 100644[m
[1mindex 0000000..756ea9d[m
[1m--- /dev/null[m
[1m+++ b/application/views/errors/html/error_404.php[m
[36m@@ -0,0 +1,64 @@[m
[32m+[m[32m<?php[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m[32m?><!DOCTYPE html>[m
[32m+[m[32m<html lang="en">[m
[32m+[m[32m<head>[m
[32m+[m[32m<meta charset="utf-8">[m
[32m+[m[32m<title>404 Page Not Found</title>[m
[32m+[m[32m<style type="text/css">[m
[32m+[m
[32m+[m[32m::selection { background-color: #E13300; color: white; }[m
[32m+[m[32m::-moz-selection { background-color: #E13300; color: white; }[m
[32m+[m
[32m+[m[32mbody {[m
[32m+[m	[32mbackground-color: #fff;[m
[32m+[m	[32mmargin: 40px;[m
[32m+[m	[32mfont: 13px/20px normal Helvetica, Arial, sans-serif;[m
[32m+[m	[32mcolor: #4F5155;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32ma {[m
[32m+[m	[32mcolor: #003399;[m
[32m+[m	[32mbackground-color: transparent;[m
[32m+[m	[32mfont-weight: normal;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mh1 {[m
[32m+[m	[32mcolor: #444;[m
[32m+[m	[32mbackground-color: transparent;[m
[32m+[m	[32mborder-bottom: 1px solid #D0D0D0;[m
[32m+[m	[32mfont-size: 19px;[m
[32m+[m	[32mfont-weight: normal;[m
[32m+[m	[32mmargin: 0 0 14px 0;[m
[32m+[m	[32mpadding: 14px 15px 10px 15px;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mcode {[m
[32m+[m	[32mfont-family: Consolas, Monaco, Courier New, Courier, monospace;[m
[32m+[m	[32mfont-size: 12px;[m
[32m+[m	[32mbackground-color: #f9f9f9;[m
[32m+[m	[32mborder: 1px solid #D0D0D0;[m
[32m+[m	[32mcolor: #002166;[m
[32m+[m	[32mdisplay: block;[m
[32m+[m	[32mmargin: 14px 0 14px 0;[m
[32m+[m	[32mpadding: 12px 10px 12px 10px;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#container {[m
[32m+[m	[32mmargin: 10px;[m
[32m+[m	[32mborder: 1px solid #D0D0D0;[m
[32m+[m	[32mbox-shadow: 0 0 8px #D0D0D0;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mp {[m
[32m+[m	[32mmargin: 12px 15px 12px 15px;[m
[32m+[m[32m}[m
[32m+[m[32m</style>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m	[32m<div id="container">[m
[32m+[m		[32m<h1><?php echo $heading; ?></h1>[m
[32m+[m		[32m<?php echo $message; ?>[m
[32m+[m	[32m</div>[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
\ No newline at end of file[m
[1mdiff --git a/application/views/errors/html/error_db.php b/application/views/errors/html/error_db.php[m
[1mnew file mode 100644[m
[1mindex 0000000..f5a43f6[m
[1m--- /dev/null[m
[1m+++ b/application/views/errors/html/error_db.php[m
[36m@@ -0,0 +1,64 @@[m
[32m+[m[32m<?php[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m[32m?><!DOCTYPE html>[m
[32m+[m[32m<html lang="en">[m
[32m+[m[32m<head>[m
[32m+[m[32m<meta charset="utf-8">[m
[32m+[m[32m<title>Database Error</title>[m
[32m+[m[32m<style type="text/css">[m
[32m+[m
[32m+[m[32m::selection { background-color: #E13300; color: white; }[m
[32m+[m[32m::-moz-selection { background-color: #E13300; color: white; }[m
[32m+[m
[32m+[m[32mbody {[m
[32m+[m	[32mbackground-color: #fff;[m
[32m+[m	[32mmargin: 40px;[m
[32m+[m	[32mfont: 13px/20px normal Helvetica, Arial, sans-serif;[m
[32m+[m	[32mcolor: #4F5155;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32ma {[m
[32m+[m	[32mcolor: #003399;[m
[32m+[m	[32mbackground-color: transparent;[m
[32m+[m	[32mfont-weight: normal;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mh1 {[m
[32m+[m	[32mcolor: #444;[m
[32m+[m	[32mbackground-color: transparent;[m
[32m+[m	[32mborder-bottom: 1px solid #D0D0D0;[m
[32m+[m	[32mfont-size: 19px;[m
[32m+[m	[32mfont-weight: normal;[m
[32m+[m	[32mmargin: 0 0 14px 0;[m
[32m+[m	[32mpadding: 14px 15px 10px 15px;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mcode {[m
[32m+[m	[32mfont-family: Consolas, Monaco, Courier New, Courier, monospace;[m
[32m+[m	[32mfont-size: 12px;[m
[32m+[m	[32mbackground-color: #f9f9f9;[m
[32m+[m	[32mborder: 1px solid #D0D0D0;[m
[32m+[m	[32mcolor: #002166;[m
[32m+[m	[32mdisplay: block;[m
[32m+[m	[32mmargin: 14px 0 14px 0;[m
[32m+[m	[32mpadding: 12px 10px 12px 10px;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#container {[m
[32m+[m	[32mmargin: 10px;[m
[32m+[m	[32mborder: 1px solid #D0D0D0;[m
[32m+[m	[32mbox-shadow: 0 0 8px #D0D0D0;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mp {[m
[32m+[m	[32mmargin: 12px 15px 12px 15px;[m
[32m+[m[32m}[m
[32m+[m[32m</style>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m	[32m<div id="container">[m
[32m+[m		[32m<h1><?php echo $heading; ?></h1>[m
[32m+[m		[32m<?php echo $message; ?>[m
[32m+[m	[32m</div>[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
\ No newline at end of file[m
[1mdiff --git a/application/views/errors/html/error_exception.php b/application/views/errors/html/error_exception.php[m
[1mnew file mode 100644[m
[1mindex 0000000..8784886[m
[1m--- /dev/null[m
[1m+++ b/application/views/errors/html/error_exception.php[m
[36m@@ -0,0 +1,32 @@[m
[32m+[m[32m<?php[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m[32m?>[m
[32m+[m
[32m+[m[32m<div style="border:1px solid #990000;padding-left:20px;margin:0 0 10px 0;">[m
[32m+[m
[32m+[m[32m<h4>An uncaught Exception was encountered</h4>[m
[32m+[m
[32m+[m[32m<p>Type: <?php echo get_class($exception); ?></p>[m
[32m+[m[32m<p>Message: <?php echo $message; ?></p>[m
[32m+[m[32m<p>Filename: <?php echo $exception->getFile(); ?></p>[m
[32m+[m[32m<p>Line Number: <?php echo $exception->getLine(); ?></p>[m
[32m+[m
[32m+[m[32m<?php if (defined('SHOW_DEBUG_BACKTRACE') && SHOW_DEBUG_BACKTRACE === TRUE): ?>[m
[32m+[m
[32m+[m	[32m<p>Backtrace:</p>[m
[32m+[m	[32m<?php foreach ($exception->getTrace() as $error): ?>[m
[32m+[m
[32m+[m		[32m<?php if (isset($error['file']) && strpos($error['file'], realpath(BASEPATH)) !== 0): ?>[m
[32m+[m
[32m+[m			[32m<p style="margin-left:10px">[m
[32m+[m			[32mFile: <?php echo $error['file']; ?><br />[m
[32m+[m			[32mLine: <?php echo $error['line']; ?><br />[m
[32m+[m			[32mFunction: <?php echo $error['function']; ?>[m
[32m+[m			[32m</p>[m
[32m+[m		[32m<?php endif ?>[m
[32m+[m
[32m+[m	[32m<?php endforeach ?>[m
[32m+[m
[32m+[m[32m<?php endif ?>[m
[32m+[m
[32m+[m[32m</div>[m
\ No newline at end of file[m
[1mdiff --git a/application/views/errors/html/error_general.php b/application/views/errors/html/error_general.php[m
[1mnew file mode 100644[m
[1mindex 0000000..fc3b2eb[m
[1m--- /dev/null[m
[1m+++ b/application/views/errors/html/error_general.php[m
[36m@@ -0,0 +1,64 @@[m
[32m+[m[32m<?php[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m[32m?><!DOCTYPE html>[m
[32m+[m[32m<html lang="en">[m
[32m+[m[32m<head>[m
[32m+[m[32m<meta charset="utf-8">[m
[32m+[m[32m<title>Error</title>[m
[32m+[m[32m<style type="text/css">[m
[32m+[m
[32m+[m[32m::selection { background-color: #E13300; color: white; }[m
[32m+[m[32m::-moz-selection { background-color: #E13300; color: white; }[m
[32m+[m
[32m+[m[32mbody {[m
[32m+[m	[32mbackground-color: #fff;[m
[32m+[m	[32mmargin: 40px;[m
[32m+[m	[32mfont: 13px/20px normal Helvetica, Arial, sans-serif;[m
[32m+[m	[32mcolor: #4F5155;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32ma {[m
[32m+[m	[32mcolor: #003399;[m
[32m+[m	[32mbackground-color: transparent;[m
[32m+[m	[32mfont-weight: normal;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mh1 {[m
[32m+[m	[32mcolor: #444;[m
[32m+[m	[32mbackground-color: transparent;[m
[32m+[m	[32mborder-bottom: 1px solid #D0D0D0;[m
[32m+[m	[32mfont-size: 19px;[m
[32m+[m	[32mfont-weight: normal;[m
[32m+[m	[32mmargin: 0 0 14px 0;[m
[32m+[m	[32mpadding: 14px 15px 10px 15px;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mcode {[m
[32m+[m	[32mfont-family: Consolas, Monaco, Courier New, Courier, monospace;[m
[32m+[m	[32mfont-size: 12px;[m
[32m+[m	[32mbackground-color: #f9f9f9;[m
[32m+[m	[32mborder: 1px solid #D0D0D0;[m
[32m+[m	[32mcolor: #002166;[m
[32m+[m	[32mdisplay: block;[m
[32m+[m	[32mmargin: 14px 0 14px 0;[m
[32m+[m	[32mpadding: 12px 10px 12px 10px;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#container {[m
[32m+[m	[32mmargin: 10px;[m
[32m+[m	[32mborder: 1px solid #D0D0D0;[m
[32m+[m	[32mbox-shadow: 0 0 8px #D0D0D0;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mp {[m
[32m+[m	[32mmargin: 12px 15px 12px 15px;[m
[32m+[m[32m}[m
[32m+[m[32m</style>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m	[32m<div id="container">[m
[32m+[m		[32m<h1><?php echo $heading; ?></h1>[m
[32m+[m		[32m<?php echo $message; ?>[m
[32m+[m	[32m</div>[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
\ No newline at end of file[m
[1mdiff --git a/application/views/errors/html/error_php.php b/application/views/errors/html/error_php.php[m
[1mnew file mode 100644[m
[1mindex 0000000..b146f9c[m
[1m--- /dev/null[m
[1m+++ b/application/views/errors/html/error_php.php[m
[36m@@ -0,0 +1,33 @@[m
[32m+[m[32m<?php[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m[32m?>[m
[32m+[m
[32m+[m[32m<div style="border:1px solid #990000;padding-left:20px;margin:0 0 10px 0;">[m
[32m+[m
[32m+[m[32m<h4>A PHP Error was encountered</h4>[m
[32m+[m
[32m+[m[32m<p>Severity: <?php echo $severity; ?></p>[m
[32m+[m[32m<p>Message:  <?php echo $message; ?></p>[m
[32m+[m[32m<p>Filename: <?php echo $filepath; ?></p>[m
[32m+[m[32m<p>Line Number: <?php echo $line; ?></p>[m
[32m+[m
[32m+[m[32m<?php if (defined('SHOW_DEBUG_BACKTRACE') && SHOW_DEBUG_BACKTRACE === TRUE): ?>[m
[32m+[m
[32m+[m	[32m<p>Backtrace:</p>[m
[32m+[m	[32m<?php foreach (debug_backtrace() as $error): ?>[m
[32m+[m
[32m+[m		[32m<?php if (isset($error['file']) && strpos($error['file'], realpath(BASEPATH)) !== 0): ?>[m
[32m+[m
[32m+[m			[32m<p style="margin-left:10px">[m
[32m+[m			[32mFile: <?php echo $error['file'] ?><br />[m
[32m+[m			[32mLine: <?php echo $error['line'] ?><br />[m
[32m+[m			[32mFunction: <?php echo $error['function'] ?>[m
[32m+[m			[32m</p>[m
[32m+[m
[32m+[m		[32m<?php endif ?>[m
[32m+[m
[32m+[m	[32m<?php endforeach ?>[m
[32m+[m
[32m+[m[32m<?php endif ?>[m
[32m+[m
[32m+[m[32m</div>[m
\ No newline at end of file[m
[1mdiff --git a/application/views/errors/html/index.html b/application/views/errors/html/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/application/views/errors/html/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/application/views/errors/index.html b/application/views/errors/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/application/views/errors/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/application/views/index.html b/application/views/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/application/views/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/application/views/welcome_message.php b/application/views/welcome_message.php[m
[1mnew file mode 100644[m
[1mindex 0000000..f511563[m
[1m--- /dev/null[m
[1m+++ b/application/views/welcome_message.php[m
[36m@@ -0,0 +1,89 @@[m
[32m+[m[32m<?php[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m[32m?><!DOCTYPE html>[m
[32m+[m[32m<html lang="en">[m
[32m+[m[32m<head>[m
[32m+[m	[32m<meta charset="utf-8">[m
[32m+[m	[32m<title>Welcome to CodeIgniter</title>[m
[32m+[m
[32m+[m	[32m<style type="text/css">[m
[32m+[m
[32m+[m	[32m::selection { background-color: #E13300; color: white; }[m
[32m+[m	[32m::-moz-selection { background-color: #E13300; color: white; }[m
[32m+[m
[32m+[m	[32mbody {[m
[32m+[m		[32mbackground-color: #fff;[m
[32m+[m		[32mmargin: 40px;[m
[32m+[m		[32mfont: 13px/20px normal Helvetica, Arial, sans-serif;[m
[32m+[m		[32mcolor: #4F5155;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32ma {[m
[32m+[m		[32mcolor: #003399;[m
[32m+[m		[32mbackground-color: transparent;[m
[32m+[m		[32mfont-weight: normal;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mh1 {[m
[32m+[m		[32mcolor: #444;[m
[32m+[m		[32mbackground-color: transparent;[m
[32m+[m		[32mborder-bottom: 1px solid #D0D0D0;[m
[32m+[m		[32mfont-size: 19px;[m
[32m+[m		[32mfont-weight: normal;[m
[32m+[m		[32mmargin: 0 0 14px 0;[m
[32m+[m		[32mpadding: 14px 15px 10px 15px;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mcode {[m
[32m+[m		[32mfont-family: Consolas, Monaco, Courier New, Courier, monospace;[m
[32m+[m		[32mfont-size: 12px;[m
[32m+[m		[32mbackground-color: #f9f9f9;[m
[32m+[m		[32mborder: 1px solid #D0D0D0;[m
[32m+[m		[32mcolor: #002166;[m
[32m+[m		[32mdisplay: block;[m
[32m+[m		[32mmargin: 14px 0 14px 0;[m
[32m+[m		[32mpadding: 12px 10px 12px 10px;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m#body {[m
[32m+[m		[32mmargin: 0 15px 0 15px;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mp.footer {[m
[32m+[m		[32mtext-align: right;[m
[32m+[m		[32mfont-size: 11px;[m
[32m+[m		[32mborder-top: 1px solid #D0D0D0;[m
[32m+[m		[32mline-height: 32px;[m
[32m+[m		[32mpadding: 0 10px 0 10px;[m
[32m+[m		[32mmargin: 20px 0 0 0;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m#container {[m
[32m+[m		[32mmargin: 10px;[m
[32m+[m		[32mborder: 1px solid #D0D0D0;[m
[32m+[m		[32mbox-shadow: 0 0 8px #D0D0D0;[m
[32m+[m	[32m}[m
[32m+[m	[32m</style>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<div id="container">[m
[32m+[m	[32m<h1>Welcome to CodeIgniter!</h1>[m
[32m+[m
[32m+[m	[32m<div id="body">[m
[32m+[m		[32m<p>The page you are looking at is being generated dynamically by CodeIgniter.</p>[m
[32m+[m
[32m+[m		[32m<p>If you would like to edit this page you'll find it located at:</p>[m
[32m+[m		[32m<code>application/views/welcome_message.php</code>[m
[32m+[m
[32m+[m		[32m<p>The corresponding controller for this page is found at:</p>[m
[32m+[m		[32m<code>application/controllers/Welcome.php</code>[m
[32m+[m
[32m+[m		[32m<p>If you are exploring CodeIgniter for the very first time, you should start by reading the <a href="user_guide/">User Guide</a>.</p>[m
[32m+[m	[32m</div>[m
[32m+[m
[32m+[m	[32m<p class="footer">Page rendered in <strong>{elapsed_time}</strong> seconds. <?php echo  (ENVIRONMENT === 'development') ?  'CodeIgniter Version <strong>' . CI_VERSION . '</strong>' : '' ?></p>[m
[32m+[m[32m</div>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
\ No newline at end of file[m
[1mdiff --git a/composer.json b/composer.json[m
[1mnew file mode 100644[m
[1mindex 0000000..30630e2[m
[1m--- /dev/null[m
[1m+++ b/composer.json[m
[36m@@ -0,0 +1,23 @@[m
[32m+[m[32m{[m
[32m+[m	[32m"description": "The CodeIgniter framework",[m
[32m+[m	[32m"name": "codeigniter/framework",[m
[32m+[m	[32m"type": "project",[m
[32m+[m	[32m"homepage": "https://codeigniter.com",[m
[32m+[m	[32m"license": "MIT",[m
[32m+[m	[32m"support": {[m
[32m+[m		[32m"forum": "http://forum.codeigniter.com/",[m
[32m+[m		[32m"wiki": "https://github.com/bcit-ci/CodeIgniter/wiki",[m
[32m+[m		[32m"slack": "https://codeigniterchat.slack.com",[m
[32m+[m		[32m"source": "https://github.com/bcit-ci/CodeIgniter"[m
[32m+[m	[32m},[m
[32m+[m	[32m"require": {[m
[32m+[m		[32m"php": ">=5.3.7"[m
[32m+[m	[32m},[m
[32m+[m	[32m"suggest": {[m
[32m+[m		[32m"paragonie/random_compat": "Provides better randomness in PHP 5.x"[m
[32m+[m	[32m},[m
[32m+[m	[32m"require-dev": {[m
[32m+[m		[32m"mikey179/vfsStream": "1.1.*",[m
[32m+[m		[32m"phpunit/phpunit": "4.* || 5.*"[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/contributing.md b/contributing.md[m
[1mnew file mode 100644[m
[1mindex 0000000..8edb510[m
[1m--- /dev/null[m
[1m+++ b/contributing.md[m
[36m@@ -0,0 +1,95 @@[m
[32m+[m[32m# Contributing to CodeIgniter[m
[32m+[m
[32m+[m
[32m+[m[32mCodeIgniter is a community driven project and accepts contributions of code and documentation from the community. These contributions are made in the form of Issues or [Pull Requests](http://help.github.com/send-pull-requests/) on the [CodeIgniter repository](https://github.com/bcit-ci/CodeIgniter) on GitHub.[m
[32m+[m
[32m+[m[32mIssues are a quick way to point out a bug. If you find a bug or documentation error in CodeIgniter then please check a few things first:[m
[32m+[m
[32m+[m[32m1. There is not already an open Issue[m
[32m+[m[32m2. The issue has already been fixed (check the develop branch, or look for closed Issues)[m
[32m+[m[32m3. Is it something really obvious that you can fix yourself?[m
[32m+[m
[32m+[m[32mReporting issues is helpful but an even better approach is to send a Pull Request, which is done by "Forking" the main repository and committing to your own copy. This will require you to use the version control system called Git.[m
[32m+[m
[32m+[m[32m## Guidelines[m
[32m+[m
[32m+[m[32mBefore we look into how, here are the guidelines. If your Pull Requests fail[m
[32m+[m[32mto pass these guidelines it will be declined and you will need to re-submit[m
[32m+[m[32mwhen you’ve made the changes. This might sound a bit tough, but it is required[m
[32m+[m[32mfor us to maintain quality of the code-base.[m
[32m+[m
[32m+[m[32m### PHP Style[m
[32m+[m
[32m+[m[32mAll code must meet the [Style Guide](https://codeigniter.com/user_guide/general/styleguide.html), which is[m
[32m+[m[32messentially the [Allman indent style](https://en.wikipedia.org/wiki/Indent_style#Allman_style), underscores and readable operators. This makes certain that all code is the same format as the existing code and means it will be as readable as possible.[m
[32m+[m
[32m+[m[32m### Documentation[m
[32m+[m
[32m+[m[32mIf you change anything that requires a change to documentation then you will need to add it. New classes, methods, parameters, changing default values, etc are all things that will require a change to documentation. The change-log must also be updated for every change. Also PHPDoc blocks must be maintained.[m
[32m+[m
[32m+[m[32m### Compatibility[m
[32m+[m
[32m+[m[32mCodeIgniter recommends PHP 5.4 or newer to be used, but it should be[m
[32m+[m[32mcompatible with PHP 5.2.4 so all code supplied must stick to this[m
[32m+[m[32mrequirement. If PHP 5.3 (and above) functions or features are used then[m
[32m+[m[32mthere must be a fallback for PHP 5.2.4.[m
[32m+[m
[32m+[m[32m### Branching[m
[32m+[m
[32m+[m[32mCodeIgniter uses the [Git-Flow](http://nvie.com/posts/a-successful-git-branching-model/) branching model which requires all pull requests to be sent to the "develop" branch. This is[m
[32m+[m[32mwhere the next planned version will be developed. The "master" branch will always contain the latest stable version and is kept clean so a "hotfix" (e.g: an emergency security patch) can be applied to master to create a new version, without worrying about other features holding it up. For this reason all commits need to be made to "develop" and any sent to "master" will be closed automatically. If you have multiple changes to submit, please place all changes into their own branch on your fork.[m
[32m+[m
[32m+[m[32mOne thing at a time: A pull request should only contain one change. That does not mean only one commit, but one change - however many commits it took. The reason for this is that if you change X and Y but send a pull request for both at the same time, we might really want X but disagree with Y, meaning we cannot merge the request. Using the Git-Flow branching model you can create new branches for both of these features and send two requests.[m
[32m+[m
[32m+[m[32m### Signing[m
[32m+[m
[32m+[m[32mYou must sign your work, certifying that you either wrote the work or otherwise have the right to pass it on to an open source project. git makes this trivial as you merely have to use `--signoff` on your commits to your CodeIgniter fork.[m
[32m+[m
[32m+[m[32m`git commit --signoff`[m
[32m+[m
[32m+[m[32mor simply[m
[32m+[m
[32m+[m[32m`git commit -s`[m
[32m+[m
[32m+[m[32mThis will sign your commits with the information setup in your git config, e.g.[m
[32m+[m
[32m+[m[32m`Signed-off-by: John Q Public <john.public@example.com>`[m
[32m+[m
[32m+[m[32mIf you are using [Tower](http://www.git-tower.com/) there is a "Sign-Off" checkbox in the commit window. You could even alias git commit to use the `-s` flag so you don’t have to think about it.[m
[32m+[m
[32m+[m[32mBy signing your work in this manner, you certify to a "Developer's Certificate of Origin". The current version of this certificate is in the `DCO.txt` file in the root of this repository.[m
[32m+[m
[32m+[m
[32m+[m[32m## How-to Guide[m
[32m+[m
[32m+[m[32mThere are two ways to make changes, the easy way and the hard way. Either way you will need to [create a GitHub account](https://github.com/signup/free).[m
[32m+[m
[32m+[m[32mEasy way GitHub allows in-line editing of files for making simple typo changes and quick-fixes. This is not the best way as you are unable to test the code works. If you do this you could be introducing syntax errors, etc, but for a Git-phobic user this is good for a quick-fix.[m
[32m+[m
[32m+[m[32mHard way The best way to contribute is to "clone" your fork of CodeIgniter to your development area. That sounds like some jargon, but "forking" on GitHub means "making a copy of that repo to your account" and "cloning" means "copying that code to your environment so you can work on it".[m
[32m+[m
[32m+[m[32m1. Set up Git (Windows, Mac & Linux)[m
[32m+[m[32m2. Go to the CodeIgniter repo[m
[32m+[m[32m3. Fork it[m
[32m+[m[32m4. Clone your CodeIgniter repo: git@github.com:<your-name>/CodeIgniter.git[m
[32m+[m[32m5. Checkout the "develop" branch At this point you are ready to start making changes.[m[41m [m
[32m+[m[32m6. Fix existing bugs on the Issue tracker after taking a look to see nobody else is working on them.[m
[32m+[m[32m7. Commit the files[m
[32m+[m[32m8. Push your develop branch to your fork[m
[32m+[m[32m9. Send a pull request [http://help.github.com/send-pull-requests/](http://help.github.com/send-pull-requests/)[m
[32m+[m
[32m+[m[32mThe Reactor Engineers will now be alerted about the change and at least one of the team will respond. If your change fails to meet the guidelines it will be bounced, or feedback will be provided to help you improve it.[m
[32m+[m
[32m+[m[32mOnce the Reactor Engineer handling your pull request is happy with it they will merge it into develop and your patch will be part of the next release.[m
[32m+[m
[32m+[m[32m### Keeping your fork up-to-date[m
[32m+[m
[32m+[m[32mUnlike systems like Subversion, Git can have multiple remotes. A remote is the name for a URL of a Git repository. By default your fork will have a remote named "origin" which points to your fork, but you can add another remote named "codeigniter" which points to `git://github.com/bcit-ci/CodeIgniter.git`. This is a read-only remote but you can pull from this develop branch to update your own.[m
[32m+[m
[32m+[m[32mIf you are using command-line you can do the following:[m
[32m+[m
[32m+[m[32m1. `git remote add codeigniter git://github.com/bcit-ci/CodeIgniter.git`[m
[32m+[m[32m2. `git pull codeigniter develop`[m
[32m+[m[32m3. `git push origin develop`[m
[32m+[m
[32m+[m[32mNow your fork is up to date. This should be done regularly, or before you send a pull request at least.[m
[1mdiff --git a/index.php b/index.php[m
[1mnew file mode 100644[m
[1mindex 0000000..ca1304a[m
[1m--- /dev/null[m
[1m+++ b/index.php[m
[36m@@ -0,0 +1,315 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m *---------------------------------------------------------------[m
[32m+[m[32m * APPLICATION ENVIRONMENT[m
[32m+[m[32m *---------------------------------------------------------------[m
[32m+[m[32m *[m
[32m+[m[32m * You can load different configurations depending on your[m
[32m+[m[32m * current environment. Setting the environment also influences[m
[32m+[m[32m * things like logging and error reporting.[m
[32m+[m[32m *[m
[32m+[m[32m * This can be set to anything, but default usage is:[m
[32m+[m[32m *[m
[32m+[m[32m *     development[m
[32m+[m[32m *     testing[m
[32m+[m[32m *     production[m
[32m+[m[32m *[m
[32m+[m[32m * NOTE: If you change these, also change the error_reporting() code below[m
[32m+[m[32m */[m
[32m+[m	[32mdefine('ENVIRONMENT', isset($_SERVER['CI_ENV']) ? $_SERVER['CI_ENV'] : 'development');[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m *---------------------------------------------------------------[m
[32m+[m[32m * ERROR REPORTING[m
[32m+[m[32m *---------------------------------------------------------------[m
[32m+[m[32m *[m
[32m+[m[32m * Different environments will require different levels of error reporting.[m
[32m+[m[32m * By default development will show errors but testing and live will hide them.[m
[32m+[m[32m */[m
[32m+[m[32mswitch (ENVIRONMENT)[m
[32m+[m[32m{[m
[32m+[m	[32mcase 'development':[m
[32m+[m		[32merror_reporting(-1);[m
[32m+[m		[32mini_set('display_errors', 1);[m
[32m+[m	[32mbreak;[m
[32m+[m
[32m+[m	[32mcase 'testing':[m
[32m+[m	[32mcase 'production':[m
[32m+[m		[32mini_set('display_errors', 0);[m
[32m+[m		[32mif (version_compare(PHP_VERSION, '5.3', '>='))[m
[32m+[m		[32m{[m
[32m+[m			[32merror_reporting(E_ALL & ~E_NOTICE & ~E_DEPRECATED & ~E_STRICT & ~E_USER_NOTICE & ~E_USER_DEPRECATED);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32merror_reporting(E_ALL & ~E_NOTICE & ~E_STRICT & ~E_USER_NOTICE);[m
[32m+[m		[32m}[m
[32m+[m	[32mbreak;[m
[32m+[m
[32m+[m	[32mdefault:[m
[32m+[m		[32mheader('HTTP/1.1 503 Service Unavailable.', TRUE, 503);[m
[32m+[m		[32mecho 'The application environment is not set correctly.';[m
[32m+[m		[32mexit(1); // EXIT_ERROR[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m *---------------------------------------------------------------[m
[32m+[m[32m * SYSTEM DIRECTORY NAME[m
[32m+[m[32m *---------------------------------------------------------------[m
[32m+[m[32m *[m
[32m+[m[32m * This variable must contain the name of your "system" directory.[m
[32m+[m[32m * Set the path if it is not in the same directory as this file.[m
[32m+[m[32m */[m
[32m+[m	[32m$system_path = 'system';[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m *---------------------------------------------------------------[m
[32m+[m[32m * APPLICATION DIRECTORY NAME[m
[32m+[m[32m *---------------------------------------------------------------[m
[32m+[m[32m *[m
[32m+[m[32m * If you want this front controller to use a different "application"[m
[32m+[m[32m * directory than the default one you can set its name here. The directory[m
[32m+[m[32m * can also be renamed or relocated anywhere on your server. If you do,[m
[32m+[m[32m * use an absolute (full) server path.[m
[32m+[m[32m * For more info please see the user guide:[m
[32m+[m[32m *[m
[32m+[m[32m * https://codeigniter.com/user_guide/general/managing_apps.html[m
[32m+[m[32m *[m
[32m+[m[32m * NO TRAILING SLASH![m
[32m+[m[32m */[m
[32m+[m	[32m$application_folder = 'application';[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m *---------------------------------------------------------------[m
[32m+[m[32m * VIEW DIRECTORY NAME[m
[32m+[m[32m *---------------------------------------------------------------[m
[32m+[m[32m *[m
[32m+[m[32m * If you want to move the view directory out of the application[m
[32m+[m[32m * directory, set the path to it here. The directory can be renamed[m
[32m+[m[32m * and relocated anywhere on your server. If blank, it will default[m
[32m+[m[32m * to the standard location inside your application directory.[m
[32m+[m[32m * If you do move this, use an absolute (full) server path.[m
[32m+[m[32m *[m
[32m+[m[32m * NO TRAILING SLASH![m
[32m+[m[32m */[m
[32m+[m	[32m$view_folder = '';[m
[32m+[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * --------------------------------------------------------------------[m
[32m+[m[32m * DEFAULT CONTROLLER[m
[32m+[m[32m * --------------------------------------------------------------------[m
[32m+[m[32m *[m
[32m+[m[32m * Normally you will set your default controller in the routes.php file.[m
[32m+[m[32m * You can, however, force a custom routing by hard-coding a[m
[32m+[m[32m * specific controller class/function here. For most applications, you[m
[32m+[m[32m * WILL NOT set your routing here, but it's an option for those[m
[32m+[m[32m * special instances where you might want to override the standard[m
[32m+[m[32m * routing in a specific front controller that shares a common CI installation.[m
[32m+[m[32m *[m
[32m+[m[32m * IMPORTANT: If you set the routing here, NO OTHER controller will be[m
[32m+[m[32m * callable. In essence, this preference limits your application to ONE[m
[32m+[m[32m * specific controller. Leave the function name blank if you need[m
[32m+[m[32m * to call functions dynamically via the URI.[m
[32m+[m[32m *[m
[32m+[m[32m * Un-comment the $routing array below to use this feature[m
[32m+[m[32m */[m
[32m+[m	[32m// The directory name, relative to the "controllers" directory.  Leave blank[m
[32m+[m	[32m// if your controller is not in a sub-directory within the "controllers" one[m
[32m+[m	[32m// $routing['directory'] = '';[m
[32m+[m
[32m+[m	[32m// The controller class file name.  Example:  mycontroller[m
[32m+[m	[32m// $routing['controller'] = '';[m
[32m+[m
[32m+[m	[32m// The controller function you wish to be called.[m
[32m+[m	[32m// $routing['function']	= '';[m
[32m+[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * -------------------------------------------------------------------[m
[32m+[m[32m *  CUSTOM CONFIG VALUES[m
[32m+[m[32m * -------------------------------------------------------------------[m
[32m+[m[32m *[m
[32m+[m[32m * The $assign_to_config array below will be passed dynamically to the[m
[32m+[m[32m * config class when initialized. This allows you to set custom config[m
[32m+[m[32m * items or override any default config values found in the config.php file.[m
[32m+[m[32m * This can be handy as it permits you to share one application between[m
[32m+[m[32m * multiple front controller files, with each file containing different[m
[32m+[m[32m * config values.[m
[32m+[m[32m *[m
[32m+[m[32m * Un-comment the $assign_to_config array below to use this feature[m
[32m+[m[32m */[m
[32m+[m	[32m// $assign_to_config['name_of_config_item'] = 'value of config item';[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m// --------------------------------------------------------------------[m
[32m+[m[32m// END OF USER CONFIGURABLE SETTINGS.  DO NOT EDIT BELOW THIS LINE[m
[32m+[m[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * ---------------------------------------------------------------[m
[32m+[m[32m *  Resolve the system path for increased reliability[m
[32m+[m[32m * ---------------------------------------------------------------[m
[32m+[m[32m */[m
[32m+[m
[32m+[m	[32m// Set the current directory correctly for CLI requests[m
[32m+[m	[32mif (defined('STDIN'))[m
[32m+[m	[32m{[m
[32m+[m		[32mchdir(dirname(__FILE__));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mif (($_temp = realpath($system_path)) !== FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$system_path = $_temp.DIRECTORY_SEPARATOR;[m
[32m+[m	[32m}[m
[32m+[m	[32melse[m
[32m+[m	[32m{[m
[32m+[m		[32m// Ensure there's a trailing slash[m
[32m+[m		[32m$system_path = strtr([m
[32m+[m			[32mrtrim($system_path, '/\\'),[m
[32m+[m			[32m'/\\',[m
[32m+[m			[32mDIRECTORY_SEPARATOR.DIRECTORY_SEPARATOR[m
[32m+[m		[32m).DIRECTORY_SEPARATOR;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// Is the system path correct?[m
[32m+[m	[32mif ( ! is_dir($system_path))[m
[32m+[m	[32m{[m
[32m+[m		[32mheader('HTTP/1.1 503 Service Unavailable.', TRUE, 503);[m
[32m+[m		[32mecho 'Your system folder path does not appear to be set correctly. Please open the following file and correct this: '.pathinfo(__FILE__, PATHINFO_BASENAME);[m
[32m+[m		[32mexit(3); // EXIT_CONFIG[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * -------------------------------------------------------------------[m
[32m+[m[32m *  Now that we know the path, set the main path constants[m
[32m+[m[32m * -------------------------------------------------------------------[m
[32m+[m[32m */[m
[32m+[m	[32m// The name of THIS file[m
[32m+[m	[32mdefine('SELF', pathinfo(__FILE__, PATHINFO_BASENAME));[m
[32m+[m
[32m+[m	[32m// Path to the system directory[m
[32m+[m	[32mdefine('BASEPATH', $system_path);[m
[32m+[m
[32m+[m	[32m// Path to the front controller (this file) directory[m
[32m+[m	[32mdefine('FCPATH', dirname(__FILE__).DIRECTORY_SEPARATOR);[m
[32m+[m
[32m+[m	[32m// Name of the "system" directory[m
[32m+[m	[32mdefine('SYSDIR', basename(BASEPATH));[m
[32m+[m
[32m+[m	[32m// The path to the "application" directory[m
[32m+[m	[32mif (is_dir($application_folder))[m
[32m+[m	[32m{[m
[32m+[m		[32mif (($_temp = realpath($application_folder)) !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$application_folder = $_temp;[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$application_folder = strtr([m
[32m+[m				[32mrtrim($application_folder, '/\\'),[m
[32m+[m				[32m'/\\',[m
[32m+[m				[32mDIRECTORY_SEPARATOR.DIRECTORY_SEPARATOR[m
[32m+[m			[32m);[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m	[32melseif (is_dir(BASEPATH.$application_folder.DIRECTORY_SEPARATOR))[m
[32m+[m	[32m{[m
[32m+[m		[32m$application_folder = BASEPATH.strtr([m
[32m+[m			[32mtrim($application_folder, '/\\'),[m
[32m+[m			[32m'/\\',[m
[32m+[m			[32mDIRECTORY_SEPARATOR.DIRECTORY_SEPARATOR[m
[32m+[m		[32m);[m
[32m+[m	[32m}[m
[32m+[m	[32melse[m
[32m+[m	[32m{[m
[32m+[m		[32mheader('HTTP/1.1 503 Service Unavailable.', TRUE, 503);[m
[32m+[m		[32mecho 'Your application folder path does not appear to be set correctly. Please open the following file and correct this: '.SELF;[m
[32m+[m		[32mexit(3); // EXIT_CONFIG[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mdefine('APPPATH', $application_folder.DIRECTORY_SEPARATOR);[m
[32m+[m
[32m+[m	[32m// The path to the "views" directory[m
[32m+[m	[32mif ( ! isset($view_folder[0]) && is_dir(APPPATH.'views'.DIRECTORY_SEPARATOR))[m
[32m+[m	[32m{[m
[32m+[m		[32m$view_folder = APPPATH.'views';[m
[32m+[m	[32m}[m
[32m+[m	[32melseif (is_dir($view_folder))[m
[32m+[m	[32m{[m
[32m+[m		[32mif (($_temp = realpath($view_folder)) !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$view_folder = $_temp;[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$view_folder = strtr([m
[32m+[m				[32mrtrim($view_folder, '/\\'),[m
[32m+[m				[32m'/\\',[m
[32m+[m				[32mDIRECTORY_SEPARATOR.DIRECTORY_SEPARATOR[m
[32m+[m			[32m);[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m	[32melseif (is_dir(APPPATH.$view_folder.DIRECTORY_SEPARATOR))[m
[32m+[m	[32m{[m
[32m+[m		[32m$view_folder = APPPATH.strtr([m
[32m+[m			[32mtrim($view_folder, '/\\'),[m
[32m+[m			[32m'/\\',[m
[32m+[m			[32mDIRECTORY_SEPARATOR.DIRECTORY_SEPARATOR[m
[32m+[m		[32m);[m
[32m+[m	[32m}[m
[32m+[m	[32melse[m
[32m+[m	[32m{[m
[32m+[m		[32mheader('HTTP/1.1 503 Service Unavailable.', TRUE, 503);[m
[32m+[m		[32mecho 'Your view folder path does not appear to be set correctly. Please open the following file and correct this: '.SELF;[m
[32m+[m		[32mexit(3); // EXIT_CONFIG[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mdefine('VIEWPATH', $view_folder.DIRECTORY_SEPARATOR);[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * --------------------------------------------------------------------[m
[32m+[m[32m * LOAD THE BOOTSTRAP FILE[m
[32m+[m[32m * --------------------------------------------------------------------[m
[32m+[m[32m *[m
[32m+[m[32m * And away we go...[m
[32m+[m[32m */[m
[32m+[m[32mrequire_once BASEPATH.'core/CodeIgniter.php';[m
[1mdiff --git a/license.txt b/license.txt[m
[1mnew file mode 100644[m
[1mindex 0000000..dcac585[m
[1m--- /dev/null[m
[1m+++ b/license.txt[m
[36m@@ -0,0 +1,21 @@[m
[32m+[m[32mThe MIT License (MIT)[m
[32m+[m
[32m+[m[32mCopyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m
[32m+[m[32mPermission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32mof this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32min the Software without restriction, including without limitation the rights[m
[32m+[m[32mto use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32mcopies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32mfurnished to do so, subject to the following conditions:[m
[32m+[m
[32m+[m[32mThe above copyright notice and this permission notice shall be included in[m
[32m+[m[32mall copies or substantial portions of the Software.[m
[32m+[m
[32m+[m[32mTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32mIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32mFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32mAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32mLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32mOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32mTHE SOFTWARE.[m
\ No newline at end of file[m
[1mdiff --git a/readme.rst b/readme.rst[m
[1mnew file mode 100644[m
[1mindex 0000000..b652008[m
[1m--- /dev/null[m
[1m+++ b/readme.rst[m
[36m@@ -0,0 +1,70 @@[m
[32m+[m[32m###################[m
[32m+[m[32mWhat is CodeIgniter[m
[32m+[m[32m###################[m
[32m+[m
[32m+[m[32mCodeIgniter is an Application Development Framework - a toolkit - for people[m
[32m+[m[32mwho build web sites using PHP. Its goal is to enable you to develop projects[m
[32m+[m[32mmuch faster than you could if you were writing code from scratch, by providing[m
[32m+[m[32ma rich set of libraries for commonly needed tasks, as well as a simple[m
[32m+[m[32minterface and logical structure to access these libraries. CodeIgniter lets[m
[32m+[m[32myou creatively focus on your project by minimizing the amount of code needed[m
[32m+[m[32mfor a given task.[m
[32m+[m
[32m+[m[32m*******************[m
[32m+[m[32mRelease Information[m
[32m+[m[32m*******************[m
[32m+[m
[32m+[m[32mThis repo contains in-development code for future releases. To download the[m
[32m+[m[32mlatest stable release please visit the `CodeIgniter Downloads[m
[32m+[m[32m<https://codeigniter.com/download>`_ page.[m
[32m+[m
[32m+[m[32m**************************[m
[32m+[m[32mChangelog and New Features[m
[32m+[m[32m**************************[m
[32m+[m
[32m+[m[32mYou can find a list of all changes for each release in the `user[m
[32m+[m[32mguide change log <https://github.com/bcit-ci/CodeIgniter/blob/develop/user_guide_src/source/changelog.rst>`_.[m
[32m+[m
[32m+[m[32m*******************[m
[32m+[m[32mServer Requirements[m
[32m+[m[32m*******************[m
[32m+[m
[32m+[m[32mPHP version 5.6 or newer is recommended.[m
[32m+[m
[32m+[m[32mIt should work on 5.3.7 as well, but we strongly advise you NOT to run[m
[32m+[m[32msuch old versions of PHP, because of potential security and performance[m
[32m+[m[32missues, as well as missing features.[m
[32m+[m
[32m+[m[32m************[m
[32m+[m[32mInstallation[m
[32m+[m[32m************[m
[32m+[m
[32m+[m[32mPlease see the `installation section <https://codeigniter.com/user_guide/installation/index.html>`_[m
[32m+[m[32mof the CodeIgniter User Guide.[m
[32m+[m
[32m+[m[32m*******[m
[32m+[m[32mLicense[m
[32m+[m[32m*******[m
[32m+[m
[32m+[m[32mPlease see the `license[m
[32m+[m[32magreement <https://github.com/bcit-ci/CodeIgniter/blob/develop/user_guide_src/source/license.rst>`_.[m
[32m+[m
[32m+[m[32m*********[m
[32m+[m[32mResources[m
[32m+[m[32m*********[m
[32m+[m
[32m+[m[32m-  `User Guide <https://codeigniter.com/docs>`_[m
[32m+[m[32m-  `Language File Translations <https://github.com/bcit-ci/codeigniter3-translations>`_[m
[32m+[m[32m-  `Community Forums <http://forum.codeigniter.com/>`_[m
[32m+[m[32m-  `Community Wiki <https://github.com/bcit-ci/CodeIgniter/wiki>`_[m
[32m+[m[32m-  `Community Slack Channel <https://codeigniterchat.slack.com>`_[m
[32m+[m
[32m+[m[32mReport security issues to our `Security Panel <mailto:security@codeigniter.com>`_[m
[32m+[m[32mor via our `page on HackerOne <https://hackerone.com/codeigniter>`_, thank you.[m
[32m+[m
[32m+[m[32m***************[m
[32m+[m[32mAcknowledgement[m
[32m+[m[32m***************[m
[32m+[m
[32m+[m[32mThe CodeIgniter team would like to thank EllisLab, all the[m
[32m+[m[32mcontributors to the CodeIgniter project and you, the CodeIgniter user.[m
[1mdiff --git a/system/.htaccess b/system/.htaccess[m
[1mnew file mode 100644[m
[1mindex 0000000..97c65d2[m
[1m--- /dev/null[m
[1m+++ b/system/.htaccess[m
[36m@@ -0,0 +1,6 @@[m
[32m+[m[32m<IfModule authz_core_module>[m
[32m+[m	[32mRequire all denied[m
[32m+[m[32m</IfModule>[m
[32m+[m[32m<IfModule !authz_core_module>[m
[32m+[m	[32mDeny from all[m
[32m+[m[32m</IfModule>[m
\ No newline at end of file[m
[1mdiff --git a/system/core/Benchmark.php b/system/core/Benchmark.php[m
[1mnew file mode 100644[m
[1mindex 0000000..d6e1336[m
[1m--- /dev/null[m
[1m+++ b/system/core/Benchmark.php[m
[36m@@ -0,0 +1,133 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Benchmark Class[m
[32m+[m[32m *[m
[32m+[m[32m * This class enables you to mark points and calculate the time difference[m
[32m+[m[32m * between them. Memory consumption can also be displayed.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Libraries[m
[32m+[m[32m * @category	Libraries[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/libraries/benchmark.html[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_Benchmark {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of all benchmark markers[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $marker = array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set a benchmark marker[m
[32m+[m	[32m *[m
[32m+[m	[32m * Multiple calls to this function can be made so that several[m
[32m+[m	[32m * execution points can be timed.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$name	Marker name[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function mark($name)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->marker[$name] = microtime(TRUE);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Elapsed time[m
[32m+[m	[32m *[m
[32m+[m	[32m * Calculates the time difference between two marked points.[m
[32m+[m	[32m *[m
[32m+[m	[32m * If the first parameter is empty this function instead returns the[m
[32m+[m	[32m * {elapsed_time} pseudo-variable. This permits the full system[m
[32m+[m	[32m * execution time to be shown in a template. The output class will[m
[32m+[m	[32m * swap the real value for this variable.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$point1		A particular marked point[m
[32m+[m	[32m * @param	string	$point2		A particular marked point[m
[32m+[m	[32m * @param	int	$decimals	Number of decimal places[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string	Calculated elapsed time on success,[m
[32m+[m	[32m *			an '{elapsed_string}' if $point1 is empty[m
[32m+[m	[32m *			or an empty string if $point1 is not found.[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function elapsed_time($point1 = '', $point2 = '', $decimals = 4)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($point1 === '')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn '{elapsed_time}';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! isset($this->marker[$point1]))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn '';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! isset($this->marker[$point2]))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->marker[$point2] = microtime(TRUE);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn number_format($this->marker[$point2] - $this->marker[$point1], $decimals);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Memory Usage[m
[32m+[m	[32m *[m
[32m+[m	[32m * Simply returns the {memory_usage} marker.[m
[32m+[m	[32m *[m
[32m+[m	[32m * This permits it to be put it anywhere in a template[m
[32m+[m	[32m * without the memory being calculated until the end.[m
[32m+[m	[32m * The output class will swap the real value for this variable.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string	'{memory_usage}'[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function memory_usage()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn '{memory_usage}';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/core/CodeIgniter.php b/system/core/CodeIgniter.php[m
[1mnew file mode 100644[m
[1mindex 0000000..7b1dcc2[m
[1m--- /dev/null[m
[1m+++ b/system/core/CodeIgniter.php[m
[36m@@ -0,0 +1,559 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * System Initialization File[m
[32m+[m[32m *[m
[32m+[m[32m * Loads the base classes and executes the request.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	CodeIgniter[m
[32m+[m[32m * @category	Front-controller[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter Version[m
[32m+[m[32m *[m
[32m+[m[32m * @var	string[m
[32m+[m[32m *[m
[32m+[m[32m */[m
[32m+[m	[32mconst CI_VERSION = '3.1.9';[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m *  Load the framework constants[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m */[m
[32m+[m	[32mif (file_exists(APPPATH.'config/'.ENVIRONMENT.'/constants.php'))[m
[32m+[m	[32m{[m
[32m+[m		[32mrequire_once(APPPATH.'config/'.ENVIRONMENT.'/constants.php');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mif (file_exists(APPPATH.'config/constants.php'))[m
[32m+[m	[32m{[m
[32m+[m		[32mrequire_once(APPPATH.'config/constants.php');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m *  Load the global functions[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m */[m
[32m+[m	[32mrequire_once(BASEPATH.'core/Common.php');[m
[32m+[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m * Security procedures[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32mif ( ! is_php('5.4'))[m
[32m+[m[32m{[m
[32m+[m	[32mini_set('magic_quotes_runtime', 0);[m
[32m+[m
[32m+[m	[32mif ((bool) ini_get('register_globals'))[m
[32m+[m	[32m{[m
[32m+[m		[32m$_protected = array([m
[32m+[m			[32m'_SERVER',[m
[32m+[m			[32m'_GET',[m
[32m+[m			[32m'_POST',[m
[32m+[m			[32m'_FILES',[m
[32m+[m			[32m'_REQUEST',[m
[32m+[m			[32m'_SESSION',[m
[32m+[m			[32m'_ENV',[m
[32m+[m			[32m'_COOKIE',[m
[32m+[m			[32m'GLOBALS',[m
[32m+[m			[32m'HTTP_RAW_POST_DATA',[m
[32m+[m			[32m'system_path',[m
[32m+[m			[32m'application_folder',[m
[32m+[m			[32m'view_folder',[m
[32m+[m			[32m'_protected',[m
[32m+[m			[32m'_registered'[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32m$_registered = ini_get('variables_order');[m
[32m+[m		[32mforeach (array('E' => '_ENV', 'G' => '_GET', 'P' => '_POST', 'C' => '_COOKIE', 'S' => '_SERVER') as $key => $superglobal)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (strpos($_registered, $key) === FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32mcontinue;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mforeach (array_keys($$superglobal) as $var)[m
[32m+[m			[32m{[m
[32m+[m				[32mif (isset($GLOBALS[$var]) && ! in_array($var, $_protected, TRUE))[m
[32m+[m				[32m{[m
[32m+[m					[32m$GLOBALS[$var] = NULL;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m *  Define a custom error handler so we can log PHP errors[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m */[m
[32m+[m	[32mset_error_handler('_error_handler');[m
[32m+[m	[32mset_exception_handler('_exception_handler');[m
[32m+[m	[32mregister_shutdown_function('_shutdown_handler');[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m *  Set the subclass_prefix[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m *[m
[32m+[m[32m * Normally the "subclass_prefix" is set in the config file.[m
[32m+[m[32m * The subclass prefix allows CI to know if a core class is[m
[32m+[m[32m * being extended via a library in the local application[m
[32m+[m[32m * "libraries" folder. Since CI allows config items to be[m
[32m+[m[32m * overridden via data set in the main index.php file,[m
[32m+[m[32m * before proceeding we need to know if a subclass_prefix[m
[32m+[m[32m * override exists. If so, we will set this value now,[m
[32m+[m[32m * before any classes are loaded[m
[32m+[m[32m * Note: Since the config file data is cached it doesn't[m
[32m+[m[32m * hurt to load it here.[m
[32m+[m[32m */[m
[32m+[m	[32mif ( ! empty($assign_to_config['subclass_prefix']))[m
[32m+[m	[32m{[m
[32m+[m		[32mget_config(array('subclass_prefix' => $assign_to_config['subclass_prefix']));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m *  Should we use a Composer autoloader?[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m */[m
[32m+[m	[32mif ($composer_autoload = config_item('composer_autoload'))[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($composer_autoload === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32mfile_exists(APPPATH.'vendor/autoload.php')[m
[32m+[m				[32m? require_once(APPPATH.'vendor/autoload.php')[m
[32m+[m				[32m: log_message('error', '$config[\'composer_autoload\'] is set to TRUE but '.APPPATH.'vendor/autoload.php was not found.');[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (file_exists($composer_autoload))[m
[32m+[m		[32m{[m
[32m+[m			[32mrequire_once($composer_autoload);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32mlog_message('error', 'Could not find the specified $config[\'composer_autoload\'] path: '.$composer_autoload);[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m *  Start the timer... tick tock tick tock...[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m */[m
[32m+[m	[32m$BM =& load_class('Benchmark', 'core');[m
[32m+[m	[32m$BM->mark('total_execution_time_start');[m
[32m+[m	[32m$BM->mark('loading_time:_base_classes_start');[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m *  Instantiate the hooks class[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m */[m
[32m+[m	[32m$EXT =& load_class('Hooks', 'core');[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m *  Is there a "pre_system" hook?[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m */[m
[32m+[m	[32m$EXT->call_hook('pre_system');[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m *  Instantiate the config class[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m *[m
[32m+[m[32m * Note: It is important that Config is loaded first as[m
[32m+[m[32m * most other classes depend on it either directly or by[m
[32m+[m[32m * depending on another class that uses it.[m
[32m+[m[32m *[m
[32m+[m[32m */[m
[32m+[m	[32m$CFG =& load_class('Config', 'core');[m
[32m+[m
[32m+[m	[32m// Do we have any manually set config items in the index.php file?[m
[32m+[m	[32mif (isset($assign_to_config) && is_array($assign_to_config))[m
[32m+[m	[32m{[m
[32m+[m		[32mforeach ($assign_to_config as $key => $value)[m
[32m+[m		[32m{[m
[32m+[m			[32m$CFG->set_item($key, $value);[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m * Important charset-related stuff[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m *[m
[32m+[m[32m * Configure mbstring and/or iconv if they are enabled[m
[32m+[m[32m * and set MB_ENABLED and ICONV_ENABLED constants, so[m
[32m+[m[32m * that we don't repeatedly do extension_loaded() or[m
[32m+[m[32m * function_exists() calls.[m
[32m+[m[32m *[m
[32m+[m[32m * Note: UTF-8 class depends on this. It used to be done[m
[32m+[m[32m * in it's constructor, but it's _not_ class-specific.[m
[32m+[m[32m *[m
[32m+[m[32m */[m
[32m+[m	[32m$charset = strtoupper(config_item('charset'));[m
[32m+[m	[32mini_set('default_charset', $charset);[m
[32m+[m
[32m+[m	[32mif (extension_loaded('mbstring'))[m
[32m+[m	[32m{[m
[32m+[m		[32mdefine('MB_ENABLED', TRUE);[m
[32m+[m		[32m// mbstring.internal_encoding is deprecated starting with PHP 5.6[m
[32m+[m		[32m// and it's usage triggers E_DEPRECATED messages.[m
[32m+[m		[32m@ini_set('mbstring.internal_encoding', $charset);[m
[32m+[m		[32m// This is required for mb_convert_encoding() to strip invalid characters.[m
[32m+[m		[32m// That's utilized by CI_Utf8, but it's also done for consistency with iconv.[m
[32m+[m		[32mmb_substitute_character('none');[m
[32m+[m	[32m}[m
[32m+[m	[32melse[m
[32m+[m	[32m{[m
[32m+[m		[32mdefine('MB_ENABLED', FALSE);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// There's an ICONV_IMPL constant, but the PHP manual says that using[m
[32m+[m	[32m// iconv's predefined constants is "strongly discouraged".[m
[32m+[m	[32mif (extension_loaded('iconv'))[m
[32m+[m	[32m{[m
[32m+[m		[32mdefine('ICONV_ENABLED', TRUE);[m
[32m+[m		[32m// iconv.internal_encoding is deprecated starting with PHP 5.6[m
[32m+[m		[32m// and it's usage triggers E_DEPRECATED messages.[m
[32m+[m		[32m@ini_set('iconv.internal_encoding', $charset);[m
[32m+[m	[32m}[m
[32m+[m	[32melse[m
[32m+[m	[32m{[m
[32m+[m		[32mdefine('ICONV_ENABLED', FALSE);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mif (is_php('5.6'))[m
[32m+[m	[32m{[m
[32m+[m		[32mini_set('php.internal_encoding', $charset);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m *  Load compatibility features[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m */[m
[32m+[m
[32m+[m	[32mrequire_once(BASEPATH.'core/compat/mbstring.php');[m
[32m+[m	[32mrequire_once(BASEPATH.'core/compat/hash.php');[m
[32m+[m	[32mrequire_once(BASEPATH.'core/compat/password.php');[m
[32m+[m	[32mrequire_once(BASEPATH.'core/compat/standard.php');[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m *  Instantiate the UTF-8 class[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m */[m
[32m+[m	[32m$UNI =& load_class('Utf8', 'core');[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m *  Instantiate the URI class[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m */[m
[32m+[m	[32m$URI =& load_class('URI', 'core');[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m *  Instantiate the routing class and set the routing[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m */[m
[32m+[m	[32m$RTR =& load_class('Router', 'core', isset($routing) ? $routing : NULL);[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m *  Instantiate the output class[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m */[m
[32m+[m	[32m$OUT =& load_class('Output', 'core');[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m *	Is there a valid cache file? If so, we're done...[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m */[m
[32m+[m	[32mif ($EXT->call_hook('cache_override') === FALSE && $OUT->_display_cache($CFG, $URI) === TRUE)[m
[32m+[m	[32m{[m
[32m+[m		[32mexit;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * -----------------------------------------------------[m
[32m+[m[32m * Load the security class for xss and csrf support[m
[32m+[m[32m * -----------------------------------------------------[m
[32m+[m[32m */[m
[32m+[m	[32m$SEC =& load_class('Security', 'core');[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m *  Load the Input class and sanitize globals[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m */[m
[32m+[m	[32m$IN	=& load_class('Input', 'core');[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m *  Load the Language class[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m */[m
[32m+[m	[32m$LANG =& load_class('Lang', 'core');[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m *  Load the app controller and local controller[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m *[m
[32m+[m[32m */[m
[32m+[m	[32m// Load the base controller class[m
[32m+[m	[32mrequire_once BASEPATH.'core/Controller.php';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Reference to the CI_Controller method.[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns current CI instance object[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return CI_Controller[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction &get_instance()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn CI_Controller::get_instance();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mif (file_exists(APPPATH.'core/'.$CFG->config['subclass_prefix'].'Controller.php'))[m
[32m+[m	[32m{[m
[32m+[m		[32mrequire_once APPPATH.'core/'.$CFG->config['subclass_prefix'].'Controller.php';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// Set a mark point for benchmarking[m
[32m+[m	[32m$BM->mark('loading_time:_base_classes_end');[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m *  Sanity checks[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m *[m
[32m+[m[32m *  The Router class has already validated the request,[m
[32m+[m[32m *  leaving us with 3 options here:[m
[32m+[m[32m *[m
[32m+[m[32m *	1) an empty class name, if we reached the default[m
[32m+[m[32m *	   controller, but it didn't exist;[m
[32m+[m[32m *	2) a query string which doesn't go through a[m
[32m+[m[32m *	   file_exists() check[m
[32m+[m[32m *	3) a regular request for a non-existing page[m
[32m+[m[32m *[m
[32m+[m[32m *  We handle all of these as a 404 error.[m
[32m+[m[32m *[m
[32m+[m[32m *  Furthermore, none of the methods in the app controller[m
[32m+[m[32m *  or the loader class can be called via the URI, nor can[m
[32m+[m[32m *  controller methods that begin with an underscore.[m
[32m+[m[32m */[m
[32m+[m
[32m+[m	[32m$e404 = FALSE;[m
[32m+[m	[32m$class = ucfirst($RTR->class);[m
[32m+[m	[32m$method = $RTR->method;[m
[32m+[m
[32m+[m	[32mif (empty($class) OR ! file_exists(APPPATH.'controllers/'.$RTR->directory.$class.'.php'))[m
[32m+[m	[32m{[m
[32m+[m		[32m$e404 = TRUE;[m
[32m+[m	[32m}[m
[32m+[m	[32melse[m
[32m+[m	[32m{[m
[32m+[m		[32mrequire_once(APPPATH.'controllers/'.$RTR->directory.$class.'.php');[m
[32m+[m
[32m+[m		[32mif ( ! class_exists($class, FALSE) OR $method[0] === '_' OR method_exists('CI_Controller', $method))[m
[32m+[m		[32m{[m
[32m+[m			[32m$e404 = TRUE;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (method_exists($class, '_remap'))[m
[32m+[m		[32m{[m
[32m+[m			[32m$params = array($method, array_slice($URI->rsegments, 2));[m
[32m+[m			[32m$method = '_remap';[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! method_exists($class, $method))[m
[32m+[m		[32m{[m
[32m+[m			[32m$e404 = TRUE;[m
[32m+[m		[32m}[m
[32m+[m		[32m/**[m
[32m+[m		[32m * DO NOT CHANGE THIS, NOTHING ELSE WORKS![m
[32m+[m		[32m *[m
[32m+[m		[32m * - method_exists() returns true for non-public methods, which passes the previous elseif[m
[32m+[m		[32m * - is_callable() returns false for PHP 4-style constructors, even if there's a __construct()[m
[32m+[m		[32m * - method_exists($class, '__construct') won't work because CI_Controller::__construct() is inherited[m
[32m+[m		[32m * - People will only complain if this doesn't work, even though it is documented that it shouldn't.[m
[32m+[m		[32m *[m
[32m+[m		[32m * ReflectionMethod::isConstructor() is the ONLY reliable check,[m
[32m+[m		[32m * knowing which method will be executed as a constructor.[m
[32m+[m		[32m */[m
[32m+[m		[32melseif ( ! is_callable(array($class, $method)))[m
[32m+[m		[32m{[m
[32m+[m			[32m$reflection = new ReflectionMethod($class, $method);[m
[32m+[m			[32mif ( ! $reflection->isPublic() OR $reflection->isConstructor())[m
[32m+[m			[32m{[m
[32m+[m				[32m$e404 = TRUE;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mif ($e404)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! empty($RTR->routes['404_override']))[m
[32m+[m		[32m{[m
[32m+[m			[32mif (sscanf($RTR->routes['404_override'], '%[^/]/%s', $error_class, $error_method) !== 2)[m
[32m+[m			[32m{[m
[32m+[m				[32m$error_method = 'index';[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$error_class = ucfirst($error_class);[m
[32m+[m
[32m+[m			[32mif ( ! class_exists($error_class, FALSE))[m
[32m+[m			[32m{[m
[32m+[m				[32mif (file_exists(APPPATH.'controllers/'.$RTR->directory.$error_class.'.php'))[m
[32m+[m				[32m{[m
[32m+[m					[32mrequire_once(APPPATH.'controllers/'.$RTR->directory.$error_class.'.php');[m
[32m+[m					[32m$e404 = ! class_exists($error_class, FALSE);[m
[32m+[m				[32m}[m
[32m+[m				[32m// Were we in a directory? If so, check for a global override[m
[32m+[m				[32melseif ( ! empty($RTR->directory) && file_exists(APPPATH.'controllers/'.$error_class.'.php'))[m
[32m+[m				[32m{[m
[32m+[m					[32mrequire_once(APPPATH.'controllers/'.$error_class.'.php');[m
[32m+[m					[32mif (($e404 = ! class_exists($error_class, FALSE)) === FALSE)[m
[32m+[m					[32m{[m
[32m+[m						[32m$RTR->directory = '';[m
[32m+[m					[32m}[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$e404 = FALSE;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Did we reset the $e404 flag? If so, set the rsegments, starting from index 1[m
[32m+[m		[32mif ( ! $e404)[m
[32m+[m		[32m{[m
[32m+[m			[32m$class = $error_class;[m
[32m+[m			[32m$method = $error_method;[m
[32m+[m
[32m+[m			[32m$URI->rsegments = array([m
[32m+[m				[32m1 => $class,[m
[32m+[m				[32m2 => $method[m
[32m+[m			[32m);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32mshow_404($RTR->directory.$class.'/'.$method);[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mif ($method !== '_remap')[m
[32m+[m	[32m{[m
[32m+[m		[32m$params = array_slice($URI->rsegments, 2);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m *  Is there a "pre_controller" hook?[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m */[m
[32m+[m	[32m$EXT->call_hook('pre_controller');[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m *  Instantiate the requested controller[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m */[m
[32m+[m	[32m// Mark a start point so we can benchmark the controller[m
[32m+[m	[32m$BM->mark('controller_execution_time_( '.$class.' / '.$method.' )_start');[m
[32m+[m
[32m+[m	[32m$CI = new $class();[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m *  Is there a "post_controller_constructor" hook?[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m */[m
[32m+[m	[32m$EXT->call_hook('post_controller_constructor');[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m *  Call the requested method[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m */[m
[32m+[m	[32mcall_user_func_array(array(&$CI, $method), $params);[m
[32m+[m
[32m+[m	[32m// Mark a benchmark end point[m
[32m+[m	[32m$BM->mark('controller_execution_time_( '.$class.' / '.$method.' )_end');[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m *  Is there a "post_controller" hook?[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m */[m
[32m+[m	[32m$EXT->call_hook('post_controller');[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m *  Send the final rendered output to the browser[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m */[m
[32m+[m	[32mif ($EXT->call_hook('display_override') === FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$OUT->_display();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m *  Is there a "post_system" hook?[m
[32m+[m[32m * ------------------------------------------------------[m
[32m+[m[32m */[m
[32m+[m	[32m$EXT->call_hook('post_system');[m
[1mdiff --git a/system/core/Common.php b/system/core/Common.php[m
[1mnew file mode 100644[m
[1mindex 0000000..6d60f23[m
[1m--- /dev/null[m
[1m+++ b/system/core/Common.php[m
[36m@@ -0,0 +1,849 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Common Functions[m
[32m+[m[32m *[m
[32m+[m[32m * Loads the base classes and executes the request.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	CodeIgniter[m
[32m+[m[32m * @category	Common Functions[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('is_php'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Determines if the current version of PHP is equal to or greater than the supplied value[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	bool	TRUE if the current version is $version or higher[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction is_php($version)[m
[32m+[m	[32m{[m
[32m+[m		[32mstatic $_is_php;[m
[32m+[m		[32m$version = (string) $version;[m
[32m+[m
[32m+[m		[32mif ( ! isset($_is_php[$version]))[m
[32m+[m		[32m{[m
[32m+[m			[32m$_is_php[$version] = version_compare(PHP_VERSION, $version, '>=');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $_is_php[$version];[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('is_really_writable'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Tests for file writability[m
[32m+[m	[32m *[m
[32m+[m	[32m * is_writable() returns TRUE on Windows servers when you really can't write to[m
[32m+[m	[32m * the file, based on the read-only attribute. is_writable() is also unreliable[m
[32m+[m	[32m * on Unix servers if safe_mode is on.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @link	https://bugs.php.net/bug.php?id=54709[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction is_really_writable($file)[m
[32m+[m	[32m{[m
[32m+[m		[32m// If we're on a Unix server with safe_mode off we call is_writable[m
[32m+[m		[32mif (DIRECTORY_SEPARATOR === '/' && (is_php('5.4') OR ! ini_get('safe_mode')))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn is_writable($file);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m/* For Windows servers and safe_mode "on" installations we'll actually[m
[32m+[m		[32m * write a file then read it. Bah...[m
[32m+[m		[32m */[m
[32m+[m		[32mif (is_dir($file))[m
[32m+[m		[32m{[m
[32m+[m			[32m$file = rtrim($file, '/').'/'.md5(mt_rand());[m
[32m+[m			[32mif (($fp = @fopen($file, 'ab')) === FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mfclose($fp);[m
[32m+[m			[32m@chmod($file, 0777);[m
[32m+[m			[32m@unlink($file);[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! is_file($file) OR ($fp = @fopen($file, 'ab')) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mfclose($fp);[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('load_class'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class registry[m
[32m+[m	[32m *[m
[32m+[m	[32m * This function acts as a singleton. If the requested class does not[m
[32m+[m	[32m * exist it is instantiated and set to a static variable. If it has[m
[32m+[m	[32m * previously been instantiated the variable is returned.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the class name being requested[m
[32m+[m	[32m * @param	string	the directory where the class should be found[m
[32m+[m	[32m * @param	mixed	an optional argument to pass to the class constructor[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction &load_class($class, $directory = 'libraries', $param = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mstatic $_classes = array();[m
[32m+[m
[32m+[m		[32m// Does the class exist? If so, we're done...[m
[32m+[m		[32mif (isset($_classes[$class]))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $_classes[$class];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$name = FALSE;[m
[32m+[m
[32m+[m		[32m// Look for the class first in the local application/libraries folder[m
[32m+[m		[32m// then in the native system/libraries folder[m
[32m+[m		[32mforeach (array(APPPATH, BASEPATH) as $path)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (file_exists($path.$directory.'/'.$class.'.php'))[m
[32m+[m			[32m{[m
[32m+[m				[32m$name = 'CI_'.$class;[m
[32m+[m
[32m+[m				[32mif (class_exists($name, FALSE) === FALSE)[m
[32m+[m				[32m{[m
[32m+[m					[32mrequire_once($path.$directory.'/'.$class.'.php');[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mbreak;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Is the request a class extension? If so we load it too[m
[32m+[m		[32mif (file_exists(APPPATH.$directory.'/'.config_item('subclass_prefix').$class.'.php'))[m
[32m+[m		[32m{[m
[32m+[m			[32m$name = config_item('subclass_prefix').$class;[m
[32m+[m
[32m+[m			[32mif (class_exists($name, FALSE) === FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32mrequire_once(APPPATH.$directory.'/'.$name.'.php');[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Did we find the class?[m
[32m+[m		[32mif ($name === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m// Note: We use exit() rather than show_error() in order to avoid a[m
[32m+[m			[32m// self-referencing loop with the Exceptions class[m
[32m+[m			[32mset_status_header(503);[m
[32m+[m			[32mecho 'Unable to locate the specified class: '.$class.'.php';[m
[32m+[m			[32mexit(5); // EXIT_UNK_CLASS[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Keep track of what we just loaded[m
[32m+[m		[32mis_loaded($class);[m
[32m+[m
[32m+[m		[32m$_classes[$class] = isset($param)[m
[32m+[m			[32m? new $name($param)[m
[32m+[m			[32m: new $name();[m
[32m+[m		[32mreturn $_classes[$class];[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('is_loaded'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Keeps track of which libraries have been loaded. This function is[m
[32m+[m	[32m * called by the load_class() function above[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction &is_loaded($class = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mstatic $_is_loaded = array();[m
[32m+[m
[32m+[m		[32mif ($class !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$_is_loaded[strtolower($class)] = $class;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $_is_loaded;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('get_config'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Loads the main config.php file[m
[32m+[m	[32m *[m
[32m+[m	[32m * This function lets us grab the config file even if the Config class[m
[32m+[m	[32m * hasn't been instantiated yet[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction &get_config(Array $replace = array())[m
[32m+[m	[32m{[m
[32m+[m		[32mstatic $config;[m
[32m+[m
[32m+[m		[32mif (empty($config))[m
[32m+[m		[32m{[m
[32m+[m			[32m$file_path = APPPATH.'config/config.php';[m
[32m+[m			[32m$found = FALSE;[m
[32m+[m			[32mif (file_exists($file_path))[m
[32m+[m			[32m{[m
[32m+[m				[32m$found = TRUE;[m
[32m+[m				[32mrequire($file_path);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// Is the config file in the environment folder?[m
[32m+[m			[32mif (file_exists($file_path = APPPATH.'config/'.ENVIRONMENT.'/config.php'))[m
[32m+[m			[32m{[m
[32m+[m				[32mrequire($file_path);[m
[32m+[m			[32m}[m
[32m+[m			[32melseif ( ! $found)[m
[32m+[m			[32m{[m
[32m+[m				[32mset_status_header(503);[m
[32m+[m				[32mecho 'The configuration file does not exist.';[m
[32m+[m				[32mexit(3); // EXIT_CONFIG[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// Does the $config array exist in the file?[m
[32m+[m			[32mif ( ! isset($config) OR ! is_array($config))[m
[32m+[m			[32m{[m
[32m+[m				[32mset_status_header(503);[m
[32m+[m				[32mecho 'Your config file does not appear to be formatted correctly.';[m
[32m+[m				[32mexit(3); // EXIT_CONFIG[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Are any values being dynamically added or replaced?[m
[32m+[m		[32mforeach ($replace as $key => $val)[m
[32m+[m		[32m{[m
[32m+[m			[32m$config[$key] = $val;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $config;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('config_item'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns the specified config item[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction config_item($item)[m
[32m+[m	[32m{[m
[32m+[m		[32mstatic $_config;[m
[32m+[m
[32m+[m		[32mif (empty($_config))[m
[32m+[m		[32m{[m
[32m+[m			[32m// references cannot be directly assigned to static variables, so we use an array[m
[32m+[m			[32m$_config[0] =& get_config();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn isset($_config[0][$item]) ? $_config[0][$item] : NULL;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('get_mimes'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns the MIME types array from config/mimes.php[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction &get_mimes()[m
[32m+[m	[32m{[m
[32m+[m		[32mstatic $_mimes;[m
[32m+[m
[32m+[m		[32mif (empty($_mimes))[m
[32m+[m		[32m{[m
[32m+[m			[32m$_mimes = file_exists(APPPATH.'config/mimes.php')[m
[32m+[m				[32m? include(APPPATH.'config/mimes.php')[m
[32m+[m				[32m: array();[m
[32m+[m
[32m+[m			[32mif (file_exists(APPPATH.'config/'.ENVIRONMENT.'/mimes.php'))[m
[32m+[m			[32m{[m
[32m+[m				[32m$_mimes = array_merge($_mimes, include(APPPATH.'config/'.ENVIRONMENT.'/mimes.php'));[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $_mimes;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('is_https'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Is HTTPS?[m
[32m+[m	[32m *[m
[32m+[m	[32m * Determines if the application is accessed via an encrypted[m
[32m+[m	[32m * (HTTPS) connection.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction is_https()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! empty($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) !== 'off')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (isset($_SERVER['HTTP_X_FORWARDED_PROTO']) && strtolower($_SERVER['HTTP_X_FORWARDED_PROTO']) === 'https')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! empty($_SERVER['HTTP_FRONT_END_HTTPS']) && strtolower($_SERVER['HTTP_FRONT_END_HTTPS']) !== 'off')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('is_cli'))[m
[32m+[m[32m{[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Is CLI?[m
[32m+[m	[32m *[m
[32m+[m	[32m * Test to see if a request was made from the command line.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return 	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction is_cli()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn (PHP_SAPI === 'cli' OR defined('STDIN'));[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('show_error'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Error Handler[m
[32m+[m	[32m *[m
[32m+[m	[32m * This function lets us invoke the exception class and[m
[32m+[m	[32m * display errors using the standard error template located[m
[32m+[m	[32m * in application/views/errors/error_general.php[m
[32m+[m	[32m * This function will send the error page directly to the[m
[32m+[m	[32m * browser and exit.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	int[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction show_error($message, $status_code = 500, $heading = 'An Error Was Encountered')[m
[32m+[m	[32m{[m
[32m+[m		[32m$status_code = abs($status_code);[m
[32m+[m		[32mif ($status_code < 100)[m
[32m+[m		[32m{[m
[32m+[m			[32m$exit_status = $status_code + 9; // 9 is EXIT__AUTO_MIN[m
[32m+[m			[32m$status_code = 500;[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$exit_status = 1; // EXIT_ERROR[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$_error =& load_class('Exceptions', 'core');[m
[32m+[m		[32mecho $_error->show_error($heading, $message, 'error_general', $status_code);[m
[32m+[m		[32mexit($exit_status);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('show_404'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * 404 Page Handler[m
[32m+[m	[32m *[m
[32m+[m	[32m * This function is similar to the show_error() function above[m
[32m+[m	[32m * However, instead of the standard error template it displays[m
[32m+[m	[32m * 404 errors.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	bool[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction show_404($page = '', $log_error = TRUE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$_error =& load_class('Exceptions', 'core');[m
[32m+[m		[32m$_error->show_404($page, $log_error);[m
[32m+[m		[32mexit(4); // EXIT_UNKNOWN_FILE[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('log_message'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Error Logging Interface[m
[32m+[m	[32m *[m
[32m+[m	[32m * We use this as a simple mechanism to access the logging[m
[32m+[m	[32m * class and send messages to be logged.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the error level: 'error', 'debug' or 'info'[m
[32m+[m	[32m * @param	string	the error message[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction log_message($level, $message)[m
[32m+[m	[32m{[m
[32m+[m		[32mstatic $_log;[m
[32m+[m
[32m+[m		[32mif ($_log === NULL)[m
[32m+[m		[32m{[m
[32m+[m			[32m// references cannot be directly assigned to static variables, so we use an array[m
[32m+[m			[32m$_log[0] =& load_class('Log', 'core');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$_log[0]->write_log($level, $message);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('set_status_header'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set HTTP Status Header[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	the status code[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction set_status_header($code = 200, $text = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif (is_cli())[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (empty($code) OR ! is_numeric($code))[m
[32m+[m		[32m{[m
[32m+[m			[32mshow_error('Status codes must be numeric', 500);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (empty($text))[m
[32m+[m		[32m{[m
[32m+[m			[32mis_int($code) OR $code = (int) $code;[m
[32m+[m			[32m$stati = array([m
[32m+[m				[32m100	=> 'Continue',[m
[32m+[m				[32m101	=> 'Switching Protocols',[m
[32m+[m
[32m+[m				[32m200	=> 'OK',[m
[32m+[m				[32m201	=> 'Created',[m
[32m+[m				[32m202	=> 'Accepted',[m
[32m+[m				[32m203	=> 'Non-Authoritative Information',[m
[32m+[m				[32m204	=> 'No Content',[m
[32m+[m				[32m205	=> 'Reset Content',[m
[32m+[m				[32m206	=> 'Partial Content',[m
[32m+[m
[32m+[m				[32m300	=> 'Multiple Choices',[m
[32m+[m				[32m301	=> 'Moved Permanently',[m
[32m+[m				[32m302	=> 'Found',[m
[32m+[m				[32m303	=> 'See Other',[m
[32m+[m				[32m304	=> 'Not Modified',[m
[32m+[m				[32m305	=> 'Use Proxy',[m
[32m+[m				[32m307	=> 'Temporary Redirect',[m
[32m+[m
[32m+[m				[32m400	=> 'Bad Request',[m
[32m+[m				[32m401	=> 'Unauthorized',[m
[32m+[m				[32m402	=> 'Payment Required',[m
[32m+[m				[32m403	=> 'Forbidden',[m
[32m+[m				[32m404	=> 'Not Found',[m
[32m+[m				[32m405	=> 'Method Not Allowed',[m
[32m+[m				[32m406	=> 'Not Acceptable',[m
[32m+[m				[32m407	=> 'Proxy Authentication Required',[m
[32m+[m				[32m408	=> 'Request Timeout',[m
[32m+[m				[32m409	=> 'Conflict',[m
[32m+[m				[32m410	=> 'Gone',[m
[32m+[m				[32m411	=> 'Length Required',[m
[32m+[m				[32m412	=> 'Precondition Failed',[m
[32m+[m				[32m413	=> 'Request Entity Too Large',[m
[32m+[m				[32m414	=> 'Request-URI Too Long',[m
[32m+[m				[32m415	=> 'Unsupported Media Type',[m
[32m+[m				[32m416	=> 'Requested Range Not Satisfiable',[m
[32m+[m				[32m417	=> 'Expectation Failed',[m
[32m+[m				[32m422	=> 'Unprocessable Entity',[m
[32m+[m				[32m426	=> 'Upgrade Required',[m
[32m+[m				[32m428	=> 'Precondition Required',[m
[32m+[m				[32m429	=> 'Too Many Requests',[m
[32m+[m				[32m431	=> 'Request Header Fields Too Large',[m
[32m+[m
[32m+[m				[32m500	=> 'Internal Server Error',[m
[32m+[m				[32m501	=> 'Not Implemented',[m
[32m+[m				[32m502	=> 'Bad Gateway',[m
[32m+[m				[32m503	=> 'Service Unavailable',[m
[32m+[m				[32m504	=> 'Gateway Timeout',[m
[32m+[m				[32m505	=> 'HTTP Version Not Supported',[m
[32m+[m				[32m511	=> 'Network Authentication Required',[m
[32m+[m			[32m);[m
[32m+[m
[32m+[m			[32mif (isset($stati[$code]))[m
[32m+[m			[32m{[m
[32m+[m				[32m$text = $stati[$code];[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32mshow_error('No status text available. Please check your status code number or supply your own message text.', 500);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (strpos(PHP_SAPI, 'cgi') === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mheader('Status: '.$code.' '.$text, TRUE);[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$server_protocol = (isset($_SERVER['SERVER_PROTOCOL']) && in_array($_SERVER['SERVER_PROTOCOL'], array('HTTP/1.0', 'HTTP/1.1', 'HTTP/2'), TRUE))[m
[32m+[m			[32m? $_SERVER['SERVER_PROTOCOL'] : 'HTTP/1.1';[m
[32m+[m		[32mheader($server_protocol.' '.$code.' '.$text, TRUE, $code);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('_error_handler'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Error Handler[m
[32m+[m	[32m *[m
[32m+[m	[32m * This is the custom error handler that is declared at the (relative)[m
[32m+[m	[32m * top of CodeIgniter.php. The main reason we use this is to permit[m
[32m+[m	[32m * PHP errors to be logged in our own log files since the user may[m
[32m+[m	[32m * not have access to server logs. Since this function effectively[m
[32m+[m	[32m * intercepts PHP errors, however, we also need to display errors[m
[32m+[m	[32m * based on the current error_reporting level.[m
[32m+[m	[32m * We do that with the use of a PHP error template.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	$severity[m
[32m+[m	[32m * @param	string	$message[m
[32m+[m	[32m * @param	string	$filepath[m
[32m+[m	[32m * @param	int	$line[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction _error_handler($severity, $message, $filepath, $line)[m
[32m+[m	[32m{[m
[32m+[m		[32m$is_error = (((E_ERROR | E_PARSE | E_COMPILE_ERROR | E_CORE_ERROR | E_USER_ERROR) & $severity) === $severity);[m
[32m+[m
[32m+[m		[32m// When an error occurred, set the status header to '500 Internal Server Error'[m
[32m+[m		[32m// to indicate to the client something went wrong.[m
[32m+[m		[32m// This can't be done within the $_error->show_php_error method because[m
[32m+[m		[32m// it is only called when the display_errors flag is set (which isn't usually[m
[32m+[m		[32m// the case in a production environment) or when errors are ignored because[m
[32m+[m		[32m// they are above the error_reporting threshold.[m
[32m+[m		[32mif ($is_error)[m
[32m+[m		[32m{[m
[32m+[m			[32mset_status_header(500);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Should we ignore the error? We'll get the current error_reporting[m
[32m+[m		[32m// level and add its bits with the severity bits to find out.[m
[32m+[m		[32mif (($severity & error_reporting()) !== $severity)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$_error =& load_class('Exceptions', 'core');[m
[32m+[m		[32m$_error->log_exception($severity, $message, $filepath, $line);[m
[32m+[m
[32m+[m		[32m// Should we display the error?[m
[32m+[m		[32mif (str_ireplace(array('off', 'none', 'no', 'false', 'null'), '', ini_get('display_errors')))[m
[32m+[m		[32m{[m
[32m+[m			[32m$_error->show_php_error($severity, $message, $filepath, $line);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// If the error is fatal, the execution of the script should be stopped because[m
[32m+[m		[32m// errors can't be recovered from. Halting the script conforms with PHP's[m
[32m+[m		[32m// default error handling. See http://www.php.net/manual/en/errorfunc.constants.php[m
[32m+[m		[32mif ($is_error)[m
[32m+[m		[32m{[m
[32m+[m			[32mexit(1); // EXIT_ERROR[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('_exception_handler'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Exception Handler[m
[32m+[m	[32m *[m
[32m+[m	[32m * Sends uncaught exceptions to the logger and displays them[m
[32m+[m	[32m * only if display_errors is On so that they don't show up in[m
[32m+[m	[32m * production environments.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	Exception	$exception[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction _exception_handler($exception)[m
[32m+[m	[32m{[m
[32m+[m		[32m$_error =& load_class('Exceptions', 'core');[m
[32m+[m		[32m$_error->log_exception('error', 'Exception: '.$exception->getMessage(), $exception->getFile(), $exception->getLine());[m
[32m+[m
[32m+[m		[32mis_cli() OR set_status_header(500);[m
[32m+[m		[32m// Should we display the error?[m
[32m+[m		[32mif (str_ireplace(array('off', 'none', 'no', 'false', 'null'), '', ini_get('display_errors')))[m
[32m+[m		[32m{[m
[32m+[m			[32m$_error->show_exception($exception);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mexit(1); // EXIT_ERROR[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('_shutdown_handler'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Shutdown Handler[m
[32m+[m	[32m *[m
[32m+[m	[32m * This is the shutdown handler that is declared at the top[m
[32m+[m	[32m * of CodeIgniter.php. The main reason we use this is to simulate[m
[32m+[m	[32m * a complete custom exception handler.[m
[32m+[m	[32m *[m
[32m+[m	[32m * E_STRICT is purposively neglected because such events may have[m
[32m+[m	[32m * been caught. Duplication or none? None is preferred for now.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @link	http://insomanic.me.uk/post/229851073/php-trick-catching-fatal-errors-e-error-with-a[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction _shutdown_handler()[m
[32m+[m	[32m{[m
[32m+[m		[32m$last_error = error_get_last();[m
[32m+[m		[32mif (isset($last_error) &&[m
[32m+[m			[32m($last_error['type'] & (E_ERROR | E_PARSE | E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_COMPILE_WARNING)))[m
[32m+[m		[32m{[m
[32m+[m			[32m_error_handler($last_error['type'], $last_error['message'], $last_error['file'], $last_error['line']);[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('remove_invisible_characters'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Remove Invisible Characters[m
[32m+[m	[32m *[m
[32m+[m	[32m * This prevents sandwiching null characters[m
[32m+[m	[32m * between ascii characters, like Java\0script.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	bool[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction remove_invisible_characters($str, $url_encoded = TRUE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$non_displayables = array();[m
[32m+[m
[32m+[m		[32m// every control character except newline (dec 10),[m
[32m+[m		[32m// carriage return (dec 13) and horizontal tab (dec 09)[m
[32m+[m		[32mif ($url_encoded)[m
[32m+[m		[32m{[m
[32m+[m			[32m$non_displayables[] = '/%0[0-8bcef]/i';	// url encoded 00-08, 11, 12, 14, 15[m
[32m+[m			[32m$non_displayables[] = '/%1[0-9a-f]/i';	// url encoded 16-31[m
[32m+[m			[32m$non_displayables[] = '/%7f/i';	// url encoded 127[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$non_displayables[] = '/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]+/S';	// 00-08, 11, 12, 14-31, 127[m
[32m+[m
[32m+[m		[32mdo[m
[32m+[m		[32m{[m
[32m+[m			[32m$str = preg_replace($non_displayables, '', $str, -1, $count);[m
[32m+[m		[32m}[m
[32m+[m		[32mwhile ($count);[m
[32m+[m
[32m+[m		[32mreturn $str;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('html_escape'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns HTML escaped variable.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	$var		The input string or array of strings to be escaped.[m
[32m+[m	[32m * @param	bool	$double_encode	$double_encode set to FALSE prevents escaping twice.[m
[32m+[m	[32m * @return	mixed			The escaped string or array of strings as a result.[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction html_escape($var, $double_encode = TRUE)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (empty($var))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $var;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (is_array($var))[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach (array_keys($var) as $key)[m
[32m+[m			[32m{[m
[32m+[m				[32m$var[$key] = html_escape($var[$key], $double_encode);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn $var;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn htmlspecialchars($var, ENT_QUOTES, config_item('charset'), $double_encode);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('_stringify_attributes'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Stringify attributes for use in HTML tags.[m
[32m+[m	[32m *[m
[32m+[m	[32m * Helper function used to convert a string, array, or object[m
[32m+[m	[32m * of attributes to a string.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	string, array, object[m
[32m+[m	[32m * @param	bool[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction _stringify_attributes($attributes, $js = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$atts = NULL;[m
[32m+[m
[32m+[m		[32mif (empty($attributes))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $atts;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (is_string($attributes))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ' '.$attributes;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$attributes = (array) $attributes;[m
[32m+[m
[32m+[m		[32mforeach ($attributes as $key => $val)[m
[32m+[m		[32m{[m
[32m+[m			[32m$atts .= ($js) ? $key.'='.$val.',' : ' '.$key.'="'.$val.'"';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn rtrim($atts, ',');[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('function_usable'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Function usable[m
[32m+[m	[32m *[m
[32m+[m	[32m * Executes a function_exists() check, and if the Suhosin PHP[m
[32m+[m	[32m * extension is loaded - checks whether the function that is[m
[32m+[m	[32m * checked might be disabled in there as well.[m
[32m+[m	[32m *[m
[32m+[m	[32m * This is useful as function_exists() will return FALSE for[m
[32m+[m	[32m * functions disabled via the *disable_functions* php.ini[m
[32m+[m	[32m * setting, but not for *suhosin.executor.func.blacklist* and[m
[32m+[m	[32m * *suhosin.executor.disable_eval*. These settings will just[m
[32m+[m	[32m * terminate script execution if a disabled function is executed.[m
[32m+[m	[32m *[m
[32m+[m	[32m * The above described behavior turned out to be a bug in Suhosin,[m
[32m+[m	[32m * but even though a fix was committed for 0.9.34 on 2012-02-12,[m
[32m+[m	[32m * that version is yet to be released. This function will therefore[m
[32m+[m	[32m * be just temporary, but would probably be kept for a few years.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @link	http://www.hardened-php.net/suhosin/[m
[32m+[m	[32m * @param	string	$function_name	Function to check for[m
[32m+[m	[32m * @return	bool	TRUE if the function exists and is safe to call,[m
[32m+[m	[32m *			FALSE otherwise.[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction function_usable($function_name)[m
[32m+[m	[32m{[m
[32m+[m		[32mstatic $_suhosin_func_blacklist;[m
[32m+[m
[32m+[m		[32mif (function_exists($function_name))[m
[32m+[m		[32m{[m
[32m+[m			[32mif ( ! isset($_suhosin_func_blacklist))[m
[32m+[m			[32m{[m
[32m+[m				[32m$_suhosin_func_blacklist = extension_loaded('suhosin')[m
[32m+[m					[32m? explode(',', trim(ini_get('suhosin.executor.func.blacklist')))[m
[32m+[m					[32m: array();[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn ! in_array($function_name, $_suhosin_func_blacklist, TRUE);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/core/Config.php b/system/core/Config.php[m
[1mnew file mode 100644[m
[1mindex 0000000..8136dd2[m
[1m--- /dev/null[m
[1m+++ b/system/core/Config.php[m
[36m@@ -0,0 +1,379 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Config Class[m
[32m+[m[32m *[m
[32m+[m[32m * This class contains functions that enable config files to be managed[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Libraries[m
[32m+[m[32m * @category	Libraries[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/libraries/config.html[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_Config {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of all loaded config values[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $config = array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of all loaded config files[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $is_loaded =	array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of paths to search when trying to load a config file.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @used-by	CI_Loader[m
[32m+[m	[32m * @var		array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $_config_paths =	array(APPPATH);[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * Sets the $config data from the primary config.php file as a class variable.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->config =& get_config();[m
[32m+[m
[32m+[m		[32m// Set the base_url automatically if none was provided[m
[32m+[m		[32mif (empty($this->config['base_url']))[m
[32m+[m		[32m{[m
[32m+[m			[32mif (isset($_SERVER['SERVER_ADDR']))[m
[32m+[m			[32m{[m
[32m+[m				[32mif (strpos($_SERVER['SERVER_ADDR'], ':') !== FALSE)[m
[32m+[m				[32m{[m
[32m+[m					[32m$server_addr = '['.$_SERVER['SERVER_ADDR'].']';[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32m$server_addr = $_SERVER['SERVER_ADDR'];[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m$base_url = (is_https() ? 'https' : 'http').'://'.$server_addr[m
[32m+[m					[32m.substr($_SERVER['SCRIPT_NAME'], 0, strpos($_SERVER['SCRIPT_NAME'], basename($_SERVER['SCRIPT_FILENAME'])));[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$base_url = 'http://localhost/';[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$this->set_item('base_url', $base_url);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mlog_message('info', 'Config Class Initialized');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Load Config File[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$file			Configuration file name[m
[32m+[m	[32m * @param	bool	$use_sections		Whether configuration values should be loaded into their own section[m
[32m+[m	[32m * @param	bool	$fail_gracefully	Whether to just return FALSE or display an error message[m
[32m+[m	[32m * @return	bool	TRUE if the file was loaded correctly or FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function load($file = '', $use_sections = FALSE, $fail_gracefully = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$file = ($file === '') ? 'config' : str_replace('.php', '', $file);[m
[32m+[m		[32m$loaded = FALSE;[m
[32m+[m
[32m+[m		[32mforeach ($this->_config_paths as $path)[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach (array($file, ENVIRONMENT.DIRECTORY_SEPARATOR.$file) as $location)[m
[32m+[m			[32m{[m
[32m+[m				[32m$file_path = $path.'config/'.$location.'.php';[m
[32m+[m				[32mif (in_array($file_path, $this->is_loaded, TRUE))[m
[32m+[m				[32m{[m
[32m+[m					[32mreturn TRUE;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mif ( ! file_exists($file_path))[m
[32m+[m				[32m{[m
[32m+[m					[32mcontinue;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32minclude($file_path);[m
[32m+[m
[32m+[m				[32mif ( ! isset($config) OR ! is_array($config))[m
[32m+[m				[32m{[m
[32m+[m					[32mif ($fail_gracefully === TRUE)[m
[32m+[m					[32m{[m
[32m+[m						[32mreturn FALSE;[m
[32m+[m					[32m}[m
[32m+[m
[32m+[m					[32mshow_error('Your '.$file_path.' file does not appear to contain a valid configuration array.');[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mif ($use_sections === TRUE)[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->config[$file] = isset($this->config[$file])[m
[32m+[m						[32m? array_merge($this->config[$file], $config)[m
[32m+[m						[32m: $config;[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->config = array_merge($this->config, $config);[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m$this->is_loaded[] = $file_path;[m
[32m+[m				[32m$config = NULL;[m
[32m+[m				[32m$loaded = TRUE;[m
[32m+[m				[32mlog_message('debug', 'Config file loaded: '.$file_path);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($loaded === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($fail_gracefully === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mshow_error('The configuration file '.$file.'.php does not exist.');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch a config file item[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$item	Config item name[m
[32m+[m	[32m * @param	string	$index	Index name[m
[32m+[m	[32m * @return	string|null	The configuration item or NULL if the item doesn't exist[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function item($item, $index = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($index == '')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn isset($this->config[$item]) ? $this->config[$item] : NULL;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn isset($this->config[$index], $this->config[$index][$item]) ? $this->config[$index][$item] : NULL;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch a config file item with slash appended (if not empty)[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string		$item	Config item name[m
[32m+[m	[32m * @return	string|null	The configuration item or NULL if the item doesn't exist[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function slash_item($item)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! isset($this->config[$item]))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn NULL;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (trim($this->config[$item]) === '')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn '';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn rtrim($this->config[$item], '/').'/';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Site URL[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns base_url . index_page [. uri_string][m
[32m+[m	[32m *[m
[32m+[m	[32m * @uses	CI_Config::_uri_string()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string|string[]	$uri	URI string or an array of segments[m
[32m+[m	[32m * @param	string	$protocol[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function site_url($uri = '', $protocol = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32m$base_url = $this->slash_item('base_url');[m
[32m+[m
[32m+[m		[32mif (isset($protocol))[m
[32m+[m		[32m{[m
[32m+[m			[32m// For protocol-relative links[m
[32m+[m			[32mif ($protocol === '')[m
[32m+[m			[32m{[m
[32m+[m				[32m$base_url = substr($base_url, strpos($base_url, '//'));[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$base_url = $protocol.substr($base_url, strpos($base_url, '://'));[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (empty($uri))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $base_url.$this->item('index_page');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$uri = $this->_uri_string($uri);[m
[32m+[m
[32m+[m		[32mif ($this->item('enable_query_strings') === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$suffix = isset($this->config['url_suffix']) ? $this->config['url_suffix'] : '';[m
[32m+[m
[32m+[m			[32mif ($suffix !== '')[m
[32m+[m			[32m{[m
[32m+[m				[32mif (($offset = strpos($uri, '?')) !== FALSE)[m
[32m+[m				[32m{[m
[32m+[m					[32m$uri = substr($uri, 0, $offset).$suffix.substr($uri, $offset);[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32m$uri .= $suffix;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn $base_url.$this->slash_item('index_page').$uri;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (strpos($uri, '?') === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$uri = '?'.$uri;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $base_url.$this->item('index_page').$uri;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// -------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Base URL[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns base_url [. uri_string][m
[32m+[m	[32m *[m
[32m+[m	[32m * @uses	CI_Config::_uri_string()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string|string[]	$uri	URI string or an array of segments[m
[32m+[m	[32m * @param	string	$protocol[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function base_url($uri = '', $protocol = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32m$base_url = $this->slash_item('base_url');[m
[32m+[m
[32m+[m		[32mif (isset($protocol))[m
[32m+[m		[32m{[m
[32m+[m			[32m// For protocol-relative links[m
[32m+[m			[32mif ($protocol === '')[m
[32m+[m			[32m{[m
[32m+[m				[32m$base_url = substr($base_url, strpos($base_url, '//'));[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$base_url = $protocol.substr($base_url, strpos($base_url, '://'));[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $base_url.$this->_uri_string($uri);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// -------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Build URI string[m
[32m+[m	[32m *[m
[32m+[m	[32m * @used-by	CI_Config::site_url()[m
[32m+[m	[32m * @used-by	CI_Config::base_url()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string|string[]	$uri	URI string or an array of segments[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _uri_string($uri)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->item('enable_query_strings') === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mis_array($uri) && $uri = implode('/', $uri);[m
[32m+[m			[32mreturn ltrim($uri, '/');[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (is_array($uri))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn http_build_query($uri);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $uri;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * System URL[m
[32m+[m	[32m *[m
[32m+[m	[32m * @deprecated	3.0.0	Encourages insecure practices[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function system_url()[m
[32m+[m	[32m{[m
[32m+[m		[32m$x = explode('/', preg_replace('|/*(.+?)/*$|', '\\1', BASEPATH));[m
[32m+[m		[32mreturn $this->slash_item('base_url').end($x).'/';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set a config file item[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$item	Config item key[m
[32m+[m	[32m * @param	string	$value	Config item value[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_item($item, $value)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->config[$item] = $value;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/core/Controller.php b/system/core/Controller.php[m
[1mnew file mode 100644[m
[1mindex 0000000..ec9aa2a[m
[1m--- /dev/null[m
[1m+++ b/system/core/Controller.php[m
[36m@@ -0,0 +1,96 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Application Controller Class[m
[32m+[m[32m *[m
[32m+[m[32m * This class object is the super class that every library in[m
[32m+[m[32m * CodeIgniter will be assigned to.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Libraries[m
[32m+[m[32m * @category	Libraries[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/general/controllers.html[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_Controller {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Reference to the CI singleton[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	object[m
[32m+[m	[32m */[m
[32m+[m	[32mprivate static $instance;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct()[m
[32m+[m	[32m{[m
[32m+[m		[32mself::$instance =& $this;[m
[32m+[m
[32m+[m		[32m// Assign all the class objects that were instantiated by the[m
[32m+[m		[32m// bootstrap file (CodeIgniter.php) to local class variables[m
[32m+[m		[32m// so that CI can run as one big super object.[m
[32m+[m		[32mforeach (is_loaded() as $var => $class)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->$var =& load_class($class);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->load =& load_class('Loader', 'core');[m
[32m+[m		[32m$this->load->initialize();[m
[32m+[m		[32mlog_message('info', 'Controller Class Initialized');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get the CI singleton[m
[32m+[m	[32m *[m
[32m+[m	[32m * @static[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic static function &get_instance()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn self::$instance;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/core/Exceptions.php b/system/core/Exceptions.php[m
[1mnew file mode 100644[m
[1mindex 0000000..5a78376[m
[1m--- /dev/null[m
[1m+++ b/system/core/Exceptions.php[m
[36m@@ -0,0 +1,274 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Exceptions Class[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Libraries[m
[32m+[m[32m * @category	Exceptions[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/libraries/exceptions.html[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_Exceptions {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Nesting level of the output buffering mechanism[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $ob_level;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of available error levels[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $levels = array([m
[32m+[m		[32mE_ERROR			=>	'Error',[m
[32m+[m		[32mE_WARNING		=>	'Warning',[m
[32m+[m		[32mE_PARSE			=>	'Parsing Error',[m
[32m+[m		[32mE_NOTICE		=>	'Notice',[m
[32m+[m		[32mE_CORE_ERROR		=>	'Core Error',[m
[32m+[m		[32mE_CORE_WARNING		=>	'Core Warning',[m
[32m+[m		[32mE_COMPILE_ERROR		=>	'Compile Error',[m
[32m+[m		[32mE_COMPILE_WARNING	=>	'Compile Warning',[m
[32m+[m		[32mE_USER_ERROR		=>	'User Error',[m
[32m+[m		[32mE_USER_WARNING		=>	'User Warning',[m
[32m+[m		[32mE_USER_NOTICE		=>	'User Notice',[m
[32m+[m		[32mE_STRICT		=>	'Runtime Notice'[m
[32m+[m	[32m);[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->ob_level = ob_get_level();[m
[32m+[m		[32m// Note: Do not log messages from this constructor.[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Exception Logger[m
[32m+[m	[32m *[m
[32m+[m	[32m * Logs PHP generated error messages[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	$severity	Log level[m
[32m+[m	[32m * @param	string	$message	Error message[m
[32m+[m	[32m * @param	string	$filepath	File path[m
[32m+[m	[32m * @param	int	$line		Line number[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function log_exception($severity, $message, $filepath, $line)[m
[32m+[m	[32m{[m
[32m+[m		[32m$severity = isset($this->levels[$severity]) ? $this->levels[$severity] : $severity;[m
[32m+[m		[32mlog_message('error', 'Severity: '.$severity.' --> '.$message.' '.$filepath.' '.$line);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * 404 Error Handler[m
[32m+[m	[32m *[m
[32m+[m	[32m * @uses	CI_Exceptions::show_error()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$page		Page URI[m
[32m+[m	[32m * @param 	bool	$log_error	Whether to log the error[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function show_404($page = '', $log_error = TRUE)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (is_cli())[m
[32m+[m		[32m{[m
[32m+[m			[32m$heading = 'Not Found';[m
[32m+[m			[32m$message = 'The controller/method pair you requested was not found.';[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$heading = '404 Page Not Found';[m
[32m+[m			[32m$message = 'The page you requested was not found.';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// By default we log this, but allow a dev to skip it[m
[32m+[m		[32mif ($log_error)[m
[32m+[m		[32m{[m
[32m+[m			[32mlog_message('error', $heading.': '.$page);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mecho $this->show_error($heading, $message, 'error_404', 404);[m
[32m+[m		[32mexit(4); // EXIT_UNKNOWN_FILE[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * General Error Page[m
[32m+[m	[32m *[m
[32m+[m	[32m * Takes an error message as input (either as a string or an array)[m
[32m+[m	[32m * and displays it using the specified template.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string		$heading	Page heading[m
[32m+[m	[32m * @param	string|string[]	$message	Error message[m
[32m+[m	[32m * @param	string		$template	Template name[m
[32m+[m	[32m * @param 	int		$status_code	(default: 500)[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string	Error page output[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function show_error($heading, $message, $template = 'error_general', $status_code = 500)[m
[32m+[m	[32m{[m
[32m+[m		[32m$templates_path = config_item('error_views_path');[m
[32m+[m		[32mif (empty($templates_path))[m
[32m+[m		[32m{[m
[32m+[m			[32m$templates_path = VIEWPATH.'errors'.DIRECTORY_SEPARATOR;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (is_cli())[m
[32m+[m		[32m{[m
[32m+[m			[32m$message = "\t".(is_array($message) ? implode("\n\t", $message) : $message);[m
[32m+[m			[32m$template = 'cli'.DIRECTORY_SEPARATOR.$template;[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32mset_status_header($status_code);[m
[32m+[m			[32m$message = '<p>'.(is_array($message) ? implode('</p><p>', $message) : $message).'</p>';[m
[32m+[m			[32m$template = 'html'.DIRECTORY_SEPARATOR.$template;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (ob_get_level() > $this->ob_level + 1)[m
[32m+[m		[32m{[m
[32m+[m			[32mob_end_flush();[m
[32m+[m		[32m}[m
[32m+[m		[32mob_start();[m
[32m+[m		[32minclude($templates_path.$template.'.php');[m
[32m+[m		[32m$buffer = ob_get_contents();[m
[32m+[m		[32mob_end_clean();[m
[32m+[m		[32mreturn $buffer;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32mpublic function show_exception($exception)[m
[32m+[m	[32m{[m
[32m+[m		[32m$templates_path = config_item('error_views_path');[m
[32m+[m		[32mif (empty($templates_path))[m
[32m+[m		[32m{[m
[32m+[m			[32m$templates_path = VIEWPATH.'errors'.DIRECTORY_SEPARATOR;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$message = $exception->getMessage();[m
[32m+[m		[32mif (empty($message))[m
[32m+[m		[32m{[m
[32m+[m			[32m$message = '(null)';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (is_cli())[m
[32m+[m		[32m{[m
[32m+[m			[32m$templates_path .= 'cli'.DIRECTORY_SEPARATOR;[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$templates_path .= 'html'.DIRECTORY_SEPARATOR;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (ob_get_level() > $this->ob_level + 1)[m
[32m+[m		[32m{[m
[32m+[m			[32mob_end_flush();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mob_start();[m
[32m+[m		[32minclude($templates_path.'error_exception.php');[m
[32m+[m		[32m$buffer = ob_get_contents();[m
[32m+[m		[32mob_end_clean();[m
[32m+[m		[32mecho $buffer;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Native PHP error handler[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	$severity	Error level[m
[32m+[m	[32m * @param	string	$message	Error message[m
[32m+[m	[32m * @param	string	$filepath	File path[m
[32m+[m	[32m * @param	int	$line		Line number[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function show_php_error($severity, $message, $filepath, $line)[m
[32m+[m	[32m{[m
[32m+[m		[32m$templates_path = config_item('error_views_path');[m
[32m+[m		[32mif (empty($templates_path))[m
[32m+[m		[32m{[m
[32m+[m			[32m$templates_path = VIEWPATH.'errors'.DIRECTORY_SEPARATOR;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$severity = isset($this->levels[$severity]) ? $this->levels[$severity] : $severity;[m
[32m+[m
[32m+[m		[32m// For safety reasons we don't show the full file path in non-CLI requests[m
[32m+[m		[32mif ( ! is_cli())[m
[32m+[m		[32m{[m
[32m+[m			[32m$filepath = str_replace('\\', '/', $filepath);[m
[32m+[m			[32mif (FALSE !== strpos($filepath, '/'))[m
[32m+[m			[32m{[m
[32m+[m				[32m$x = explode('/', $filepath);[m
[32m+[m				[32m$filepath = $x[count($x)-2].'/'.end($x);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$template = 'html'.DIRECTORY_SEPARATOR.'error_php';[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$template = 'cli'.DIRECTORY_SEPARATOR.'error_php';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (ob_get_level() > $this->ob_level + 1)[m
[32m+[m		[32m{[m
[32m+[m			[32mob_end_flush();[m
[32m+[m		[32m}[m
[32m+[m		[32mob_start();[m
[32m+[m		[32minclude($templates_path.$template.'.php');[m
[32m+[m		[32m$buffer = ob_get_contents();[m
[32m+[m		[32mob_end_clean();[m
[32m+[m		[32mecho $buffer;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/core/Hooks.php b/system/core/Hooks.php[m
[1mnew file mode 100644[m
[1mindex 0000000..82c68b1[m
[1m--- /dev/null[m
[1m+++ b/system/core/Hooks.php[m
[36m@@ -0,0 +1,266 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Hooks Class[m
[32m+[m[32m *[m
[32m+[m[32m * Provides a mechanism to extend the base system without hacking.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Libraries[m
[32m+[m[32m * @category	Libraries[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/general/hooks.html[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_Hooks {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Determines whether hooks are enabled[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $enabled = FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of all hooks set in config/hooks.php[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $hooks =	array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Array with class objects to use hooks methods[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_objects = array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * In progress flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * Determines whether hook is in progress, used to prevent infinte loops[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_in_progress = FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct()[m
[32m+[m	[32m{[m
[32m+[m		[32m$CFG =& load_class('Config', 'core');[m
[32m+[m		[32mlog_message('info', 'Hooks Class Initialized');[m
[32m+[m
[32m+[m		[32m// If hooks are not enabled in the config file[m
[32m+[m		[32m// there is nothing else to do[m
[32m+[m		[32mif ($CFG->item('enable_hooks') === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Grab the "hooks" definition file.[m
[32m+[m		[32mif (file_exists(APPPATH.'config/hooks.php'))[m
[32m+[m		[32m{[m
[32m+[m			[32minclude(APPPATH.'config/hooks.php');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (file_exists(APPPATH.'config/'.ENVIRONMENT.'/hooks.php'))[m
[32m+[m		[32m{[m
[32m+[m			[32minclude(APPPATH.'config/'.ENVIRONMENT.'/hooks.php');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// If there are no hooks, we're done.[m
[32m+[m		[32mif ( ! isset($hook) OR ! is_array($hook))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->hooks =& $hook;[m
[32m+[m		[32m$this->enabled = TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Call Hook[m
[32m+[m	[32m *[m
[32m+[m	[32m * Calls a particular hook. Called by CodeIgniter.php.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @uses	CI_Hooks::_run_hook()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$which	Hook name[m
[32m+[m	[32m * @return	bool	TRUE on success or FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function call_hook($which = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! $this->enabled OR ! isset($this->hooks[$which]))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (is_array($this->hooks[$which]) && ! isset($this->hooks[$which]['function']))[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($this->hooks[$which] as $val)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_run_hook($val);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_run_hook($this->hooks[$which]);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Run Hook[m
[32m+[m	[32m *[m
[32m+[m	[32m * Runs a particular hook[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$data	Hook details[m
[32m+[m	[32m * @return	bool	TRUE on success or FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _run_hook($data)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Closures/lambda functions and array($object, 'method') callables[m
[32m+[m		[32mif (is_callable($data))[m
[32m+[m		[32m{[m
[32m+[m			[32mis_array($data)[m
[32m+[m				[32m? $data[0]->{$data[1]}()[m
[32m+[m				[32m: $data();[m
[32m+[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! is_array($data))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// -----------------------------------[m
[32m+[m		[32m// Safety - Prevents run-away loops[m
[32m+[m		[32m// -----------------------------------[m
[32m+[m
[32m+[m		[32m// If the script being called happens to have the same[m
[32m+[m		[32m// hook call within it a loop can happen[m
[32m+[m		[32mif ($this->_in_progress === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// -----------------------------------[m
[32m+[m		[32m// Set file path[m
[32m+[m		[32m// -----------------------------------[m
[32m+[m
[32m+[m		[32mif ( ! isset($data['filepath'], $data['filename']))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$filepath = APPPATH.$data['filepath'].'/'.$data['filename'];[m
[32m+[m
[32m+[m		[32mif ( ! file_exists($filepath))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Determine and class and/or function names[m
[32m+[m		[32m$class		= empty($data['class']) ? FALSE : $data['class'];[m
[32m+[m		[32m$function	= empty($data['function']) ? FALSE : $data['function'];[m
[32m+[m		[32m$params		= isset($data['params']) ? $data['params'] : '';[m
[32m+[m
[32m+[m		[32mif (empty($function))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Set the _in_progress flag[m
[32m+[m		[32m$this->_in_progress = TRUE;[m
[32m+[m
[32m+[m		[32m// Call the requested class and/or function[m
[32m+[m		[32mif ($class !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m// The object is stored?[m
[32m+[m			[32mif (isset($this->_objects[$class]))[m
[32m+[m			[32m{[m
[32m+[m				[32mif (method_exists($this->_objects[$class], $function))[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->_objects[$class]->$function($params);[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32mreturn $this->_in_progress = FALSE;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32mclass_exists($class, FALSE) OR require_once($filepath);[m
[32m+[m
[32m+[m				[32mif ( ! class_exists($class, FALSE) OR ! method_exists($class, $function))[m
[32m+[m				[32m{[m
[32m+[m					[32mreturn $this->_in_progress = FALSE;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m// Store the object and execute the method[m
[32m+[m				[32m$this->_objects[$class] = new $class();[m
[32m+[m				[32m$this->_objects[$class]->$function($params);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32mfunction_exists($function) OR require_once($filepath);[m
[32m+[m
[32m+[m			[32mif ( ! function_exists($function))[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn $this->_in_progress = FALSE;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$function($params);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->_in_progress = FALSE;[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/core/Input.php b/system/core/Input.php[m
[1mnew file mode 100644[m
[1mindex 0000000..143babf[m
[1m--- /dev/null[m
[1m+++ b/system/core/Input.php[m
[36m@@ -0,0 +1,895 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Input Class[m
[32m+[m[32m *[m
[32m+[m[32m * Pre-processes global input data for security[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Libraries[m
[32m+[m[32m * @category	Input[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/libraries/input.html[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_Input {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * IP address of the current user[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $ip_address = FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Allow GET array flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * If set to FALSE, then $_GET will be set to an empty array.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_allow_get_array = TRUE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Standardize new lines flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * If set to TRUE, then newlines are standardized.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_standardize_newlines;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Enable XSS flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * Determines whether the XSS filter is always active when[m
[32m+[m	[32m * GET, POST or COOKIE data is encountered.[m
[32m+[m	[32m * Set automatically based on config setting.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_enable_xss = FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Enable CSRF flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * Enables a CSRF cookie token to be set.[m
[32m+[m	[32m * Set automatically based on config setting.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_enable_csrf = FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of all HTTP request headers[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $headers = array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Raw input stream data[m
[32m+[m	[32m *[m
[32m+[m	[32m * Holds a cache of php://input contents[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_raw_input_stream;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Parsed input stream data[m
[32m+[m	[32m *[m
[32m+[m	[32m * Parsed from php://input at runtime[m
[32m+[m	[32m *[m
[32m+[m	[32m * @see	CI_Input::input_stream()[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_input_stream;[m
[32m+[m
[32m+[m	[32mprotected $security;[m
[32m+[m	[32mprotected $uni;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * Determines whether to globally enable the XSS processing[m
[32m+[m	[32m * and whether to allow the $_GET array.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->_allow_get_array		= (config_item('allow_get_array') !== FALSE);[m
[32m+[m		[32m$this->_enable_xss		= (config_item('global_xss_filtering') === TRUE);[m
[32m+[m		[32m$this->_enable_csrf		= (config_item('csrf_protection') === TRUE);[m
[32m+[m		[32m$this->_standardize_newlines	= (bool) config_item('standardize_newlines');[m
[32m+[m
[32m+[m		[32m$this->security =& load_class('Security', 'core');[m
[32m+[m
[32m+[m		[32m// Do we need the UTF-8 class?[m
[32m+[m		[32mif (UTF8_ENABLED === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->uni =& load_class('Utf8', 'core');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Sanitize global arrays[m
[32m+[m		[32m$this->_sanitize_globals();[m
[32m+[m
[32m+[m		[32m// CSRF Protection check[m
[32m+[m		[32mif ($this->_enable_csrf === TRUE && ! is_cli())[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->security->csrf_verify();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mlog_message('info', 'Input Class Initialized');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch from array[m
[32m+[m	[32m *[m
[32m+[m	[32m * Internal method used to retrieve values from global arrays.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$array		$_GET, $_POST, $_COOKIE, $_SERVER, etc.[m
[32m+[m	[32m * @param	mixed	$index		Index for item to be fetched from $array[m
[32m+[m	[32m * @param	bool	$xss_clean	Whether to apply XSS filtering[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _fetch_from_array(&$array, $index = NULL, $xss_clean = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mis_bool($xss_clean) OR $xss_clean = $this->_enable_xss;[m
[32m+[m
[32m+[m		[32m// If $index is NULL, it means that the whole $array is requested[m
[32m+[m		[32misset($index) OR $index = array_keys($array);[m
[32m+[m
[32m+[m		[32m// allow fetching multiple keys at once[m
[32m+[m		[32mif (is_array($index))[m
[32m+[m		[32m{[m
[32m+[m			[32m$output = array();[m
[32m+[m			[32mforeach ($index as $key)[m
[32m+[m			[32m{[m
[32m+[m				[32m$output[$key] = $this->_fetch_from_array($array, $key, $xss_clean);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn $output;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (isset($array[$index]))[m
[32m+[m		[32m{[m
[32m+[m			[32m$value = $array[$index];[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (($count = preg_match_all('/(?:^[^\[]+)|\[[^]]*\]/', $index, $matches)) > 1) // Does the index contain array notation[m
[32m+[m		[32m{[m
[32m+[m			[32m$value = $array;[m
[32m+[m			[32mfor ($i = 0; $i < $count; $i++)[m
[32m+[m			[32m{[m
[32m+[m				[32m$key = trim($matches[0][$i], '[]');[m
[32m+[m				[32mif ($key === '') // Empty notation will return the value as array[m
[32m+[m				[32m{[m
[32m+[m					[32mbreak;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mif (isset($value[$key]))[m
[32m+[m				[32m{[m
[32m+[m					[32m$value = $value[$key];[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32mreturn NULL;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn NULL;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn ($xss_clean === TRUE)[m
[32m+[m			[32m? $this->security->xss_clean($value)[m
[32m+[m			[32m: $value;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch an item from the GET array[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	$index		Index for item to be fetched from $_GET[m
[32m+[m	[32m * @param	bool	$xss_clean	Whether to apply XSS filtering[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get($index = NULL, $xss_clean = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_fetch_from_array($_GET, $index, $xss_clean);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch an item from the POST array[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	$index		Index for item to be fetched from $_POST[m
[32m+[m	[32m * @param	bool	$xss_clean	Whether to apply XSS filtering[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function post($index = NULL, $xss_clean = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_fetch_from_array($_POST, $index, $xss_clean);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch an item from POST data with fallback to GET[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$index		Index for item to be fetched from $_POST or $_GET[m
[32m+[m	[32m * @param	bool	$xss_clean	Whether to apply XSS filtering[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function post_get($index, $xss_clean = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn isset($_POST[$index])[m
[32m+[m			[32m? $this->post($index, $xss_clean)[m
[32m+[m			[32m: $this->get($index, $xss_clean);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch an item from GET data with fallback to POST[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$index		Index for item to be fetched from $_GET or $_POST[m
[32m+[m	[32m * @param	bool	$xss_clean	Whether to apply XSS filtering[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get_post($index, $xss_clean = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn isset($_GET[$index])[m
[32m+[m			[32m? $this->get($index, $xss_clean)[m
[32m+[m			[32m: $this->post($index, $xss_clean);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch an item from the COOKIE array[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	$index		Index for item to be fetched from $_COOKIE[m
[32m+[m	[32m * @param	bool	$xss_clean	Whether to apply XSS filtering[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function cookie($index = NULL, $xss_clean = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_fetch_from_array($_COOKIE, $index, $xss_clean);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch an item from the SERVER array[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	$index		Index for item to be fetched from $_SERVER[m
[32m+[m	[32m * @param	bool	$xss_clean	Whether to apply XSS filtering[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function server($index, $xss_clean = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_fetch_from_array($_SERVER, $index, $xss_clean);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch an item from the php://input stream[m
[32m+[m	[32m *[m
[32m+[m	[32m * Useful when you need to access PUT, DELETE or PATCH request data.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$index		Index for item to be fetched[m
[32m+[m	[32m * @param	bool	$xss_clean	Whether to apply XSS filtering[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function input_stream($index = NULL, $xss_clean = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Prior to PHP 5.6, the input stream can only be read once,[m
[32m+[m		[32m// so we'll need to check if we have already done that first.[m
[32m+[m		[32mif ( ! is_array($this->_input_stream))[m
[32m+[m		[32m{[m
[32m+[m			[32m// $this->raw_input_stream will trigger __get().[m
[32m+[m			[32mparse_str($this->raw_input_stream, $this->_input_stream);[m
[32m+[m			[32mis_array($this->_input_stream) OR $this->_input_stream = array();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->_fetch_from_array($this->_input_stream, $index, $xss_clean);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set cookie[m
[32m+[m	[32m *[m
[32m+[m	[32m * Accepts an arbitrary number of parameters (up to 7) or an associative[m
[32m+[m	[32m * array in the first parameter containing all the values.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string|mixed[]	$name		Cookie name or an array containing parameters[m
[32m+[m	[32m * @param	string		$value		Cookie value[m
[32m+[m	[32m * @param	int		$expire		Cookie expiration time in seconds[m
[32m+[m	[32m * @param	string		$domain		Cookie domain (e.g.: '.yourdomain.com')[m
[32m+[m	[32m * @param	string		$path		Cookie path (default: '/')[m
[32m+[m	[32m * @param	string		$prefix		Cookie name prefix[m
[32m+[m	[32m * @param	bool		$secure		Whether to only transfer cookies via SSL[m
[32m+[m	[32m * @param	bool		$httponly	Whether to only makes the cookie accessible via HTTP (no javascript)[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_cookie($name, $value = '', $expire = '', $domain = '', $path = '/', $prefix = '', $secure = NULL, $httponly = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (is_array($name))[m
[32m+[m		[32m{[m
[32m+[m			[32m// always leave 'name' in last place, as the loop will break otherwise, due to $$item[m
[32m+[m			[32mforeach (array('value', 'expire', 'domain', 'path', 'prefix', 'secure', 'httponly', 'name') as $item)[m
[32m+[m			[32m{[m
[32m+[m				[32mif (isset($name[$item]))[m
[32m+[m				[32m{[m
[32m+[m					[32m$$item = $name[$item];[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($prefix === '' && config_item('cookie_prefix') !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$prefix = config_item('cookie_prefix');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($domain == '' && config_item('cookie_domain') != '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$domain = config_item('cookie_domain');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($path === '/' && config_item('cookie_path') !== '/')[m
[32m+[m		[32m{[m
[32m+[m			[32m$path = config_item('cookie_path');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$secure = ($secure === NULL && config_item('cookie_secure') !== NULL)[m
[32m+[m			[32m? (bool) config_item('cookie_secure')[m
[32m+[m			[32m: (bool) $secure;[m
[32m+[m
[32m+[m		[32m$httponly = ($httponly === NULL && config_item('cookie_httponly') !== NULL)[m
[32m+[m			[32m? (bool) config_item('cookie_httponly')[m
[32m+[m			[32m: (bool) $httponly;[m
[32m+[m
[32m+[m		[32mif ( ! is_numeric($expire))[m
[32m+[m		[32m{[m
[32m+[m			[32m$expire = time() - 86500;[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$expire = ($expire > 0) ? time() + $expire : 0;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32msetcookie($prefix.$name, $value, $expire, $path, $domain, $secure, $httponly);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch the IP Address[m
[32m+[m	[32m *[m
[32m+[m	[32m * Determines and validates the visitor's IP address.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string	IP address[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function ip_address()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->ip_address !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->ip_address;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$proxy_ips = config_item('proxy_ips');[m
[32m+[m		[32mif ( ! empty($proxy_ips) && ! is_array($proxy_ips))[m
[32m+[m		[32m{[m
[32m+[m			[32m$proxy_ips = explode(',', str_replace(' ', '', $proxy_ips));[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->ip_address = $this->server('REMOTE_ADDR');[m
[32m+[m
[32m+[m		[32mif ($proxy_ips)[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach (array('HTTP_X_FORWARDED_FOR', 'HTTP_CLIENT_IP', 'HTTP_X_CLIENT_IP', 'HTTP_X_CLUSTER_CLIENT_IP') as $header)[m
[32m+[m			[32m{[m
[32m+[m				[32mif (($spoof = $this->server($header)) !== NULL)[m
[32m+[m				[32m{[m
[32m+[m					[32m// Some proxies typically list the whole chain of IP[m
[32m+[m					[32m// addresses through which the client has reached us.[m
[32m+[m					[32m// e.g. client_ip, proxy_ip1, proxy_ip2, etc.[m
[32m+[m					[32msscanf($spoof, '%[^,]', $spoof);[m
[32m+[m
[32m+[m					[32mif ( ! $this->valid_ip($spoof))[m
[32m+[m					[32m{[m
[32m+[m						[32m$spoof = NULL;[m
[32m+[m					[32m}[m
[32m+[m					[32melse[m
[32m+[m					[32m{[m
[32m+[m						[32mbreak;[m
[32m+[m					[32m}[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif ($spoof)[m
[32m+[m			[32m{[m
[32m+[m				[32mfor ($i = 0, $c = count($proxy_ips); $i < $c; $i++)[m
[32m+[m				[32m{[m
[32m+[m					[32m// Check if we have an IP address or a subnet[m
[32m+[m					[32mif (strpos($proxy_ips[$i], '/') === FALSE)[m
[32m+[m					[32m{[m
[32m+[m						[32m// An IP address (and not a subnet) is specified.[m
[32m+[m						[32m// We can compare right away.[m
[32m+[m						[32mif ($proxy_ips[$i] === $this->ip_address)[m
[32m+[m						[32m{[m
[32m+[m							[32m$this->ip_address = $spoof;[m
[32m+[m							[32mbreak;[m
[32m+[m						[32m}[m
[32m+[m
[32m+[m						[32mcontinue;[m
[32m+[m					[32m}[m
[32m+[m
[32m+[m					[32m// We have a subnet ... now the heavy lifting begins[m
[32m+[m					[32misset($separator) OR $separator = $this->valid_ip($this->ip_address, 'ipv6') ? ':' : '.';[m
[32m+[m
[32m+[m					[32m// If the proxy entry doesn't match the IP protocol - skip it[m
[32m+[m					[32mif (strpos($proxy_ips[$i], $separator) === FALSE)[m
[32m+[m					[32m{[m
[32m+[m						[32mcontinue;[m
[32m+[m					[32m}[m
[32m+[m
[32m+[m					[32m// Convert the REMOTE_ADDR IP address to binary, if needed[m
[32m+[m					[32mif ( ! isset($ip, $sprintf))[m
[32m+[m					[32m{[m
[32m+[m						[32mif ($separator === ':')[m
[32m+[m						[32m{[m
[32m+[m							[32m// Make sure we're have the "full" IPv6 format[m
[32m+[m							[32m$ip = explode(':',[m
[32m+[m								[32mstr_replace('::',[m
[32m+[m									[32mstr_repeat(':', 9 - substr_count($this->ip_address, ':')),[m
[32m+[m									[32m$this->ip_address[m
[32m+[m								[32m)[m
[32m+[m							[32m);[m
[32m+[m
[32m+[m							[32mfor ($j = 0; $j < 8; $j++)[m
[32m+[m							[32m{[m
[32m+[m								[32m$ip[$j] = intval($ip[$j], 16);[m
[32m+[m							[32m}[m
[32m+[m
[32m+[m							[32m$sprintf = '%016b%016b%016b%016b%016b%016b%016b%016b';[m
[32m+[m						[32m}[m
[32m+[m						[32melse[m
[32m+[m						[32m{[m
[32m+[m							[32m$ip = explode('.', $this->ip_address);[m
[32m+[m							[32m$sprintf = '%08b%08b%08b%08b';[m
[32m+[m						[32m}[m
[32m+[m
[32m+[m						[32m$ip = vsprintf($sprintf, $ip);[m
[32m+[m					[32m}[m
[32m+[m
[32m+[m					[32m// Split the netmask length off the network address[m
[32m+[m					[32msscanf($proxy_ips[$i], '%[^/]/%d', $netaddr, $masklen);[m
[32m+[m
[32m+[m					[32m// Again, an IPv6 address is most likely in a compressed form[m
[32m+[m					[32mif ($separator === ':')[m
[32m+[m					[32m{[m
[32m+[m						[32m$netaddr = explode(':', str_replace('::', str_repeat(':', 9 - substr_count($netaddr, ':')), $netaddr));[m
[32m+[m						[32mfor ($j = 0; $j < 8; $j++)[m
[32m+[m						[32m{[m
[32m+[m							[32m$netaddr[$j] = intval($netaddr[$j], 16);[m
[32m+[m						[32m}[m
[32m+[m					[32m}[m
[32m+[m					[32melse[m
[32m+[m					[32m{[m
[32m+[m						[32m$netaddr = explode('.', $netaddr);[m
[32m+[m					[32m}[m
[32m+[m
[32m+[m					[32m// Convert to binary and finally compare[m
[32m+[m					[32mif (strncmp($ip, vsprintf($sprintf, $netaddr), $masklen) === 0)[m
[32m+[m					[32m{[m
[32m+[m						[32m$this->ip_address = $spoof;[m
[32m+[m						[32mbreak;[m
[32m+[m					[32m}[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! $this->valid_ip($this->ip_address))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->ip_address = '0.0.0.0';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->ip_address;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Validate IP Address[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$ip	IP address[m
[32m+[m	[32m * @param	string	$which	IP protocol: 'ipv4' or 'ipv6'[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function valid_ip($ip, $which = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mswitch (strtolower($which))[m
[32m+[m		[32m{[m
[32m+[m			[32mcase 'ipv4':[m
[32m+[m				[32m$which = FILTER_FLAG_IPV4;[m
[32m+[m				[32mbreak;[m
[32m+[m			[32mcase 'ipv6':[m
[32m+[m				[32m$which = FILTER_FLAG_IPV6;[m
[32m+[m				[32mbreak;[m
[32m+[m			[32mdefault:[m
[32m+[m				[32m$which = NULL;[m
[32m+[m				[32mbreak;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn (bool) filter_var($ip, FILTER_VALIDATE_IP, $which);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch User Agent string[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string|null	User Agent string or NULL if it doesn't exist[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function user_agent($xss_clean = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_fetch_from_array($_SERVER, 'HTTP_USER_AGENT', $xss_clean);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Sanitize Globals[m
[32m+[m	[32m *[m
[32m+[m	[32m * Internal method serving for the following purposes:[m
[32m+[m	[32m *[m
[32m+[m	[32m *	- Unsets $_GET data, if query strings are not enabled[m
[32m+[m	[32m *	- Cleans POST, COOKIE and SERVER data[m
[32m+[m	[32m * 	- Standardizes newline characters to PHP_EOL[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _sanitize_globals()[m
[32m+[m	[32m{[m
[32m+[m		[32m// Is $_GET data allowed? If not we'll set the $_GET to an empty array[m
[32m+[m		[32mif ($this->_allow_get_array === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$_GET = array();[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (is_array($_GET))[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($_GET as $key => $val)[m
[32m+[m			[32m{[m
[32m+[m				[32m$_GET[$this->_clean_input_keys($key)] = $this->_clean_input_data($val);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Clean $_POST Data[m
[32m+[m		[32mif (is_array($_POST))[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($_POST as $key => $val)[m
[32m+[m			[32m{[m
[32m+[m				[32m$_POST[$this->_clean_input_keys($key)] = $this->_clean_input_data($val);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Clean $_COOKIE Data[m
[32m+[m		[32mif (is_array($_COOKIE))[m
[32m+[m		[32m{[m
[32m+[m			[32m// Also get rid of specially treated cookies that might be set by a server[m
[32m+[m			[32m// or silly application, that are of no use to a CI application anyway[m
[32m+[m			[32m// but that when present will trip our 'Disallowed Key Characters' alarm[m
[32m+[m			[32m// http://www.ietf.org/rfc/rfc2109.txt[m
[32m+[m			[32m// note that the key names below are single quoted strings, and are not PHP variables[m
[32m+[m			[32munset([m
[32m+[m				[32m$_COOKIE['$Version'],[m
[32m+[m				[32m$_COOKIE['$Path'],[m
[32m+[m				[32m$_COOKIE['$Domain'][m
[32m+[m			[32m);[m
[32m+[m
[32m+[m			[32mforeach ($_COOKIE as $key => $val)[m
[32m+[m			[32m{[m
[32m+[m				[32mif (($cookie_key = $this->_clean_input_keys($key)) !== FALSE)[m
[32m+[m				[32m{[m
[32m+[m					[32m$_COOKIE[$cookie_key] = $this->_clean_input_data($val);[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32munset($_COOKIE[$key]);[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Sanitize PHP_SELF[m
[32m+[m		[32m$_SERVER['PHP_SELF'] = strip_tags($_SERVER['PHP_SELF']);[m
[32m+[m
[32m+[m		[32mlog_message('debug', 'Global POST, GET and COOKIE data sanitized');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Clean Input Data[m
[32m+[m	[32m *[m
[32m+[m	[32m * Internal method that aids in escaping data and[m
[32m+[m	[32m * standardizing newline characters to PHP_EOL.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string|string[]	$str	Input string(s)[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _clean_input_data($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (is_array($str))[m
[32m+[m		[32m{[m
[32m+[m			[32m$new_array = array();[m
[32m+[m			[32mforeach (array_keys($str) as $key)[m
[32m+[m			[32m{[m
[32m+[m				[32m$new_array[$this->_clean_input_keys($key)] = $this->_clean_input_data($str[$key]);[m
[32m+[m			[32m}[m
[32m+[m			[32mreturn $new_array;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m/* We strip slashes if magic quotes is on to keep things consistent[m
[32m+[m
[32m+[m		[32m   NOTE: In PHP 5.4 get_magic_quotes_gpc() will always return 0 and[m
[32m+[m		[32m         it will probably not exist in future versions at all.[m
[32m+[m		[32m*/[m
[32m+[m		[32mif ( ! is_php('5.4') && get_magic_quotes_gpc())[m
[32m+[m		[32m{[m
[32m+[m			[32m$str = stripslashes($str);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Clean UTF-8 if supported[m
[32m+[m		[32mif (UTF8_ENABLED === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$str = $this->uni->clean_string($str);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Remove control characters[m
[32m+[m		[32m$str = remove_invisible_characters($str, FALSE);[m
[32m+[m
[32m+[m		[32m// Standardize newlines if needed[m
[32m+[m		[32mif ($this->_standardize_newlines === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn preg_replace('/(?:\r\n|[\r\n])/', PHP_EOL, $str);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $str;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Clean Keys[m
[32m+[m	[32m *[m
[32m+[m	[32m * Internal method that helps to prevent malicious users[m
[32m+[m	[32m * from trying to exploit keys we make sure that keys are[m
[32m+[m	[32m * only named with alpha-numeric text and a few other items.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$str	Input string[m
[32m+[m	[32m * @param	bool	$fatal	Whether to terminate script exection[m
[32m+[m	[32m *				or to return FALSE if an invalid[m
[32m+[m	[32m *				key is encountered[m
[32m+[m	[32m * @return	string|bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _clean_input_keys($str, $fatal = TRUE)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! preg_match('/^[a-z0-9:_\/|-]+$/i', $str))[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($fatal === TRUE)[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32mset_status_header(503);[m
[32m+[m				[32mecho 'Disallowed Key Characters.';[m
[32m+[m				[32mexit(7); // EXIT_USER_INPUT[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Clean UTF-8 if supported[m
[32m+[m		[32mif (UTF8_ENABLED === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->uni->clean_string($str);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $str;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Request Headers[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$xss_clean	Whether to apply XSS filtering[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function request_headers($xss_clean = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m// If header is already defined, return it immediately[m
[32m+[m		[32mif ( ! empty($this->headers))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->_fetch_from_array($this->headers, NULL, $xss_clean);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// In Apache, you can simply call apache_request_headers()[m
[32m+[m		[32mif (function_exists('apache_request_headers'))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->headers = apache_request_headers();[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32misset($_SERVER['CONTENT_TYPE']) && $this->headers['Content-Type'] = $_SERVER['CONTENT_TYPE'];[m
[32m+[m
[32m+[m			[32mforeach ($_SERVER as $key => $val)[m
[32m+[m			[32m{[m
[32m+[m				[32mif (sscanf($key, 'HTTP_%s', $header) === 1)[m
[32m+[m				[32m{[m
[32m+[m					[32m// take SOME_HEADER and turn it into Some-Header[m
[32m+[m					[32m$header = str_replace('_', ' ', strtolower($header));[m
[32m+[m					[32m$header = str_replace(' ', '-', ucwords($header));[m
[32m+[m
[32m+[m					[32m$this->headers[$header] = $_SERVER[$key];[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->_fetch_from_array($this->headers, NULL, $xss_clean);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get Request Header[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the value of a single member of the headers class member[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string		$index		Header name[m
[32m+[m	[32m * @param	bool		$xss_clean	Whether to apply XSS filtering[m
[32m+[m	[32m * @return	string|null	The requested header on success or NULL on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get_request_header($index, $xss_clean = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mstatic $headers;[m
[32m+[m
[32m+[m		[32mif ( ! isset($headers))[m
[32m+[m		[32m{[m
[32m+[m			[32mempty($this->headers) && $this->request_headers();[m
[32m+[m			[32mforeach ($this->headers as $key => $value)[m
[32m+[m			[32m{[m
[32m+[m				[32m$headers[strtolower($key)] = $value;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$index = strtolower($index);[m
[32m+[m
[32m+[m		[32mif ( ! isset($headers[$index]))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn NULL;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn ($xss_clean === TRUE)[m
[32m+[m			[32m? $this->security->xss_clean($headers[$index])[m
[32m+[m			[32m: $headers[$index];[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Is AJAX request?[m
[32m+[m	[32m *[m
[32m+[m	[32m * Test to see if a request contains the HTTP_X_REQUESTED_WITH header.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return 	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function is_ajax_request()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn ( ! empty($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) === 'xmlhttprequest');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Is CLI request?[m
[32m+[m	[32m *[m
[32m+[m	[32m * Test to see if a request was made from the command line.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @deprecated	3.0.0	Use is_cli() instead[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function is_cli_request()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn is_cli();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get Request Method[m
[32m+[m	[32m *[m
[32m+[m	[32m * Return the request method[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$upper	Whether to return in upper or lower case[m
[32m+[m	[32m *				(default: FALSE)[m
[32m+[m	[32m * @return 	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function method($upper = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn ($upper)[m
[32m+[m			[32m? strtoupper($this->server('REQUEST_METHOD'))[m
[32m+[m			[32m: strtolower($this->server('REQUEST_METHOD'));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Magic __get()[m
[32m+[m	[32m *[m
[32m+[m	[32m * Allows read access to protected properties[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$name[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __get($name)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($name === 'raw_input_stream')[m
[32m+[m		[32m{[m
[32m+[m			[32misset($this->_raw_input_stream) OR $this->_raw_input_stream = file_get_contents('php://input');[m
[32m+[m			[32mreturn $this->_raw_input_stream;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($name === 'ip_address')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->ip_address;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/core/Lang.php b/system/core/Lang.php[m
[1mnew file mode 100644[m
[1mindex 0000000..39fdd06[m
[1m--- /dev/null[m
[1m+++ b/system/core/Lang.php[m
[36m@@ -0,0 +1,203 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Language Class[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Libraries[m
[32m+[m[32m * @category	Language[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/libraries/language.html[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_Lang {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of translations[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $language =	array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of loaded language files[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $is_loaded =	array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct()[m
[32m+[m	[32m{[m
[32m+[m		[32mlog_message('info', 'Language Class Initialized');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Load a language file[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	$langfile	Language file name[m
[32m+[m	[32m * @param	string	$idiom		Language name (english, etc.)[m
[32m+[m	[32m * @param	bool	$return		Whether to return the loaded array of translations[m
[32m+[m	[32m * @param 	bool	$add_suffix	Whether to add suffix to $langfile[m
[32m+[m	[32m * @param 	string	$alt_path	Alternative path to look for the language file[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void|string[]	Array containing translations, if $return is set to TRUE[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function load($langfile, $idiom = '', $return = FALSE, $add_suffix = TRUE, $alt_path = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif (is_array($langfile))[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($langfile as $value)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->load($value, $idiom, $return, $add_suffix, $alt_path);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$langfile = str_replace('.php', '', $langfile);[m
[32m+[m
[32m+[m		[32mif ($add_suffix === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$langfile = preg_replace('/_lang$/', '', $langfile).'_lang';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$langfile .= '.php';[m
[32m+[m
[32m+[m		[32mif (empty($idiom) OR ! preg_match('/^[a-z_-]+$/i', $idiom))[m
[32m+[m		[32m{[m
[32m+[m			[32m$config =& get_config();[m
[32m+[m			[32m$idiom = empty($config['language']) ? 'english' : $config['language'];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($return === FALSE && isset($this->is_loaded[$langfile]) && $this->is_loaded[$langfile] === $idiom)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Load the base file, so any others found can override it[m
[32m+[m		[32m$basepath = BASEPATH.'language/'.$idiom.'/'.$langfile;[m
[32m+[m		[32mif (($found = file_exists($basepath)) === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32minclude($basepath);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Do we have an alternative path to look in?[m
[32m+[m		[32mif ($alt_path !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$alt_path .= 'language/'.$idiom.'/'.$langfile;[m
[32m+[m			[32mif (file_exists($alt_path))[m
[32m+[m			[32m{[m
[32m+[m				[32minclude($alt_path);[m
[32m+[m				[32m$found = TRUE;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach (get_instance()->load->get_package_paths(TRUE) as $package_path)[m
[32m+[m			[32m{[m
[32m+[m				[32m$package_path .= 'language/'.$idiom.'/'.$langfile;[m
[32m+[m				[32mif ($basepath !== $package_path && file_exists($package_path))[m
[32m+[m				[32m{[m
[32m+[m					[32minclude($package_path);[m
[32m+[m					[32m$found = TRUE;[m
[32m+[m					[32mbreak;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($found !== TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32mshow_error('Unable to load the requested language file: language/'.$idiom.'/'.$langfile);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! isset($lang) OR ! is_array($lang))[m
[32m+[m		[32m{[m
[32m+[m			[32mlog_message('error', 'Language file contains no data: language/'.$idiom.'/'.$langfile);[m
[32m+[m
[32m+[m			[32mif ($return === TRUE)[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn array();[m
[32m+[m			[32m}[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($return === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $lang;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->is_loaded[$langfile] = $idiom;[m
[32m+[m		[32m$this->language = array_merge($this->language, $lang);[m
[32m+[m
[32m+[m		[32mlog_message('info', 'Language file loaded: language/'.$idiom.'/'.$langfile);[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Language line[m
[32m+[m	[32m *[m
[32m+[m	[32m * Fetches a single line of text from the language array[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$line		Language line key[m
[32m+[m	[32m * @param	bool	$log_errors	Whether to log an error message if the line is not found[m
[32m+[m	[32m * @return	string	Translation[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function line($line, $log_errors = TRUE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$value = isset($this->language[$line]) ? $this->language[$line] : FALSE;[m
[32m+[m
[32m+[m		[32m// Because killer robots like unicorns![m
[32m+[m		[32mif ($value === FALSE && $log_errors === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32mlog_message('error', 'Could not find the language line "'.$line.'"');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $value;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/core/Loader.php b/system/core/Loader.php[m
[1mnew file mode 100644[m
[1mindex 0000000..c84aff3[m
[1m--- /dev/null[m
[1m+++ b/system/core/Loader.php[m
[36m@@ -0,0 +1,1415 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Loader Class[m
[32m+[m[32m *[m
[32m+[m[32m * Loads framework components.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Libraries[m
[32m+[m[32m * @category	Loader[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/libraries/loader.html[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_Loader {[m
[32m+[m
[32m+[m	[32m// All these are set automatically. Don't mess with them.[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Nesting level of the output buffering mechanism[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	int[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_ci_ob_level;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of paths to load views from[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_ci_view_paths =	array(VIEWPATH	=> TRUE);[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of paths to load libraries from[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_ci_library_paths =	array(APPPATH, BASEPATH);[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of paths to load models from[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_ci_model_paths =	array(APPPATH);[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of paths to load helpers from[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_ci_helper_paths =	array(APPPATH, BASEPATH);[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of cached variables[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_ci_cached_vars =	array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of loaded classes[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_ci_classes =	array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of loaded models[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_ci_models =	array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of loaded helpers[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_ci_helpers =	array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of class name mappings[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_ci_varmap =	array([m
[32m+[m		[32m'unit_test' => 'unit',[m
[32m+[m		[32m'user_agent' => 'agent'[m
[32m+[m	[32m);[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * Sets component load paths, gets the initial output buffering level.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->_ci_ob_level = ob_get_level();[m
[32m+[m		[32m$this->_ci_classes =& is_loaded();[m
[32m+[m
[32m+[m		[32mlog_message('info', 'Loader Class Initialized');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Initializer[m
[32m+[m	[32m *[m
[32m+[m	[32m * @todo	Figure out a way to move this to the constructor[m
[32m+[m	[32m *		without breaking *package_path*() methods.[m
[32m+[m	[32m * @uses	CI_Loader::_ci_autoloader()[m
[32m+[m	[32m * @used-by	CI_Controller::__construct()[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function initialize()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->_ci_autoloader();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Is Loaded[m
[32m+[m	[32m *[m
[32m+[m	[32m * A utility method to test if a class is in the self::$_ci_classes array.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @used-by	Mainly used by Form Helper function _get_validation_object().[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param 	string		$class	Class name to check for[m
[32m+[m	[32m * @return 	string|bool	Class object name if loaded or FALSE[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function is_loaded($class)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn array_search(ucfirst($class), $this->_ci_classes, TRUE);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Library Loader[m
[32m+[m	[32m *[m
[32m+[m	[32m * Loads and instantiates libraries.[m
[32m+[m	[32m * Designed to be called from application controllers.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	$library	Library name[m
[32m+[m	[32m * @param	array	$params		Optional parameters to pass to the library class constructor[m
[32m+[m	[32m * @param	string	$object_name	An optional object name to assign to[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function library($library, $params = NULL, $object_name = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (empty($library))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (is_array($library))[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($library as $key => $value)[m
[32m+[m			[32m{[m
[32m+[m				[32mif (is_int($key))[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->library($value, $params);[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->library($key, $params, $value);[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn $this;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($params !== NULL && ! is_array($params))[m
[32m+[m		[32m{[m
[32m+[m			[32m$params = NULL;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->_ci_load_library($library, $params, $object_name);[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Model Loader[m
[32m+[m	[32m *[m
[32m+[m	[32m * Loads and instantiates models.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	$model		Model name[m
[32m+[m	[32m * @param	string	$name		An optional object name to assign to[m
[32m+[m	[32m * @param	bool	$db_conn	An optional database connection configuration to initialize[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function model($model, $name = '', $db_conn = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (empty($model))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (is_array($model))[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($model as $key => $value)[m
[32m+[m			[32m{[m
[32m+[m				[32mis_int($key) ? $this->model($value, '', $db_conn) : $this->model($key, $value, $db_conn);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn $this;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$path = '';[m
[32m+[m
[32m+[m		[32m// Is the model in a sub-folder? If so, parse out the filename and path.[m
[32m+[m		[32mif (($last_slash = strrpos($model, '/')) !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m// The path is in front of the last slash[m
[32m+[m			[32m$path = substr($model, 0, ++$last_slash);[m
[32m+[m
[32m+[m			[32m// And the model name behind it[m
[32m+[m			[32m$model = substr($model, $last_slash);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (empty($name))[m
[32m+[m		[32m{[m
[32m+[m			[32m$name = $model;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (in_array($name, $this->_ci_models, TRUE))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$CI =& get_instance();[m
[32m+[m		[32mif (isset($CI->$name))[m
[32m+[m		[32m{[m
[32m+[m			[32mthrow new RuntimeException('The model name you are loading is the name of a resource that is already being used: '.$name);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($db_conn !== FALSE && ! class_exists('CI_DB', FALSE))[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($db_conn === TRUE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$db_conn = '';[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$this->database($db_conn, FALSE, TRUE);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Note: All of the code under this condition used to be just:[m
[32m+[m		[32m//[m
[32m+[m		[32m//       load_class('Model', 'core');[m
[32m+[m		[32m//[m
[32m+[m		[32m//       However, load_class() instantiates classes[m
[32m+[m		[32m//       to cache them for later use and that prevents[m
[32m+[m		[32m//       MY_Model from being an abstract class and is[m
[32m+[m		[32m//       sub-optimal otherwise anyway.[m
[32m+[m		[32mif ( ! class_exists('CI_Model', FALSE))[m
[32m+[m		[32m{[m
[32m+[m			[32m$app_path = APPPATH.'core'.DIRECTORY_SEPARATOR;[m
[32m+[m			[32mif (file_exists($app_path.'Model.php'))[m
[32m+[m			[32m{[m
[32m+[m				[32mrequire_once($app_path.'Model.php');[m
[32m+[m				[32mif ( ! class_exists('CI_Model', FALSE))[m
[32m+[m				[32m{[m
[32m+[m					[32mthrow new RuntimeException($app_path."Model.php exists, but doesn't declare class CI_Model");[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mlog_message('info', 'CI_Model class loaded');[m
[32m+[m			[32m}[m
[32m+[m			[32melseif ( ! class_exists('CI_Model', FALSE))[m
[32m+[m			[32m{[m
[32m+[m				[32mrequire_once(BASEPATH.'core'.DIRECTORY_SEPARATOR.'Model.php');[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$class = config_item('subclass_prefix').'Model';[m
[32m+[m			[32mif (file_exists($app_path.$class.'.php'))[m
[32m+[m			[32m{[m
[32m+[m				[32mrequire_once($app_path.$class.'.php');[m
[32m+[m				[32mif ( ! class_exists($class, FALSE))[m
[32m+[m				[32m{[m
[32m+[m					[32mthrow new RuntimeException($app_path.$class.".php exists, but doesn't declare class ".$class);[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mlog_message('info', config_item('subclass_prefix').'Model class loaded');[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$model = ucfirst($model);[m
[32m+[m		[32mif ( ! class_exists($model, FALSE))[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($this->_ci_model_paths as $mod_path)[m
[32m+[m			[32m{[m
[32m+[m				[32mif ( ! file_exists($mod_path.'models/'.$path.$model.'.php'))[m
[32m+[m				[32m{[m
[32m+[m					[32mcontinue;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mrequire_once($mod_path.'models/'.$path.$model.'.php');[m
[32m+[m				[32mif ( ! class_exists($model, FALSE))[m
[32m+[m				[32m{[m
[32m+[m					[32mthrow new RuntimeException($mod_path."models/".$path.$model.".php exists, but doesn't declare class ".$model);[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mbreak;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif ( ! class_exists($model, FALSE))[m
[32m+[m			[32m{[m
[32m+[m				[32mthrow new RuntimeException('Unable to locate the model you have specified: '.$model);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! is_subclass_of($model, 'CI_Model'))[m
[32m+[m		[32m{[m
[32m+[m			[32mthrow new RuntimeException("Class ".$model." already exists and doesn't extend CI_Model");[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->_ci_models[] = $name;[m
[32m+[m		[32m$model = new $model();[m
[32m+[m		[32m$CI->$name = $model;[m
[32m+[m		[32mlog_message('info', 'Model "'.get_class($model).'" initialized');[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database Loader[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	$params		Database configuration options[m
[32m+[m	[32m * @param	bool	$return 	Whether to return the database object[m
[32m+[m	[32m * @param	bool	$query_builder	Whether to enable Query Builder[m
[32m+[m	[32m *					(overrides the configuration setting)[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	object|bool	Database object if $return is set to TRUE,[m
[32m+[m	[32m *					FALSE on failure, CI_Loader instance in any other case[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function database($params = '', $return = FALSE, $query_builder = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Grab the super object[m
[32m+[m		[32m$CI =& get_instance();[m
[32m+[m
[32m+[m		[32m// Do we even need to load the database class?[m
[32m+[m		[32mif ($return === FALSE && $query_builder === NULL && isset($CI->db) && is_object($CI->db) && ! empty($CI->db->conn_id))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mrequire_once(BASEPATH.'database/DB.php');[m
[32m+[m
[32m+[m		[32mif ($return === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn DB($params, $query_builder);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Initialize the db variable. Needed to prevent[m
[32m+[m		[32m// reference errors with some configurations[m
[32m+[m		[32m$CI->db = '';[m
[32m+[m
[32m+[m		[32m// Load the DB class[m
[32m+[m		[32m$CI->db =& DB($params, $query_builder);[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Load the Database Utilities Class[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	object	$db	Database object[m
[32m+[m	[32m * @param	bool	$return	Whether to return the DB Utilities class object or not[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function dbutil($db = NULL, $return = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$CI =& get_instance();[m
[32m+[m
[32m+[m		[32mif ( ! is_object($db) OR ! ($db instanceof CI_DB))[m
[32m+[m		[32m{[m
[32m+[m			[32mclass_exists('CI_DB', FALSE) OR $this->database();[m
[32m+[m			[32m$db =& $CI->db;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mrequire_once(BASEPATH.'database/DB_utility.php');[m
[32m+[m		[32mrequire_once(BASEPATH.'database/drivers/'.$db->dbdriver.'/'.$db->dbdriver.'_utility.php');[m
[32m+[m		[32m$class = 'CI_DB_'.$db->dbdriver.'_utility';[m
[32m+[m
[32m+[m		[32mif ($return === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn new $class($db);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$CI->dbutil = new $class($db);[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Load the Database Forge Class[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	object	$db	Database object[m
[32m+[m	[32m * @param	bool	$return	Whether to return the DB Forge class object or not[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function dbforge($db = NULL, $return = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$CI =& get_instance();[m
[32m+[m		[32mif ( ! is_object($db) OR ! ($db instanceof CI_DB))[m
[32m+[m		[32m{[m
[32m+[m			[32mclass_exists('CI_DB', FALSE) OR $this->database();[m
[32m+[m			[32m$db =& $CI->db;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mrequire_once(BASEPATH.'database/DB_forge.php');[m
[32m+[m		[32mrequire_once(BASEPATH.'database/drivers/'.$db->dbdriver.'/'.$db->dbdriver.'_forge.php');[m
[32m+[m
[32m+[m		[32mif ( ! empty($db->subdriver))[m
[32m+[m		[32m{[m
[32m+[m			[32m$driver_path = BASEPATH.'database/drivers/'.$db->dbdriver.'/subdrivers/'.$db->dbdriver.'_'.$db->subdriver.'_forge.php';[m
[32m+[m			[32mif (file_exists($driver_path))[m
[32m+[m			[32m{[m
[32m+[m				[32mrequire_once($driver_path);[m
[32m+[m				[32m$class = 'CI_DB_'.$db->dbdriver.'_'.$db->subdriver.'_forge';[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$class = 'CI_DB_'.$db->dbdriver.'_forge';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($return === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn new $class($db);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$CI->dbforge = new $class($db);[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * View Loader[m
[32m+[m	[32m *[m
[32m+[m	[32m * Loads "view" files.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$view	View name[m
[32m+[m	[32m * @param	array	$vars	An associative array of data[m
[32m+[m	[32m *				to be extracted for use in the view[m
[32m+[m	[32m * @param	bool	$return	Whether to return the view output[m
[32m+[m	[32m *				or leave it to the Output class[m
[32m+[m	[32m * @return	object|string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function view($view, $vars = array(), $return = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_ci_load(array('_ci_view' => $view, '_ci_vars' => $this->_ci_prepare_view_vars($vars), '_ci_return' => $return));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Generic File Loader[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$path	File path[m
[32m+[m	[32m * @param	bool	$return	Whether to return the file output[m
[32m+[m	[32m * @return	object|string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function file($path, $return = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_ci_load(array('_ci_path' => $path, '_ci_return' => $return));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set Variables[m
[32m+[m	[32m *[m
[32m+[m	[32m * Once variables are set they become available within[m
[32m+[m	[32m * the controller class and its "view" files.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array|object|string	$vars[m
[32m+[m	[32m *					An associative array or object containing values[m
[32m+[m	[32m *					to be set, or a value's name if string[m
[32m+[m	[32m * @param 	string	$val	Value to set, only used if $vars is a string[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function vars($vars, $val = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$vars = is_string($vars)[m
[32m+[m			[32m? array($vars => $val)[m
[32m+[m			[32m: $this->_ci_prepare_view_vars($vars);[m
[32m+[m
[32m+[m		[32mforeach ($vars as $key => $val)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_ci_cached_vars[$key] = $val;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Clear Cached Variables[m
[32m+[m	[32m *[m
[32m+[m	[32m * Clears the cached variables.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	CI_Loader[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function clear_vars()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->_ci_cached_vars = array();[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get Variable[m
[32m+[m	[32m *[m
[32m+[m	[32m * Check if a variable is set and retrieve it.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$key	Variable name[m
[32m+[m	[32m * @return	mixed	The variable or NULL if not found[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get_var($key)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn isset($this->_ci_cached_vars[$key]) ? $this->_ci_cached_vars[$key] : NULL;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get Variables[m
[32m+[m	[32m *[m
[32m+[m	[32m * Retrieves all loaded variables.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get_vars()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_ci_cached_vars;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Helper Loader[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string|string[]	$helpers	Helper name(s)[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function helper($helpers = array())[m
[32m+[m	[32m{[m
[32m+[m		[32mis_array($helpers) OR $helpers = array($helpers);[m
[32m+[m		[32mforeach ($helpers as &$helper)[m
[32m+[m		[32m{[m
[32m+[m			[32m$filename = basename($helper);[m
[32m+[m			[32m$filepath = ($filename === $helper) ? '' : substr($helper, 0, strlen($helper) - strlen($filename));[m
[32m+[m			[32m$filename = strtolower(preg_replace('#(_helper)?(\.php)?$#i', '', $filename)).'_helper';[m
[32m+[m			[32m$helper   = $filepath.$filename;[m
[32m+[m
[32m+[m			[32mif (isset($this->_ci_helpers[$helper]))[m
[32m+[m			[32m{[m
[32m+[m				[32mcontinue;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// Is this a helper extension request?[m
[32m+[m			[32m$ext_helper = config_item('subclass_prefix').$filename;[m
[32m+[m			[32m$ext_loaded = FALSE;[m
[32m+[m			[32mforeach ($this->_ci_helper_paths as $path)[m
[32m+[m			[32m{[m
[32m+[m				[32mif (file_exists($path.'helpers/'.$ext_helper.'.php'))[m
[32m+[m				[32m{[m
[32m+[m					[32minclude_once($path.'helpers/'.$ext_helper.'.php');[m
[32m+[m					[32m$ext_loaded = TRUE;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// If we have loaded extensions - check if the base one is here[m
[32m+[m			[32mif ($ext_loaded === TRUE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$base_helper = BASEPATH.'helpers/'.$helper.'.php';[m
[32m+[m				[32mif ( ! file_exists($base_helper))[m
[32m+[m				[32m{[m
[32m+[m					[32mshow_error('Unable to load the requested file: helpers/'.$helper.'.php');[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32minclude_once($base_helper);[m
[32m+[m				[32m$this->_ci_helpers[$helper] = TRUE;[m
[32m+[m				[32mlog_message('info', 'Helper loaded: '.$helper);[m
[32m+[m				[32mcontinue;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// No extensions found ... try loading regular helpers and/or overrides[m
[32m+[m			[32mforeach ($this->_ci_helper_paths as $path)[m
[32m+[m			[32m{[m
[32m+[m				[32mif (file_exists($path.'helpers/'.$helper.'.php'))[m
[32m+[m				[32m{[m
[32m+[m					[32minclude_once($path.'helpers/'.$helper.'.php');[m
[32m+[m
[32m+[m					[32m$this->_ci_helpers[$helper] = TRUE;[m
[32m+[m					[32mlog_message('info', 'Helper loaded: '.$helper);[m
[32m+[m					[32mbreak;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// unable to load the helper[m
[32m+[m			[32mif ( ! isset($this->_ci_helpers[$helper]))[m
[32m+[m			[32m{[m
[32m+[m				[32mshow_error('Unable to load the requested file: helpers/'.$helper.'.php');[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Load Helpers[m
[32m+[m	[32m *[m
[32m+[m	[32m * An alias for the helper() method in case the developer has[m
[32m+[m	[32m * written the plural form of it.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @uses	CI_Loader::helper()[m
[32m+[m	[32m * @param	string|string[]	$helpers	Helper name(s)[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function helpers($helpers = array())[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->helper($helpers);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Language Loader[m
[32m+[m	[32m *[m
[32m+[m	[32m * Loads language files.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string|string[]	$files	List of language file names to load[m
[32m+[m	[32m * @param	string		Language name[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function language($files, $lang = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mget_instance()->lang->load($files, $lang);[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Config Loader[m
[32m+[m	[32m *[m
[32m+[m	[32m * Loads a config file (an alias for CI_Config::load()).[m
[32m+[m	[32m *[m
[32m+[m	[32m * @uses	CI_Config::load()[m
[32m+[m	[32m * @param	string	$file			Configuration file name[m
[32m+[m	[32m * @param	bool	$use_sections		Whether configuration values should be loaded into their own section[m
[32m+[m	[32m * @param	bool	$fail_gracefully	Whether to just return FALSE or display an error message[m
[32m+[m	[32m * @return	bool	TRUE if the file was loaded correctly or FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function config($file, $use_sections = FALSE, $fail_gracefully = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn get_instance()->config->load($file, $use_sections, $fail_gracefully);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Driver Loader[m
[32m+[m	[32m *[m
[32m+[m	[32m * Loads a driver library.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string|string[]	$library	Driver name(s)[m
[32m+[m	[32m * @param	array		$params		Optional parameters to pass to the driver[m
[32m+[m	[32m * @param	string		$object_name	An optional object name to assign to[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	object|bool	Object or FALSE on failure if $library is a string[m
[32m+[m	[32m *				and $object_name is set. CI_Loader instance otherwise.[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function driver($library, $params = NULL, $object_name = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (is_array($library))[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($library as $key => $value)[m
[32m+[m			[32m{[m
[32m+[m				[32mif (is_int($key))[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->driver($value, $params);[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->driver($key, $params, $value);[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn $this;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (empty($library))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! class_exists('CI_Driver_Library', FALSE))[m
[32m+[m		[32m{[m
[32m+[m			[32m// We aren't instantiating an object here, just making the base class available[m
[32m+[m			[32mrequire BASEPATH.'libraries/Driver.php';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// We can save the loader some time since Drivers will *always* be in a subfolder,[m
[32m+[m		[32m// and typically identically named to the library[m
[32m+[m		[32mif ( ! strpos($library, '/'))[m
[32m+[m		[32m{[m
[32m+[m			[32m$library = ucfirst($library).'/'.$library;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->library($library, $params, $object_name);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Add Package Path[m
[32m+[m	[32m *[m
[32m+[m	[32m * Prepends a parent path to the library, model, helper and config[m
[32m+[m	[32m * path arrays.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @see	CI_Loader::$_ci_library_paths[m
[32m+[m	[32m * @see	CI_Loader::$_ci_model_paths[m
[32m+[m	[32m * @see CI_Loader::$_ci_helper_paths[m
[32m+[m	[32m * @see CI_Config::$_config_paths[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$path		Path to add[m
[32m+[m	[32m * @param 	bool	$view_cascade	(default: TRUE)[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function add_package_path($path, $view_cascade = TRUE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$path = rtrim($path, '/').'/';[m
[32m+[m
[32m+[m		[32marray_unshift($this->_ci_library_paths, $path);[m
[32m+[m		[32marray_unshift($this->_ci_model_paths, $path);[m
[32m+[m		[32marray_unshift($this->_ci_helper_paths, $path);[m
[32m+[m
[32m+[m		[32m$this->_ci_view_paths = array($path.'views/' => $view_cascade) + $this->_ci_view_paths;[m
[32m+[m
[32m+[m		[32m// Add config file path[m
[32m+[m		[32m$config =& $this->_ci_get_component('config');[m
[32m+[m		[32m$config->_config_paths[] = $path;[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get Package Paths[m
[32m+[m	[32m *[m
[32m+[m	[32m * Return a list of all package paths.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$include_base	Whether to include BASEPATH (default: FALSE)[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get_package_paths($include_base = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn ($include_base === TRUE) ? $this->_ci_library_paths : $this->_ci_model_paths;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Remove Package Path[m
[32m+[m	[32m *[m
[32m+[m	[32m * Remove a path from the library, model, helper and/or config[m
[32m+[m	[32m * path arrays if it exists. If no path is provided, the most recently[m
[32m+[m	[32m * added path will be removed removed.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$path	Path to remove[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function remove_package_path($path = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$config =& $this->_ci_get_component('config');[m
[32m+[m
[32m+[m		[32mif ($path === '')[m
[32m+[m		[32m{[m
[32m+[m			[32marray_shift($this->_ci_library_paths);[m
[32m+[m			[32marray_shift($this->_ci_model_paths);[m
[32m+[m			[32marray_shift($this->_ci_helper_paths);[m
[32m+[m			[32marray_shift($this->_ci_view_paths);[m
[32m+[m			[32marray_pop($config->_config_paths);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$path = rtrim($path, '/').'/';[m
[32m+[m			[32mforeach (array('_ci_library_paths', '_ci_model_paths', '_ci_helper_paths') as $var)[m
[32m+[m			[32m{[m
[32m+[m				[32mif (($key = array_search($path, $this->{$var})) !== FALSE)[m
[32m+[m				[32m{[m
[32m+[m					[32munset($this->{$var}[$key]);[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (isset($this->_ci_view_paths[$path.'views/']))[m
[32m+[m			[32m{[m
[32m+[m				[32munset($this->_ci_view_paths[$path.'views/']);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (($key = array_search($path, $config->_config_paths)) !== FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32munset($config->_config_paths[$key]);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// make sure the application default paths are still in the array[m
[32m+[m		[32m$this->_ci_library_paths = array_unique(array_merge($this->_ci_library_paths, array(APPPATH, BASEPATH)));[m
[32m+[m		[32m$this->_ci_helper_paths = array_unique(array_merge($this->_ci_helper_paths, array(APPPATH, BASEPATH)));[m
[32m+[m		[32m$this->_ci_model_paths = array_unique(array_merge($this->_ci_model_paths, array(APPPATH)));[m
[32m+[m		[32m$this->_ci_view_paths = array_merge($this->_ci_view_paths, array(APPPATH.'views/' => TRUE));[m
[32m+[m		[32m$config->_config_paths = array_unique(array_merge($config->_config_paths, array(APPPATH)));[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Internal CI Data Loader[m
[32m+[m	[32m *[m
[32m+[m	[32m * Used to load views and files.[m
[32m+[m	[32m *[m
[32m+[m	[32m * Variables are prefixed with _ci_ to avoid symbol collision with[m
[32m+[m	[32m * variables made available to view files.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @used-by	CI_Loader::view()[m
[32m+[m	[32m * @used-by	CI_Loader::file()[m
[32m+[m	[32m * @param	array	$_ci_data	Data to load[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _ci_load($_ci_data)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Set the default data variables[m
[32m+[m		[32mforeach (array('_ci_view', '_ci_vars', '_ci_path', '_ci_return') as $_ci_val)[m
[32m+[m		[32m{[m
[32m+[m			[32m$$_ci_val = isset($_ci_data[$_ci_val]) ? $_ci_data[$_ci_val] : FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$file_exists = FALSE;[m
[32m+[m
[32m+[m		[32m// Set the path to the requested file[m
[32m+[m		[32mif (is_string($_ci_path) && $_ci_path !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$_ci_x = explode('/', $_ci_path);[m
[32m+[m			[32m$_ci_file = end($_ci_x);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$_ci_ext = pathinfo($_ci_view, PATHINFO_EXTENSION);[m
[32m+[m			[32m$_ci_file = ($_ci_ext === '') ? $_ci_view.'.php' : $_ci_view;[m
[32m+[m
[32m+[m			[32mforeach ($this->_ci_view_paths as $_ci_view_file => $cascade)[m
[32m+[m			[32m{[m
[32m+[m				[32mif (file_exists($_ci_view_file.$_ci_file))[m
[32m+[m				[32m{[m
[32m+[m					[32m$_ci_path = $_ci_view_file.$_ci_file;[m
[32m+[m					[32m$file_exists = TRUE;[m
[32m+[m					[32mbreak;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mif ( ! $cascade)[m
[32m+[m				[32m{[m
[32m+[m					[32mbreak;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! $file_exists && ! file_exists($_ci_path))[m
[32m+[m		[32m{[m
[32m+[m			[32mshow_error('Unable to load the requested file: '.$_ci_file);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// This allows anything loaded using $this->load (views, files, etc.)[m
[32m+[m		[32m// to become accessible from within the Controller and Model functions.[m
[32m+[m		[32m$_ci_CI =& get_instance();[m
[32m+[m		[32mforeach (get_object_vars($_ci_CI) as $_ci_key => $_ci_var)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ( ! isset($this->$_ci_key))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->$_ci_key =& $_ci_CI->$_ci_key;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m/*[m
[32m+[m		[32m * Extract and cache variables[m
[32m+[m		[32m *[m
[32m+[m		[32m * You can either set variables using the dedicated $this->load->vars()[m
[32m+[m		[32m * function or via the second parameter of this function. We'll merge[m
[32m+[m		[32m * the two types and cache them so that views that are embedded within[m
[32m+[m		[32m * other views can have access to these variables.[m
[32m+[m		[32m */[m
[32m+[m		[32mempty($_ci_vars) OR $this->_ci_cached_vars = array_merge($this->_ci_cached_vars, $_ci_vars);[m
[32m+[m		[32mextract($this->_ci_cached_vars);[m
[32m+[m
[32m+[m		[32m/*[m
[32m+[m		[32m * Buffer the output[m
[32m+[m		[32m *[m
[32m+[m		[32m * We buffer the output for two reasons:[m
[32m+[m		[32m * 1. Speed. You get a significant speed boost.[m
[32m+[m		[32m * 2. So that the final rendered template can be post-processed by[m
[32m+[m		[32m *	the output class. Why do we need post processing? For one thing,[m
[32m+[m		[32m *	in order to show the elapsed page load time. Unless we can[m
[32m+[m		[32m *	intercept the content right before it's sent to the browser and[m
[32m+[m		[32m *	then stop the timer it won't be accurate.[m
[32m+[m		[32m */[m
[32m+[m		[32mob_start();[m
[32m+[m
[32m+[m		[32m// If the PHP installation does not support short tags we'll[m
[32m+[m		[32m// do a little string replacement, changing the short tags[m
[32m+[m		[32m// to standard PHP echo statements.[m
[32m+[m		[32mif ( ! is_php('5.4') && ! ini_get('short_open_tag') && config_item('rewrite_short_tags') === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32mecho eval('?>'.preg_replace('/;*\s*\?>/', '; ?>', str_replace('<?=', '<?php echo ', file_get_contents($_ci_path))));[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32minclude($_ci_path); // include() vs include_once() allows for multiple views with the same name[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mlog_message('info', 'File loaded: '.$_ci_path);[m
[32m+[m
[32m+[m		[32m// Return the file data if requested[m
[32m+[m		[32mif ($_ci_return === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$buffer = ob_get_contents();[m
[32m+[m			[32m@ob_end_clean();[m
[32m+[m			[32mreturn $buffer;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m/*[m
[32m+[m		[32m * Flush the buffer... or buff the flusher?[m
[32m+[m		[32m *[m
[32m+[m		[32m * In order to permit views to be nested within[m
[32m+[m		[32m * other views, we need to flush the content back out whenever[m
[32m+[m		[32m * we are beyond the first level of output buffering so that[m
[32m+[m		[32m * it can be seen and included properly by the first included[m
[32m+[m		[32m * template and any subsequent ones. Oy![m
[32m+[m		[32m */[m
[32m+[m		[32mif (ob_get_level() > $this->_ci_ob_level + 1)[m
[32m+[m		[32m{[m
[32m+[m			[32mob_end_flush();[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$_ci_CI->output->append_output(ob_get_contents());[m
[32m+[m			[32m@ob_end_clean();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Internal CI Library Loader[m
[32m+[m	[32m *[m
[32m+[m	[32m * @used-by	CI_Loader::library()[m
[32m+[m	[32m * @uses	CI_Loader::_ci_init_library()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$class		Class name to load[m
[32m+[m	[32m * @param	mixed	$params		Optional parameters to pass to the class constructor[m
[32m+[m	[32m * @param	string	$object_name	Optional object name to assign to[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _ci_load_library($class, $params = NULL, $object_name = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Get the class name, and while we're at it trim any slashes.[m
[32m+[m		[32m// The directory path can be included as part of the class name,[m
[32m+[m		[32m// but we don't want a leading slash[m
[32m+[m		[32m$class = str_replace('.php', '', trim($class, '/'));[m
[32m+[m
[32m+[m		[32m// Was the path included with the class name?[m
[32m+[m		[32m// We look for a slash to determine this[m
[32m+[m		[32mif (($last_slash = strrpos($class, '/')) !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m// Extract the path[m
[32m+[m			[32m$subdir = substr($class, 0, ++$last_slash);[m
[32m+[m
[32m+[m			[32m// Get the filename from the path[m
[32m+[m			[32m$class = substr($class, $last_slash);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$subdir = '';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$class = ucfirst($class);[m
[32m+[m
[32m+[m		[32m// Is this a stock library? There are a few special conditions if so ...[m
[32m+[m		[32mif (file_exists(BASEPATH.'libraries/'.$subdir.$class.'.php'))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->_ci_load_stock_library($class, $subdir, $params, $object_name);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Safety: Was the class already loaded by a previous call?[m
[32m+[m		[32mif (class_exists($class, FALSE))[m
[32m+[m		[32m{[m
[32m+[m			[32m$property = $object_name;[m
[32m+[m			[32mif (empty($property))[m
[32m+[m			[32m{[m
[32m+[m				[32m$property = strtolower($class);[m
[32m+[m				[32misset($this->_ci_varmap[$property]) && $property = $this->_ci_varmap[$property];[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$CI =& get_instance();[m
[32m+[m			[32mif (isset($CI->$property))[m
[32m+[m			[32m{[m
[32m+[m				[32mlog_message('debug', $class.' class already loaded. Second attempt ignored.');[m
[32m+[m				[32mreturn;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn $this->_ci_init_library($class, '', $params, $object_name);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Let's search for the requested library file and load it.[m
[32m+[m		[32mforeach ($this->_ci_library_paths as $path)[m
[32m+[m		[32m{[m
[32m+[m			[32m// BASEPATH has already been checked for[m
[32m+[m			[32mif ($path === BASEPATH)[m
[32m+[m			[32m{[m
[32m+[m				[32mcontinue;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$filepath = $path.'libraries/'.$subdir.$class.'.php';[m
[32m+[m			[32m// Does the file exist? No? Bummer...[m
[32m+[m			[32mif ( ! file_exists($filepath))[m
[32m+[m			[32m{[m
[32m+[m				[32mcontinue;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32minclude_once($filepath);[m
[32m+[m			[32mreturn $this->_ci_init_library($class, '', $params, $object_name);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// One last attempt. Maybe the library is in a subdirectory, but it wasn't specified?[m
[32m+[m		[32mif ($subdir === '')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->_ci_load_library($class.'/'.$class, $params, $object_name);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// If we got this far we were unable to find the requested class.[m
[32m+[m		[32mlog_message('error', 'Unable to load the requested class: '.$class);[m
[32m+[m		[32mshow_error('Unable to load the requested class: '.$class);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Internal CI Stock Library Loader[m
[32m+[m	[32m *[m
[32m+[m	[32m * @used-by	CI_Loader::_ci_load_library()[m
[32m+[m	[32m * @uses	CI_Loader::_ci_init_library()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$library_name	Library name to load[m
[32m+[m	[32m * @param	string	$file_path	Path to the library filename, relative to libraries/[m
[32m+[m	[32m * @param	mixed	$params		Optional parameters to pass to the class constructor[m
[32m+[m	[32m * @param	string	$object_name	Optional object name to assign to[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _ci_load_stock_library($library_name, $file_path, $params, $object_name)[m
[32m+[m	[32m{[m
[32m+[m		[32m$prefix = 'CI_';[m
[32m+[m
[32m+[m		[32mif (class_exists($prefix.$library_name, FALSE))[m
[32m+[m		[32m{[m
[32m+[m			[32mif (class_exists(config_item('subclass_prefix').$library_name, FALSE))[m
[32m+[m			[32m{[m
[32m+[m				[32m$prefix = config_item('subclass_prefix');[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$property = $object_name;[m
[32m+[m			[32mif (empty($property))[m
[32m+[m			[32m{[m
[32m+[m				[32m$property = strtolower($library_name);[m
[32m+[m				[32misset($this->_ci_varmap[$property]) && $property = $this->_ci_varmap[$property];[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$CI =& get_instance();[m
[32m+[m			[32mif ( ! isset($CI->$property))[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn $this->_ci_init_library($library_name, $prefix, $params, $object_name);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mlog_message('debug', $library_name.' class already loaded. Second attempt ignored.');[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$paths = $this->_ci_library_paths;[m
[32m+[m		[32marray_pop($paths); // BASEPATH[m
[32m+[m		[32marray_pop($paths); // APPPATH (needs to be the first path checked)[m
[32m+[m		[32marray_unshift($paths, APPPATH);[m
[32m+[m
[32m+[m		[32mforeach ($paths as $path)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (file_exists($path = $path.'libraries/'.$file_path.$library_name.'.php'))[m
[32m+[m			[32m{[m
[32m+[m				[32m// Override[m
[32m+[m				[32minclude_once($path);[m
[32m+[m				[32mif (class_exists($prefix.$library_name, FALSE))[m
[32m+[m				[32m{[m
[32m+[m					[32mreturn $this->_ci_init_library($library_name, $prefix, $params, $object_name);[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mlog_message('debug', $path.' exists, but does not declare '.$prefix.$library_name);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32minclude_once(BASEPATH.'libraries/'.$file_path.$library_name.'.php');[m
[32m+[m
[32m+[m		[32m// Check for extensions[m
[32m+[m		[32m$subclass = config_item('subclass_prefix').$library_name;[m
[32m+[m		[32mforeach ($paths as $path)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (file_exists($path = $path.'libraries/'.$file_path.$subclass.'.php'))[m
[32m+[m			[32m{[m
[32m+[m				[32minclude_once($path);[m
[32m+[m				[32mif (class_exists($subclass, FALSE))[m
[32m+[m				[32m{[m
[32m+[m					[32m$prefix = config_item('subclass_prefix');[m
[32m+[m					[32mbreak;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mlog_message('debug', $path.' exists, but does not declare '.$subclass);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->_ci_init_library($library_name, $prefix, $params, $object_name);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Internal CI Library Instantiator[m
[32m+[m	[32m *[m
[32m+[m	[32m * @used-by	CI_Loader::_ci_load_stock_library()[m
[32m+[m	[32m * @used-by	CI_Loader::_ci_load_library()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string		$class		Class name[m
[32m+[m	[32m * @param	string		$prefix		Class name prefix[m
[32m+[m	[32m * @param	array|null|bool	$config		Optional configuration to pass to the class constructor:[m
[32m+[m	[32m *						FALSE to skip;[m
[32m+[m	[32m *						NULL to search in config paths;[m
[32m+[m	[32m *						array containing configuration data[m
[32m+[m	[32m * @param	string		$object_name	Optional object name to assign to[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _ci_init_library($class, $prefix, $config = FALSE, $object_name = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Is there an associated config file for this class? Note: these should always be lowercase[m
[32m+[m		[32mif ($config === NULL)[m
[32m+[m		[32m{[m
[32m+[m			[32m// Fetch the config paths containing any package paths[m
[32m+[m			[32m$config_component = $this->_ci_get_component('config');[m
[32m+[m
[32m+[m			[32mif (is_array($config_component->_config_paths))[m
[32m+[m			[32m{[m
[32m+[m				[32m$found = FALSE;[m
[32m+[m				[32mforeach ($config_component->_config_paths as $path)[m
[32m+[m				[32m{[m
[32m+[m					[32m// We test for both uppercase and lowercase, for servers that[m
[32m+[m					[32m// are case-sensitive with regard to file names. Load global first,[m
[32m+[m					[32m// override with environment next[m
[32m+[m					[32mif (file_exists($path.'config/'.strtolower($class).'.php'))[m
[32m+[m					[32m{[m
[32m+[m						[32minclude($path.'config/'.strtolower($class).'.php');[m
[32m+[m						[32m$found = TRUE;[m
[32m+[m					[32m}[m
[32m+[m					[32melseif (file_exists($path.'config/'.ucfirst(strtolower($class)).'.php'))[m
[32m+[m					[32m{[m
[32m+[m						[32minclude($path.'config/'.ucfirst(strtolower($class)).'.php');[m
[32m+[m						[32m$found = TRUE;[m
[32m+[m					[32m}[m
[32m+[m
[32m+[m					[32mif (file_exists($path.'config/'.ENVIRONMENT.'/'.strtolower($class).'.php'))[m
[32m+[m					[32m{[m
[32m+[m						[32minclude($path.'config/'.ENVIRONMENT.'/'.strtolower($class).'.php');[m
[32m+[m						[32m$found = TRUE;[m
[32m+[m					[32m}[m
[32m+[m					[32melseif (file_exists($path.'config/'.ENVIRONMENT.'/'.ucfirst(strtolower($class)).'.php'))[m
[32m+[m					[32m{[m
[32m+[m						[32minclude($path.'config/'.ENVIRONMENT.'/'.ucfirst(strtolower($class)).'.php');[m
[32m+[m						[32m$found = TRUE;[m
[32m+[m					[32m}[m
[32m+[m
[32m+[m					[32m// Break on the first found configuration, thus package[m
[32m+[m					[32m// files are not overridden by default paths[m
[32m+[m					[32mif ($found === TRUE)[m
[32m+[m					[32m{[m
[32m+[m						[32mbreak;[m
[32m+[m					[32m}[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$class_name = $prefix.$class;[m
[32m+[m
[32m+[m		[32m// Is the class name valid?[m
[32m+[m		[32mif ( ! class_exists($class_name, FALSE))[m
[32m+[m		[32m{[m
[32m+[m			[32mlog_message('error', 'Non-existent class: '.$class_name);[m
[32m+[m			[32mshow_error('Non-existent class: '.$class_name);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Set the variable name we will assign the class to[m
[32m+[m		[32m// Was a custom class name supplied? If so we'll use it[m
[32m+[m		[32mif (empty($object_name))[m
[32m+[m		[32m{[m
[32m+[m			[32m$object_name = strtolower($class);[m
[32m+[m			[32mif (isset($this->_ci_varmap[$object_name]))[m
[32m+[m			[32m{[m
[32m+[m				[32m$object_name = $this->_ci_varmap[$object_name];[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Don't overwrite existing properties[m
[32m+[m		[32m$CI =& get_instance();[m
[32m+[m		[32mif (isset($CI->$object_name))[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($CI->$object_name instanceof $class_name)[m
[32m+[m			[32m{[m
[32m+[m				[32mlog_message('debug', $class_name." has already been instantiated as '".$object_name."'. Second attempt aborted.");[m
[32m+[m				[32mreturn;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mshow_error("Resource '".$object_name."' already exists and is not a ".$class_name." instance.");[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Save the class name and object name[m
[32m+[m		[32m$this->_ci_classes[$object_name] = $class;[m
[32m+[m
[32m+[m		[32m// Instantiate the class[m
[32m+[m		[32m$CI->$object_name = isset($config)[m
[32m+[m			[32m? new $class_name($config)[m
[32m+[m			[32m: new $class_name();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CI Autoloader[m
[32m+[m	[32m *[m
[32m+[m	[32m * Loads component listed in the config/autoload.php file.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @used-by	CI_Loader::initialize()[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _ci_autoloader()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (file_exists(APPPATH.'config/autoload.php'))[m
[32m+[m		[32m{[m
[32m+[m			[32minclude(APPPATH.'config/autoload.php');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (file_exists(APPPATH.'config/'.ENVIRONMENT.'/autoload.php'))[m
[32m+[m		[32m{[m
[32m+[m			[32minclude(APPPATH.'config/'.ENVIRONMENT.'/autoload.php');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! isset($autoload))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Autoload packages[m
[32m+[m		[32mif (isset($autoload['packages']))[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($autoload['packages'] as $package_path)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->add_package_path($package_path);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Load any custom config file[m
[32m+[m		[32mif (count($autoload['config']) > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($autoload['config'] as $val)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->config($val);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Autoload helpers and languages[m
[32m+[m		[32mforeach (array('helper', 'language') as $type)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (isset($autoload[$type]) && count($autoload[$type]) > 0)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->$type($autoload[$type]);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Autoload drivers[m
[32m+[m		[32mif (isset($autoload['drivers']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->driver($autoload['drivers']);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Load libraries[m
[32m+[m		[32mif (isset($autoload['libraries']) && count($autoload['libraries']) > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32m// Load the database driver.[m
[32m+[m			[32mif (in_array('database', $autoload['libraries']))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->database();[m
[32m+[m				[32m$autoload['libraries'] = array_diff($autoload['libraries'], array('database'));[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// Load all other libraries[m
[32m+[m			[32m$this->library($autoload['libraries']);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Autoload models[m
[32m+[m		[32mif (isset($autoload['model']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->model($autoload['model']);[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Prepare variables for _ci_vars, to be later extract()-ed inside views[m
[32m+[m	[32m *[m
[32m+[m	[32m * Converts objects to associative arrays and filters-out internal[m
[32m+[m	[32m * variable names (i.e. keys prefixed with '_ci_').[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	$vars[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _ci_prepare_view_vars($vars)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! is_array($vars))[m
[32m+[m		[32m{[m
[32m+[m			[32m$vars = is_object($vars)[m
[32m+[m				[32m? get_object_vars($vars)[m
[32m+[m				[32m: array();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mforeach (array_keys($vars) as $key)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (strncmp($key, '_ci_', 4) === 0)[m
[32m+[m			[32m{[m
[32m+[m				[32munset($vars[$key]);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $vars;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CI Component getter[m
[32m+[m	[32m *[m
[32m+[m	[32m * Get a reference to a specific library or model.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param 	string	$component	Component name[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function &_ci_get_component($component)[m
[32m+[m	[32m{[m
[32m+[m		[32m$CI =& get_instance();[m
[32m+[m		[32mreturn $CI->$component;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/core/Log.php b/system/core/Log.php[m
[1mnew file mode 100644[m
[1mindex 0000000..a2b464c[m
[1m--- /dev/null[m
[1m+++ b/system/core/Log.php[m
[36m@@ -0,0 +1,296 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Logging Class[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Libraries[m
[32m+[m[32m * @category	Logging[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/general/errors.html[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_Log {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Path to save log files[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_log_path;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * File permissions[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	int[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_file_permissions = 0644;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Level of logging[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var int[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_threshold = 1;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Array of threshold levels to log[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_threshold_array = array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Format of timestamp for log files[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_date_fmt = 'Y-m-d H:i:s';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Filename extension[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_file_ext;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Whether or not the logger can write to the log files[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_enabled = TRUE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Predefined logging levels[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_levels = array('ERROR' => 1, 'DEBUG' => 2, 'INFO' => 3, 'ALL' => 4);[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * mbstring.func_overload flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected static $func_overload;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct()[m
[32m+[m	[32m{[m
[32m+[m		[32m$config =& get_config();[m
[32m+[m
[32m+[m		[32misset(self::$func_overload) OR self::$func_overload = (extension_loaded('mbstring') && ini_get('mbstring.func_overload'));[m
[32m+[m
[32m+[m		[32m$this->_log_path = ($config['log_path'] !== '') ? $config['log_path'] : APPPATH.'logs/';[m
[32m+[m		[32m$this->_file_ext = (isset($config['log_file_extension']) && $config['log_file_extension'] !== '')[m
[32m+[m			[32m? ltrim($config['log_file_extension'], '.') : 'php';[m
[32m+[m
[32m+[m		[32mfile_exists($this->_log_path) OR mkdir($this->_log_path, 0755, TRUE);[m
[32m+[m
[32m+[m		[32mif ( ! is_dir($this->_log_path) OR ! is_really_writable($this->_log_path))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_enabled = FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (is_numeric($config['log_threshold']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_threshold = (int) $config['log_threshold'];[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (is_array($config['log_threshold']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_threshold = 0;[m
[32m+[m			[32m$this->_threshold_array = array_flip($config['log_threshold']);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! empty($config['log_date_format']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_date_fmt = $config['log_date_format'];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! empty($config['log_file_permissions']) && is_int($config['log_file_permissions']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_file_permissions = $config['log_file_permissions'];[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Write Log File[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generally this function will be called using the global log_message() function[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$level 	The error level: 'error', 'debug' or 'info'[m
[32m+[m	[32m * @param	string	$msg 	The error message[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function write_log($level, $msg)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->_enabled === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$level = strtoupper($level);[m
[32m+[m
[32m+[m		[32mif (( ! isset($this->_levels[$level]) OR ($this->_levels[$level] > $this->_threshold))[m
[32m+[m			[32m&& ! isset($this->_threshold_array[$this->_levels[$level]]))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$filepath = $this->_log_path.'log-'.date('Y-m-d').'.'.$this->_file_ext;[m
[32m+[m		[32m$message = '';[m
[32m+[m
[32m+[m		[32mif ( ! file_exists($filepath))[m
[32m+[m		[32m{[m
[32m+[m			[32m$newfile = TRUE;[m
[32m+[m			[32m// Only add protection to php files[m
[32m+[m			[32mif ($this->_file_ext === 'php')[m
[32m+[m			[32m{[m
[32m+[m				[32m$message .= "<?php defined('BASEPATH') OR exit('No direct script access allowed'); ?>\n\n";[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! $fp = @fopen($filepath, 'ab'))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mflock($fp, LOCK_EX);[m
[32m+[m
[32m+[m		[32m// Instantiating DateTime with microseconds appended to initial date is needed for proper support of this format[m
[32m+[m		[32mif (strpos($this->_date_fmt, 'u') !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$microtime_full = microtime(TRUE);[m
[32m+[m			[32m$microtime_short = sprintf("%06d", ($microtime_full - floor($microtime_full)) * 1000000);[m
[32m+[m			[32m$date = new DateTime(date('Y-m-d H:i:s.'.$microtime_short, $microtime_full));[m
[32m+[m			[32m$date = $date->format($this->_date_fmt);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$date = date($this->_date_fmt);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$message .= $this->_format_line($level, $date, $msg);[m
[32m+[m
[32m+[m		[32mfor ($written = 0, $length = self::strlen($message); $written < $length; $written += $result)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (($result = fwrite($fp, self::substr($message, $written))) === FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32mbreak;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mflock($fp, LOCK_UN);[m
[32m+[m		[32mfclose($fp);[m
[32m+[m
[32m+[m		[32mif (isset($newfile) && $newfile === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32mchmod($filepath, $this->_file_permissions);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn is_int($result);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Format the log line.[m
[32m+[m	[32m *[m
[32m+[m	[32m * This is for extensibility of log formatting[m
[32m+[m	[32m * If you want to change the log format, extend the CI_Log class and override this method[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$level 	The error level[m
[32m+[m	[32m * @param	string	$date 	Formatted date string[m
[32m+[m	[32m * @param	string	$message 	The log message[m
[32m+[m	[32m * @return	string	Formatted log line with a new line character '\n' at the end[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _format_line($level, $date, $message)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $level.' - '.$date.' --> '.$message."\n";[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Byte-safe strlen()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$str[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected static function strlen($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn (self::$func_overload)[m
[32m+[m			[32m? mb_strlen($str, '8bit')[m
[32m+[m			[32m: strlen($str);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Byte-safe substr()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$str[m
[32m+[m	[32m * @param	int	$start[m
[32m+[m	[32m * @param	int	$length[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected static function substr($str, $start, $length = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (self::$func_overload)[m
[32m+[m		[32m{[m
[32m+[m			[32m// mb_substr($str, $start, null, '8bit') returns an empty[m
[32m+[m			[32m// string on PHP 5.3[m
[32m+[m			[32misset($length) OR $length = ($start >= 0 ? self::strlen($str) - $start : -$start);[m
[32m+[m			[32mreturn mb_substr($str, $start, $length, '8bit');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn isset($length)[m
[32m+[m			[32m? substr($str, $start, $length)[m
[32m+[m			[32m: substr($str, $start);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/core/Model.php b/system/core/Model.php[m
[1mnew file mode 100644[m
[1mindex 0000000..dd11dd2[m
[1m--- /dev/null[m
[1m+++ b/system/core/Model.php[m
[36m@@ -0,0 +1,76 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Model Class[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Libraries[m
[32m+[m[32m * @category	Libraries[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/libraries/config.html[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_Model {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * @link	https://github.com/bcit-ci/CodeIgniter/issues/5332[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct() {}[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * __get magic[m
[32m+[m	[32m *[m
[32m+[m	[32m * Allows models to access CI's loaded classes using the same[m
[32m+[m	[32m * syntax as controllers.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$key[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __get($key)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Debugging note:[m
[32m+[m		[32m//	If you're here because you're getting an error message[m
[32m+[m		[32m//	saying 'Undefined Property: system/core/Model.php', it's[m
[32m+[m		[32m//	most likely a typo in your model code.[m
[32m+[m		[32mreturn get_instance()->$key;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/core/Output.php b/system/core/Output.php[m
[1mnew file mode 100644[m
[1mindex 0000000..3cda062[m
[1m--- /dev/null[m
[1m+++ b/system/core/Output.php[m
[36m@@ -0,0 +1,842 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Output Class[m
[32m+[m[32m *[m
[32m+[m[32m * Responsible for sending final output to the browser.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Libraries[m
[32m+[m[32m * @category	Output[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/libraries/output.html[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_Output {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Final output string[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $final_output;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Cache expiration time[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $cache_expiration = 0;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of server headers[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $headers = array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of mime types[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $mimes =	array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Mime-type for the current page[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $mime_type = 'text/html';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Enable Profiler flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $enable_profiler = FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * php.ini zlib.output_compression flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_zlib_oc = FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CI output compression flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_compress_output = FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of profiler sections[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_profiler_sections =	array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Parse markers flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * Whether or not to parse variables like {elapsed_time} and {memory_usage}.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $parse_exec_vars = TRUE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * mbstring.func_overload flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected static $func_overload;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * Determines whether zLib output compression will be used.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->_zlib_oc = (bool) ini_get('zlib.output_compression');[m
[32m+[m		[32m$this->_compress_output = ([m
[32m+[m			[32m$this->_zlib_oc === FALSE[m
[32m+[m			[32m&& config_item('compress_output') === TRUE[m
[32m+[m			[32m&& extension_loaded('zlib')[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32misset(self::$func_overload) OR self::$func_overload = (extension_loaded('mbstring') && ini_get('mbstring.func_overload'));[m
[32m+[m
[32m+[m		[32m// Get mime types for later[m
[32m+[m		[32m$this->mimes =& get_mimes();[m
[32m+[m
[32m+[m		[32mlog_message('info', 'Output Class Initialized');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get Output[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the current output string.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get_output()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->final_output;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set Output[m
[32m+[m	[32m *[m
[32m+[m	[32m * Sets the output string.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$output	Output data[m
[32m+[m	[32m * @return	CI_Output[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_output($output)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->final_output = $output;[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Append Output[m
[32m+[m	[32m *[m
[32m+[m	[32m * Appends data onto the output string.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$output	Data to append[m
[32m+[m	[32m * @return	CI_Output[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function append_output($output)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->final_output .= $output;[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set Header[m
[32m+[m	[32m *[m
[32m+[m	[32m * Lets you set a server header which will be sent with the final output.[m
[32m+[m	[32m *[m
[32m+[m	[32m * Note: If a file is cached, headers will not be sent.[m
[32m+[m	[32m * @todo	We need to figure out how to permit headers to be cached.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$header		Header[m
[32m+[m	[32m * @param	bool	$replace	Whether to replace the old header value, if already set[m
[32m+[m	[32m * @return	CI_Output[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_header($header, $replace = TRUE)[m
[32m+[m	[32m{[m
[32m+[m		[32m// If zlib.output_compression is enabled it will compress the output,[m
[32m+[m		[32m// but it will not modify the content-length header to compensate for[m
[32m+[m		[32m// the reduction, causing the browser to hang waiting for more data.[m
[32m+[m		[32m// We'll just skip content-length in those cases.[m
[32m+[m		[32mif ($this->_zlib_oc && strncasecmp($header, 'content-length', 14) === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->headers[] = array($header, $replace);[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set Content-Type Header[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$mime_type	Extension of the file we're outputting[m
[32m+[m	[32m * @param	string	$charset	Character set (default: NULL)[m
[32m+[m	[32m * @return	CI_Output[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_content_type($mime_type, $charset = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (strpos($mime_type, '/') === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$extension = ltrim($mime_type, '.');[m
[32m+[m
[32m+[m			[32m// Is this extension supported?[m
[32m+[m			[32mif (isset($this->mimes[$extension]))[m
[32m+[m			[32m{[m
[32m+[m				[32m$mime_type =& $this->mimes[$extension];[m
[32m+[m
[32m+[m				[32mif (is_array($mime_type))[m
[32m+[m				[32m{[m
[32m+[m					[32m$mime_type = current($mime_type);[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->mime_type = $mime_type;[m
[32m+[m
[32m+[m		[32mif (empty($charset))[m
[32m+[m		[32m{[m
[32m+[m			[32m$charset = config_item('charset');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$header = 'Content-Type: '.$mime_type[m
[32m+[m			[32m.(empty($charset) ? '' : '; charset='.$charset);[m
[32m+[m
[32m+[m		[32m$this->headers[] = array($header, TRUE);[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get Current Content-Type Header[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string	'text/html', if not already set[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get_content_type()[m
[32m+[m	[32m{[m
[32m+[m		[32mfor ($i = 0, $c = count($this->headers); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (sscanf($this->headers[$i][0], 'Content-Type: %[^;]', $content_type) === 1)[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn $content_type;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn 'text/html';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get Header[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$header[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get_header($header)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Combine headers already sent with our batched headers[m
[32m+[m		[32m$headers = array_merge([m
[32m+[m			[32m// We only need [x][0] from our multi-dimensional array[m
[32m+[m			[32marray_map('array_shift', $this->headers),[m
[32m+[m			[32mheaders_list()[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32mif (empty($headers) OR empty($header))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn NULL;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Count backwards, in order to get the last matching header[m
[32m+[m		[32mfor ($c = count($headers) - 1; $c > -1; $c--)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (strncasecmp($header, $headers[$c], $l = self::strlen($header)) === 0)[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn trim(self::substr($headers[$c], $l+1));[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn NULL;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set HTTP Status Header[m
[32m+[m	[32m *[m
[32m+[m	[32m * As of version 1.7.2, this is an alias for common function[m
[32m+[m	[32m * set_status_header().[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	$code	Status code (default: 200)[m
[32m+[m	[32m * @param	string	$text	Optional message[m
[32m+[m	[32m * @return	CI_Output[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_status_header($code = 200, $text = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mset_status_header($code, $text);[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Enable/disable Profiler[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$val	TRUE to enable or FALSE to disable[m
[32m+[m	[32m * @return	CI_Output[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function enable_profiler($val = TRUE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->enable_profiler = is_bool($val) ? $val : TRUE;[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set Profiler Sections[m
[32m+[m	[32m *[m
[32m+[m	[32m * Allows override of default/config settings for[m
[32m+[m	[32m * Profiler section display.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$sections	Profiler sections[m
[32m+[m	[32m * @return	CI_Output[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_profiler_sections($sections)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (isset($sections['query_toggle_count']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_profiler_sections['query_toggle_count'] = (int) $sections['query_toggle_count'];[m
[32m+[m			[32munset($sections['query_toggle_count']);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mforeach ($sections as $section => $enable)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_profiler_sections[$section] = ($enable !== FALSE);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set Cache[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	$time	Cache expiration time in minutes[m
[32m+[m	[32m * @return	CI_Output[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function cache($time)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->cache_expiration = is_numeric($time) ? $time : 0;[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Display Output[m
[32m+[m	[32m *[m
[32m+[m	[32m * Processes and sends finalized output data to the browser along[m
[32m+[m	[32m * with any server headers and profile data. It also stops benchmark[m
[32m+[m	[32m * timers so the page rendering speed and memory usage can be shown.[m
[32m+[m	[32m *[m
[32m+[m	[32m * Note: All "view" data is automatically put into $this->final_output[m
[32m+[m	[32m *	 by controller class.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @uses	CI_Output::$final_output[m
[32m+[m	[32m * @param	string	$output	Output data override[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function _display($output = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m// Note:  We use load_class() because we can't use $CI =& get_instance()[m
[32m+[m		[32m// since this function is sometimes called by the caching mechanism,[m
[32m+[m		[32m// which happens before the CI super object is available.[m
[32m+[m		[32m$BM =& load_class('Benchmark', 'core');[m
[32m+[m		[32m$CFG =& load_class('Config', 'core');[m
[32m+[m
[32m+[m		[32m// Grab the super object if we can.[m
[32m+[m		[32mif (class_exists('CI_Controller', FALSE))[m
[32m+[m		[32m{[m
[32m+[m			[32m$CI =& get_instance();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m		[32m// Set the output data[m
[32m+[m		[32mif ($output === '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$output =& $this->final_output;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m		[32m// Do we need to write a cache file? Only if the controller does not have its[m
[32m+[m		[32m// own _output() method and we are not dealing with a cache file, which we[m
[32m+[m		[32m// can determine by the existence of the $CI object above[m
[32m+[m		[32mif ($this->cache_expiration > 0 && isset($CI) && ! method_exists($CI, '_output'))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_write_cache($output);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m		[32m// Parse out the elapsed time and memory usage,[m
[32m+[m		[32m// then swap the pseudo-variables with the data[m
[32m+[m
[32m+[m		[32m$elapsed = $BM->elapsed_time('total_execution_time_start', 'total_execution_time_end');[m
[32m+[m
[32m+[m		[32mif ($this->parse_exec_vars === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$memory	= round(memory_get_usage() / 1024 / 1024, 2).'MB';[m
[32m+[m			[32m$output = str_replace(array('{elapsed_time}', '{memory_usage}'), array($elapsed, $memory), $output);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m		[32m// Is compression requested?[m
[32m+[m		[32mif (isset($CI) // This means that we're not serving a cache file, if we were, it would already be compressed[m
[32m+[m			[32m&& $this->_compress_output === TRUE[m
[32m+[m			[32m&& isset($_SERVER['HTTP_ACCEPT_ENCODING']) && strpos($_SERVER['HTTP_ACCEPT_ENCODING'], 'gzip') !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mob_start('ob_gzhandler');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m		[32m// Are there any server headers to send?[m
[32m+[m		[32mif (count($this->headers) > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($this->headers as $header)[m
[32m+[m			[32m{[m
[32m+[m				[32m@header($header[0], $header[1]);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m		[32m// Does the $CI object exist?[m
[32m+[m		[32m// If not we know we are dealing with a cache file so we'll[m
[32m+[m		[32m// simply echo out the data and exit.[m
[32m+[m		[32mif ( ! isset($CI))[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($this->_compress_output === TRUE)[m
[32m+[m			[32m{[m
[32m+[m				[32mif (isset($_SERVER['HTTP_ACCEPT_ENCODING']) && strpos($_SERVER['HTTP_ACCEPT_ENCODING'], 'gzip') !== FALSE)[m
[32m+[m				[32m{[m
[32m+[m					[32mheader('Content-Encoding: gzip');[m
[32m+[m					[32mheader('Content-Length: '.self::strlen($output));[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32m// User agent doesn't support gzip compression,[m
[32m+[m					[32m// so we'll have to decompress our cache[m
[32m+[m					[32m$output = gzinflate(self::substr($output, 10, -8));[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mecho $output;[m
[32m+[m			[32mlog_message('info', 'Final output sent to browser');[m
[32m+[m			[32mlog_message('debug', 'Total execution time: '.$elapsed);[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m		[32m// Do we need to generate profile data?[m
[32m+[m		[32m// If so, load the Profile class and run it.[m
[32m+[m		[32mif ($this->enable_profiler === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$CI->load->library('profiler');[m
[32m+[m			[32mif ( ! empty($this->_profiler_sections))[m
[32m+[m			[32m{[m
[32m+[m				[32m$CI->profiler->set_sections($this->_profiler_sections);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// If the output data contains closing </body> and </html> tags[m
[32m+[m			[32m// we will remove them and add them back after we insert the profile data[m
[32m+[m			[32m$output = preg_replace('|</body>.*?</html>|is', '', $output, -1, $count).$CI->profiler->run();[m
[32m+[m			[32mif ($count > 0)[m
[32m+[m			[32m{[m
[32m+[m				[32m$output .= '</body></html>';[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Does the controller contain a function named _output()?[m
[32m+[m		[32m// If so send the output there.  Otherwise, echo it.[m
[32m+[m		[32mif (method_exists($CI, '_output'))[m
[32m+[m		[32m{[m
[32m+[m			[32m$CI->_output($output);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32mecho $output; // Send it to the browser![m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mlog_message('info', 'Final output sent to browser');[m
[32m+[m		[32mlog_message('debug', 'Total execution time: '.$elapsed);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Write Cache[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$output	Output data to cache[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function _write_cache($output)[m
[32m+[m	[32m{[m
[32m+[m		[32m$CI =& get_instance();[m
[32m+[m		[32m$path = $CI->config->item('cache_path');[m
[32m+[m		[32m$cache_path = ($path === '') ? APPPATH.'cache/' : $path;[m
[32m+[m
[32m+[m		[32mif ( ! is_dir($cache_path) OR ! is_really_writable($cache_path))[m
[32m+[m		[32m{[m
[32m+[m			[32mlog_message('error', 'Unable to write cache file: '.$cache_path);[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$uri = $CI->config->item('base_url')[m
[32m+[m			[32m.$CI->config->item('index_page')[m
[32m+[m			[32m.$CI->uri->uri_string();[m
[32m+[m
[32m+[m		[32mif (($cache_query_string = $CI->config->item('cache_query_string')) && ! empty($_SERVER['QUERY_STRING']))[m
[32m+[m		[32m{[m
[32m+[m			[32mif (is_array($cache_query_string))[m
[32m+[m			[32m{[m
[32m+[m				[32m$uri .= '?'.http_build_query(array_intersect_key($_GET, array_flip($cache_query_string)));[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$uri .= '?'.$_SERVER['QUERY_STRING'];[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$cache_path .= md5($uri);[m
[32m+[m
[32m+[m		[32mif ( ! $fp = @fopen($cache_path, 'w+b'))[m
[32m+[m		[32m{[m
[32m+[m			[32mlog_message('error', 'Unable to write cache file: '.$cache_path);[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! flock($fp, LOCK_EX))[m
[32m+[m		[32m{[m
[32m+[m			[32mlog_message('error', 'Unable to secure a file lock for file at: '.$cache_path);[m
[32m+[m			[32mfclose($fp);[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// If output compression is enabled, compress the cache[m
[32m+[m		[32m// itself, so that we don't have to do that each time[m
[32m+[m		[32m// we're serving it[m
[32m+[m		[32mif ($this->_compress_output === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$output = gzencode($output);[m
[32m+[m
[32m+[m			[32mif ($this->get_header('content-type') === NULL)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->set_content_type($this->mime_type);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$expire = time() + ($this->cache_expiration * 60);[m
[32m+[m
[32m+[m		[32m// Put together our serialized info.[m
[32m+[m		[32m$cache_info = serialize(array([m
[32m+[m			[32m'expire'	=> $expire,[m
[32m+[m			[32m'headers'	=> $this->headers[m
[32m+[m		[32m));[m
[32m+[m
[32m+[m		[32m$output = $cache_info.'ENDCI--->'.$output;[m
[32m+[m
[32m+[m		[32mfor ($written = 0, $length = self::strlen($output); $written < $length; $written += $result)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (($result = fwrite($fp, self::substr($output, $written))) === FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32mbreak;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mflock($fp, LOCK_UN);[m
[32m+[m		[32mfclose($fp);[m
[32m+[m
[32m+[m		[32mif ( ! is_int($result))[m
[32m+[m		[32m{[m
[32m+[m			[32m@unlink($cache_path);[m
[32m+[m			[32mlog_message('error', 'Unable to write the complete cache content at: '.$cache_path);[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mchmod($cache_path, 0640);[m
[32m+[m		[32mlog_message('debug', 'Cache file written: '.$cache_path);[m
[32m+[m
[32m+[m		[32m// Send HTTP cache-control headers to browser to match file cache settings.[m
[32m+[m		[32m$this->set_cache_header($_SERVER['REQUEST_TIME'], $expire);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Update/serve cached output[m
[32m+[m	[32m *[m
[32m+[m	[32m * @uses	CI_Config[m
[32m+[m	[32m * @uses	CI_URI[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	object	&$CFG	CI_Config class instance[m
[32m+[m	[32m * @param	object	&$URI	CI_URI class instance[m
[32m+[m	[32m * @return	bool	TRUE on success or FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function _display_cache(&$CFG, &$URI)[m
[32m+[m	[32m{[m
[32m+[m		[32m$cache_path = ($CFG->item('cache_path') === '') ? APPPATH.'cache/' : $CFG->item('cache_path');[m
[32m+[m
[32m+[m		[32m// Build the file path. The file name is an MD5 hash of the full URI[m
[32m+[m		[32m$uri = $CFG->item('base_url').$CFG->item('index_page').$URI->uri_string;[m
[32m+[m
[32m+[m		[32mif (($cache_query_string = $CFG->item('cache_query_string')) && ! empty($_SERVER['QUERY_STRING']))[m
[32m+[m		[32m{[m
[32m+[m			[32mif (is_array($cache_query_string))[m
[32m+[m			[32m{[m
[32m+[m				[32m$uri .= '?'.http_build_query(array_intersect_key($_GET, array_flip($cache_query_string)));[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$uri .= '?'.$_SERVER['QUERY_STRING'];[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$filepath = $cache_path.md5($uri);[m
[32m+[m
[32m+[m		[32mif ( ! file_exists($filepath) OR ! $fp = @fopen($filepath, 'rb'))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mflock($fp, LOCK_SH);[m
[32m+[m
[32m+[m		[32m$cache = (filesize($filepath) > 0) ? fread($fp, filesize($filepath)) : '';[m
[32m+[m
[32m+[m		[32mflock($fp, LOCK_UN);[m
[32m+[m		[32mfclose($fp);[m
[32m+[m
[32m+[m		[32m// Look for embedded serialized file info.[m
[32m+[m		[32mif ( ! preg_match('/^(.*)ENDCI--->/', $cache, $match))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$cache_info = unserialize($match[1]);[m
[32m+[m		[32m$expire = $cache_info['expire'];[m
[32m+[m
[32m+[m		[32m$last_modified = filemtime($filepath);[m
[32m+[m
[32m+[m		[32m// Has the file expired?[m
[32m+[m		[32mif ($_SERVER['REQUEST_TIME'] >= $expire && is_really_writable($cache_path))[m
[32m+[m		[32m{[m
[32m+[m			[32m// If so we'll delete it.[m
[32m+[m			[32m@unlink($filepath);[m
[32m+[m			[32mlog_message('debug', 'Cache file has expired. File deleted.');[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Send the HTTP cache control headers[m
[32m+[m		[32m$this->set_cache_header($last_modified, $expire);[m
[32m+[m
[32m+[m		[32m// Add headers from cache file.[m
[32m+[m		[32mforeach ($cache_info['headers'] as $header)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->set_header($header[0], $header[1]);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Display the cache[m
[32m+[m		[32m$this->_display(self::substr($cache, self::strlen($match[0])));[m
[32m+[m		[32mlog_message('debug', 'Cache file is current. Sending it to browser.');[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Delete cache[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$uri	URI string[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function delete_cache($uri = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$CI =& get_instance();[m
[32m+[m		[32m$cache_path = $CI->config->item('cache_path');[m
[32m+[m		[32mif ($cache_path === '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$cache_path = APPPATH.'cache/';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! is_dir($cache_path))[m
[32m+[m		[32m{[m
[32m+[m			[32mlog_message('error', 'Unable to find cache path: '.$cache_path);[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (empty($uri))[m
[32m+[m		[32m{[m
[32m+[m			[32m$uri = $CI->uri->uri_string();[m
[32m+[m
[32m+[m			[32mif (($cache_query_string = $CI->config->item('cache_query_string')) && ! empty($_SERVER['QUERY_STRING']))[m
[32m+[m			[32m{[m
[32m+[m				[32mif (is_array($cache_query_string))[m
[32m+[m				[32m{[m
[32m+[m					[32m$uri .= '?'.http_build_query(array_intersect_key($_GET, array_flip($cache_query_string)));[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32m$uri .= '?'.$_SERVER['QUERY_STRING'];[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$cache_path .= md5($CI->config->item('base_url').$CI->config->item('index_page').ltrim($uri, '/'));[m
[32m+[m
[32m+[m		[32mif ( ! @unlink($cache_path))[m
[32m+[m		[32m{[m
[32m+[m			[32mlog_message('error', 'Unable to delete cache file for '.$uri);[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set Cache Header[m
[32m+[m	[32m *[m
[32m+[m	[32m * Set the HTTP headers to match the server-side file cache settings[m
[32m+[m	[32m * in order to reduce bandwidth.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	$last_modified	Timestamp of when the page was last modified[m
[32m+[m	[32m * @param	int	$expiration	Timestamp of when should the requested page expire from cache[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_cache_header($last_modified, $expiration)[m
[32m+[m	[32m{[m
[32m+[m		[32m$max_age = $expiration - $_SERVER['REQUEST_TIME'];[m
[32m+[m
[32m+[m		[32mif (isset($_SERVER['HTTP_IF_MODIFIED_SINCE']) && $last_modified <= strtotime($_SERVER['HTTP_IF_MODIFIED_SINCE']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->set_status_header(304);[m
[32m+[m			[32mexit;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mheader('Pragma: public');[m
[32m+[m		[32mheader('Cache-Control: max-age='.$max_age.', public');[m
[32m+[m		[32mheader('Expires: '.gmdate('D, d M Y H:i:s', $expiration).' GMT');[m
[32m+[m		[32mheader('Last-modified: '.gmdate('D, d M Y H:i:s', $last_modified).' GMT');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Byte-safe strlen()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$str[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected static function strlen($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn (self::$func_overload)[m
[32m+[m			[32m? mb_strlen($str, '8bit')[m
[32m+[m			[32m: strlen($str);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Byte-safe substr()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$str[m
[32m+[m	[32m * @param	int	$start[m
[32m+[m	[32m * @param	int	$length[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected static function substr($str, $start, $length = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (self::$func_overload)[m
[32m+[m		[32m{[m
[32m+[m			[32m// mb_substr($str, $start, null, '8bit') returns an empty[m
[32m+[m			[32m// string on PHP 5.3[m
[32m+[m			[32misset($length) OR $length = ($start >= 0 ? self::strlen($str) - $start : -$start);[m
[32m+[m			[32mreturn mb_substr($str, $start, $length, '8bit');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn isset($length)[m
[32m+[m			[32m? substr($str, $start, $length)[m
[32m+[m			[32m: substr($str, $start);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/core/Router.php b/system/core/Router.php[m
[1mnew file mode 100644[m
[1mindex 0000000..7b92f70[m
[1m--- /dev/null[m
[1m+++ b/system/core/Router.php[m
[36m@@ -0,0 +1,515 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Router Class[m
[32m+[m[32m *[m
[32m+[m[32m * Parses URIs and determines routing[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Libraries[m
[32m+[m[32m * @category	Libraries[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/general/routing.html[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_Router {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CI_Config class object[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	object[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $config;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of routes[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $routes =	array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Current class name[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $class =		'';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Current method name[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $method =	'index';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Sub-directory that contains the requested controller class[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $directory;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Default controller (and method if specific)[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $default_controller;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Translate URI dashes[m
[32m+[m	[32m *[m
[32m+[m	[32m * Determines whether dashes in controller & method segments[m
[32m+[m	[32m * should be automatically replaced by underscores.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $translate_uri_dashes = FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Enable query strings flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * Determines whether to use GET parameters or segment URIs[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $enable_query_strings = FALSE;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * Runs the route mapping function.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$routing[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct($routing = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->config =& load_class('Config', 'core');[m
[32m+[m		[32m$this->uri =& load_class('URI', 'core');[m
[32m+[m
[32m+[m		[32m$this->enable_query_strings = ( ! is_cli() && $this->config->item('enable_query_strings') === TRUE);[m
[32m+[m
[32m+[m		[32m// If a directory override is configured, it has to be set before any dynamic routing logic[m
[32m+[m		[32mis_array($routing) && isset($routing['directory']) && $this->set_directory($routing['directory']);[m
[32m+[m		[32m$this->_set_routing();[m
[32m+[m
[32m+[m		[32m// Set any routing overrides that may exist in the main index file[m
[32m+[m		[32mif (is_array($routing))[m
[32m+[m		[32m{[m
[32m+[m			[32mempty($routing['controller']) OR $this->set_class($routing['controller']);[m
[32m+[m			[32mempty($routing['function'])   OR $this->set_method($routing['function']);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mlog_message('info', 'Router Class Initialized');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set route mapping[m
[32m+[m	[32m *[m
[32m+[m	[32m * Determines what should be served based on the URI request,[m
[32m+[m	[32m * as well as any "routes" that have been set in the routing config file.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _set_routing()[m
[32m+[m	[32m{[m
[32m+[m		[32m// Load the routes.php file. It would be great if we could[m
[32m+[m		[32m// skip this for enable_query_strings = TRUE, but then[m
[32m+[m		[32m// default_controller would be empty ...[m
[32m+[m		[32mif (file_exists(APPPATH.'config/routes.php'))[m
[32m+[m		[32m{[m
[32m+[m			[32minclude(APPPATH.'config/routes.php');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (file_exists(APPPATH.'config/'.ENVIRONMENT.'/routes.php'))[m
[32m+[m		[32m{[m
[32m+[m			[32minclude(APPPATH.'config/'.ENVIRONMENT.'/routes.php');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Validate & get reserved routes[m
[32m+[m		[32mif (isset($route) && is_array($route))[m
[32m+[m		[32m{[m
[32m+[m			[32misset($route['default_controller']) && $this->default_controller = $route['default_controller'];[m
[32m+[m			[32misset($route['translate_uri_dashes']) && $this->translate_uri_dashes = $route['translate_uri_dashes'];[m
[32m+[m			[32munset($route['default_controller'], $route['translate_uri_dashes']);[m
[32m+[m			[32m$this->routes = $route;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Are query strings enabled in the config file? Normally CI doesn't utilize query strings[m
[32m+[m		[32m// since URI segments are more search-engine friendly, but they can optionally be used.[m
[32m+[m		[32m// If this feature is enabled, we will gather the directory/class/method a little differently[m
[32m+[m		[32mif ($this->enable_query_strings)[m
[32m+[m		[32m{[m
[32m+[m			[32m// If the directory is set at this time, it means an override exists, so skip the checks[m
[32m+[m			[32mif ( ! isset($this->directory))[m
[32m+[m			[32m{[m
[32m+[m				[32m$_d = $this->config->item('directory_trigger');[m
[32m+[m				[32m$_d = isset($_GET[$_d]) ? trim($_GET[$_d], " \t\n\r\0\x0B/") : '';[m
[32m+[m
[32m+[m				[32mif ($_d !== '')[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->uri->filter_uri($_d);[m
[32m+[m					[32m$this->set_directory($_d);[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$_c = trim($this->config->item('controller_trigger'));[m
[32m+[m			[32mif ( ! empty($_GET[$_c]))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->uri->filter_uri($_GET[$_c]);[m
[32m+[m				[32m$this->set_class($_GET[$_c]);[m
[32m+[m
[32m+[m				[32m$_f = trim($this->config->item('function_trigger'));[m
[32m+[m				[32mif ( ! empty($_GET[$_f]))[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->uri->filter_uri($_GET[$_f]);[m
[32m+[m					[32m$this->set_method($_GET[$_f]);[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m$this->uri->rsegments = array([m
[32m+[m					[32m1 => $this->class,[m
[32m+[m					[32m2 => $this->method[m
[32m+[m				[32m);[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_set_default_controller();[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// Routing rules don't apply to query strings and we don't need to detect[m
[32m+[m			[32m// directories, so we're done here[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Is there anything to parse?[m
[32m+[m		[32mif ($this->uri->uri_string !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_parse_routes();[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_set_default_controller();[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set request route[m
[32m+[m	[32m *[m
[32m+[m	[32m * Takes an array of URI segments as input and sets the class/method[m
[32m+[m	[32m * to be called.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @used-by	CI_Router::_parse_routes()[m
[32m+[m	[32m * @param	array	$segments	URI segments[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _set_request($segments = array())[m
[32m+[m	[32m{[m
[32m+[m		[32m$segments = $this->_validate_request($segments);[m
[32m+[m		[32m// If we don't have any segments left - try the default controller;[m
[32m+[m		[32m// WARNING: Directories get shifted out of the segments array![m
[32m+[m		[32mif (empty($segments))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_set_default_controller();[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($this->translate_uri_dashes === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$segments[0] = str_replace('-', '_', $segments[0]);[m
[32m+[m			[32mif (isset($segments[1]))[m
[32m+[m			[32m{[m
[32m+[m				[32m$segments[1] = str_replace('-', '_', $segments[1]);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->set_class($segments[0]);[m
[32m+[m		[32mif (isset($segments[1]))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->set_method($segments[1]);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$segments[1] = 'index';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32marray_unshift($segments, NULL);[m
[32m+[m		[32munset($segments[0]);[m
[32m+[m		[32m$this->uri->rsegments = $segments;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set default controller[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _set_default_controller()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (empty($this->default_controller))[m
[32m+[m		[32m{[m
[32m+[m			[32mshow_error('Unable to determine what should be displayed. A default route has not been specified in the routing file.');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Is the method being specified?[m
[32m+[m		[32mif (sscanf($this->default_controller, '%[^/]/%s', $class, $method) !== 2)[m
[32m+[m		[32m{[m
[32m+[m			[32m$method = 'index';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! file_exists(APPPATH.'controllers/'.$this->directory.ucfirst($class).'.php'))[m
[32m+[m		[32m{[m
[32m+[m			[32m// This will trigger 404 later[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->set_class($class);[m
[32m+[m		[32m$this->set_method($method);[m
[32m+[m
[32m+[m		[32m// Assign routed segments, index starting from 1[m
[32m+[m		[32m$this->uri->rsegments = array([m
[32m+[m			[32m1 => $class,[m
[32m+[m			[32m2 => $method[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32mlog_message('debug', 'No URI present. Default controller set.');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Validate request[m
[32m+[m	[32m *[m
[32m+[m	[32m * Attempts validate the URI request and determine the controller path.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @used-by	CI_Router::_set_request()[m
[32m+[m	[32m * @param	array	$segments	URI segments[m
[32m+[m	[32m * @return	mixed	URI segments[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _validate_request($segments)[m
[32m+[m	[32m{[m
[32m+[m		[32m$c = count($segments);[m
[32m+[m		[32m$directory_override = isset($this->directory);[m
[32m+[m
[32m+[m		[32m// Loop through our segments and return as soon as a controller[m
[32m+[m		[32m// is found or when such a directory doesn't exist[m
[32m+[m		[32mwhile ($c-- > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32m$test = $this->directory[m
[32m+[m				[32m.ucfirst($this->translate_uri_dashes === TRUE ? str_replace('-', '_', $segments[0]) : $segments[0]);[m
[32m+[m
[32m+[m			[32mif ( ! file_exists(APPPATH.'controllers/'.$test.'.php')[m
[32m+[m				[32m&& $directory_override === FALSE[m
[32m+[m				[32m&& is_dir(APPPATH.'controllers/'.$this->directory.$segments[0])[m
[32m+[m			[32m)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->set_directory(array_shift($segments), TRUE);[m
[32m+[m				[32mcontinue;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn $segments;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// This means that all segments were actually directories[m
[32m+[m		[32mreturn $segments;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Parse Routes[m
[32m+[m	[32m *[m
[32m+[m	[32m * Matches any routes that may exist in the config/routes.php file[m
[32m+[m	[32m * against the URI to determine if the class/method need to be remapped.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _parse_routes()[m
[32m+[m	[32m{[m
[32m+[m		[32m// Turn the segment array into a URI string[m
[32m+[m		[32m$uri = implode('/', $this->uri->segments);[m
[32m+[m
[32m+[m		[32m// Get HTTP verb[m
[32m+[m		[32m$http_verb = isset($_SERVER['REQUEST_METHOD']) ? strtolower($_SERVER['REQUEST_METHOD']) : 'cli';[m
[32m+[m
[32m+[m		[32m// Loop through the route array looking for wildcards[m
[32m+[m		[32mforeach ($this->routes as $key => $val)[m
[32m+[m		[32m{[m
[32m+[m			[32m// Check if route format is using HTTP verbs[m
[32m+[m			[32mif (is_array($val))[m
[32m+[m			[32m{[m
[32m+[m				[32m$val = array_change_key_case($val, CASE_LOWER);[m
[32m+[m				[32mif (isset($val[$http_verb]))[m
[32m+[m				[32m{[m
[32m+[m					[32m$val = $val[$http_verb];[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32mcontinue;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// Convert wildcards to RegEx[m
[32m+[m			[32m$key = str_replace(array(':any', ':num'), array('[^/]+', '[0-9]+'), $key);[m
[32m+[m
[32m+[m			[32m// Does the RegEx match?[m
[32m+[m			[32mif (preg_match('#^'.$key.'$#', $uri, $matches))[m
[32m+[m			[32m{[m
[32m+[m				[32m// Are we using callbacks to process back-references?[m
[32m+[m				[32mif ( ! is_string($val) && is_callable($val))[m
[32m+[m				[32m{[m
[32m+[m					[32m// Remove the original string from the matches array.[m
[32m+[m					[32marray_shift($matches);[m
[32m+[m
[32m+[m					[32m// Execute the callback using the values in matches as its parameters.[m
[32m+[m					[32m$val = call_user_func_array($val, $matches);[m
[32m+[m				[32m}[m
[32m+[m				[32m// Are we using the default routing method for back-references?[m
[32m+[m				[32melseif (strpos($val, '$') !== FALSE && strpos($key, '(') !== FALSE)[m
[32m+[m				[32m{[m
[32m+[m					[32m$val = preg_replace('#^'.$key.'$#', $val, $uri);[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m$this->_set_request(explode('/', $val));[m
[32m+[m				[32mreturn;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// If we got this far it means we didn't encounter a[m
[32m+[m		[32m// matching route so we'll set the site default route[m
[32m+[m		[32m$this->_set_request(array_values($this->uri->segments));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set class name[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$class	Class name[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_class($class)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->class = str_replace(array('/', '.'), '', $class);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch the current class[m
[32m+[m	[32m *[m
[32m+[m	[32m * @deprecated	3.0.0	Read the 'class' property instead[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function fetch_class()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->class;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set method name[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$method	Method name[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_method($method)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->method = $method;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch the current method[m
[32m+[m	[32m *[m
[32m+[m	[32m * @deprecated	3.0.0	Read the 'method' property instead[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function fetch_method()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->method;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set directory name[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$dir	Directory name[m
[32m+[m	[32m * @param	bool	$append	Whether we're appending rather than setting the full value[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_directory($dir, $append = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($append !== TRUE OR empty($this->directory))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->directory = str_replace('.', '', trim($dir, '/')).'/';[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->directory .= str_replace('.', '', trim($dir, '/')).'/';[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch directory[m
[32m+[m	[32m *[m
[32m+[m	[32m * Feches the sub-directory (if any) that contains the requested[m
[32m+[m	[32m * controller class.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @deprecated	3.0.0	Read the 'directory' property instead[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function fetch_directory()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->directory;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/core/Security.php b/system/core/Security.php[m
[1mnew file mode 100644[m
[1mindex 0000000..31926b4[m
[1m--- /dev/null[m
[1m+++ b/system/core/Security.php[m
[36m@@ -0,0 +1,1090 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Security Class[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Libraries[m
[32m+[m[32m * @category	Security[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/libraries/security.html[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_Security {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of sanitize filename strings[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $filename_bad_chars =	array([m
[32m+[m		[32m'../', '<!--', '-->', '<', '>',[m
[32m+[m		[32m"'", '"', '&', '$', '#',[m
[32m+[m		[32m'{', '}', '[', ']', '=',[m
[32m+[m		[32m';', '?', '%20', '%22',[m
[32m+[m		[32m'%3c',		// <[m
[32m+[m		[32m'%253c',	// <[m
[32m+[m		[32m'%3e',		// >[m
[32m+[m		[32m'%0e',		// >[m
[32m+[m		[32m'%28',		// ([m
[32m+[m		[32m'%29',		// )[m
[32m+[m		[32m'%2528',	// ([m
[32m+[m		[32m'%26',		// &[m
[32m+[m		[32m'%24',		// $[m
[32m+[m		[32m'%3f',		// ?[m
[32m+[m		[32m'%3b',		// ;[m
[32m+[m		[32m'%3d'		// =[m
[32m+[m	[32m);[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Character set[m
[32m+[m	[32m *[m
[32m+[m	[32m * Will be overridden by the constructor.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $charset = 'UTF-8';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * XSS Hash[m
[32m+[m	[32m *[m
[32m+[m	[32m * Random Hash for protecting URLs.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_xss_hash;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CSRF Hash[m
[32m+[m	[32m *[m
[32m+[m	[32m * Random hash for Cross Site Request Forgery protection cookie[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_csrf_hash;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CSRF Expire time[m
[32m+[m	[32m *[m
[32m+[m	[32m * Expiration time for Cross Site Request Forgery protection cookie.[m
[32m+[m	[32m * Defaults to two hours (in seconds).[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	int[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_csrf_expire =	7200;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CSRF Token name[m
[32m+[m	[32m *[m
[32m+[m	[32m * Token name for Cross Site Request Forgery protection cookie.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_csrf_token_name =	'ci_csrf_token';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CSRF Cookie name[m
[32m+[m	[32m *[m
[32m+[m	[32m * Cookie name for Cross Site Request Forgery protection cookie.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_csrf_cookie_name =	'ci_csrf_token';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of never allowed strings[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_never_allowed_str =	array([m
[32m+[m		[32m'document.cookie' => '[removed]',[m
[32m+[m		[32m'(document).cookie' => '[removed]',[m
[32m+[m		[32m'document.write'  => '[removed]',[m
[32m+[m		[32m'(document).write'  => '[removed]',[m
[32m+[m		[32m'.parentNode'     => '[removed]',[m
[32m+[m		[32m'.innerHTML'      => '[removed]',[m
[32m+[m		[32m'-moz-binding'    => '[removed]',[m
[32m+[m		[32m'<!--'            => '&lt;!--',[m
[32m+[m		[32m'-->'             => '--&gt;',[m
[32m+[m		[32m'<![CDATA['       => '&lt;![CDATA[',[m
[32m+[m		[32m'<comment>'	  => '&lt;comment&gt;',[m
[32m+[m		[32m'<%'              => '&lt;&#37;'[m
[32m+[m	[32m);[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of never allowed regex replacements[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_never_allowed_regex = array([m
[32m+[m		[32m'javascript\s*:',[m
[32m+[m		[32m'(\(?document\)?|\(?window\)?(\.document)?)\.(location|on\w*)',[m
[32m+[m		[32m'expression\s*(\(|&\#40;)', // CSS and IE[m
[32m+[m		[32m'vbscript\s*:', // IE, surprise![m
[32m+[m		[32m'wscript\s*:', // IE[m
[32m+[m		[32m'jscript\s*:', // IE[m
[32m+[m		[32m'vbs\s*:', // IE[m
[32m+[m		[32m'Redirect\s+30\d',[m
[32m+[m		[32m"([\"'])?data\s*:[^\\1]*?base64[^\\1]*?,[^\\1]*?\\1?"[m
[32m+[m	[32m);[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct()[m
[32m+[m	[32m{[m
[32m+[m		[32m// Is CSRF protection enabled?[m
[32m+[m		[32mif (config_item('csrf_protection'))[m
[32m+[m		[32m{[m
[32m+[m			[32m// CSRF config[m
[32m+[m			[32mforeach (array('csrf_expire', 'csrf_token_name', 'csrf_cookie_name') as $key)[m
[32m+[m			[32m{[m
[32m+[m				[32mif (NULL !== ($val = config_item($key)))[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->{'_'.$key} = $val;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// Append application specific cookie prefix[m
[32m+[m			[32mif ($cookie_prefix = config_item('cookie_prefix'))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_csrf_cookie_name = $cookie_prefix.$this->_csrf_cookie_name;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// Set the CSRF hash[m
[32m+[m			[32m$this->_csrf_set_hash();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->charset = strtoupper(config_item('charset'));[m
[32m+[m
[32m+[m		[32mlog_message('info', 'Security Class Initialized');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CSRF Verify[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	CI_Security[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function csrf_verify()[m
[32m+[m	[32m{[m
[32m+[m		[32m// If it's not a POST request we will set the CSRF cookie[m
[32m+[m		[32mif (strtoupper($_SERVER['REQUEST_METHOD']) !== 'POST')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->csrf_set_cookie();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Check if URI has been whitelisted from CSRF checks[m
[32m+[m		[32mif ($exclude_uris = config_item('csrf_exclude_uris'))[m
[32m+[m		[32m{[m
[32m+[m			[32m$uri = load_class('URI', 'core');[m
[32m+[m			[32mforeach ($exclude_uris as $excluded)[m
[32m+[m			[32m{[m
[32m+[m				[32mif (preg_match('#^'.$excluded.'$#i'.(UTF8_ENABLED ? 'u' : ''), $uri->uri_string()))[m
[32m+[m				[32m{[m
[32m+[m					[32mreturn $this;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Check CSRF token validity, but don't error on mismatch just yet - we'll want to regenerate[m
[32m+[m		[32m$valid = isset($_POST[$this->_csrf_token_name], $_COOKIE[$this->_csrf_cookie_name])[m
[32m+[m			[32m&& hash_equals($_POST[$this->_csrf_token_name], $_COOKIE[$this->_csrf_cookie_name]);[m
[32m+[m
[32m+[m		[32m// We kill this since we're done and we don't want to pollute the _POST array[m
[32m+[m		[32munset($_POST[$this->_csrf_token_name]);[m
[32m+[m
[32m+[m		[32m// Regenerate on every submission?[m
[32m+[m		[32mif (config_item('csrf_regenerate'))[m
[32m+[m		[32m{[m
[32m+[m			[32m// Nothing should last forever[m
[32m+[m			[32munset($_COOKIE[$this->_csrf_cookie_name]);[m
[32m+[m			[32m$this->_csrf_hash = NULL;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->_csrf_set_hash();[m
[32m+[m		[32m$this->csrf_set_cookie();[m
[32m+[m
[32m+[m		[32mif ($valid !== TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->csrf_show_error();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mlog_message('info', 'CSRF token verified');[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CSRF Set Cookie[m
[32m+[m	[32m *[m
[32m+[m	[32m * @codeCoverageIgnore[m
[32m+[m	[32m * @return	CI_Security[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function csrf_set_cookie()[m
[32m+[m	[32m{[m
[32m+[m		[32m$expire = time() + $this->_csrf_expire;[m
[32m+[m		[32m$secure_cookie = (bool) config_item('cookie_secure');[m
[32m+[m
[32m+[m		[32mif ($secure_cookie && ! is_https())[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32msetcookie([m
[32m+[m			[32m$this->_csrf_cookie_name,[m
[32m+[m			[32m$this->_csrf_hash,[m
[32m+[m			[32m$expire,[m
[32m+[m			[32mconfig_item('cookie_path'),[m
[32m+[m			[32mconfig_item('cookie_domain'),[m
[32m+[m			[32m$secure_cookie,[m
[32m+[m			[32mconfig_item('cookie_httponly')[m
[32m+[m		[32m);[m
[32m+[m		[32mlog_message('info', 'CSRF cookie sent');[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show CSRF Error[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function csrf_show_error()[m
[32m+[m	[32m{[m
[32m+[m		[32mshow_error('The action you have requested is not allowed.', 403);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get CSRF Hash[m
[32m+[m	[32m *[m
[32m+[m	[32m * @see		CI_Security::$_csrf_hash[m
[32m+[m	[32m * @return 	string	CSRF hash[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get_csrf_hash()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_csrf_hash;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get CSRF Token Name[m
[32m+[m	[32m *[m
[32m+[m	[32m * @see		CI_Security::$_csrf_token_name[m
[32m+[m	[32m * @return	string	CSRF token name[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get_csrf_token_name()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_csrf_token_name;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * XSS Clean[m
[32m+[m	[32m *[m
[32m+[m	[32m * Sanitizes data so that Cross Site Scripting Hacks can be[m
[32m+[m	[32m * prevented.  This method does a fair amount of work but[m
[32m+[m	[32m * it is extremely thorough, designed to prevent even the[m
[32m+[m	[32m * most obscure XSS attempts.  Nothing is ever 100% foolproof,[m
[32m+[m	[32m * of course, but I haven't been able to get anything passed[m
[32m+[m	[32m * the filter.[m
[32m+[m	[32m *[m
[32m+[m	[32m * Note: Should only be used to deal with data upon submission.[m
[32m+[m	[32m *	 It's not something that should be used for general[m
[32m+[m	[32m *	 runtime processing.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @link	http://channel.bitflux.ch/wiki/XSS_Prevention[m
[32m+[m	[32m * 		Based in part on some code and ideas from Bitflux.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @link	http://ha.ckers.org/xss.html[m
[32m+[m	[32m * 		To help develop this script I used this great list of[m
[32m+[m	[32m *		vulnerabilities along with a few other hacks I've[m
[32m+[m	[32m *		harvested from examining vulnerabilities in other programs.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string|string[]	$str		Input data[m
[32m+[m	[32m * @param 	bool		$is_image	Whether the input is an image[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function xss_clean($str, $is_image = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Is the string an array?[m
[32m+[m		[32mif (is_array($str))[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($str as $key => &$value)[m
[32m+[m			[32m{[m
[32m+[m				[32m$str[$key] = $this->xss_clean($value);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn $str;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Remove Invisible Characters[m
[32m+[m		[32m$str = remove_invisible_characters($str);[m
[32m+[m
[32m+[m		[32m/*[m
[32m+[m		[32m * URL Decode[m
[32m+[m		[32m *[m
[32m+[m		[32m * Just in case stuff like this is submitted:[m
[32m+[m		[32m *[m
[32m+[m		[32m * <a href="http://%77%77%77%2E%67%6F%6F%67%6C%65%2E%63%6F%6D">Google</a>[m
[32m+[m		[32m *[m
[32m+[m		[32m * Note: Use rawurldecode() so it does not remove plus signs[m
[32m+[m		[32m */[m
[32m+[m		[32mif (stripos($str, '%') !== false)[m
[32m+[m		[32m{[m
[32m+[m			[32mdo[m
[32m+[m			[32m{[m
[32m+[m				[32m$oldstr = $str;[m
[32m+[m				[32m$str = rawurldecode($str);[m
[32m+[m				[32m$str = preg_replace_callback('#%(?:\s*[0-9a-f]){2,}#i', array($this, '_urldecodespaces'), $str);[m
[32m+[m			[32m}[m
[32m+[m			[32mwhile ($oldstr !== $str);[m
[32m+[m			[32munset($oldstr);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m/*[m
[32m+[m		[32m * Convert character entities to ASCII[m
[32m+[m		[32m *[m
[32m+[m		[32m * This permits our tests below to work reliably.[m
[32m+[m		[32m * We only convert entities that are within tags since[m
[32m+[m		[32m * these are the ones that will pose security problems.[m
[32m+[m		[32m */[m
[32m+[m		[32m$str = preg_replace_callback("/[^a-z0-9>]+[a-z0-9]+=([\'\"]).*?\\1/si", array($this, '_convert_attribute'), $str);[m
[32m+[m		[32m$str = preg_replace_callback('/<\w+.*/si', array($this, '_decode_entity'), $str);[m
[32m+[m
[32m+[m		[32m// Remove Invisible Characters Again![m
[32m+[m		[32m$str = remove_invisible_characters($str);[m
[32m+[m
[32m+[m		[32m/*[m
[32m+[m		[32m * Convert all tabs to spaces[m
[32m+[m		[32m *[m
[32m+[m		[32m * This prevents strings like this: ja	vascript[m
[32m+[m		[32m * NOTE: we deal with spaces between characters later.[m
[32m+[m		[32m * NOTE: preg_replace was found to be amazingly slow here on[m
[32m+[m		[32m * large blocks of data, so we use str_replace.[m
[32m+[m		[32m */[m
[32m+[m		[32m$str = str_replace("\t", ' ', $str);[m
[32m+[m
[32m+[m		[32m// Capture converted string for later comparison[m
[32m+[m		[32m$converted_string = $str;[m
[32m+[m
[32m+[m		[32m// Remove Strings that are never allowed[m
[32m+[m		[32m$str = $this->_do_never_allowed($str);[m
[32m+[m
[32m+[m		[32m/*[m
[32m+[m		[32m * Makes PHP tags safe[m
[32m+[m		[32m *[m
[32m+[m		[32m * Note: XML tags are inadvertently replaced too:[m
[32m+[m		[32m *[m
[32m+[m		[32m * <?xml[m
[32m+[m		[32m *[m
[32m+[m		[32m * But it doesn't seem to pose a problem.[m
[32m+[m		[32m */[m
[32m+[m		[32mif ($is_image === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m// Images have a tendency to have the PHP short opening and[m
[32m+[m			[32m// closing tags every so often so we skip those and only[m
[32m+[m			[32m// do the long opening tags.[m
[32m+[m			[32m$str = preg_replace('/<\?(php)/i', '&lt;?\\1', $str);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$str = str_replace(array('<?', '?'.'>'), array('&lt;?', '?&gt;'), $str);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m/*[m
[32m+[m		[32m * Compact any exploded words[m
[32m+[m		[32m *[m
[32m+[m		[32m * This corrects words like:  j a v a s c r i p t[m
[32m+[m		[32m * These words are compacted back to their correct state.[m
[32m+[m		[32m */[m
[32m+[m		[32m$words = array([m
[32m+[m			[32m'javascript', 'expression', 'vbscript', 'jscript', 'wscript',[m
[32m+[m			[32m'vbs', 'script', 'base64', 'applet', 'alert', 'document',[m
[32m+[m			[32m'write', 'cookie', 'window', 'confirm', 'prompt', 'eval'[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32mforeach ($words as $word)[m
[32m+[m		[32m{[m
[32m+[m			[32m$word = implode('\s*', str_split($word)).'\s*';[m
[32m+[m
[32m+[m			[32m// We only want to do this when it is followed by a non-word character[m
[32m+[m			[32m// That way valid stuff like "dealer to" does not become "dealerto"[m
[32m+[m			[32m$str = preg_replace_callback('#('.substr($word, 0, -3).')(\W)#is', array($this, '_compact_exploded_words'), $str);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m/*[m
[32m+[m		[32m * Remove disallowed Javascript in links or img tags[m
[32m+[m		[32m * We used to do some version comparisons and use of stripos(),[m
[32m+[m		[32m * but it is dog slow compared to these simplified non-capturing[m
[32m+[m		[32m * preg_match(), especially if the pattern exists in the string[m
[32m+[m		[32m *[m
[32m+[m		[32m * Note: It was reported that not only space characters, but all in[m
[32m+[m		[32m * the following pattern can be parsed as separators between a tag name[m
[32m+[m		[32m * and its attributes: [\d\s"\'`;,\/\=\(\x00\x0B\x09\x0C][m
[32m+[m		[32m * ... however, remove_invisible_characters() above already strips the[m
[32m+[m		[32m * hex-encoded ones, so we'll skip them below.[m
[32m+[m		[32m */[m
[32m+[m		[32mdo[m
[32m+[m		[32m{[m
[32m+[m			[32m$original = $str;[m
[32m+[m
[32m+[m			[32mif (preg_match('/<a/i', $str))[m
[32m+[m			[32m{[m
[32m+[m				[32m$str = preg_replace_callback('#<a(?:rea)?[^a-z0-9>]+([^>]*?)(?:>|$)#si', array($this, '_js_link_removal'), $str);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (preg_match('/<img/i', $str))[m
[32m+[m			[32m{[m
[32m+[m				[32m$str = preg_replace_callback('#<img[^a-z0-9]+([^>]*?)(?:\s?/?>|$)#si', array($this, '_js_img_removal'), $str);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (preg_match('/script|xss/i', $str))[m
[32m+[m			[32m{[m
[32m+[m				[32m$str = preg_replace('#</*(?:script|xss).*?>#si', '[removed]', $str);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m		[32mwhile ($original !== $str);[m
[32m+[m		[32munset($original);[m
[32m+[m
[32m+[m		[32m/*[m
[32m+[m		[32m * Sanitize naughty HTML elements[m
[32m+[m		[32m *[m
[32m+[m		[32m * If a tag containing any of the words in the list[m
[32m+[m		[32m * below is found, the tag gets converted to entities.[m
[32m+[m		[32m *[m
[32m+[m		[32m * So this: <blink>[m
[32m+[m		[32m * Becomes: &lt;blink&gt;[m
[32m+[m		[32m */[m
[32m+[m		[32m$pattern = '#'[m
[32m+[m			[32m.'<((?<slash>/*\s*)((?<tagName>[a-z0-9]+)(?=[^a-z0-9]|$)|.+)' // tag start and name, followed by a non-tag character[m
[32m+[m			[32m.'[^\s\042\047a-z0-9>/=]*' // a valid attribute character immediately after the tag would count as a separator[m
[32m+[m			[32m// optional attributes[m
[32m+[m			[32m.'(?<attributes>(?:[\s\042\047/=]*' // non-attribute characters, excluding > (tag close) for obvious reasons[m
[32m+[m			[32m.'[^\s\042\047>/=]+' // attribute characters[m
[32m+[m			[32m// optional attribute-value[m
[32m+[m				[32m.'(?:\s*=' // attribute-value separator[m
[32m+[m					[32m.'(?:[^\s\042\047=><`]+|\s*\042[^\042]*\042|\s*\047[^\047]*\047|\s*(?U:[^\s\042\047=><`]*))' // single, double or non-quoted value[m
[32m+[m				[32m.')?' // end optional attribute-value group[m
[32m+[m			[32m.')*)' // end optional attributes group[m
[32m+[m			[32m.'[^>]*)(?<closeTag>\>)?#isS';[m
[32m+[m
[32m+[m		[32m// Note: It would be nice to optimize this for speed, BUT[m
[32m+[m		[32m//       only matching the naughty elements here results in[m
[32m+[m		[32m//       false positives and in turn - vulnerabilities![m
[32m+[m		[32mdo[m
[32m+[m		[32m{[m
[32m+[m			[32m$old_str = $str;[m
[32m+[m			[32m$str = preg_replace_callback($pattern, array($this, '_sanitize_naughty_html'), $str);[m
[32m+[m		[32m}[m
[32m+[m		[32mwhile ($old_str !== $str);[m
[32m+[m		[32munset($old_str);[m
[32m+[m
[32m+[m		[32m/*[m
[32m+[m		[32m * Sanitize naughty scripting elements[m
[32m+[m		[32m *[m
[32m+[m		[32m * Similar to above, only instead of looking for[m
[32m+[m		[32m * tags it looks for PHP and JavaScript commands[m
[32m+[m		[32m * that are disallowed. Rather than removing the[m
[32m+[m		[32m * code, it simply converts the parenthesis to entities[m
[32m+[m		[32m * rendering the code un-executable.[m
[32m+[m		[32m *[m
[32m+[m		[32m * For example:	eval('some code')[m
[32m+[m		[32m * Becomes:	eval&#40;'some code'&#41;[m
[32m+[m		[32m */[m
[32m+[m		[32m$str = preg_replace([m
[32m+[m			[32m'#(alert|prompt|confirm|cmd|passthru|eval|exec|expression|system|fopen|fsockopen|file|file_get_contents|readfile|unlink)(\s*)\((.*?)\)#si',[m
[32m+[m			[32m'\\1\\2&#40;\\3&#41;',[m
[32m+[m			[32m$str[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32m// Same thing, but for "tag functions" (e.g. eval`some code`)[m
[32m+[m		[32m// See https://github.com/bcit-ci/CodeIgniter/issues/5420[m
[32m+[m		[32m$str = preg_replace([m
[32m+[m			[32m'#(alert|prompt|confirm|cmd|passthru|eval|exec|expression|system|fopen|fsockopen|file|file_get_contents|readfile|unlink)(\s*)`(.*?)`#si',[m
[32m+[m			[32m'\\1\\2&#96;\\3&#96;',[m
[32m+[m			[32m$str[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32m// Final clean up[m
[32m+[m		[32m// This adds a bit of extra precaution in case[m
[32m+[m		[32m// something got through the above filters[m
[32m+[m		[32m$str = $this->_do_never_allowed($str);[m
[32m+[m
[32m+[m		[32m/*[m
[32m+[m		[32m * Images are Handled in a Special Way[m
[32m+[m		[32m * - Essentially, we want to know that after all of the character[m
[32m+[m		[32m * conversion is done whether any unwanted, likely XSS, code was found.[m
[32m+[m		[32m * If not, we return TRUE, as the image is clean.[m
[32m+[m		[32m * However, if the string post-conversion does not matched the[m
[32m+[m		[32m * string post-removal of XSS, then it fails, as there was unwanted XSS[m
[32m+[m		[32m * code found and removed/changed during processing.[m
[32m+[m		[32m */[m
[32m+[m		[32mif ($is_image === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($str === $converted_string);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $str;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * XSS Hash[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates the XSS hash if needed and returns it.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @see		CI_Security::$_xss_hash[m
[32m+[m	[32m * @return	string	XSS hash[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function xss_hash()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->_xss_hash === NULL)[m
[32m+[m		[32m{[m
[32m+[m			[32m$rand = $this->get_random_bytes(16);[m
[32m+[m			[32m$this->_xss_hash = ($rand === FALSE)[m
[32m+[m				[32m? md5(uniqid(mt_rand(), TRUE))[m
[32m+[m				[32m: bin2hex($rand);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->_xss_hash;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get random bytes[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	$length	Output length[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get_random_bytes($length)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (empty($length) OR ! ctype_digit((string) $length))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (function_exists('random_bytes'))[m
[32m+[m		[32m{[m
[32m+[m			[32mtry[m
[32m+[m			[32m{[m
[32m+[m				[32m// The cast is required to avoid TypeError[m
[32m+[m				[32mreturn random_bytes((int) $length);[m
[32m+[m			[32m}[m
[32m+[m			[32mcatch (Exception $e)[m
[32m+[m			[32m{[m
[32m+[m				[32m// If random_bytes() can't do the job, we can't either ...[m
[32m+[m				[32m// There's no point in using fallbacks.[m
[32m+[m				[32mlog_message('error', $e->getMessage());[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Unfortunately, none of the following PRNGs is guaranteed to exist ...[m
[32m+[m		[32mif (defined('MCRYPT_DEV_URANDOM') && ($output = mcrypt_create_iv($length, MCRYPT_DEV_URANDOM)) !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $output;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m
[32m+[m		[32mif (is_readable('/dev/urandom') && ($fp = fopen('/dev/urandom', 'rb')) !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m// Try not to waste entropy ...[m
[32m+[m			[32mis_php('5.4') && stream_set_chunk_size($fp, $length);[m
[32m+[m			[32m$output = fread($fp, $length);[m
[32m+[m			[32mfclose($fp);[m
[32m+[m			[32mif ($output !== FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn $output;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (function_exists('openssl_random_pseudo_bytes'))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn openssl_random_pseudo_bytes($length);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * HTML Entities Decode[m
[32m+[m	[32m *[m
[32m+[m	[32m * A replacement for html_entity_decode()[m
[32m+[m	[32m *[m
[32m+[m	[32m * The reason we are not using html_entity_decode() by itself is because[m
[32m+[m	[32m * while it is not technically correct to leave out the semicolon[m
[32m+[m	[32m * at the end of an entity most browsers will still interpret the entity[m
[32m+[m	[32m * correctly. html_entity_decode() does not convert entities without[m
[32m+[m	[32m * semicolons, so we are left with our own little solution here. Bummer.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @link	http://php.net/html-entity-decode[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$str		Input[m
[32m+[m	[32m * @param	string	$charset	Character set[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function entity_decode($str, $charset = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (strpos($str, '&') === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $str;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mstatic $_entities;[m
[32m+[m
[32m+[m		[32misset($charset) OR $charset = $this->charset;[m
[32m+[m		[32m$flag = is_php('5.4')[m
[32m+[m			[32m? ENT_COMPAT | ENT_HTML5[m
[32m+[m			[32m: ENT_COMPAT;[m
[32m+[m
[32m+[m		[32mif ( ! isset($_entities))[m
[32m+[m		[32m{[m
[32m+[m			[32m$_entities = array_map('strtolower', get_html_translation_table(HTML_ENTITIES, $flag, $charset));[m
[32m+[m
[32m+[m			[32m// If we're not on PHP 5.4+, add the possibly dangerous HTML 5[m
[32m+[m			[32m// entities to the array manually[m
[32m+[m			[32mif ($flag === ENT_COMPAT)[m
[32m+[m			[32m{[m
[32m+[m				[32m$_entities[':'] = '&colon;';[m
[32m+[m				[32m$_entities['('] = '&lpar;';[m
[32m+[m				[32m$_entities[')'] = '&rpar;';[m
[32m+[m				[32m$_entities["\n"] = '&NewLine;';[m
[32m+[m				[32m$_entities["\t"] = '&Tab;';[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mdo[m
[32m+[m		[32m{[m
[32m+[m			[32m$str_compare = $str;[m
[32m+[m
[32m+[m			[32m// Decode standard entities, avoiding false positives[m
[32m+[m			[32mif (preg_match_all('/&[a-z]{2,}(?![a-z;])/i', $str, $matches))[m
[32m+[m			[32m{[m
[32m+[m				[32m$replace = array();[m
[32m+[m				[32m$matches = array_unique(array_map('strtolower', $matches[0]));[m
[32m+[m				[32mforeach ($matches as &$match)[m
[32m+[m				[32m{[m
[32m+[m					[32mif (($char = array_search($match.';', $_entities, TRUE)) !== FALSE)[m
[32m+[m					[32m{[m
[32m+[m						[32m$replace[$match] = $char;[m
[32m+[m					[32m}[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m$str = str_replace(array_keys($replace), array_values($replace), $str);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// Decode numeric & UTF16 two byte entities[m
[32m+[m			[32m$str = html_entity_decode([m
[32m+[m				[32mpreg_replace('/(&#(?:x0*[0-9a-f]{2,5}(?![0-9a-f;])|(?:0*\d{2,4}(?![0-9;]))))/iS', '$1;', $str),[m
[32m+[m				[32m$flag,[m
[32m+[m				[32m$charset[m
[32m+[m			[32m);[m
[32m+[m
[32m+[m			[32mif ($flag === ENT_COMPAT)[m
[32m+[m			[32m{[m
[32m+[m				[32m$str = str_replace(array_values($_entities), array_keys($_entities), $str);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m		[32mwhile ($str_compare !== $str);[m
[32m+[m		[32mreturn $str;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Sanitize Filename[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$str		Input file name[m
[32m+[m	[32m * @param 	bool	$relative_path	Whether to preserve paths[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function sanitize_filename($str, $relative_path = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$bad = $this->filename_bad_chars;[m
[32m+[m
[32m+[m		[32mif ( ! $relative_path)[m
[32m+[m		[32m{[m
[32m+[m			[32m$bad[] = './';[m
[32m+[m			[32m$bad[] = '/';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$str = remove_invisible_characters($str, FALSE);[m
[32m+[m
[32m+[m		[32mdo[m
[32m+[m		[32m{[m
[32m+[m			[32m$old = $str;[m
[32m+[m			[32m$str = str_replace($bad, '', $str);[m
[32m+[m		[32m}[m
[32m+[m		[32mwhile ($old !== $str);[m
[32m+[m
[32m+[m		[32mreturn stripslashes($str);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ----------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Strip Image Tags[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$str[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function strip_image_tags($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn preg_replace([m
[32m+[m			[32marray([m
[32m+[m				[32m'#<img[\s/]+.*?src\s*=\s*(["\'])([^\\1]+?)\\1.*?\>#i',[m
[32m+[m				[32m'#<img[\s/]+.*?src\s*=\s*?(([^\s"\'=<>`]+)).*?\>#i'[m
[32m+[m			[32m),[m
[32m+[m			[32m'\\2',[m
[32m+[m			[32m$str[m
[32m+[m		[32m);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ----------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * URL-decode taking spaces into account[m
[32m+[m	[32m *[m
[32m+[m	[32m * @see		https://github.com/bcit-ci/CodeIgniter/issues/4877[m
[32m+[m	[32m * @param	array	$matches[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _urldecodespaces($matches)[m
[32m+[m	[32m{[m
[32m+[m		[32m$input    = $matches[0];[m
[32m+[m		[32m$nospaces = preg_replace('#\s+#', '', $input);[m
[32m+[m		[32mreturn ($nospaces === $input)[m
[32m+[m			[32m? $input[m
[32m+[m			[32m: rawurldecode($nospaces);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ----------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Compact Exploded Words[m
[32m+[m	[32m *[m
[32m+[m	[32m * Callback method for xss_clean() to remove whitespace from[m
[32m+[m	[32m * things like 'j a v a s c r i p t'.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @used-by	CI_Security::xss_clean()[m
[32m+[m	[32m * @param	array	$matches[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _compact_exploded_words($matches)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn preg_replace('/\s+/s', '', $matches[1]).$matches[2];[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Sanitize Naughty HTML[m
[32m+[m	[32m *[m
[32m+[m	[32m * Callback method for xss_clean() to remove naughty HTML elements.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @used-by	CI_Security::xss_clean()[m
[32m+[m	[32m * @param	array	$matches[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _sanitize_naughty_html($matches)[m
[32m+[m	[32m{[m
[32m+[m		[32mstatic $naughty_tags    = array([m
[32m+[m			[32m'alert', 'area', 'prompt', 'confirm', 'applet', 'audio', 'basefont', 'base', 'behavior', 'bgsound',[m
[32m+[m			[32m'blink', 'body', 'embed', 'expression', 'form', 'frameset', 'frame', 'head', 'html', 'ilayer',[m
[32m+[m			[32m'iframe', 'input', 'button', 'select', 'isindex', 'layer', 'link', 'meta', 'keygen', 'object',[m
[32m+[m			[32m'plaintext', 'style', 'script', 'textarea', 'title', 'math', 'video', 'svg', 'xml', 'xss'[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32mstatic $evil_attributes = array([m
[32m+[m			[32m'on\w+', 'style', 'xmlns', 'formaction', 'form', 'xlink:href', 'FSCommand', 'seekSegmentTime'[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32m// First, escape unclosed tags[m
[32m+[m		[32mif (empty($matches['closeTag']))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn '&lt;'.$matches[1];[m
[32m+[m		[32m}[m
[32m+[m		[32m// Is the element that we caught naughty? If so, escape it[m
[32m+[m		[32melseif (in_array(strtolower($matches['tagName']), $naughty_tags, TRUE))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn '&lt;'.$matches[1].'&gt;';[m
[32m+[m		[32m}[m
[32m+[m		[32m// For other tags, see if their attributes are "evil" and strip those[m
[32m+[m		[32melseif (isset($matches['attributes']))[m
[32m+[m		[32m{[m
[32m+[m			[32m// We'll store the already filtered attributes here[m
[32m+[m			[32m$attributes = array();[m
[32m+[m
[32m+[m			[32m// Attribute-catching pattern[m
[32m+[m			[32m$attributes_pattern = '#'[m
[32m+[m				[32m.'(?<name>[^\s\042\047>/=]+)' // attribute characters[m
[32m+[m				[32m// optional attribute-value[m
[32m+[m				[32m.'(?:\s*=(?<value>[^\s\042\047=><`]+|\s*\042[^\042]*\042|\s*\047[^\047]*\047|\s*(?U:[^\s\042\047=><`]*)))' // attribute-value separator[m
[32m+[m				[32m.'#i';[m
[32m+[m
[32m+[m			[32m// Blacklist pattern for evil attribute names[m
[32m+[m			[32m$is_evil_pattern = '#^('.implode('|', $evil_attributes).')$#i';[m
[32m+[m
[32m+[m			[32m// Each iteration filters a single attribute[m
[32m+[m			[32mdo[m
[32m+[m			[32m{[m
[32m+[m				[32m// Strip any non-alpha characters that may precede an attribute.[m
[32m+[m				[32m// Browsers often parse these incorrectly and that has been a[m
[32m+[m				[32m// of numerous XSS issues we've had.[m
[32m+[m				[32m$matches['attributes'] = preg_replace('#^[^a-z]+#i', '', $matches['attributes']);[m
[32m+[m
[32m+[m				[32mif ( ! preg_match($attributes_pattern, $matches['attributes'], $attribute, PREG_OFFSET_CAPTURE))[m
[32m+[m				[32m{[m
[32m+[m					[32m// No (valid) attribute found? Discard everything else inside the tag[m
[32m+[m					[32mbreak;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mif ([m
[32m+[m					[32m// Is it indeed an "evil" attribute?[m
[32m+[m					[32mpreg_match($is_evil_pattern, $attribute['name'][0])[m
[32m+[m					[32m// Or does it have an equals sign, but no value and not quoted? Strip that too![m
[32m+[m					[32mOR (trim($attribute['value'][0]) === '')[m
[32m+[m				[32m)[m
[32m+[m				[32m{[m
[32m+[m					[32m$attributes[] = 'xss=removed';[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32m$attributes[] = $attribute[0][0];[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m$matches['attributes'] = substr($matches['attributes'], $attribute[0][1] + strlen($attribute[0][0]));[m
[32m+[m			[32m}[m
[32m+[m			[32mwhile ($matches['attributes'] !== '');[m
[32m+[m
[32m+[m			[32m$attributes = empty($attributes)[m
[32m+[m				[32m? ''[m
[32m+[m				[32m: ' '.implode(' ', $attributes);[m
[32m+[m			[32mreturn '<'.$matches['slash'].$matches['tagName'].$attributes.'>';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $matches[0];[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * JS Link Removal[m
[32m+[m	[32m *[m
[32m+[m	[32m * Callback method for xss_clean() to sanitize links.[m
[32m+[m	[32m *[m
[32m+[m	[32m * This limits the PCRE backtracks, making it more performance friendly[m
[32m+[m	[32m * and prevents PREG_BACKTRACK_LIMIT_ERROR from being triggered in[m
[32m+[m	[32m * PHP 5.2+ on link-heavy strings.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @used-by	CI_Security::xss_clean()[m
[32m+[m	[32m * @param	array	$match[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _js_link_removal($match)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn str_replace([m
[32m+[m			[32m$match[1],[m
[32m+[m			[32mpreg_replace([m
[32m+[m				[32m'#href=.*?(?:(?:alert|prompt|confirm)(?:\(|&\#40;|`|&\#96;)|javascript:|livescript:|mocha:|charset=|window\.|\(?document\)?\.|\.cookie|<script|<xss|d\s*a\s*t\s*a\s*:)#si',[m
[32m+[m				[32m'',[m
[32m+[m				[32m$this->_filter_attributes($match[1])[m
[32m+[m			[32m),[m
[32m+[m			[32m$match[0][m
[32m+[m		[32m);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * JS Image Removal[m
[32m+[m	[32m *[m
[32m+[m	[32m * Callback method for xss_clean() to sanitize image tags.[m
[32m+[m	[32m *[m
[32m+[m	[32m * This limits the PCRE backtracks, making it more performance friendly[m
[32m+[m	[32m * and prevents PREG_BACKTRACK_LIMIT_ERROR from being triggered in[m
[32m+[m	[32m * PHP 5.2+ on image tag heavy strings.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @used-by	CI_Security::xss_clean()[m
[32m+[m	[32m * @param	array	$match[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _js_img_removal($match)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn str_replace([m
[32m+[m			[32m$match[1],[m
[32m+[m			[32mpreg_replace([m
[32m+[m				[32m'#src=.*?(?:(?:alert|prompt|confirm|eval)(?:\(|&\#40;|`|&\#96;)|javascript:|livescript:|mocha:|charset=|window\.|\(?document\)?\.|\.cookie|<script|<xss|base64\s*,)#si',[m
[32m+[m				[32m'',[m
[32m+[m				[32m$this->_filter_attributes($match[1])[m
[32m+[m			[32m),[m
[32m+[m			[32m$match[0][m
[32m+[m		[32m);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Attribute Conversion[m
[32m+[m	[32m *[m
[32m+[m	[32m * @used-by	CI_Security::xss_clean()[m
[32m+[m	[32m * @param	array	$match[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _convert_attribute($match)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn str_replace(array('>', '<', '\\'), array('&gt;', '&lt;', '\\\\'), $match[0]);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Filter Attributes[m
[32m+[m	[32m *[m
[32m+[m	[32m * Filters tag attributes for consistency and safety.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @used-by	CI_Security::_js_img_removal()[m
[32m+[m	[32m * @used-by	CI_Security::_js_link_removal()[m
[32m+[m	[32m * @param	string	$str[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _filter_attributes($str)[m
[32m+[m	[32m{[m
[32m+[m		[32m$out = '';[m
[32m+[m		[32mif (preg_match_all('#\s*[a-z\-]+\s*=\s*(\042|\047)([^\\1]*?)\\1#is', $str, $matches))[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($matches[0] as $match)[m
[32m+[m			[32m{[m
[32m+[m				[32m$out .= preg_replace('#/\*.*?\*/#s', '', $match);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $out;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * HTML Entity Decode Callback[m
[32m+[m	[32m *[m
[32m+[m	[32m * @used-by	CI_Security::xss_clean()[m
[32m+[m	[32m * @param	array	$match[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _decode_entity($match)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Protect GET variables in URLs[m
[32m+[m		[32m// 901119URL5918AMP18930PROTECT8198[m
[32m+[m		[32m$match = preg_replace('|\&([a-z\_0-9\-]+)\=([a-z\_0-9\-/]+)|i', $this->xss_hash().'\\1=\\2', $match[0]);[m
[32m+[m
[32m+[m		[32m// Decode, then un-protect URL GET vars[m
[32m+[m		[32mreturn str_replace([m
[32m+[m			[32m$this->xss_hash(),[m
[32m+[m			[32m'&',[m
[32m+[m			[32m$this->entity_decode($match, $this->charset)[m
[32m+[m		[32m);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Do Never Allowed[m
[32m+[m	[32m *[m
[32m+[m	[32m * @used-by	CI_Security::xss_clean()[m
[32m+[m	[32m * @param 	string[m
[32m+[m	[32m * @return 	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _do_never_allowed($str)[m
[32m+[m	[32m{[m
[32m+[m		[32m$str = str_replace(array_keys($this->_never_allowed_str), $this->_never_allowed_str, $str);[m
[32m+[m
[32m+[m		[32mforeach ($this->_never_allowed_regex as $regex)[m
[32m+[m		[32m{[m
[32m+[m			[32m$str = preg_replace('#'.$regex.'#is', '[removed]', $str);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $str;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set CSRF Hash and Cookie[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _csrf_set_hash()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->_csrf_hash === NULL)[m
[32m+[m		[32m{[m
[32m+[m			[32m// If the cookie exists we will use its value.[m
[32m+[m			[32m// We don't necessarily want to regenerate it with[m
[32m+[m			[32m// each page load since a page could contain embedded[m
[32m+[m			[32m// sub-pages causing this feature to fail[m
[32m+[m			[32mif (isset($_COOKIE[$this->_csrf_cookie_name]) && is_string($_COOKIE[$this->_csrf_cookie_name])[m
[32m+[m				[32m&& preg_match('#^[0-9a-f]{32}$#iS', $_COOKIE[$this->_csrf_cookie_name]) === 1)[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn $this->_csrf_hash = $_COOKIE[$this->_csrf_cookie_name];[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$rand = $this->get_random_bytes(16);[m
[32m+[m			[32m$this->_csrf_hash = ($rand === FALSE)[m
[32m+[m				[32m? md5(uniqid(mt_rand(), TRUE))[m
[32m+[m				[32m: bin2hex($rand);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->_csrf_hash;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/core/URI.php b/system/core/URI.php[m
[1mnew file mode 100644[m
[1mindex 0000000..574ade6[m
[1m--- /dev/null[m
[1m+++ b/system/core/URI.php[m
[36m@@ -0,0 +1,643 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * URI Class[m
[32m+[m[32m *[m
[32m+[m[32m * Parses URIs and determines routing[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Libraries[m
[32m+[m[32m * @category	URI[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/libraries/uri.html[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_URI {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of cached URI segments[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $keyval = array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Current URI string[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $uri_string = '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of URI segments[m
[32m+[m	[32m *[m
[32m+[m	[32m * Starts at 1 instead of 0.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $segments = array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of routed URI segments[m
[32m+[m	[32m *[m
[32m+[m	[32m * Starts at 1 instead of 0.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $rsegments = array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Permitted URI chars[m
[32m+[m	[32m *[m
[32m+[m	[32m * PCRE character group allowed in URI segments[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_permitted_uri_chars;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->config =& load_class('Config', 'core');[m
[32m+[m
[32m+[m		[32m// If query strings are enabled, we don't need to parse any segments.[m
[32m+[m		[32m// However, they don't make sense under CLI.[m
[32m+[m		[32mif (is_cli() OR $this->config->item('enable_query_strings') !== TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_permitted_uri_chars = $this->config->item('permitted_uri_chars');[m
[32m+[m
[32m+[m			[32m// If it's a CLI request, ignore the configuration[m
[32m+[m			[32mif (is_cli())[m
[32m+[m			[32m{[m
[32m+[m				[32m$uri = $this->_parse_argv();[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$protocol = $this->config->item('uri_protocol');[m
[32m+[m				[32mempty($protocol) && $protocol = 'REQUEST_URI';[m
[32m+[m
[32m+[m				[32mswitch ($protocol)[m
[32m+[m				[32m{[m
[32m+[m					[32mcase 'AUTO': // For BC purposes only[m
[32m+[m					[32mcase 'REQUEST_URI':[m
[32m+[m						[32m$uri = $this->_parse_request_uri();[m
[32m+[m						[32mbreak;[m
[32m+[m					[32mcase 'QUERY_STRING':[m
[32m+[m						[32m$uri = $this->_parse_query_string();[m
[32m+[m						[32mbreak;[m
[32m+[m					[32mcase 'PATH_INFO':[m
[32m+[m					[32mdefault:[m
[32m+[m						[32m$uri = isset($_SERVER[$protocol])[m
[32m+[m							[32m? $_SERVER[$protocol][m
[32m+[m							[32m: $this->_parse_request_uri();[m
[32m+[m						[32mbreak;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$this->_set_uri_string($uri);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mlog_message('info', 'URI Class Initialized');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set URI String[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param 	string	$str[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _set_uri_string($str)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Filter out control characters and trim slashes[m
[32m+[m		[32m$this->uri_string = trim(remove_invisible_characters($str, FALSE), '/');[m
[32m+[m
[32m+[m		[32mif ($this->uri_string !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m// Remove the URL suffix, if present[m
[32m+[m			[32mif (($suffix = (string) $this->config->item('url_suffix')) !== '')[m
[32m+[m			[32m{[m
[32m+[m				[32m$slen = strlen($suffix);[m
[32m+[m
[32m+[m				[32mif (substr($this->uri_string, -$slen) === $suffix)[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->uri_string = substr($this->uri_string, 0, -$slen);[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$this->segments[0] = NULL;[m
[32m+[m			[32m// Populate the segments array[m
[32m+[m			[32mforeach (explode('/', trim($this->uri_string, '/')) as $val)[m
[32m+[m			[32m{[m
[32m+[m				[32m$val = trim($val);[m
[32m+[m				[32m// Filter segments for security[m
[32m+[m				[32m$this->filter_uri($val);[m
[32m+[m
[32m+[m				[32mif ($val !== '')[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->segments[] = $val;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32munset($this->segments[0]);[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Parse REQUEST_URI[m
[32m+[m	[32m *[m
[32m+[m	[32m * Will parse REQUEST_URI and automatically detect the URI from it,[m
[32m+[m	[32m * while fixing the query string if necessary.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _parse_request_uri()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! isset($_SERVER['REQUEST_URI'], $_SERVER['SCRIPT_NAME']))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn '';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// parse_url() returns false if no host is present, but the path or query string[m
[32m+[m		[32m// contains a colon followed by a number[m
[32m+[m		[32m$uri = parse_url('http://dummy'.$_SERVER['REQUEST_URI']);[m
[32m+[m		[32m$query = isset($uri['query']) ? $uri['query'] : '';[m
[32m+[m		[32m$uri = isset($uri['path']) ? $uri['path'] : '';[m
[32m+[m
[32m+[m		[32mif (isset($_SERVER['SCRIPT_NAME'][0]))[m
[32m+[m		[32m{[m
[32m+[m			[32mif (strpos($uri, $_SERVER['SCRIPT_NAME']) === 0)[m
[32m+[m			[32m{[m
[32m+[m				[32m$uri = (string) substr($uri, strlen($_SERVER['SCRIPT_NAME']));[m
[32m+[m			[32m}[m
[32m+[m			[32melseif (strpos($uri, dirname($_SERVER['SCRIPT_NAME'])) === 0)[m
[32m+[m			[32m{[m
[32m+[m				[32m$uri = (string) substr($uri, strlen(dirname($_SERVER['SCRIPT_NAME'])));[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// This section ensures that even on servers that require the URI to be in the query string (Nginx) a correct[m
[32m+[m		[32m// URI is found, and also fixes the QUERY_STRING server var and $_GET array.[m
[32m+[m		[32mif (trim($uri, '/') === '' && strncmp($query, '/', 1) === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32m$query = explode('?', $query, 2);[m
[32m+[m			[32m$uri = $query[0];[m
[32m+[m			[32m$_SERVER['QUERY_STRING'] = isset($query[1]) ? $query[1] : '';[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$_SERVER['QUERY_STRING'] = $query;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mparse_str($_SERVER['QUERY_STRING'], $_GET);[m
[32m+[m
[32m+[m		[32mif ($uri === '/' OR $uri === '')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn '/';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Do some final cleaning of the URI and return it[m
[32m+[m		[32mreturn $this->_remove_relative_directory($uri);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Parse QUERY_STRING[m
[32m+[m	[32m *[m
[32m+[m	[32m * Will parse QUERY_STRING and automatically detect the URI from it.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _parse_query_string()[m
[32m+[m	[32m{[m
[32m+[m		[32m$uri = isset($_SERVER['QUERY_STRING']) ? $_SERVER['QUERY_STRING'] : @getenv('QUERY_STRING');[m
[32m+[m
[32m+[m		[32mif (trim($uri, '/') === '')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn '';[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (strncmp($uri, '/', 1) === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32m$uri = explode('?', $uri, 2);[m
[32m+[m			[32m$_SERVER['QUERY_STRING'] = isset($uri[1]) ? $uri[1] : '';[m
[32m+[m			[32m$uri = $uri[0];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mparse_str($_SERVER['QUERY_STRING'], $_GET);[m
[32m+[m
[32m+[m		[32mreturn $this->_remove_relative_directory($uri);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Parse CLI arguments[m
[32m+[m	[32m *[m
[32m+[m	[32m * Take each command line argument and assume it is a URI segment.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _parse_argv()[m
[32m+[m	[32m{[m
[32m+[m		[32m$args = array_slice($_SERVER['argv'], 1);[m
[32m+[m		[32mreturn $args ? implode('/', $args) : '';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Remove relative directory (../) and multi slashes (///)[m
[32m+[m	[32m *[m
[32m+[m	[32m * Do some final cleaning of the URI and return it, currently only used in self::_parse_request_uri()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$uri[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _remove_relative_directory($uri)[m
[32m+[m	[32m{[m
[32m+[m		[32m$uris = array();[m
[32m+[m		[32m$tok = strtok($uri, '/');[m
[32m+[m		[32mwhile ($tok !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (( ! empty($tok) OR $tok === '0') && $tok !== '..')[m
[32m+[m			[32m{[m
[32m+[m				[32m$uris[] = $tok;[m
[32m+[m			[32m}[m
[32m+[m			[32m$tok = strtok('/');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn implode('/', $uris);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Filter URI[m
[32m+[m	[32m *[m
[32m+[m	[32m * Filters segments for malicious characters.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$str[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function filter_uri(&$str)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! empty($str) && ! empty($this->_permitted_uri_chars) && ! preg_match('/^['.$this->_permitted_uri_chars.']+$/i'.(UTF8_ENABLED ? 'u' : ''), $str))[m
[32m+[m		[32m{[m
[32m+[m			[32mshow_error('The URI you submitted has disallowed characters.', 400);[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch URI Segment[m
[32m+[m	[32m *[m
[32m+[m	[32m * @see		CI_URI::$segments[m
[32m+[m	[32m * @param	int		$n		Index[m
[32m+[m	[32m * @param	mixed		$no_result	What to return if the segment index is not found[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function segment($n, $no_result = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn isset($this->segments[$n]) ? $this->segments[$n] : $no_result;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch URI "routed" Segment[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the re-routed URI segment (assuming routing rules are used)[m
[32m+[m	[32m * based on the index provided. If there is no routing, will return[m
[32m+[m	[32m * the same result as CI_URI::segment().[m
[32m+[m	[32m *[m
[32m+[m	[32m * @see		CI_URI::$rsegments[m
[32m+[m	[32m * @see		CI_URI::segment()[m
[32m+[m	[32m * @param	int		$n		Index[m
[32m+[m	[32m * @param	mixed		$no_result	What to return if the segment index is not found[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function rsegment($n, $no_result = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn isset($this->rsegments[$n]) ? $this->rsegments[$n] : $no_result;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * URI to assoc[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates an associative array of URI data starting at the supplied[m
[32m+[m	[32m * segment index. For example, if this is your URI:[m
[32m+[m	[32m *[m
[32m+[m	[32m *	example.com/user/search/name/joe/location/UK/gender/male[m
[32m+[m	[32m *[m
[32m+[m	[32m * You can use this method to generate an array with this prototype:[m
[32m+[m	[32m *[m
[32m+[m	[32m *	array ([m
[32m+[m	[32m *		name => joe[m
[32m+[m	[32m *		location => UK[m
[32m+[m	[32m *		gender => male[m
[32m+[m	[32m *	 )[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	$n		Index (default: 3)[m
[32m+[m	[32m * @param	array	$default	Default values[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function uri_to_assoc($n = 3, $default = array())[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_uri_to_assoc($n, $default, 'segment');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Routed URI to assoc[m
[32m+[m	[32m *[m
[32m+[m	[32m * Identical to CI_URI::uri_to_assoc(), only it uses the re-routed[m
[32m+[m	[32m * segment array.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @see		CI_URI::uri_to_assoc()[m
[32m+[m	[32m * @param 	int	$n		Index (default: 3)[m
[32m+[m	[32m * @param 	array	$default	Default values[m
[32m+[m	[32m * @return 	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function ruri_to_assoc($n = 3, $default = array())[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_uri_to_assoc($n, $default, 'rsegment');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Internal URI-to-assoc[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a key/value pair from the URI string or re-routed URI string.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @used-by	CI_URI::uri_to_assoc()[m
[32m+[m	[32m * @used-by	CI_URI::ruri_to_assoc()[m
[32m+[m	[32m * @param	int	$n		Index (default: 3)[m
[32m+[m	[32m * @param	array	$default	Default values[m
[32m+[m	[32m * @param	string	$which		Array name ('segment' or 'rsegment')[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _uri_to_assoc($n = 3, $default = array(), $which = 'segment')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! is_numeric($n))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $default;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (isset($this->keyval[$which], $this->keyval[$which][$n]))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->keyval[$which][$n];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$total_segments = "total_{$which}s";[m
[32m+[m		[32m$segment_array = "{$which}_array";[m
[32m+[m
[32m+[m		[32mif ($this->$total_segments() < $n)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn (count($default) === 0)[m
[32m+[m				[32m? array()[m
[32m+[m				[32m: array_fill_keys($default, NULL);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$segments = array_slice($this->$segment_array(), ($n - 1));[m
[32m+[m		[32m$i = 0;[m
[32m+[m		[32m$lastval = '';[m
[32m+[m		[32m$retval = array();[m
[32m+[m		[32mforeach ($segments as $seg)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($i % 2)[m
[32m+[m			[32m{[m
[32m+[m				[32m$retval[$lastval] = $seg;[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$retval[$seg] = NULL;[m
[32m+[m				[32m$lastval = $seg;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$i++;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (count($default) > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($default as $val)[m
[32m+[m			[32m{[m
[32m+[m				[32mif ( ! array_key_exists($val, $retval))[m
[32m+[m				[32m{[m
[32m+[m					[32m$retval[$val] = NULL;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Cache the array for reuse[m
[32m+[m		[32misset($this->keyval[$which]) OR $this->keyval[$which] = array();[m
[32m+[m		[32m$this->keyval[$which][$n] = $retval;[m
[32m+[m		[32mreturn $retval;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Assoc to URI[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a URI string from an associative array.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$array	Input array of key/value pairs[m
[32m+[m	[32m * @return	string	URI string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function assoc_to_uri($array)[m
[32m+[m	[32m{[m
[32m+[m		[32m$temp = array();[m
[32m+[m		[32mforeach ((array) $array as $key => $val)[m
[32m+[m		[32m{[m
[32m+[m			[32m$temp[] = $key;[m
[32m+[m			[32m$temp[] = $val;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn implode('/', $temp);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Slash segment[m
[32m+[m	[32m *[m
[32m+[m	[32m * Fetches an URI segment with a slash.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	$n	Index[m
[32m+[m	[32m * @param	string	$where	Where to add the slash ('trailing' or 'leading')[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function slash_segment($n, $where = 'trailing')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_slash_segment($n, $where, 'segment');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Slash routed segment[m
[32m+[m	[32m *[m
[32m+[m	[32m * Fetches an URI routed segment with a slash.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	$n	Index[m
[32m+[m	[32m * @param	string	$where	Where to add the slash ('trailing' or 'leading')[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function slash_rsegment($n, $where = 'trailing')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_slash_segment($n, $where, 'rsegment');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Internal Slash segment[m
[32m+[m	[32m *[m
[32m+[m	[32m * Fetches an URI Segment and adds a slash to it.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @used-by	CI_URI::slash_segment()[m
[32m+[m	[32m * @used-by	CI_URI::slash_rsegment()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	$n	Index[m
[32m+[m	[32m * @param	string	$where	Where to add the slash ('trailing' or 'leading')[m
[32m+[m	[32m * @param	string	$which	Array name ('segment' or 'rsegment')[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _slash_segment($n, $where = 'trailing', $which = 'segment')[m
[32m+[m	[32m{[m
[32m+[m		[32m$leading = $trailing = '/';[m
[32m+[m
[32m+[m		[32mif ($where === 'trailing')[m
[32m+[m		[32m{[m
[32m+[m			[32m$leading	= '';[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($where === 'leading')[m
[32m+[m		[32m{[m
[32m+[m			[32m$trailing	= '';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $leading.$this->$which($n).$trailing;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Segment Array[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array	CI_URI::$segments[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function segment_array()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->segments;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Routed Segment Array[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array	CI_URI::$rsegments[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function rsegment_array()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->rsegments;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Total number of segments[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function total_segments()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn count($this->segments);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Total number of routed segments[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function total_rsegments()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn count($this->rsegments);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch URI string[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string	CI_URI::$uri_string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function uri_string()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->uri_string;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch Re-routed URI string[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function ruri_string()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn ltrim(load_class('Router', 'core')->directory, '/').implode('/', $this->rsegments);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/core/Utf8.php b/system/core/Utf8.php[m
[1mnew file mode 100644[m
[1mindex 0000000..7e02177[m
[1m--- /dev/null[m
[1m+++ b/system/core/Utf8.php[m
[36m@@ -0,0 +1,164 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 2.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Utf8 Class[m
[32m+[m[32m *[m
[32m+[m[32m * Provides support for UTF-8 environments[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Libraries[m
[32m+[m[32m * @category	UTF-8[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/libraries/utf8.html[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_Utf8 {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * Determines if UTF-8 support is to be enabled.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ([m
[32m+[m			[32mdefined('PREG_BAD_UTF8_ERROR')				// PCRE must support UTF-8[m
[32m+[m			[32m&& (ICONV_ENABLED === TRUE OR MB_ENABLED === TRUE)	// iconv or mbstring must be installed[m
[32m+[m			[32m&& strtoupper(config_item('charset')) === 'UTF-8'	// Application charset must be UTF-8[m
[32m+[m			[32m)[m
[32m+[m		[32m{[m
[32m+[m			[32mdefine('UTF8_ENABLED', TRUE);[m
[32m+[m			[32mlog_message('debug', 'UTF-8 Support Enabled');[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32mdefine('UTF8_ENABLED', FALSE);[m
[32m+[m			[32mlog_message('debug', 'UTF-8 Support Disabled');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mlog_message('info', 'Utf8 Class Initialized');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Clean UTF-8 strings[m
[32m+[m	[32m *[m
[32m+[m	[32m * Ensures strings contain only valid UTF-8 characters.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$str	String to clean[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function clean_string($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->is_ascii($str) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (MB_ENABLED)[m
[32m+[m			[32m{[m
[32m+[m				[32m$str = mb_convert_encoding($str, 'UTF-8', 'UTF-8');[m
[32m+[m			[32m}[m
[32m+[m			[32melseif (ICONV_ENABLED)[m
[32m+[m			[32m{[m
[32m+[m				[32m$str = @iconv('UTF-8', 'UTF-8//IGNORE', $str);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $str;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Remove ASCII control characters[m
[32m+[m	[32m *[m
[32m+[m	[32m * Removes all ASCII control characters except horizontal tabs,[m
[32m+[m	[32m * line feeds, and carriage returns, as all others can cause[m
[32m+[m	[32m * problems in XML.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$str	String to clean[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function safe_ascii_for_xml($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn remove_invisible_characters($str, FALSE);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Convert to UTF-8[m
[32m+[m	[32m *[m
[32m+[m	[32m * Attempts to convert a string to UTF-8.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$str		Input string[m
[32m+[m	[32m * @param	string	$encoding	Input encoding[m
[32m+[m	[32m * @return	string	$str encoded in UTF-8 or FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function convert_to_utf8($str, $encoding)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (MB_ENABLED)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn mb_convert_encoding($str, 'UTF-8', $encoding);[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (ICONV_ENABLED)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn @iconv($encoding, 'UTF-8', $str);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Is ASCII?[m
[32m+[m	[32m *[m
[32m+[m	[32m * Tests if a string is standard 7-bit ASCII or not.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$str	String to check[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function is_ascii($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn (preg_match('/[^\x00-\x7F]/S', $str) === 0);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/core/compat/hash.php b/system/core/compat/hash.php[m
[1mnew file mode 100644[m
[1mindex 0000000..68a8129[m
[1m--- /dev/null[m
[1m+++ b/system/core/compat/hash.php[m
[36m@@ -0,0 +1,254 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * PHP ext/hash compatibility package[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	CodeIgniter[m
[32m+[m[32m * @category	Compatibility[m
[32m+[m[32m * @author		Andrey Andreev[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/[m
[32m+[m[32m * @link		http://php.net/hash[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif (is_php('5.6'))[m
[32m+[m[32m{[m
[32m+[m	[32mreturn;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('hash_equals'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * hash_equals()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @link	http://php.net/hash_equals[m
[32m+[m	[32m * @param	string	$known_string[m
[32m+[m	[32m * @param	string	$user_string[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction hash_equals($known_string, $user_string)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! is_string($known_string))[m
[32m+[m		[32m{[m
[32m+[m			[32mtrigger_error('hash_equals(): Expected known_string to be a string, '.strtolower(gettype($known_string)).' given', E_USER_WARNING);[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! is_string($user_string))[m
[32m+[m		[32m{[m
[32m+[m			[32mtrigger_error('hash_equals(): Expected user_string to be a string, '.strtolower(gettype($user_string)).' given', E_USER_WARNING);[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (($length = strlen($known_string)) !== strlen($user_string))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$diff = 0;[m
[32m+[m		[32mfor ($i = 0; $i < $length; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$diff |= ord($known_string[$i]) ^ ord($user_string[$i]);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn ($diff === 0);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif (is_php('5.5'))[m
[32m+[m[32m{[m
[32m+[m	[32mreturn;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('hash_pbkdf2'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * hash_pbkdf2()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @link	http://php.net/hash_pbkdf2[m
[32m+[m	[32m * @param	string	$algo[m
[32m+[m	[32m * @param	string	$password[m
[32m+[m	[32m * @param	string	$salt[m
[32m+[m	[32m * @param	int	$iterations[m
[32m+[m	[32m * @param	int	$length[m
[32m+[m	[32m * @param	bool	$raw_output[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction hash_pbkdf2($algo, $password, $salt, $iterations, $length = 0, $raw_output = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! in_array(strtolower($algo), hash_algos(), TRUE))[m
[32m+[m		[32m{[m
[32m+[m			[32mtrigger_error('hash_pbkdf2(): Unknown hashing algorithm: '.$algo, E_USER_WARNING);[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (($type = gettype($iterations)) !== 'integer')[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($type === 'object' && method_exists($iterations, '__toString'))[m
[32m+[m			[32m{[m
[32m+[m				[32m$iterations = (string) $iterations;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (is_string($iterations) && is_numeric($iterations))[m
[32m+[m			[32m{[m
[32m+[m				[32m$iterations = (int) $iterations;[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32mtrigger_error('hash_pbkdf2() expects parameter 4 to be long, '.$type.' given', E_USER_WARNING);[m
[32m+[m				[32mreturn NULL;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($iterations < 1)[m
[32m+[m		[32m{[m
[32m+[m			[32mtrigger_error('hash_pbkdf2(): Iterations must be a positive integer: '.$iterations, E_USER_WARNING);[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (($type = gettype($length)) !== 'integer')[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($type === 'object' && method_exists($length, '__toString'))[m
[32m+[m			[32m{[m
[32m+[m				[32m$length = (string) $length;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (is_string($length) && is_numeric($length))[m
[32m+[m			[32m{[m
[32m+[m				[32m$length = (int) $length;[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32mtrigger_error('hash_pbkdf2() expects parameter 5 to be long, '.$type.' given', E_USER_WARNING);[m
[32m+[m				[32mreturn NULL;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($length < 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mtrigger_error('hash_pbkdf2(): Length must be greater than or equal to 0: '.$length, E_USER_WARNING);[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$hash_length = defined('MB_OVERLOAD_STRING')[m
[32m+[m			[32m? mb_strlen(hash($algo, NULL, TRUE), '8bit')[m
[32m+[m			[32m: strlen(hash($algo, NULL, TRUE));[m
[32m+[m		[32mempty($length) && $length = $hash_length;[m
[32m+[m
[32m+[m		[32m// Pre-hash password inputs longer than the algorithm's block size[m
[32m+[m		[32m// (i.e. prepare HMAC key) to mitigate potential DoS attacks.[m
[32m+[m		[32mstatic $block_sizes;[m
[32m+[m		[32mempty($block_sizes) && $block_sizes = array([m
[32m+[m			[32m'gost' => 32,[m
[32m+[m			[32m'haval128,3' => 128,[m
[32m+[m			[32m'haval160,3' => 128,[m
[32m+[m			[32m'haval192,3' => 128,[m
[32m+[m			[32m'haval224,3' => 128,[m
[32m+[m			[32m'haval256,3' => 128,[m
[32m+[m			[32m'haval128,4' => 128,[m
[32m+[m			[32m'haval160,4' => 128,[m
[32m+[m			[32m'haval192,4' => 128,[m
[32m+[m			[32m'haval224,4' => 128,[m
[32m+[m			[32m'haval256,4' => 128,[m
[32m+[m			[32m'haval128,5' => 128,[m
[32m+[m			[32m'haval160,5' => 128,[m
[32m+[m			[32m'haval192,5' => 128,[m
[32m+[m			[32m'haval224,5' => 128,[m
[32m+[m			[32m'haval256,5' => 128,[m
[32m+[m			[32m'md2' => 16,[m
[32m+[m			[32m'md4' => 64,[m
[32m+[m			[32m'md5' => 64,[m
[32m+[m			[32m'ripemd128' => 64,[m
[32m+[m			[32m'ripemd160' => 64,[m
[32m+[m			[32m'ripemd256' => 64,[m
[32m+[m			[32m'ripemd320' => 64,[m
[32m+[m			[32m'salsa10' => 64,[m
[32m+[m			[32m'salsa20' => 64,[m
[32m+[m			[32m'sha1' => 64,[m
[32m+[m			[32m'sha224' => 64,[m
[32m+[m			[32m'sha256' => 64,[m
[32m+[m			[32m'sha384' => 128,[m
[32m+[m			[32m'sha512' => 128,[m
[32m+[m			[32m'snefru' => 32,[m
[32m+[m			[32m'snefru256' => 32,[m
[32m+[m			[32m'tiger128,3' => 64,[m
[32m+[m			[32m'tiger160,3' => 64,[m
[32m+[m			[32m'tiger192,3' => 64,[m
[32m+[m			[32m'tiger128,4' => 64,[m
[32m+[m			[32m'tiger160,4' => 64,[m
[32m+[m			[32m'tiger192,4' => 64,[m
[32m+[m			[32m'whirlpool' => 64[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32mif (isset($block_sizes[$algo], $password[$block_sizes[$algo]]))[m
[32m+[m		[32m{[m
[32m+[m			[32m$password = hash($algo, $password, TRUE);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$hash = '';[m
[32m+[m		[32m// Note: Blocks are NOT 0-indexed[m
[32m+[m		[32mfor ($bc = (int) ceil($length / $hash_length), $bi = 1; $bi <= $bc; $bi++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$key = $derived_key = hash_hmac($algo, $salt.pack('N', $bi), $password, TRUE);[m
[32m+[m			[32mfor ($i = 1; $i < $iterations; $i++)[m
[32m+[m			[32m{[m
[32m+[m				[32m$derived_key ^= $key = hash_hmac($algo, $key, $password, TRUE);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$hash .= $derived_key;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// This is not RFC-compatible, but we're aiming for natural PHP compatibility[m
[32m+[m		[32mif ( ! $raw_output)[m
[32m+[m		[32m{[m
[32m+[m			[32m$hash = bin2hex($hash);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn defined('MB_OVERLOAD_STRING')[m
[32m+[m			[32m? mb_substr($hash, 0, $length, '8bit')[m
[32m+[m			[32m: substr($hash, 0, $length);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/core/compat/index.html b/system/core/compat/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/system/core/compat/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/system/core/compat/mbstring.php b/system/core/compat/mbstring.php[m
[1mnew file mode 100644[m
[1mindex 0000000..9f6c24e[m
[1m--- /dev/null[m
[1m+++ b/system/core/compat/mbstring.php[m
[36m@@ -0,0 +1,149 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * PHP ext/mbstring compatibility package[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	CodeIgniter[m
[32m+[m[32m * @category	Compatibility[m
[32m+[m[32m * @author		Andrey Andreev[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/[m
[32m+[m[32m * @link		http://php.net/mbstring[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif (MB_ENABLED === TRUE)[m
[32m+[m[32m{[m
[32m+[m	[32mreturn;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('mb_strlen'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * mb_strlen()[m
[32m+[m	[32m *[m
[32m+[m	[32m * WARNING: This function WILL fall-back to strlen()[m
[32m+[m	[32m * if iconv is not available![m
[32m+[m	[32m *[m
[32m+[m	[32m * @link	http://php.net/mb_strlen[m
[32m+[m	[32m * @param	string	$str[m
[32m+[m	[32m * @param	string	$encoding[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction mb_strlen($str, $encoding = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (ICONV_ENABLED === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn iconv_strlen($str, isset($encoding) ? $encoding : config_item('charset'));[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mlog_message('debug', 'Compatibility (mbstring): iconv_strlen() is not available, falling back to strlen().');[m
[32m+[m		[32mreturn strlen($str);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('mb_strpos'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * mb_strpos()[m
[32m+[m	[32m *[m
[32m+[m	[32m * WARNING: This function WILL fall-back to strpos()[m
[32m+[m	[32m * if iconv is not available![m
[32m+[m	[32m *[m
[32m+[m	[32m * @link	http://php.net/mb_strpos[m
[32m+[m	[32m * @param	string	$haystack[m
[32m+[m	[32m * @param	string	$needle[m
[32m+[m	[32m * @param	int	$offset[m
[32m+[m	[32m * @param	string	$encoding[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction mb_strpos($haystack, $needle, $offset = 0, $encoding = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (ICONV_ENABLED === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn iconv_strpos($haystack, $needle, $offset, isset($encoding) ? $encoding : config_item('charset'));[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mlog_message('debug', 'Compatibility (mbstring): iconv_strpos() is not available, falling back to strpos().');[m
[32m+[m		[32mreturn strpos($haystack, $needle, $offset);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('mb_substr'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * mb_substr()[m
[32m+[m	[32m *[m
[32m+[m	[32m * WARNING: This function WILL fall-back to substr()[m
[32m+[m	[32m * if iconv is not available.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @link	http://php.net/mb_substr[m
[32m+[m	[32m * @param	string	$str[m
[32m+[m	[32m * @param	int	$start[m
[32m+[m	[32m * @param	int 	$length[m
[32m+[m	[32m * @param	string	$encoding[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction mb_substr($str, $start, $length = NULL, $encoding = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (ICONV_ENABLED === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32misset($encoding) OR $encoding = config_item('charset');[m
[32m+[m			[32mreturn iconv_substr([m
[32m+[m				[32m$str,[m
[32m+[m				[32m$start,[m
[32m+[m				[32misset($length) ? $length : iconv_strlen($str, $encoding), // NULL doesn't work[m
[32m+[m				[32m$encoding[m
[32m+[m			[32m);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mlog_message('debug', 'Compatibility (mbstring): iconv_substr() is not available, falling back to substr().');[m
[32m+[m		[32mreturn isset($length)[m
[32m+[m			[32m? substr($str, $start, $length)[m
[32m+[m			[32m: substr($str, $start);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/core/compat/password.php b/system/core/compat/password.php[m
[1mnew file mode 100644[m
[1mindex 0000000..89a77c4[m
[1m--- /dev/null[m
[1m+++ b/system/core/compat/password.php[m
[36m@@ -0,0 +1,251 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * PHP ext/standard/password compatibility package[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	CodeIgniter[m
[32m+[m[32m * @category	Compatibility[m
[32m+[m[32m * @author		Andrey Andreev[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/[m
[32m+[m[32m * @link		http://php.net/password[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif (is_php('5.5') OR ! defined('CRYPT_BLOWFISH') OR CRYPT_BLOWFISH !== 1 OR defined('HHVM_VERSION'))[m
[32m+[m[32m{[m
[32m+[m	[32mreturn;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mdefined('PASSWORD_BCRYPT') OR define('PASSWORD_BCRYPT', 1);[m
[32m+[m[32mdefined('PASSWORD_DEFAULT') OR define('PASSWORD_DEFAULT', PASSWORD_BCRYPT);[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('password_get_info'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * password_get_info()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @link	http://php.net/password_get_info[m
[32m+[m	[32m * @param	string	$hash[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction password_get_info($hash)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn (strlen($hash) < 60 OR sscanf($hash, '$2y$%d', $hash) !== 1)[m
[32m+[m			[32m? array('algo' => 0, 'algoName' => 'unknown', 'options' => array())[m
[32m+[m			[32m: array('algo' => 1, 'algoName' => 'bcrypt', 'options' => array('cost' => $hash));[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('password_hash'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * password_hash()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @link	http://php.net/password_hash[m
[32m+[m	[32m * @param	string	$password[m
[32m+[m	[32m * @param	int	$algo[m
[32m+[m	[32m * @param	array	$options[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction password_hash($password, $algo, array $options = array())[m
[32m+[m	[32m{[m
[32m+[m		[32mstatic $func_overload;[m
[32m+[m		[32misset($func_overload) OR $func_overload = (extension_loaded('mbstring') && ini_get('mbstring.func_overload'));[m
[32m+[m
[32m+[m		[32mif ($algo !== 1)[m
[32m+[m		[32m{[m
[32m+[m			[32mtrigger_error('password_hash(): Unknown hashing algorithm: '.(int) $algo, E_USER_WARNING);[m
[32m+[m			[32mreturn NULL;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (isset($options['cost']) && ($options['cost'] < 4 OR $options['cost'] > 31))[m
[32m+[m		[32m{[m
[32m+[m			[32mtrigger_error('password_hash(): Invalid bcrypt cost parameter specified: '.(int) $options['cost'], E_USER_WARNING);[m
[32m+[m			[32mreturn NULL;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (isset($options['salt']) && ($saltlen = ($func_overload ? mb_strlen($options['salt'], '8bit') : strlen($options['salt']))) < 22)[m
[32m+[m		[32m{[m
[32m+[m			[32mtrigger_error('password_hash(): Provided salt is too short: '.$saltlen.' expecting 22', E_USER_WARNING);[m
[32m+[m			[32mreturn NULL;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! isset($options['salt']))[m
[32m+[m		[32m{[m
[32m+[m			[32mif (function_exists('random_bytes'))[m
[32m+[m			[32m{[m
[32m+[m				[32mtry[m
[32m+[m				[32m{[m
[32m+[m					[32m$options['salt'] = random_bytes(16);[m
[32m+[m				[32m}[m
[32m+[m				[32mcatch (Exception $e)[m
[32m+[m				[32m{[m
[32m+[m					[32mlog_message('error', 'compat/password: Error while trying to use random_bytes(): '.$e->getMessage());[m
[32m+[m					[32mreturn FALSE;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m			[32melseif (defined('MCRYPT_DEV_URANDOM'))[m
[32m+[m			[32m{[m
[32m+[m				[32m$options['salt'] = mcrypt_create_iv(16, MCRYPT_DEV_URANDOM);[m
[32m+[m			[32m}[m
[32m+[m			[32melseif (DIRECTORY_SEPARATOR === '/' && (is_readable($dev = '/dev/arandom') OR is_readable($dev = '/dev/urandom')))[m
[32m+[m			[32m{[m
[32m+[m				[32mif (($fp = fopen($dev, 'rb')) === FALSE)[m
[32m+[m				[32m{[m
[32m+[m					[32mlog_message('error', 'compat/password: Unable to open '.$dev.' for reading.');[m
[32m+[m					[32mreturn FALSE;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m// Try not to waste entropy ...[m
[32m+[m				[32mis_php('5.4') && stream_set_chunk_size($fp, 16);[m
[32m+[m
[32m+[m				[32m$options['salt'] = '';[m
[32m+[m				[32mfor ($read = 0; $read < 16; $read = ($func_overload) ? mb_strlen($options['salt'], '8bit') : strlen($options['salt']))[m
[32m+[m				[32m{[m
[32m+[m					[32mif (($read = fread($fp, 16 - $read)) === FALSE)[m
[32m+[m					[32m{[m
[32m+[m						[32mlog_message('error', 'compat/password: Error while reading from '.$dev.'.');[m
[32m+[m						[32mreturn FALSE;[m
[32m+[m					[32m}[m
[32m+[m					[32m$options['salt'] .= $read;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mfclose($fp);[m
[32m+[m			[32m}[m
[32m+[m			[32melseif (function_exists('openssl_random_pseudo_bytes'))[m
[32m+[m			[32m{[m
[32m+[m				[32m$is_secure = NULL;[m
[32m+[m				[32m$options['salt'] = openssl_random_pseudo_bytes(16, $is_secure);[m
[32m+[m				[32mif ($is_secure !== TRUE)[m
[32m+[m				[32m{[m
[32m+[m					[32mlog_message('error', 'compat/password: openssl_random_pseudo_bytes() set the $cryto_strong flag to FALSE');[m
[32m+[m					[32mreturn FALSE;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32mlog_message('error', 'compat/password: No CSPRNG available.');[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$options['salt'] = str_replace('+', '.', rtrim(base64_encode($options['salt']), '='));[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! preg_match('#^[a-zA-Z0-9./]+$#D', $options['salt']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$options['salt'] = str_replace('+', '.', rtrim(base64_encode($options['salt']), '='));[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32misset($options['cost']) OR $options['cost'] = 10;[m
[32m+[m
[32m+[m		[32mreturn (strlen($password = crypt($password, sprintf('$2y$%02d$%s', $options['cost'], $options['salt']))) === 60)[m
[32m+[m			[32m? $password[m
[32m+[m			[32m: FALSE;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('password_needs_rehash'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * password_needs_rehash()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @link	http://php.net/password_needs_rehash[m
[32m+[m	[32m * @param	string	$hash[m
[32m+[m	[32m * @param	int	$algo[m
[32m+[m	[32m * @param	array	$options[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction password_needs_rehash($hash, $algo, array $options = array())[m
[32m+[m	[32m{[m
[32m+[m		[32m$info = password_get_info($hash);[m
[32m+[m
[32m+[m		[32mif ($algo !== $info['algo'])[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($algo === 1)[m
[32m+[m		[32m{[m
[32m+[m			[32m$options['cost'] = isset($options['cost']) ? (int) $options['cost'] : 10;[m
[32m+[m			[32mreturn ($info['options']['cost'] !== $options['cost']);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Odd at first glance, but according to a comment in PHP's own unit tests,[m
[32m+[m		[32m// because it is an unknown algorithm - it's valid and therefore doesn't[m
[32m+[m		[32m// need rehashing.[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('password_verify'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * password_verify()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @link	http://php.net/password_verify[m
[32m+[m	[32m * @param	string	$password[m
[32m+[m	[32m * @param	string	$hash[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction password_verify($password, $hash)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (strlen($hash) !== 60 OR strlen($password = crypt($password, $hash)) !== 60)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$compare = 0;[m
[32m+[m		[32mfor ($i = 0; $i < 60; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$compare |= (ord($password[$i]) ^ ord($hash[$i]));[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn ($compare === 0);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/core/compat/standard.php b/system/core/compat/standard.php[m
[1mnew file mode 100644[m
[1mindex 0000000..24f3abc[m
[1m--- /dev/null[m
[1m+++ b/system/core/compat/standard.php[m
[36m@@ -0,0 +1,182 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * PHP ext/standard compatibility package[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	CodeIgniter[m
[32m+[m[32m * @category	Compatibility[m
[32m+[m[32m * @author		Andrey Andreev[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif (is_php('5.5'))[m
[32m+[m[32m{[m
[32m+[m	[32mreturn;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('array_column'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * array_column()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @link	http://php.net/array_column[m
[32m+[m	[32m * @param	array	$array[m
[32m+[m	[32m * @param	mixed	$column_key[m
[32m+[m	[32m * @param	mixed	$index_key[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction array_column(array $array, $column_key, $index_key = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! in_array($type = gettype($column_key), array('integer', 'string', 'NULL'), TRUE))[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($type === 'double')[m
[32m+[m			[32m{[m
[32m+[m				[32m$column_key = (int) $column_key;[m
[32m+[m			[32m}[m
[32m+[m			[32melseif ($type === 'object' && method_exists($column_key, '__toString'))[m
[32m+[m			[32m{[m
[32m+[m				[32m$column_key = (string) $column_key;[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32mtrigger_error('array_column(): The column key should be either a string or an integer', E_USER_WARNING);[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! in_array($type = gettype($index_key), array('integer', 'string', 'NULL'), TRUE))[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($type === 'double')[m
[32m+[m			[32m{[m
[32m+[m				[32m$index_key = (int) $index_key;[m
[32m+[m			[32m}[m
[32m+[m			[32melseif ($type === 'object' && method_exists($index_key, '__toString'))[m
[32m+[m			[32m{[m
[32m+[m				[32m$index_key = (string) $index_key;[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32mtrigger_error('array_column(): The index key should be either a string or an integer', E_USER_WARNING);[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$result = array();[m
[32m+[m		[32mforeach ($array as &$a)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($column_key === NULL)[m
[32m+[m			[32m{[m
[32m+[m				[32m$value = $a;[m
[32m+[m			[32m}[m
[32m+[m			[32melseif (is_array($a) && array_key_exists($column_key, $a))[m
[32m+[m			[32m{[m
[32m+[m				[32m$value = $a[$column_key];[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32mcontinue;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif ($index_key === NULL OR ! array_key_exists($index_key, $a))[m
[32m+[m			[32m{[m
[32m+[m				[32m$result[] = $value;[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$result[$a[$index_key]] = $value;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $result;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif (is_php('5.4'))[m
[32m+[m[32m{[m
[32m+[m	[32mreturn;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('hex2bin'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * hex2bin()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @link	http://php.net/hex2bin[m
[32m+[m	[32m * @param	string	$data[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction hex2bin($data)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (in_array($type = gettype($data), array('array', 'double', 'object', 'resource'), TRUE))[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($type === 'object' && method_exists($data, '__toString'))[m
[32m+[m			[32m{[m
[32m+[m				[32m$data = (string) $data;[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32mtrigger_error('hex2bin() expects parameter 1 to be string, '.$type.' given', E_USER_WARNING);[m
[32m+[m				[32mreturn NULL;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (strlen($data) % 2 !== 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mtrigger_error('Hexadecimal input string must have an even length', E_USER_WARNING);[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! preg_match('/^[0-9a-f]*$/i', $data))[m
[32m+[m		[32m{[m
[32m+[m			[32mtrigger_error('Input string must be hexadecimal string', E_USER_WARNING);[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn pack('H*', $data);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/core/index.html b/system/core/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/system/core/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/system/database/DB.php b/system/database/DB.php[m
[1mnew file mode 100644[m
[1mindex 0000000..f58c2e8[m
[1m--- /dev/null[m
[1m+++ b/system/database/DB.php[m
[36m@@ -0,0 +1,218 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Initialize the database[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @link	https://codeigniter.com/user_guide/database/[m
[32m+[m[32m *[m
[32m+[m[32m * @param 	string|string[]	$params[m
[32m+[m[32m * @param 	bool		$query_builder_override[m
[32m+[m[32m *				Determines if query builder should be used or not[m
[32m+[m[32m */[m
[32m+[m[32mfunction &DB($params = '', $query_builder_override = NULL)[m
[32m+[m[32m{[m
[32m+[m	[32m// Load the DB config file if a DSN string wasn't passed[m
[32m+[m	[32mif (is_string($params) && strpos($params, '://') === FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Is the config file in the environment folder?[m
[32m+[m		[32mif ( ! file_exists($file_path = APPPATH.'config/'.ENVIRONMENT.'/database.php')[m
[32m+[m			[32m&& ! file_exists($file_path = APPPATH.'config/database.php'))[m
[32m+[m		[32m{[m
[32m+[m			[32mshow_error('The configuration file database.php does not exist.');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32minclude($file_path);[m
[32m+[m
[32m+[m		[32m// Make packages contain database config files,[m
[32m+[m		[32m// given that the controller instance already exists[m
[32m+[m		[32mif (class_exists('CI_Controller', FALSE))[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach (get_instance()->load->get_package_paths() as $path)[m
[32m+[m			[32m{[m
[32m+[m				[32mif ($path !== APPPATH)[m
[32m+[m				[32m{[m
[32m+[m					[32mif (file_exists($file_path = $path.'config/'.ENVIRONMENT.'/database.php'))[m
[32m+[m					[32m{[m
[32m+[m						[32minclude($file_path);[m
[32m+[m					[32m}[m
[32m+[m					[32melseif (file_exists($file_path = $path.'config/database.php'))[m
[32m+[m					[32m{[m
[32m+[m						[32minclude($file_path);[m
[32m+[m					[32m}[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! isset($db) OR count($db) === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mshow_error('No database connection settings were found in the database config file.');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($params !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$active_group = $params;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! isset($active_group))[m
[32m+[m		[32m{[m
[32m+[m			[32mshow_error('You have not specified a database connection group via $active_group in your config/database.php file.');[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! isset($db[$active_group]))[m
[32m+[m		[32m{[m
[32m+[m			[32mshow_error('You have specified an invalid database connection group ('.$active_group.') in your config/database.php file.');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$params = $db[$active_group];[m
[32m+[m	[32m}[m
[32m+[m	[32melseif (is_string($params))[m
[32m+[m	[32m{[m
[32m+[m		[32m/**[m
[32m+[m		[32m * Parse the URL from the DSN string[m
[32m+[m		[32m * Database settings can be passed as discreet[m
[32m+[m		[32m * parameters or as a data source name in the first[m
[32m+[m		[32m * parameter. DSNs must have this prototype:[m
[32m+[m		[32m * $dsn = 'driver://username:password@hostname/database';[m
[32m+[m		[32m */[m
[32m+[m		[32mif (($dsn = @parse_url($params)) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mshow_error('Invalid DB Connection String');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$params = array([m
[32m+[m			[32m'dbdriver'	=> $dsn['scheme'],[m
[32m+[m			[32m'hostname'	=> isset($dsn['host']) ? rawurldecode($dsn['host']) : '',[m
[32m+[m			[32m'port'		=> isset($dsn['port']) ? rawurldecode($dsn['port']) : '',[m
[32m+[m			[32m'username'	=> isset($dsn['user']) ? rawurldecode($dsn['user']) : '',[m
[32m+[m			[32m'password'	=> isset($dsn['pass']) ? rawurldecode($dsn['pass']) : '',[m
[32m+[m			[32m'database'	=> isset($dsn['path']) ? rawurldecode(substr($dsn['path'], 1)) : ''[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32m// Were additional config items set?[m
[32m+[m		[32mif (isset($dsn['query']))[m
[32m+[m		[32m{[m
[32m+[m			[32mparse_str($dsn['query'], $extra);[m
[32m+[m
[32m+[m			[32mforeach ($extra as $key => $val)[m
[32m+[m			[32m{[m
[32m+[m				[32mif (is_string($val) && in_array(strtoupper($val), array('TRUE', 'FALSE', 'NULL')))[m
[32m+[m				[32m{[m
[32m+[m					[32m$val = var_export($val, TRUE);[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m$params[$key] = $val;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// No DB specified yet? Beat them senseless...[m
[32m+[m	[32mif (empty($params['dbdriver']))[m
[32m+[m	[32m{[m
[32m+[m		[32mshow_error('You have not selected a database type to connect to.');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// Load the DB classes. Note: Since the query builder class is optional[m
[32m+[m	[32m// we need to dynamically create a class that extends proper parent class[m
[32m+[m	[32m// based on whether we're using the query builder class or not.[m
[32m+[m	[32mif ($query_builder_override !== NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32m$query_builder = $query_builder_override;[m
[32m+[m	[32m}[m
[32m+[m	[32m// Backwards compatibility work-around for keeping the[m
[32m+[m	[32m// $active_record config variable working. Should be[m
[32m+[m	[32m// removed in v3.1[m
[32m+[m	[32melseif ( ! isset($query_builder) && isset($active_record))[m
[32m+[m	[32m{[m
[32m+[m		[32m$query_builder = $active_record;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mrequire_once(BASEPATH.'database/DB_driver.php');[m
[32m+[m
[32m+[m	[32mif ( ! isset($query_builder) OR $query_builder === TRUE)[m
[32m+[m	[32m{[m
[32m+[m		[32mrequire_once(BASEPATH.'database/DB_query_builder.php');[m
[32m+[m		[32mif ( ! class_exists('CI_DB', FALSE))[m
[32m+[m		[32m{[m
[32m+[m			[32m/**[m
[32m+[m			[32m * CI_DB[m
[32m+[m			[32m *[m
[32m+[m			[32m * Acts as an alias for both CI_DB_driver and CI_DB_query_builder.[m
[32m+[m			[32m *[m
[32m+[m			[32m * @see	CI_DB_query_builder[m
[32m+[m			[32m * @see	CI_DB_driver[m
[32m+[m			[32m */[m
[32m+[m			[32mclass CI_DB extends CI_DB_query_builder { }[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m	[32melseif ( ! class_exists('CI_DB', FALSE))[m
[32m+[m	[32m{[m
[32m+[m		[32m/**[m
[32m+[m	[41m [m	[32m * @ignore[m
[32m+[m		[32m */[m
[32m+[m		[32mclass CI_DB extends CI_DB_driver { }[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// Load the DB driver[m
[32m+[m	[32m$driver_file = BASEPATH.'database/drivers/'.$params['dbdriver'].'/'.$params['dbdriver'].'_driver.php';[m
[32m+[m
[32m+[m	[32mfile_exists($driver_file) OR show_error('Invalid DB driver');[m
[32m+[m	[32mrequire_once($driver_file);[m
[32m+[m
[32m+[m	[32m// Instantiate the DB adapter[m
[32m+[m	[32m$driver = 'CI_DB_'.$params['dbdriver'].'_driver';[m
[32m+[m	[32m$DB = new $driver($params);[m
[32m+[m
[32m+[m	[32m// Check for a subdriver[m
[32m+[m	[32mif ( ! empty($DB->subdriver))[m
[32m+[m	[32m{[m
[32m+[m		[32m$driver_file = BASEPATH.'database/drivers/'.$DB->dbdriver.'/subdrivers/'.$DB->dbdriver.'_'.$DB->subdriver.'_driver.php';[m
[32m+[m
[32m+[m		[32mif (file_exists($driver_file))[m
[32m+[m		[32m{[m
[32m+[m			[32mrequire_once($driver_file);[m
[32m+[m			[32m$driver = 'CI_DB_'.$DB->dbdriver.'_'.$DB->subdriver.'_driver';[m
[32m+[m			[32m$DB = new $driver($params);[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m$DB->initialize();[m
[32m+[m	[32mreturn $DB;[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/DB_cache.php b/system/database/DB_cache.php[m
[1mnew file mode 100644[m
[1mindex 0000000..56b7356[m
[1m--- /dev/null[m
[1m+++ b/system/database/DB_cache.php[m
[36m@@ -0,0 +1,221 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Database Cache Class[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_Cache {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CI Singleton[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	object[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $CI;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database object[m
[32m+[m	[32m *[m
[32m+[m	[32m * Allows passing of DB object so that multiple database connections[m
[32m+[m	[32m * and returned DB objects can be supported.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	object[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $db;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	object	&$db[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct(&$db)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Assign the main CI object to $this->CI and load the file helper since we use it a lot[m
[32m+[m		[32m$this->CI =& get_instance();[m
[32m+[m		[32m$this->db =& $db;[m
[32m+[m		[32m$this->CI->load->helper('file');[m
[32m+[m
[32m+[m		[32m$this->check_path();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set Cache Directory Path[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$path	Path to the cache directory[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function check_path($path = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($path === '')[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($this->db->cachedir === '')[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn $this->db->cache_off();[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$path = $this->db->cachedir;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Add a trailing slash to the path if needed[m
[32m+[m		[32m$path = realpath($path)[m
[32m+[m			[32m? rtrim(realpath($path), DIRECTORY_SEPARATOR).DIRECTORY_SEPARATOR[m
[32m+[m			[32m: rtrim($path, '/').'/';[m
[32m+[m
[32m+[m		[32mif ( ! is_dir($path))[m
[32m+[m		[32m{[m
[32m+[m			[32mlog_message('debug', 'DB cache path error: '.$path);[m
[32m+[m
[32m+[m			[32m// If the path is wrong we'll turn off caching[m
[32m+[m			[32mreturn $this->db->cache_off();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! is_really_writable($path))[m
[32m+[m		[32m{[m
[32m+[m			[32mlog_message('debug', 'DB cache dir not writable: '.$path);[m
[32m+[m
[32m+[m			[32m// If the path is not really writable we'll turn off caching[m
[32m+[m			[32mreturn $this->db->cache_off();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->db->cachedir = $path;[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Retrieve a cached query[m
[32m+[m	[32m *[m
[32m+[m	[32m * The URI being requested will become the name of the cache sub-folder.[m
[32m+[m	[32m * An MD5 hash of the SQL statement will become the cache file name.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$sql[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function read($sql)[m
[32m+[m	[32m{[m
[32m+[m		[32m$segment_one = ($this->CI->uri->segment(1) == FALSE) ? 'default' : $this->CI->uri->segment(1);[m
[32m+[m		[32m$segment_two = ($this->CI->uri->segment(2) == FALSE) ? 'index' : $this->CI->uri->segment(2);[m
[32m+[m		[32m$filepath = $this->db->cachedir.$segment_one.'+'.$segment_two.'/'.md5($sql);[m
[32m+[m
[32m+[m		[32mif ( ! is_file($filepath) OR FALSE === ($cachedata = file_get_contents($filepath)))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn unserialize($cachedata);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Write a query to a cache file[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$sql[m
[32m+[m	[32m * @param	object	$object[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function write($sql, $object)[m
[32m+[m	[32m{[m
[32m+[m		[32m$segment_one = ($this->CI->uri->segment(1) == FALSE) ? 'default' : $this->CI->uri->segment(1);[m
[32m+[m		[32m$segment_two = ($this->CI->uri->segment(2) == FALSE) ? 'index' : $this->CI->uri->segment(2);[m
[32m+[m		[32m$dir_path = $this->db->cachedir.$segment_one.'+'.$segment_two.'/';[m
[32m+[m		[32m$filename = md5($sql);[m
[32m+[m
[32m+[m		[32mif ( ! is_dir($dir_path) && ! @mkdir($dir_path, 0750))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (write_file($dir_path.$filename, serialize($object)) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mchmod($dir_path.$filename, 0640);[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Delete cache files within a particular directory[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$segment_one[m
[32m+[m	[32m * @param	string	$segment_two[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function delete($segment_one = '', $segment_two = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($segment_one === '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$segment_one  = ($this->CI->uri->segment(1) == FALSE) ? 'default' : $this->CI->uri->segment(1);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($segment_two === '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$segment_two = ($this->CI->uri->segment(2) == FALSE) ? 'index' : $this->CI->uri->segment(2);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$dir_path = $this->db->cachedir.$segment_one.'+'.$segment_two.'/';[m
[32m+[m		[32mdelete_files($dir_path, TRUE);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Delete all existing cache files[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function delete_all()[m
[32m+[m	[32m{[m
[32m+[m		[32mdelete_files($this->db->cachedir, TRUE, TRUE);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/DB_driver.php b/system/database/DB_driver.php[m
[1mnew file mode 100644[m
[1mindex 0000000..f8956f0[m
[1m--- /dev/null[m
[1m+++ b/system/database/DB_driver.php[m
[36m@@ -0,0 +1,1991 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Database Driver Class[m
[32m+[m[32m *[m
[32m+[m[32m * This is the platform-independent base DB implementation class.[m
[32m+[m[32m * This class will not be called directly. Rather, the adapter[m
[32m+[m[32m * class for the specific database will extend and instantiate it.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mabstract class CI_DB_driver {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Data Source Name / Connect string[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $dsn;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Username[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $username;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Password[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $password;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Hostname[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $hostname;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database name[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $database;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database driver[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $dbdriver		= 'mysqli';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Sub-driver[m
[32m+[m	[32m *[m
[32m+[m	[32m * @used-by	CI_DB_pdo_driver[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $subdriver;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Table prefix[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $dbprefix		= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Character set[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $char_set		= 'utf8';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Collation[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $dbcollat		= 'utf8_general_ci';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Encryption flag/data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $encrypt			= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Swap Prefix[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $swap_pre		= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database port[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $port			= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Persistent connection flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $pconnect		= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Connection ID[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	object|resource[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $conn_id			= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Result ID[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	object|resource[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $result_id		= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Debug flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * Whether to display error messages.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $db_debug		= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Benchmark time[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $benchmark		= 0;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Executed queries count[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $query_count		= 0;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Bind marker[m
[32m+[m	[32m *[m
[32m+[m	[32m * Character used to identify values in a prepared statement.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $bind_marker		= '?';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Save queries flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * Whether to keep an in-memory history of queries for debugging purposes.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $save_queries		= TRUE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Queries list[m
[32m+[m	[32m *[m
[32m+[m	[32m * @see	CI_DB_driver::$save_queries[m
[32m+[m	[32m * @var	string[][m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $queries			= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Query times[m
[32m+[m	[32m *[m
[32m+[m	[32m * A list of times that queries took to execute.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $query_times		= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Data cache[m
[32m+[m	[32m *[m
[32m+[m	[32m * An internal generic value cache.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $data_cache		= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Transaction enabled flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $trans_enabled		= TRUE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Strict transaction mode flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $trans_strict		= TRUE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Transaction depth level[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	int[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_trans_depth		= 0;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Transaction status flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * Used with transactions to determine if a rollback should occur.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_trans_status	= TRUE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Transaction failure flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * Used with transactions to determine if a transaction has failed.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_trans_failure	= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Cache On flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $cache_on		= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Cache directory path[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $cachedir		= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Cache auto-delete flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $cache_autodel		= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * DB Cache object[m
[32m+[m	[32m *[m
[32m+[m	[32m * @see	CI_DB_cache[m
[32m+[m	[32m * @var	object[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $CACHE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Protect identifiers flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_protect_identifiers		= TRUE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of reserved identifiers[m
[32m+[m	[32m *[m
[32m+[m	[32m * Identifiers that must NOT be escaped.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[][m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_reserved_identifiers	= array('*');[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Identifier escape character[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_escape_char = '"';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ESCAPE statement string[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_like_escape_str = " ESCAPE '%s' ";[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ESCAPE character[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_like_escape_chr = '!';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ORDER BY random keyword[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_random_keyword = array('RAND()', 'RAND(%d)');[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * COUNT string[m
[32m+[m	[32m *[m
[32m+[m	[32m * @used-by	CI_DB_driver::count_all()[m
[32m+[m	[32m * @used-by	CI_DB_query_builder::count_all_results()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_count_string = 'SELECT COUNT(*) AS ';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct($params)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (is_array($params))[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($params as $key => $val)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->$key = $val;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mlog_message('info', 'Database Driver Class Initialized');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Initialize Database Settings[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function initialize()[m
[32m+[m	[32m{[m
[32m+[m		[32m/* If an established connection is available, then there's[m
[32m+[m		[32m * no need to connect and select the database.[m
[32m+[m		[32m *[m
[32m+[m		[32m * Depending on the database driver, conn_id can be either[m
[32m+[m		[32m * boolean TRUE, a resource or an object.[m
[32m+[m		[32m */[m
[32m+[m		[32mif ($this->conn_id)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// ----------------------------------------------------------------[m
[32m+[m
[32m+[m		[32m// Connect to the database and set the connection ID[m
[32m+[m		[32m$this->conn_id = $this->db_connect($this->pconnect);[m
[32m+[m
[32m+[m		[32m// No connection resource? Check if there is a failover else throw an error[m
[32m+[m		[32mif ( ! $this->conn_id)[m
[32m+[m		[32m{[m
[32m+[m			[32m// Check if there is a failover set[m
[32m+[m			[32mif ( ! empty($this->failover) && is_array($this->failover))[m
[32m+[m			[32m{[m
[32m+[m				[32m// Go over all the failovers[m
[32m+[m				[32mforeach ($this->failover as $failover)[m
[32m+[m				[32m{[m
[32m+[m					[32m// Replace the current settings with those of the failover[m
[32m+[m					[32mforeach ($failover as $key => $val)[m
[32m+[m					[32m{[m
[32m+[m						[32m$this->$key = $val;[m
[32m+[m					[32m}[m
[32m+[m
[32m+[m					[32m// Try to connect[m
[32m+[m					[32m$this->conn_id = $this->db_connect($this->pconnect);[m
[32m+[m
[32m+[m					[32m// If a connection is made break the foreach loop[m
[32m+[m					[32mif ($this->conn_id)[m
[32m+[m					[32m{[m
[32m+[m						[32mbreak;[m
[32m+[m					[32m}[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// We still don't have a connection?[m
[32m+[m			[32mif ( ! $this->conn_id)[m
[32m+[m			[32m{[m
[32m+[m				[32mlog_message('error', 'Unable to connect to the database');[m
[32m+[m
[32m+[m				[32mif ($this->db_debug)[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->display_error('db_unable_to_connect');[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Now we set the character set and that's all[m
[32m+[m		[32mreturn $this->db_set_charset($this->char_set);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * DB connect[m
[32m+[m	[32m *[m
[32m+[m	[32m * This is just a dummy method that all drivers will override.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function db_connect()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Persistent database connection[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function db_pconnect()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->db_connect(TRUE);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Reconnect[m
[32m+[m	[32m *[m
[32m+[m	[32m * Keep / reestablish the db connection if no queries have been[m
[32m+[m	[32m * sent for a length of time exceeding the server's idle timeout.[m
[32m+[m	[32m *[m
[32m+[m	[32m * This is just a dummy method to allow drivers without such[m
[32m+[m	[32m * functionality to not declare it, while others will override it.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function reconnect()[m
[32m+[m	[32m{[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Select database[m
[32m+[m	[32m *[m
[32m+[m	[32m * This is just a dummy method to allow drivers without such[m
[32m+[m	[32m * functionality to not declare it, while others will override it.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function db_select()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Last error[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function error()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn array('code' => NULL, 'message' => NULL);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set client character set[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function db_set_charset($charset)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (method_exists($this, '_db_set_charset') && ! $this->_db_set_charset($charset))[m
[32m+[m		[32m{[m
[32m+[m			[32mlog_message('error', 'Unable to set database connection charset: '.$charset);[m
[32m+[m
[32m+[m			[32mif ($this->db_debug)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->display_error('db_unable_to_set_charset', $charset);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * The name of the platform in use (mysql, mssql, etc...)[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function platform()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->dbdriver;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database version number[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns a string containing the version of the database being used.[m
[32m+[m	[32m * Most drivers will override this method.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function version()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (isset($this->data_cache['version']))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->data_cache['version'];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (FALSE === ($sql = $this->_version()))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($this->db_debug) ? $this->display_error('db_unsupported_function') : FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$query = $this->query($sql)->row();[m
[32m+[m		[32mreturn $this->data_cache['version'] = $query->ver;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Version number query string[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _version()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'SELECT VERSION() AS ver';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Execute the query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Accepts an SQL string as input and returns a result object upon[m
[32m+[m	[32m * successful execution of a "read" type query. Returns boolean TRUE[m
[32m+[m	[32m * upon successful execution of a "write" type query. Returns boolean[m
[32m+[m	[32m * FALSE upon failure, and if the $db_debug variable is set to TRUE[m
[32m+[m	[32m * will raise an error.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$sql[m
[32m+[m	[32m * @param	array	$binds = FALSE		An array of binding data[m
[32m+[m	[32m * @param	bool	$return_object = NULL[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function query($sql, $binds = FALSE, $return_object = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($sql === '')[m
[32m+[m		[32m{[m
[32m+[m			[32mlog_message('error', 'Invalid query: '.$sql);[m
[32m+[m			[32mreturn ($this->db_debug) ? $this->display_error('db_invalid_query') : FALSE;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! is_bool($return_object))[m
[32m+[m		[32m{[m
[32m+[m			[32m$return_object = ! $this->is_write_type($sql);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Verify table prefix and replace if necessary[m
[32m+[m		[32mif ($this->dbprefix !== '' && $this->swap_pre !== '' && $this->dbprefix !== $this->swap_pre)[m
[32m+[m		[32m{[m
[32m+[m			[32m$sql = preg_replace('/(\W)'.$this->swap_pre.'(\S+?)/', '\\1'.$this->dbprefix.'\\2', $sql);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Compile binds if needed[m
[32m+[m		[32mif ($binds !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$sql = $this->compile_binds($sql, $binds);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Is query caching enabled? If the query is a "read type"[m
[32m+[m		[32m// we will load the caching class and return the previously[m
[32m+[m		[32m// cached query if it exists[m
[32m+[m		[32mif ($this->cache_on === TRUE && $return_object === TRUE && $this->_cache_init())[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->load_rdriver();[m
[32m+[m			[32mif (FALSE !== ($cache = $this->CACHE->read($sql)))[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn $cache;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Save the query for debugging[m
[32m+[m		[32mif ($this->save_queries === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->queries[] = $sql;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Start the Query Timer[m
[32m+[m		[32m$time_start = microtime(TRUE);[m
[32m+[m
[32m+[m		[32m// Run the Query[m
[32m+[m		[32mif (FALSE === ($this->result_id = $this->simple_query($sql)))[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($this->save_queries === TRUE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->query_times[] = 0;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// This will trigger a rollback if transactions are being used[m
[32m+[m			[32mif ($this->_trans_depth !== 0)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_trans_status = FALSE;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// Grab the error now, as we might run some additional queries before displaying the error[m
[32m+[m			[32m$error = $this->error();[m
[32m+[m
[32m+[m			[32m// Log errors[m
[32m+[m			[32mlog_message('error', 'Query error: '.$error['message'].' - Invalid query: '.$sql);[m
[32m+[m
[32m+[m			[32mif ($this->db_debug)[m
[32m+[m			[32m{[m
[32m+[m				[32m// We call this function in order to roll-back queries[m
[32m+[m				[32m// if transactions are enabled. If we don't call this here[m
[32m+[m				[32m// the error message will trigger an exit, causing the[m
[32m+[m				[32m// transactions to remain in limbo.[m
[32m+[m				[32mwhile ($this->_trans_depth !== 0)[m
[32m+[m				[32m{[m
[32m+[m					[32m$trans_depth = $this->_trans_depth;[m
[32m+[m					[32m$this->trans_complete();[m
[32m+[m					[32mif ($trans_depth === $this->_trans_depth)[m
[32m+[m					[32m{[m
[32m+[m						[32mlog_message('error', 'Database: Failure during an automated transaction commit/rollback!');[m
[32m+[m						[32mbreak;[m
[32m+[m					[32m}[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m// Display errors[m
[32m+[m				[32mreturn $this->display_error(array('Error Number: '.$error['code'], $error['message'], $sql));[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Stop and aggregate the query time results[m
[32m+[m		[32m$time_end = microtime(TRUE);[m
[32m+[m		[32m$this->benchmark += $time_end - $time_start;[m
[32m+[m
[32m+[m		[32mif ($this->save_queries === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->query_times[] = $time_end - $time_start;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Increment the query counter[m
[32m+[m		[32m$this->query_count++;[m
[32m+[m
[32m+[m		[32m// Will we have a result object instantiated? If not - we'll simply return TRUE[m
[32m+[m		[32mif ($return_object !== TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m// If caching is enabled we'll auto-cleanup any existing files related to this particular URI[m
[32m+[m			[32mif ($this->cache_on === TRUE && $this->cache_autodel === TRUE && $this->_cache_init())[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->CACHE->delete();[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Load and instantiate the result driver[m
[32m+[m		[32m$driver		= $this->load_rdriver();[m
[32m+[m		[32m$RES		= new $driver($this);[m
[32m+[m
[32m+[m		[32m// Is query caching enabled? If so, we'll serialize the[m
[32m+[m		[32m// result object and save it to a cache file.[m
[32m+[m		[32mif ($this->cache_on === TRUE && $this->_cache_init())[m
[32m+[m		[32m{[m
[32m+[m			[32m// We'll create a new instance of the result object[m
[32m+[m			[32m// only without the platform specific driver since[m
[32m+[m			[32m// we can't use it with cached data (the query result[m
[32m+[m			[32m// resource ID won't be any good once we've cached the[m
[32m+[m			[32m// result object, so we'll have to compile the data[m
[32m+[m			[32m// and save it)[m
[32m+[m			[32m$CR = new CI_DB_result($this);[m
[32m+[m			[32m$CR->result_object	= $RES->result_object();[m
[32m+[m			[32m$CR->result_array	= $RES->result_array();[m
[32m+[m			[32m$CR->num_rows		= $RES->num_rows();[m
[32m+[m
[32m+[m			[32m// Reset these since cached objects can not utilize resource IDs.[m
[32m+[m			[32m$CR->conn_id		= NULL;[m
[32m+[m			[32m$CR->result_id		= NULL;[m
[32m+[m
[32m+[m			[32m$this->CACHE->write($sql, $CR);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $RES;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Load the result drivers[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string	the name of the result class[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function load_rdriver()[m
[32m+[m	[32m{[m
[32m+[m		[32m$driver = 'CI_DB_'.$this->dbdriver.'_result';[m
[32m+[m
[32m+[m		[32mif ( ! class_exists($driver, FALSE))[m
[32m+[m		[32m{[m
[32m+[m			[32mrequire_once(BASEPATH.'database/DB_result.php');[m
[32m+[m			[32mrequire_once(BASEPATH.'database/drivers/'.$this->dbdriver.'/'.$this->dbdriver.'_result.php');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $driver;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Simple Query[m
[32m+[m	[32m * This is a simplified version of the query() function. Internally[m
[32m+[m	[32m * we only use it when running transaction commands since they do[m
[32m+[m	[32m * not require all the features of the main query() function.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the sql query[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function simple_query($sql)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! $this->conn_id)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ( ! $this->initialize())[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->_execute($sql);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Disable Transactions[m
[32m+[m	[32m * This permits transactions to be disabled at run-time.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function trans_off()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->trans_enabled = FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Enable/disable Transaction Strict Mode[m
[32m+[m	[32m *[m
[32m+[m	[32m * When strict mode is enabled, if you are running multiple groups of[m
[32m+[m	[32m * transactions, if one group fails all subsequent groups will be[m
[32m+[m	[32m * rolled back.[m
[32m+[m	[32m *[m
[32m+[m	[32m * If strict mode is disabled, each group is treated autonomously,[m
[32m+[m	[32m * meaning a failure of one group will not affect any others[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$mode = TRUE[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function trans_strict($mode = TRUE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->trans_strict = is_bool($mode) ? $mode : TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Start Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$test_mode = FALSE[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function trans_start($test_mode = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! $this->trans_enabled)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->trans_begin($test_mode);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Complete Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function trans_complete()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! $this->trans_enabled)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// The query() function will set this flag to FALSE in the event that a query failed[m
[32m+[m		[32mif ($this->_trans_status === FALSE OR $this->_trans_failure === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->trans_rollback();[m
[32m+[m
[32m+[m			[32m// If we are NOT running in strict mode, we will reset[m
[32m+[m			[32m// the _trans_status flag so that subsequent groups of[m
[32m+[m			[32m// transactions will be permitted.[m
[32m+[m			[32mif ($this->trans_strict === FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_trans_status = TRUE;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mlog_message('debug', 'DB Transaction Failure');[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->trans_commit();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Lets you retrieve the transaction flag to determine if it has failed[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function trans_status()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_trans_status;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Begin Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$test_mode[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function trans_begin($test_mode = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! $this->trans_enabled)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m		[32m// When transactions are nested we only begin/commit/rollback the outermost ones[m
[32m+[m		[32melseif ($this->_trans_depth > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_trans_depth++;[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Reset the transaction failure flag.[m
[32m+[m		[32m// If the $test_mode flag is set to TRUE transactions will be rolled back[m
[32m+[m		[32m// even if the queries produce a successful result.[m
[32m+[m		[32m$this->_trans_failure = ($test_mode === TRUE);[m
[32m+[m
[32m+[m		[32mif ($this->_trans_begin())[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_trans_status = TRUE;[m
[32m+[m			[32m$this->_trans_depth++;[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Commit Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function trans_commit()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! $this->trans_enabled OR $this->_trans_depth === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m		[32m// When transactions are nested we only begin/commit/rollback the outermost ones[m
[32m+[m		[32melseif ($this->_trans_depth > 1 OR $this->_trans_commit())[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_trans_depth--;[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Rollback Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function trans_rollback()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! $this->trans_enabled OR $this->_trans_depth === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m		[32m// When transactions are nested we only begin/commit/rollback the outermost ones[m
[32m+[m		[32melseif ($this->_trans_depth > 1 OR $this->_trans_rollback())[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_trans_depth--;[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Compile Bindings[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the sql statement[m
[32m+[m	[32m * @param	array	an array of bind data[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function compile_binds($sql, $binds)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (empty($this->bind_marker) OR strpos($sql, $this->bind_marker) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $sql;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! is_array($binds))[m
[32m+[m		[32m{[m
[32m+[m			[32m$binds = array($binds);[m
[32m+[m			[32m$bind_count = 1;[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m// Make sure we're using numeric keys[m
[32m+[m			[32m$binds = array_values($binds);[m
[32m+[m			[32m$bind_count = count($binds);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// We'll need the marker length later[m
[32m+[m		[32m$ml = strlen($this->bind_marker);[m
[32m+[m
[32m+[m		[32m// Make sure not to replace a chunk inside a string that happens to match the bind marker[m
[32m+[m		[32mif ($c = preg_match_all("/'[^']*'|\"[^\"]*\"/i", $sql, $matches))[m
[32m+[m		[32m{[m
[32m+[m			[32m$c = preg_match_all('/'.preg_quote($this->bind_marker, '/').'/i',[m
[32m+[m				[32mstr_replace($matches[0],[m
[32m+[m					[32mstr_replace($this->bind_marker, str_repeat(' ', $ml), $matches[0]),[m
[32m+[m					[32m$sql, $c),[m
[32m+[m				[32m$matches, PREG_OFFSET_CAPTURE);[m
[32m+[m
[32m+[m			[32m// Bind values' count must match the count of markers in the query[m
[32m+[m			[32mif ($bind_count !== $c)[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn $sql;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (($c = preg_match_all('/'.preg_quote($this->bind_marker, '/').'/i', $sql, $matches, PREG_OFFSET_CAPTURE)) !== $bind_count)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $sql;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mdo[m
[32m+[m		[32m{[m
[32m+[m			[32m$c--;[m
[32m+[m			[32m$escaped_value = $this->escape($binds[$c]);[m
[32m+[m			[32mif (is_array($escaped_value))[m
[32m+[m			[32m{[m
[32m+[m				[32m$escaped_value = '('.implode(',', $escaped_value).')';[m
[32m+[m			[32m}[m
[32m+[m			[32m$sql = substr_replace($sql, $escaped_value, $matches[0][$c][1], $ml);[m
[32m+[m		[32m}[m
[32m+[m		[32mwhile ($c !== 0);[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Determines if a query is a "write" type.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	An SQL query string[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function is_write_type($sql)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn (bool) preg_match('/^\s*"?(SET|INSERT|UPDATE|DELETE|REPLACE|CREATE|DROP|TRUNCATE|LOAD|COPY|ALTER|RENAME|GRANT|REVOKE|LOCK|UNLOCK|REINDEX|MERGE)\s/i', $sql);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Calculate the aggregate query elapsed time[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	The number of decimal places[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function elapsed_time($decimals = 6)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn number_format($this->benchmark, $decimals);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns the total number of queries[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function total_queries()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->query_count;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns the last query that was executed[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function last_query()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn end($this->queries);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * "Smart" Escape String[m
[32m+[m	[32m *[m
[32m+[m	[32m * Escapes data based on type[m
[32m+[m	[32m * Sets boolean and null types[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function escape($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (is_array($str))[m
[32m+[m		[32m{[m
[32m+[m			[32m$str = array_map(array(&$this, 'escape'), $str);[m
[32m+[m			[32mreturn $str;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (is_string($str) OR (is_object($str) && method_exists($str, '__toString')))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn "'".$this->escape_str($str)."'";[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (is_bool($str))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($str === FALSE) ? 0 : 1;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($str === NULL)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn 'NULL';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $str;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Escape String[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string|string[]	$str	Input string[m
[32m+[m	[32m * @param	bool	$like	Whether or not the string will be used in a LIKE condition[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function escape_str($str, $like = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (is_array($str))[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($str as $key => $val)[m
[32m+[m			[32m{[m
[32m+[m				[32m$str[$key] = $this->escape_str($val, $like);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn $str;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$str = $this->_escape_str($str);[m
[32m+[m
[32m+[m		[32m// escape LIKE condition wildcards[m
[32m+[m		[32mif ($like === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn str_replace([m
[32m+[m				[32marray($this->_like_escape_chr, '%', '_'),[m
[32m+[m				[32marray($this->_like_escape_chr.$this->_like_escape_chr, $this->_like_escape_chr.'%', $this->_like_escape_chr.'_'),[m
[32m+[m				[32m$str[m
[32m+[m			[32m);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $str;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Escape LIKE String[m
[32m+[m	[32m *[m
[32m+[m	[32m * Calls the individual driver for platform[m
[32m+[m	[32m * specific escaping for LIKE conditions[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string|string[][m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function escape_like_str($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->escape_str($str, TRUE);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Platform-dependent string escape[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _escape_str($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn str_replace("'", "''", remove_invisible_characters($str, FALSE));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Primary[m
[32m+[m	[32m *[m
[32m+[m	[32m * Retrieves the primary key. It assumes that the row in the first[m
[32m+[m	[32m * position is the primary key[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table	Table name[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function primary($table)[m
[32m+[m	[32m{[m
[32m+[m		[32m$fields = $this->list_fields($table);[m
[32m+[m		[32mreturn is_array($fields) ? current($fields) : FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * "Count All" query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string that counts all records in[m
[32m+[m	[32m * the specified database[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function count_all($table = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($table === '')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn 0;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$query = $this->query($this->_count_string.$this->escape_identifiers('numrows').' FROM '.$this->protect_identifiers($table, TRUE, NULL, FALSE));[m
[32m+[m		[32mif ($query->num_rows() === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn 0;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$query = $query->row();[m
[32m+[m		[32m$this->_reset_select();[m
[32m+[m		[32mreturn (int) $query->numrows;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns an array of table names[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$constrain_by_prefix = FALSE[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function list_tables($constrain_by_prefix = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Is there a cached result?[m
[32m+[m		[32mif (isset($this->data_cache['table_names']))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->data_cache['table_names'];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (FALSE === ($sql = $this->_list_tables($constrain_by_prefix)))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($this->db_debug) ? $this->display_error('db_unsupported_function') : FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->data_cache['table_names'] = array();[m
[32m+[m		[32m$query = $this->query($sql);[m
[32m+[m
[32m+[m		[32mforeach ($query->result_array() as $row)[m
[32m+[m		[32m{[m
[32m+[m			[32m// Do we know from which column to get the table name?[m
[32m+[m			[32mif ( ! isset($key))[m
[32m+[m			[32m{[m
[32m+[m				[32mif (isset($row['table_name']))[m
[32m+[m				[32m{[m
[32m+[m					[32m$key = 'table_name';[m
[32m+[m				[32m}[m
[32m+[m				[32melseif (isset($row['TABLE_NAME']))[m
[32m+[m				[32m{[m
[32m+[m					[32m$key = 'TABLE_NAME';[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32m/* We have no other choice but to just get the first element's key.[m
[32m+[m					[32m * Due to array_shift() accepting its argument by reference, if[m
[32m+[m					[32m * E_STRICT is on, this would trigger a warning. So we'll have to[m
[32m+[m					[32m * assign it first.[m
[32m+[m					[32m */[m
[32m+[m					[32m$key = array_keys($row);[m
[32m+[m					[32m$key = array_shift($key);[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$this->data_cache['table_names'][] = $row[$key];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->data_cache['table_names'];[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Determine if a particular table exists[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table_name[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function table_exists($table_name)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn in_array($this->protect_identifiers($table_name, TRUE, FALSE, FALSE), $this->list_tables());[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch Field Names[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table	Table name[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function list_fields($table)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Is there a cached result?[m
[32m+[m		[32mif (isset($this->data_cache['field_names'][$table]))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->data_cache['field_names'][$table];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (FALSE === ($sql = $this->_list_columns($table)))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($this->db_debug) ? $this->display_error('db_unsupported_function') : FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$query = $this->query($sql);[m
[32m+[m		[32m$this->data_cache['field_names'][$table] = array();[m
[32m+[m
[32m+[m		[32mforeach ($query->result_array() as $row)[m
[32m+[m		[32m{[m
[32m+[m			[32m// Do we know from where to get the column's name?[m
[32m+[m			[32mif ( ! isset($key))[m
[32m+[m			[32m{[m
[32m+[m				[32mif (isset($row['column_name']))[m
[32m+[m				[32m{[m
[32m+[m					[32m$key = 'column_name';[m
[32m+[m				[32m}[m
[32m+[m				[32melseif (isset($row['COLUMN_NAME']))[m
[32m+[m				[32m{[m
[32m+[m					[32m$key = 'COLUMN_NAME';[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32m// We have no other choice but to just get the first element's key.[m
[32m+[m					[32m$key = key($row);[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$this->data_cache['field_names'][$table][] = $row[$key];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->data_cache['field_names'][$table];[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Determine if a particular field exists[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function field_exists($field_name, $table_name)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn in_array($field_name, $this->list_fields($table_name));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns an object with field data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table	the table name[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function field_data($table)[m
[32m+[m	[32m{[m
[32m+[m		[32m$query = $this->query($this->_field_data($this->protect_identifiers($table, TRUE, NULL, FALSE)));[m
[32m+[m		[32mreturn ($query) ? $query->field_data() : FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Escape the SQL Identifiers[m
[32m+[m	[32m *[m
[32m+[m	[32m * This function escapes column and table names[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function escape_identifiers($item)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->_escape_char === '' OR empty($item) OR in_array($item, $this->_reserved_identifiers))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $item;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (is_array($item))[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($item as $key => $value)[m
[32m+[m			[32m{[m
[32m+[m				[32m$item[$key] = $this->escape_identifiers($value);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn $item;[m
[32m+[m		[32m}[m
[32m+[m		[32m// Avoid breaking functions and literal values inside queries[m
[32m+[m		[32melseif (ctype_digit($item) OR $item[0] === "'" OR ($this->_escape_char !== '"' && $item[0] === '"') OR strpos($item, '(') !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $item;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mstatic $preg_ec = array();[m
[32m+[m
[32m+[m		[32mif (empty($preg_ec))[m
[32m+[m		[32m{[m
[32m+[m			[32mif (is_array($this->_escape_char))[m
[32m+[m			[32m{[m
[32m+[m				[32m$preg_ec = array([m
[32m+[m					[32mpreg_quote($this->_escape_char[0], '/'),[m
[32m+[m					[32mpreg_quote($this->_escape_char[1], '/'),[m
[32m+[m					[32m$this->_escape_char[0],[m
[32m+[m					[32m$this->_escape_char[1][m
[32m+[m				[32m);[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$preg_ec[0] = $preg_ec[1] = preg_quote($this->_escape_char, '/');[m
[32m+[m				[32m$preg_ec[2] = $preg_ec[3] = $this->_escape_char;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mforeach ($this->_reserved_identifiers as $id)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (strpos($item, '.'.$id) !== FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn preg_replace('/'.$preg_ec[0].'?([^'.$preg_ec[1].'\.]+)'.$preg_ec[1].'?\./i', $preg_ec[2].'$1'.$preg_ec[3].'.', $item);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn preg_replace('/'.$preg_ec[0].'?([^'.$preg_ec[1].'\.]+)'.$preg_ec[1].'?(\.)?/i', $preg_ec[2].'$1'.$preg_ec[3].'$2', $item);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Generate an insert string[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the table upon which the query will be performed[m
[32m+[m	[32m * @param	array	an associative array data of key/values[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function insert_string($table, $data)[m
[32m+[m	[32m{[m
[32m+[m		[32m$fields = $values = array();[m
[32m+[m
[32m+[m		[32mforeach ($data as $key => $val)[m
[32m+[m		[32m{[m
[32m+[m			[32m$fields[] = $this->escape_identifiers($key);[m
[32m+[m			[32m$values[] = $this->escape($val);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->_insert($this->protect_identifiers($table, TRUE, NULL, FALSE), $fields, $values);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Insert statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific insert string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the table name[m
[32m+[m	[32m * @param	array	the insert keys[m
[32m+[m	[32m * @param	array	the insert values[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _insert($table, $keys, $values)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'INSERT INTO '.$table.' ('.implode(', ', $keys).') VALUES ('.implode(', ', $values).')';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Generate an update string[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the table upon which the query will be performed[m
[32m+[m	[32m * @param	array	an associative array data of key/values[m
[32m+[m	[32m * @param	mixed	the "where" statement[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function update_string($table, $data, $where)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (empty($where))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->where($where);[m
[32m+[m
[32m+[m		[32m$fields = array();[m
[32m+[m		[32mforeach ($data as $key => $val)[m
[32m+[m		[32m{[m
[32m+[m			[32m$fields[$this->protect_identifiers($key)] = $this->escape($val);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sql = $this->_update($this->protect_identifiers($table, TRUE, NULL, FALSE), $fields);[m
[32m+[m		[32m$this->_reset_write();[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Update statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific update string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the table name[m
[32m+[m	[32m * @param	array	the update data[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _update($table, $values)[m
[32m+[m	[32m{[m
[32m+[m		[32mforeach ($values as $key => $val)[m
[32m+[m		[32m{[m
[32m+[m			[32m$valstr[] = $key.' = '.$val;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn 'UPDATE '.$table.' SET '.implode(', ', $valstr)[m
[32m+[m			[32m.$this->_compile_wh('qb_where')[m
[32m+[m			[32m.$this->_compile_order_by()[m
[32m+[m			[32m.($this->qb_limit !== FALSE ? ' LIMIT '.$this->qb_limit : '');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Tests whether the string has an SQL operator[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _has_operator($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn (bool) preg_match('/(<|>|!|=|\sIS NULL|\sIS NOT NULL|\sEXISTS|\sBETWEEN|\sLIKE|\sIN\s*\(|\s)/i', trim($str));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns the SQL string operator[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _get_operator($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mstatic $_operators;[m
[32m+[m
[32m+[m		[32mif (empty($_operators))[m
[32m+[m		[32m{[m
[32m+[m			[32m$_les = ($this->_like_escape_str !== '')[m
[32m+[m				[32m? '\s+'.preg_quote(trim(sprintf($this->_like_escape_str, $this->_like_escape_chr)), '/')[m
[32m+[m				[32m: '';[m
[32m+[m			[32m$_operators = array([m
[32m+[m				[32m'\s*(?:<|>|!)?=\s*',             // =, <=, >=, !=[m
[32m+[m				[32m'\s*<>?\s*',                     // <, <>[m
[32m+[m				[32m'\s*>\s*',                       // >[m
[32m+[m				[32m'\s+IS NULL',                    // IS NULL[m
[32m+[m				[32m'\s+IS NOT NULL',                // IS NOT NULL[m
[32m+[m				[32m'\s+EXISTS\s*\(.*\)',        // EXISTS(sql)[m
[32m+[m				[32m'\s+NOT EXISTS\s*\(.*\)',    // NOT EXISTS(sql)[m
[32m+[m				[32m'\s+BETWEEN\s+',                 // BETWEEN value AND value[m
[32m+[m				[32m'\s+IN\s*\(.*\)',            // IN(list)[m
[32m+[m				[32m'\s+NOT IN\s*\(.*\)',        // NOT IN (list)[m
[32m+[m				[32m'\s+LIKE\s+\S.*('.$_les.')?',    // LIKE 'expr'[ ESCAPE '%s'][m
[32m+[m				[32m'\s+NOT LIKE\s+\S.*('.$_les.')?' // NOT LIKE 'expr'[ ESCAPE '%s'][m
[32m+[m			[32m);[m
[32m+[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn preg_match('/'.implode('|', $_operators).'/i', $str, $match)[m
[32m+[m			[32m? $match[0] : FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Enables a native PHP function to be run, using a platform agnostic wrapper.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$function	Function name[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function call_function($function)[m
[32m+[m	[32m{[m
[32m+[m		[32m$driver = ($this->dbdriver === 'postgre') ? 'pg_' : $this->dbdriver.'_';[m
[32m+[m
[32m+[m		[32mif (FALSE === strpos($driver, $function))[m
[32m+[m		[32m{[m
[32m+[m			[32m$function = $driver.$function;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! function_exists($function))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($this->db_debug) ? $this->display_error('db_unsupported_function') : FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn (func_num_args() > 1)[m
[32m+[m			[32m? call_user_func_array($function, array_slice(func_get_args(), 1))[m
[32m+[m			[32m: call_user_func($function);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set Cache Directory Path[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the path to the cache directory[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function cache_set_path($path = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->cachedir = $path;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Enable Query Caching[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool	cache_on value[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function cache_on()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->cache_on = TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Disable Query Caching[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool	cache_on value[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function cache_off()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->cache_on = FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Delete the cache files associated with a particular URI[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$segment_one = ''[m
[32m+[m	[32m * @param	string	$segment_two = ''[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function cache_delete($segment_one = '', $segment_two = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_cache_init()[m
[32m+[m			[32m? $this->CACHE->delete($segment_one, $segment_two)[m
[32m+[m			[32m: FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Delete All cache files[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function cache_delete_all()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_cache_init()[m
[32m+[m			[32m? $this->CACHE->delete_all()[m
[32m+[m			[32m: FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Initialize the Cache Class[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _cache_init()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! class_exists('CI_DB_Cache', FALSE))[m
[32m+[m		[32m{[m
[32m+[m			[32mrequire_once(BASEPATH.'database/DB_cache.php');[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (is_object($this->CACHE))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->CACHE = new CI_DB_Cache($this); // pass db object to support multiple db connections and returned db objects[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Close DB Connection[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function close()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->conn_id)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_close();[m
[32m+[m			[32m$this->conn_id = FALSE;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Close DB Connection[m
[32m+[m	[32m *[m
[32m+[m	[32m * This method would be overridden by most of the drivers.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _close()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->conn_id = FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Display an error message[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the error message[m
[32m+[m	[32m * @param	string	any "swap" values[m
[32m+[m	[32m * @param	bool	whether to localize the message[m
[32m+[m	[32m * @return	string	sends the application/views/errors/error_db.php template[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function display_error($error = '', $swap = '', $native = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$LANG =& load_class('Lang', 'core');[m
[32m+[m		[32m$LANG->load('db');[m
[32m+[m
[32m+[m		[32m$heading = $LANG->line('db_error_heading');[m
[32m+[m
[32m+[m		[32mif ($native === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$message = (array) $error;[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$message = is_array($error) ? $error : array(str_replace('%s', $swap, $LANG->line($error)));[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Find the most likely culprit of the error by going through[m
[32m+[m		[32m// the backtrace until the source file is no longer in the[m
[32m+[m		[32m// database folder.[m
[32m+[m		[32m$trace = debug_backtrace();[m
[32m+[m		[32mforeach ($trace as $call)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (isset($call['file'], $call['class']))[m
[32m+[m			[32m{[m
[32m+[m				[32m// We'll need this on Windows, as APPPATH and BASEPATH will always use forward slashes[m
[32m+[m				[32mif (DIRECTORY_SEPARATOR !== '/')[m
[32m+[m				[32m{[m
[32m+[m					[32m$call['file'] = str_replace('\\', '/', $call['file']);[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mif (strpos($call['file'], BASEPATH.'database') === FALSE && strpos($call['class'], 'Loader') === FALSE)[m
[32m+[m				[32m{[m
[32m+[m					[32m// Found it - use a relative path for safety[m
[32m+[m					[32m$message[] = 'Filename: '.str_replace(array(APPPATH, BASEPATH), '', $call['file']);[m
[32m+[m					[32m$message[] = 'Line Number: '.$call['line'];[m
[32m+[m					[32mbreak;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$error =& load_class('Exceptions', 'core');[m
[32m+[m		[32mecho $error->show_error($heading, $message, 'error_db');[m
[32m+[m		[32mexit(8); // EXIT_DATABASE[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Protect Identifiers[m
[32m+[m	[32m *[m
[32m+[m	[32m * This function is used extensively by the Query Builder class, and by[m
[32m+[m	[32m * a couple functions in this class.[m
[32m+[m	[32m * It takes a column or table name (optionally with an alias) and inserts[m
[32m+[m	[32m * the table prefix onto it. Some logic is necessary in order to deal with[m
[32m+[m	[32m * column names that include the path. Consider a query like this:[m
[32m+[m	[32m *[m
[32m+[m	[32m * SELECT hostname.database.table.column AS c FROM hostname.database.table[m
[32m+[m	[32m *[m
[32m+[m	[32m * Or a query with aliasing:[m
[32m+[m	[32m *[m
[32m+[m	[32m * SELECT m.member_id, m.member_name FROM members AS m[m
[32m+[m	[32m *[m
[32m+[m	[32m * Since the column name can include up to four segments (host, DB, table, column)[m
[32m+[m	[32m * or also have an alias prefix, we need to do a bit of work to figure this out and[m
[32m+[m	[32m * insert the table prefix (if it exists) in the proper position, and escape only[m
[32m+[m	[32m * the correct identifiers.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	bool[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @param	bool[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function protect_identifiers($item, $prefix_single = FALSE, $protect_identifiers = NULL, $field_exists = TRUE)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! is_bool($protect_identifiers))[m
[32m+[m		[32m{[m
[32m+[m			[32m$protect_identifiers = $this->_protect_identifiers;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (is_array($item))[m
[32m+[m		[32m{[m
[32m+[m			[32m$escaped_array = array();[m
[32m+[m			[32mforeach ($item as $k => $v)[m
[32m+[m			[32m{[m
[32m+[m				[32m$escaped_array[$this->protect_identifiers($k)] = $this->protect_identifiers($v, $prefix_single, $protect_identifiers, $field_exists);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn $escaped_array;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// This is basically a bug fix for queries that use MAX, MIN, etc.[m
[32m+[m		[32m// If a parenthesis is found we know that we do not need to[m
[32m+[m		[32m// escape the data or add a prefix. There's probably a more graceful[m
[32m+[m		[32m// way to deal with this, but I'm not thinking of it -- Rick[m
[32m+[m		[32m//[m
[32m+[m		[32m// Added exception for single quotes as well, we don't want to alter[m
[32m+[m		[32m// literal strings. -- Narf[m
[32m+[m		[32mif (strcspn($item, "()'") !== strlen($item))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $item;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Convert tabs or multiple spaces into single spaces[m
[32m+[m		[32m$item = preg_replace('/\s+/', ' ', trim($item));[m
[32m+[m
[32m+[m		[32m// If the item has an alias declaration we remove it and set it aside.[m
[32m+[m		[32m// Note: strripos() is used in order to support spaces in table names[m
[32m+[m		[32mif ($offset = strripos($item, ' AS '))[m
[32m+[m		[32m{[m
[32m+[m			[32m$alias = ($protect_identifiers)[m
[32m+[m				[32m? substr($item, $offset, 4).$this->escape_identifiers(substr($item, $offset + 4))[m
[32m+[m				[32m: substr($item, $offset);[m
[32m+[m			[32m$item = substr($item, 0, $offset);[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($offset = strrpos($item, ' '))[m
[32m+[m		[32m{[m
[32m+[m			[32m$alias = ($protect_identifiers)[m
[32m+[m				[32m? ' '.$this->escape_identifiers(substr($item, $offset + 1))[m
[32m+[m				[32m: substr($item, $offset);[m
[32m+[m			[32m$item = substr($item, 0, $offset);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$alias = '';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Break the string apart if it contains periods, then insert the table prefix[m
[32m+[m		[32m// in the correct location, assuming the period doesn't indicate that we're dealing[m
[32m+[m		[32m// with an alias. While we're at it, we will escape the components[m
[32m+[m		[32mif (strpos($item, '.') !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$parts = explode('.', $item);[m
[32m+[m
[32m+[m			[32m// Does the first segment of the exploded item match[m
[32m+[m			[32m// one of the aliases previously identified? If so,[m
[32m+[m			[32m// we have nothing more to do other than escape the item[m
[32m+[m			[32m//[m
[32m+[m			[32m// NOTE: The ! empty() condition prevents this method[m
[32m+[m			[32m//       from breaking when QB isn't enabled.[m
[32m+[m			[32mif ( ! empty($this->qb_aliased_tables) && in_array($parts[0], $this->qb_aliased_tables))[m
[32m+[m			[32m{[m
[32m+[m				[32mif ($protect_identifiers === TRUE)[m
[32m+[m				[32m{[m
[32m+[m					[32mforeach ($parts as $key => $val)[m
[32m+[m					[32m{[m
[32m+[m						[32mif ( ! in_array($val, $this->_reserved_identifiers))[m
[32m+[m						[32m{[m
[32m+[m							[32m$parts[$key] = $this->escape_identifiers($val);[m
[32m+[m						[32m}[m
[32m+[m					[32m}[m
[32m+[m
[32m+[m					[32m$item = implode('.', $parts);[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mreturn $item.$alias;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// Is there a table prefix defined in the config file? If not, no need to do anything[m
[32m+[m			[32mif ($this->dbprefix !== '')[m
[32m+[m			[32m{[m
[32m+[m				[32m// We now add the table prefix based on some logic.[m
[32m+[m				[32m// Do we have 4 segments (hostname.database.table.column)?[m
[32m+[m				[32m// If so, we add the table prefix to the column name in the 3rd segment.[m
[32m+[m				[32mif (isset($parts[3]))[m
[32m+[m				[32m{[m
[32m+[m					[32m$i = 2;[m
[32m+[m				[32m}[m
[32m+[m				[32m// Do we have 3 segments (database.table.column)?[m
[32m+[m				[32m// If so, we add the table prefix to the column name in 2nd position[m
[32m+[m				[32melseif (isset($parts[2]))[m
[32m+[m				[32m{[m
[32m+[m					[32m$i = 1;[m
[32m+[m				[32m}[m
[32m+[m				[32m// Do we have 2 segments (table.column)?[m
[32m+[m				[32m// If so, we add the table prefix to the column name in 1st segment[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32m$i = 0;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m// This flag is set when the supplied $item does not contain a field name.[m
[32m+[m				[32m// This can happen when this function is being called from a JOIN.[m
[32m+[m				[32mif ($field_exists === FALSE)[m
[32m+[m				[32m{[m
[32m+[m					[32m$i++;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m// dbprefix may've already been applied, with or without the identifier escaped[m
[32m+[m				[32m$ec = '(?<ec>'.preg_quote(is_array($this->_escape_char) ? $this->_escape_char[0] : $this->_escape_char).')?';[m
[32m+[m				[32misset($ec[0]) && $ec .= '?'; // Just in case someone has disabled escaping by forcing an empty escape character[m
[32m+[m
[32m+[m				[32m// Verify table prefix and replace if necessary[m
[32m+[m				[32mif ($this->swap_pre !== '' && preg_match('#^'.$ec.preg_quote($this->swap_pre).'#', $parts[$i]))[m
[32m+[m				[32m{[m
[32m+[m					[32m$parts[$i] = preg_replace('#^'.$ec.preg_quote($this->swap_pre).'(\S+?)#', '\\1'.$this->dbprefix.'\\2', $parts[$i]);[m
[32m+[m				[32m}[m
[32m+[m				[32m// We only add the table prefix if it does not already exist[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32mpreg_match('#^'.$ec.preg_quote($this->dbprefix).'#', $parts[$i]) OR $parts[$i] = $this->dbprefix.$parts[$i];[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m// Put the parts back together[m
[32m+[m				[32m$item = implode('.', $parts);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif ($protect_identifiers === TRUE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$item = $this->escape_identifiers($item);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn $item.$alias;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Is there a table prefix? If not, no need to insert it[m
[32m+[m		[32mif ($this->dbprefix !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m// Verify table prefix and replace if necessary[m
[32m+[m			[32mif ($this->swap_pre !== '' && strpos($item, $this->swap_pre) === 0)[m
[32m+[m			[32m{[m
[32m+[m				[32m$item = preg_replace('/^'.$this->swap_pre.'(\S+?)/', $this->dbprefix.'\\1', $item);[m
[32m+[m			[32m}[m
[32m+[m			[32m// Do we prefix an item with no segments?[m
[32m+[m			[32melseif ($prefix_single === TRUE && strpos($item, $this->dbprefix) !== 0)[m
[32m+[m			[32m{[m
[32m+[m				[32m$item = $this->dbprefix.$item;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($protect_identifiers === TRUE && ! in_array($item, $this->_reserved_identifiers))[m
[32m+[m		[32m{[m
[32m+[m			[32m$item = $this->escape_identifiers($item);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $item.$alias;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Dummy method that allows Query Builder class to be disabled[m
[32m+[m	[32m * and keep count_all() working.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _reset_select()[m
[32m+[m	[32m{[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/DB_forge.php b/system/database/DB_forge.php[m
[1mnew file mode 100644[m
[1mindex 0000000..d3057dc[m
[1m--- /dev/null[m
[1m+++ b/system/database/DB_forge.php[m
[36m@@ -0,0 +1,1030 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Database Forge Class[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mabstract class CI_DB_forge {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database object[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	object[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $db;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fields data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $fields		= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Keys data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $keys		= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Primary Keys data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $primary_keys	= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database character set[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $db_char_set	= '';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CREATE DATABASE statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_create_database	= 'CREATE DATABASE %s';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * DROP DATABASE statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_drop_database	= 'DROP DATABASE %s';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CREATE TABLE statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_create_table	= "%s %s (%s\n)";[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CREATE TABLE IF statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_create_table_if	= 'CREATE TABLE IF NOT EXISTS';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CREATE TABLE keys flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * Whether table keys are created from within the[m
[32m+[m	[32m * CREATE TABLE statement.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_create_table_keys	= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * DROP TABLE IF EXISTS statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_drop_table_if	= 'DROP TABLE IF EXISTS';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * RENAME TABLE statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_rename_table	= 'ALTER TABLE %s RENAME TO %s;';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * UNSIGNED support[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool|array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_unsigned		= TRUE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * NULL value representation in CREATE/ALTER TABLE statements[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_null		= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * DEFAULT value representation in CREATE/ALTER TABLE statements[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_default		= ' DEFAULT ';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	object	&$db	Database object[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct(&$db)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->db =& $db;[m
[32m+[m		[32mlog_message('info', 'Database Forge Class Initialized');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Create database[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$db_name[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function create_database($db_name)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->_create_database === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($this->db->db_debug) ? $this->db->display_error('db_unsupported_feature') : FALSE;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! $this->db->query(sprintf($this->_create_database, $this->db->escape_identifiers($db_name), $this->db->char_set, $this->db->dbcollat)))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($this->db->db_debug) ? $this->db->display_error('db_unable_to_drop') : FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! empty($this->db->data_cache['db_names']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->db->data_cache['db_names'][] = $db_name;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Drop database[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$db_name[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function drop_database($db_name)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->_drop_database === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($this->db->db_debug) ? $this->db->display_error('db_unsupported_feature') : FALSE;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! $this->db->query(sprintf($this->_drop_database, $this->db->escape_identifiers($db_name))))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($this->db->db_debug) ? $this->db->display_error('db_unable_to_drop') : FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! empty($this->db->data_cache['db_names']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$key = array_search(strtolower($db_name), array_map('strtolower', $this->db->data_cache['db_names']), TRUE);[m
[32m+[m			[32mif ($key !== FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32munset($this->db->data_cache['db_names'][$key]);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Add Key[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$key[m
[32m+[m	[32m * @param	bool	$primary[m
[32m+[m	[32m * @return	CI_DB_forge[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function add_key($key, $primary = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m// DO NOT change this! This condition is only applicable[m
[32m+[m		[32m// for PRIMARY keys because you can only have one such,[m
[32m+[m		[32m// and therefore all fields you add to it will be included[m
[32m+[m		[32m// in the same, composite PRIMARY KEY.[m
[32m+[m		[32m//[m
[32m+[m		[32m// It's not the same for regular indexes.[m
[32m+[m		[32mif ($primary === TRUE && is_array($key))[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($key as $one)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->add_key($one, $primary);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn $this;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($primary === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->primary_keys[] = $key;[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->keys[] = $key;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Add Field[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$field[m
[32m+[m	[32m * @return	CI_DB_forge[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function add_field($field)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (is_string($field))[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($field === 'id')[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->add_field(array([m
[32m+[m					[32m'id' => array([m
[32m+[m						[32m'type' => 'INT',[m
[32m+[m						[32m'constraint' => 9,[m
[32m+[m						[32m'auto_increment' => TRUE[m
[32m+[m					[32m)[m
[32m+[m				[32m));[m
[32m+[m				[32m$this->add_key('id', TRUE);[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32mif (strpos($field, ' ') === FALSE)[m
[32m+[m				[32m{[m
[32m+[m					[32mshow_error('Field information is required for that operation.');[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m$this->fields[] = $field;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (is_array($field))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->fields = array_merge($this->fields, $field);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Create Table[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table		Table name[m
[32m+[m	[32m * @param	bool	$if_not_exists	Whether to add IF NOT EXISTS condition[m
[32m+[m	[32m * @param	array	$attributes	Associative array of table attributes[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function create_table($table, $if_not_exists = FALSE, array $attributes = array())[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($table === '')[m
[32m+[m		[32m{[m
[32m+[m			[32mshow_error('A table name is required for that operation.');[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$table = $this->db->dbprefix.$table;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (count($this->fields) === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mshow_error('Field information is required.');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sql = $this->_create_table($table, $if_not_exists, $attributes);[m
[32m+[m
[32m+[m		[32mif (is_bool($sql))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_reset();[m
[32m+[m			[32mif ($sql === FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn ($this->db->db_debug) ? $this->db->display_error('db_unsupported_feature') : FALSE;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (($result = $this->db->query($sql)) !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32misset($this->db->data_cache['table_names']) && $this->db->data_cache['table_names'][] = $table;[m
[32m+[m
[32m+[m			[32m// Most databases don't support creating indexes from within the CREATE TABLE statement[m
[32m+[m			[32mif ( ! empty($this->keys))[m
[32m+[m			[32m{[m
[32m+[m				[32mfor ($i = 0, $sqls = $this->_process_indexes($table), $c = count($sqls); $i < $c; $i++)[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->db->query($sqls[$i]);[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->_reset();[m
[32m+[m		[32mreturn $result;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Create Table[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table		Table name[m
[32m+[m	[32m * @param	bool	$if_not_exists	Whether to add 'IF NOT EXISTS' condition[m
[32m+[m	[32m * @param	array	$attributes	Associative array of table attributes[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _create_table($table, $if_not_exists, $attributes)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($if_not_exists === TRUE && $this->_create_table_if === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($this->db->table_exists($table))[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn TRUE;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$if_not_exists = FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sql = ($if_not_exists)[m
[32m+[m			[32m? sprintf($this->_create_table_if, $this->db->escape_identifiers($table))[m
[32m+[m			[32m: 'CREATE TABLE';[m
[32m+[m
[32m+[m		[32m$columns = $this->_process_fields(TRUE);[m
[32m+[m		[32mfor ($i = 0, $c = count($columns); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$columns[$i] = ($columns[$i]['_literal'] !== FALSE)[m
[32m+[m					[32m? "\n\t".$columns[$i]['_literal'][m
[32m+[m					[32m: "\n\t".$this->_process_column($columns[$i]);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$columns = implode(',', $columns)[m
[32m+[m				[32m.$this->_process_primary_keys($table);[m
[32m+[m
[32m+[m		[32m// Are indexes created from within the CREATE TABLE statement? (e.g. in MySQL)[m
[32m+[m		[32mif ($this->_create_table_keys === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$columns .= $this->_process_indexes($table);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// _create_table will usually have the following format: "%s %s (%s\n)"[m
[32m+[m		[32m$sql = sprintf($this->_create_table.'%s',[m
[32m+[m			[32m$sql,[m
[32m+[m			[32m$this->db->escape_identifiers($table),[m
[32m+[m			[32m$columns,[m
[32m+[m			[32m$this->_create_table_attr($attributes)[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CREATE TABLE attributes[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$attributes	Associative array of table attributes[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _create_table_attr($attributes)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = '';[m
[32m+[m
[32m+[m		[32mforeach (array_keys($attributes) as $key)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (is_string($key))[m
[32m+[m			[32m{[m
[32m+[m				[32m$sql .= ' '.strtoupper($key).' '.$attributes[$key];[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Drop Table[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table_name	Table name[m
[32m+[m	[32m * @param	bool	$if_exists	Whether to add an IF EXISTS condition[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function drop_table($table_name, $if_exists = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($table_name === '')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($this->db->db_debug) ? $this->db->display_error('db_table_name_required') : FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (($query = $this->_drop_table($this->db->dbprefix.$table_name, $if_exists)) === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$query = $this->db->query($query);[m
[32m+[m
[32m+[m		[32m// Update table list cache[m
[32m+[m		[32mif ($query && ! empty($this->db->data_cache['table_names']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$key = array_search(strtolower($this->db->dbprefix.$table_name), array_map('strtolower', $this->db->data_cache['table_names']), TRUE);[m
[32m+[m			[32mif ($key !== FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32munset($this->db->data_cache['table_names'][$key]);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $query;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Drop Table[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific DROP TABLE string[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table		Table name[m
[32m+[m	[32m * @param	bool	$if_exists	Whether to add an IF EXISTS condition[m
[32m+[m	[32m * @return	mixed	(Returns a platform-specific DROP table string, or TRUE to indicate there's nothing to do)[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _drop_table($table, $if_exists)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = 'DROP TABLE';[m
[32m+[m
[32m+[m		[32mif ($if_exists)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($this->_drop_table_if === FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32mif ( ! $this->db->table_exists($table))[m
[32m+[m				[32m{[m
[32m+[m					[32mreturn TRUE;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$sql = sprintf($this->_drop_table_if, $this->db->escape_identifiers($table));[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql.' '.$this->db->escape_identifiers($table);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Rename Table[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table_name	Old table name[m
[32m+[m	[32m * @param	string	$new_table_name	New table name[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function rename_table($table_name, $new_table_name)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($table_name === '' OR $new_table_name === '')[m
[32m+[m		[32m{[m
[32m+[m			[32mshow_error('A table name is required for that operation.');[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($this->_rename_table === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($this->db->db_debug) ? $this->db->display_error('db_unsupported_feature') : FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$result = $this->db->query(sprintf($this->_rename_table,[m
[32m+[m						[32m$this->db->escape_identifiers($this->db->dbprefix.$table_name),[m
[32m+[m						[32m$this->db->escape_identifiers($this->db->dbprefix.$new_table_name))[m
[32m+[m					[32m);[m
[32m+[m
[32m+[m		[32mif ($result && ! empty($this->db->data_cache['table_names']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$key = array_search(strtolower($this->db->dbprefix.$table_name), array_map('strtolower', $this->db->data_cache['table_names']), TRUE);[m
[32m+[m			[32mif ($key !== FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->db->data_cache['table_names'][$key] = $this->db->dbprefix.$new_table_name;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $result;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Column Add[m
[32m+[m	[32m *[m
[32m+[m	[32m * @todo	Remove deprecated $_after option in 3.1+[m
[32m+[m	[32m * @param	string	$table	Table name[m
[32m+[m	[32m * @param	array	$field	Column definition[m
[32m+[m	[32m * @param	string	$_after	Column for AFTER clause (deprecated)[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function add_column($table, $field, $_after = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Work-around for literal column definitions[m
[32m+[m		[32mis_array($field) OR $field = array($field);[m
[32m+[m
[32m+[m		[32mforeach (array_keys($field) as $k)[m
[32m+[m		[32m{[m
[32m+[m			[32m// Backwards-compatibility work-around for MySQL/CUBRID AFTER clause (remove in 3.1+)[m
[32m+[m			[32mif ($_after !== NULL && is_array($field[$k]) && ! isset($field[$k]['after']))[m
[32m+[m			[32m{[m
[32m+[m				[32m$field[$k]['after'] = $_after;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$this->add_field(array($k => $field[$k]));[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sqls = $this->_alter_table('ADD', $this->db->dbprefix.$table, $this->_process_fields());[m
[32m+[m		[32m$this->_reset();[m
[32m+[m		[32mif ($sqls === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($this->db->db_debug) ? $this->db->display_error('db_unsupported_feature') : FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mfor ($i = 0, $c = count($sqls); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($this->db->query($sqls[$i]) === FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Column Drop[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table		Table name[m
[32m+[m	[32m * @param	string	$column_name	Column name[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function drop_column($table, $column_name)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = $this->_alter_table('DROP', $this->db->dbprefix.$table, $column_name);[m
[32m+[m		[32mif ($sql === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($this->db->db_debug) ? $this->db->display_error('db_unsupported_feature') : FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->db->query($sql);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Column Modify[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table	Table name[m
[32m+[m	[32m * @param	string	$field	Column definition[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function modify_column($table, $field)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Work-around for literal column definitions[m
[32m+[m		[32mis_array($field) OR $field = array($field);[m
[32m+[m
[32m+[m		[32mforeach (array_keys($field) as $k)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->add_field(array($k => $field[$k]));[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (count($this->fields) === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mshow_error('Field information is required.');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sqls = $this->_alter_table('CHANGE', $this->db->dbprefix.$table, $this->_process_fields());[m
[32m+[m		[32m$this->_reset();[m
[32m+[m		[32mif ($sqls === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($this->db->db_debug) ? $this->db->display_error('db_unsupported_feature') : FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mfor ($i = 0, $c = count($sqls); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($this->db->query($sqls[$i]) === FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ALTER TABLE[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$alter_type	ALTER type[m
[32m+[m	[32m * @param	string	$table		Table name[m
[32m+[m	[32m * @param	mixed	$field		Column definition[m
[32m+[m	[32m * @return	string|string[][m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _alter_table($alter_type, $table, $field)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = 'ALTER TABLE '.$this->db->escape_identifiers($table).' ';[m
[32m+[m
[32m+[m		[32m// DROP has everything it needs now.[m
[32m+[m		[32mif ($alter_type === 'DROP')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $sql.'DROP COLUMN '.$this->db->escape_identifiers($field);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sql .= ($alter_type === 'ADD')[m
[32m+[m			[32m? 'ADD '[m
[32m+[m			[32m: $alter_type.' COLUMN ';[m
[32m+[m
[32m+[m		[32m$sqls = array();[m
[32m+[m		[32mfor ($i = 0, $c = count($field); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$sqls[] = $sql[m
[32m+[m				[32m.($field[$i]['_literal'] !== FALSE ? $field[$i]['_literal'] : $this->_process_column($field[$i]));[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sqls;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Process fields[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$create_table[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _process_fields($create_table = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$fields = array();[m
[32m+[m
[32m+[m		[32mforeach ($this->fields as $key => $attributes)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (is_int($key) && ! is_array($attributes))[m
[32m+[m			[32m{[m
[32m+[m				[32m$fields[] = array('_literal' => $attributes);[m
[32m+[m				[32mcontinue;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$attributes = array_change_key_case($attributes, CASE_UPPER);[m
[32m+[m
[32m+[m			[32mif ($create_table === TRUE && empty($attributes['TYPE']))[m
[32m+[m			[32m{[m
[32m+[m				[32mcontinue;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32misset($attributes['TYPE']) && $this->_attr_type($attributes);[m
[32m+[m
[32m+[m			[32m$field = array([m
[32m+[m				[32m'name'			=> $key,[m
[32m+[m				[32m'new_name'		=> isset($attributes['NAME']) ? $attributes['NAME'] : NULL,[m
[32m+[m				[32m'type'			=> isset($attributes['TYPE']) ? $attributes['TYPE'] : NULL,[m
[32m+[m				[32m'length'		=> '',[m
[32m+[m				[32m'unsigned'		=> '',[m
[32m+[m				[32m'null'			=> '',[m
[32m+[m				[32m'unique'		=> '',[m
[32m+[m				[32m'default'		=> '',[m
[32m+[m				[32m'auto_increment'	=> '',[m
[32m+[m				[32m'_literal'		=> FALSE[m
[32m+[m			[32m);[m
[32m+[m
[32m+[m			[32misset($attributes['TYPE']) && $this->_attr_unsigned($attributes, $field);[m
[32m+[m
[32m+[m			[32mif ($create_table === FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32mif (isset($attributes['AFTER']))[m
[32m+[m				[32m{[m
[32m+[m					[32m$field['after'] = $attributes['AFTER'];[m
[32m+[m				[32m}[m
[32m+[m				[32melseif (isset($attributes['FIRST']))[m
[32m+[m				[32m{[m
[32m+[m					[32m$field['first'] = (bool) $attributes['FIRST'];[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$this->_attr_default($attributes, $field);[m
[32m+[m
[32m+[m			[32mif (isset($attributes['NULL']))[m
[32m+[m			[32m{[m
[32m+[m				[32mif ($attributes['NULL'] === TRUE)[m
[32m+[m				[32m{[m
[32m+[m					[32m$field['null'] = empty($this->_null) ? '' : ' '.$this->_null;[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32m$field['null'] = ' NOT NULL';[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m			[32melseif ($create_table === TRUE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$field['null'] = ' NOT NULL';[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$this->_attr_auto_increment($attributes, $field);[m
[32m+[m			[32m$this->_attr_unique($attributes, $field);[m
[32m+[m
[32m+[m			[32mif (isset($attributes['COMMENT']))[m
[32m+[m			[32m{[m
[32m+[m				[32m$field['comment'] = $this->db->escape($attributes['COMMENT']);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (isset($attributes['TYPE']) && ! empty($attributes['CONSTRAINT']))[m
[32m+[m			[32m{[m
[32m+[m				[32mswitch (strtoupper($attributes['TYPE']))[m
[32m+[m				[32m{[m
[32m+[m					[32mcase 'ENUM':[m
[32m+[m					[32mcase 'SET':[m
[32m+[m						[32m$attributes['CONSTRAINT'] = $this->db->escape($attributes['CONSTRAINT']);[m
[32m+[m					[32mdefault:[m
[32m+[m						[32m$field['length'] = is_array($attributes['CONSTRAINT'])[m
[32m+[m							[32m? '('.implode(',', $attributes['CONSTRAINT']).')'[m
[32m+[m							[32m: '('.$attributes['CONSTRAINT'].')';[m
[32m+[m						[32mbreak;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$fields[] = $field;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $fields;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Process column[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$field[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _process_column($field)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->db->escape_identifiers($field['name'])[m
[32m+[m			[32m.' '.$field['type'].$field['length'][m
[32m+[m			[32m.$field['unsigned'][m
[32m+[m			[32m.$field['default'][m
[32m+[m			[32m.$field['null'][m
[32m+[m			[32m.$field['auto_increment'][m
[32m+[m			[32m.$field['unique'];[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute TYPE[m
[32m+[m	[32m *[m
[32m+[m	[32m * Performs a data type mapping between different databases.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_type(&$attributes)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Usually overridden by drivers[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute UNSIGNED[m
[32m+[m	[32m *[m
[32m+[m	[32m * Depending on the _unsigned property value:[m
[32m+[m	[32m *[m
[32m+[m	[32m *	- TRUE will always set $field['unsigned'] to 'UNSIGNED'[m
[32m+[m	[32m *	- FALSE will always set $field['unsigned'] to ''[m
[32m+[m	[32m *	- array(TYPE) will set $field['unsigned'] to 'UNSIGNED',[m
[32m+[m	[32m *		if $attributes['TYPE'] is found in the array[m
[32m+[m	[32m *	- array(TYPE => UTYPE) will change $field['type'],[m
[32m+[m	[32m *		from TYPE to UTYPE in case of a match[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @param	array	&$field[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_unsigned(&$attributes, &$field)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (empty($attributes['UNSIGNED']) OR $attributes['UNSIGNED'] !== TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Reset the attribute in order to avoid issues if we do type conversion[m
[32m+[m		[32m$attributes['UNSIGNED'] = FALSE;[m
[32m+[m
[32m+[m		[32mif (is_array($this->_unsigned))[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach (array_keys($this->_unsigned) as $key)[m
[32m+[m			[32m{[m
[32m+[m				[32mif (is_int($key) && strcasecmp($attributes['TYPE'], $this->_unsigned[$key]) === 0)[m
[32m+[m				[32m{[m
[32m+[m					[32m$field['unsigned'] = ' UNSIGNED';[m
[32m+[m					[32mreturn;[m
[32m+[m				[32m}[m
[32m+[m				[32melseif (is_string($key) && strcasecmp($attributes['TYPE'], $key) === 0)[m
[32m+[m				[32m{[m
[32m+[m					[32m$field['type'] = $key;[m
[32m+[m					[32mreturn;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$field['unsigned'] = ($this->_unsigned === TRUE) ? ' UNSIGNED' : '';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute DEFAULT[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @param	array	&$field[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_default(&$attributes, &$field)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->_default === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (array_key_exists('DEFAULT', $attributes))[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($attributes['DEFAULT'] === NULL)[m
[32m+[m			[32m{[m
[32m+[m				[32m$field['default'] = empty($this->_null) ? '' : $this->_default.$this->_null;[m
[32m+[m
[32m+[m				[32m// Override the NULL attribute if that's our default[m
[32m+[m				[32m$attributes['NULL'] = TRUE;[m
[32m+[m				[32m$field['null'] = empty($this->_null) ? '' : ' '.$this->_null;[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$field['default'] = $this->_default.$this->db->escape($attributes['DEFAULT']);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute UNIQUE[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @param	array	&$field[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_unique(&$attributes, &$field)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! empty($attributes['UNIQUE']) && $attributes['UNIQUE'] === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$field['unique'] = ' UNIQUE';[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute AUTO_INCREMENT[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @param	array	&$field[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_auto_increment(&$attributes, &$field)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! empty($attributes['AUTO_INCREMENT']) && $attributes['AUTO_INCREMENT'] === TRUE && stripos($field['type'], 'int') !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$field['auto_increment'] = ' AUTO_INCREMENT';[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Process primary keys[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table	Table name[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _process_primary_keys($table)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = '';[m
[32m+[m
[32m+[m		[32mfor ($i = 0, $c = count($this->primary_keys); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ( ! isset($this->fields[$this->primary_keys[$i]]))[m
[32m+[m			[32m{[m
[32m+[m				[32munset($this->primary_keys[$i]);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (count($this->primary_keys) > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32m$sql .= ",\n\tCONSTRAINT ".$this->db->escape_identifiers('pk_'.$table)[m
[32m+[m				[32m.' PRIMARY KEY('.implode(', ', $this->db->escape_identifiers($this->primary_keys)).')';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Process indexes[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table	Table name[m
[32m+[m	[32m * @return	string[] list of SQL statements[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _process_indexes($table)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sqls = array();[m
[32m+[m
[32m+[m		[32mfor ($i = 0, $c = count($this->keys); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (is_array($this->keys[$i]))[m
[32m+[m			[32m{[m
[32m+[m				[32mfor ($i2 = 0, $c2 = count($this->keys[$i]); $i2 < $c2; $i2++)[m
[32m+[m				[32m{[m
[32m+[m					[32mif ( ! isset($this->fields[$this->keys[$i][$i2]]))[m
[32m+[m					[32m{[m
[32m+[m						[32munset($this->keys[$i][$i2]);[m
[32m+[m						[32mcontinue;[m
[32m+[m					[32m}[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m			[32melseif ( ! isset($this->fields[$this->keys[$i]]))[m
[32m+[m			[32m{[m
[32m+[m				[32munset($this->keys[$i]);[m
[32m+[m				[32mcontinue;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mis_array($this->keys[$i]) OR $this->keys[$i] = array($this->keys[$i]);[m
[32m+[m
[32m+[m			[32m$sqls[] = 'CREATE INDEX '.$this->db->escape_identifiers($table.'_'.implode('_', $this->keys[$i]))[m
[32m+[m				[32m.' ON '.$this->db->escape_identifiers($table)[m
[32m+[m				[32m.' ('.implode(', ', $this->db->escape_identifiers($this->keys[$i])).');';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sqls;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Reset[m
[32m+[m	[32m *[m
[32m+[m	[32m * Resets table creation vars[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _reset()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->fields = $this->keys = $this->primary_keys = array();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/DB_query_builder.php b/system/database/DB_query_builder.php[m
[1mnew file mode 100644[m
[1mindex 0000000..3d0c329[m
[1m--- /dev/null[m
[1m+++ b/system/database/DB_query_builder.php[m
[36m@@ -0,0 +1,2808 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Query Builder Class[m
[32m+[m[32m *[m
[32m+[m[32m * This is the platform-independent base Query Builder implementation class.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32mabstract class CI_DB_query_builder extends CI_DB_driver {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Return DELETE SQL flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $return_delete_sql		= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Reset DELETE data flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $reset_delete_data		= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * QB SELECT data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $qb_select			= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * QB DISTINCT flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $qb_distinct			= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * QB FROM data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $qb_from			= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * QB JOIN data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $qb_join			= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * QB WHERE data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $qb_where			= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * QB GROUP BY data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $qb_groupby			= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * QB HAVING data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $qb_having			= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * QB keys[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $qb_keys			= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * QB LIMIT data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	int[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $qb_limit			= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * QB OFFSET data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	int[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $qb_offset			= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * QB ORDER BY data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $qb_orderby			= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * QB data sets[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $qb_set			= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * QB data set for update_batch()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $qb_set_ub			= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * QB aliased tables list[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $qb_aliased_tables		= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * QB WHERE group started flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $qb_where_group_started	= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * QB WHERE group count[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	int[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $qb_where_group_count		= 0;[m
[32m+[m
[32m+[m	[32m// Query Builder Caching variables[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * QB Caching flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $qb_caching				= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * QB Cache exists list[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $qb_cache_exists			= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * QB Cache SELECT data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $qb_cache_select			= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * QB Cache FROM data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $qb_cache_from			= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * QB Cache JOIN data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $qb_cache_join			= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * QB Cache aliased tables list[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $qb_cache_aliased_tables			= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * QB Cache WHERE data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $qb_cache_where			= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * QB Cache GROUP BY data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $qb_cache_groupby			= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * QB Cache HAVING data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $qb_cache_having			= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * QB Cache ORDER BY data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $qb_cache_orderby			= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * QB Cache data sets[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $qb_cache_set				= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * QB No Escape data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $qb_no_escape 			= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * QB Cache No Escape data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $qb_cache_no_escape			= array();[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Select[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates the SELECT portion of the query[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function select($select = '*', $escape = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (is_string($select))[m
[32m+[m		[32m{[m
[32m+[m			[32m$select = explode(',', $select);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// If the escape value was not set, we will base it on the global setting[m
[32m+[m		[32mis_bool($escape) OR $escape = $this->_protect_identifiers;[m
[32m+[m
[32m+[m		[32mforeach ($select as $val)[m
[32m+[m		[32m{[m
[32m+[m			[32m$val = trim($val);[m
[32m+[m
[32m+[m			[32mif ($val !== '')[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->qb_select[] = $val;[m
[32m+[m				[32m$this->qb_no_escape[] = $escape;[m
[32m+[m
[32m+[m				[32mif ($this->qb_caching === TRUE)[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->qb_cache_select[] = $val;[m
[32m+[m					[32m$this->qb_cache_exists[] = 'select';[m
[32m+[m					[32m$this->qb_cache_no_escape[] = $escape;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Select Max[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a SELECT MAX(field) portion of a query[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the field[m
[32m+[m	[32m * @param	string	an alias[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function select_max($select = '', $alias = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_max_min_avg_sum($select, $alias, 'MAX');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Select Min[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a SELECT MIN(field) portion of a query[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the field[m
[32m+[m	[32m * @param	string	an alias[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function select_min($select = '', $alias = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_max_min_avg_sum($select, $alias, 'MIN');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Select Average[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a SELECT AVG(field) portion of a query[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the field[m
[32m+[m	[32m * @param	string	an alias[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function select_avg($select = '', $alias = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_max_min_avg_sum($select, $alias, 'AVG');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Select Sum[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a SELECT SUM(field) portion of a query[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the field[m
[32m+[m	[32m * @param	string	an alias[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function select_sum($select = '', $alias = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_max_min_avg_sum($select, $alias, 'SUM');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * SELECT [MAX|MIN|AVG|SUM]()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @used-by	select_max()[m
[32m+[m	[32m * @used-by	select_min()[m
[32m+[m	[32m * @used-by	select_avg()[m
[32m+[m	[32m * @used-by	select_sum()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$select	Field name[m
[32m+[m	[32m * @param	string	$alias[m
[32m+[m	[32m * @param	string	$type[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _max_min_avg_sum($select = '', $alias = '', $type = 'MAX')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! is_string($select) OR $select === '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->display_error('db_invalid_query');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$type = strtoupper($type);[m
[32m+[m
[32m+[m		[32mif ( ! in_array($type, array('MAX', 'MIN', 'AVG', 'SUM')))[m
[32m+[m		[32m{[m
[32m+[m			[32mshow_error('Invalid function type: '.$type);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($alias === '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$alias = $this->_create_alias_from_table(trim($select));[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sql = $type.'('.$this->protect_identifiers(trim($select)).') AS '.$this->escape_identifiers(trim($alias));[m
[32m+[m
[32m+[m		[32m$this->qb_select[] = $sql;[m
[32m+[m		[32m$this->qb_no_escape[] = NULL;[m
[32m+[m
[32m+[m		[32mif ($this->qb_caching === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->qb_cache_select[] = $sql;[m
[32m+[m			[32m$this->qb_cache_exists[] = 'select';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Determines the alias name based on the table[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$item[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _create_alias_from_table($item)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (strpos($item, '.') !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$item = explode('.', $item);[m
[32m+[m			[32mreturn end($item);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $item;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * DISTINCT[m
[32m+[m	[32m *[m
[32m+[m	[32m * Sets a flag which tells the query string compiler to add DISTINCT[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$val[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function distinct($val = TRUE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->qb_distinct = is_bool($val) ? $val : TRUE;[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * From[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates the FROM portion of the query[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	$from	can be a string or array[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function from($from)[m
[32m+[m	[32m{[m
[32m+[m		[32mforeach ((array) $from as $val)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (strpos($val, ',') !== FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32mforeach (explode(',', $val) as $v)[m
[32m+[m				[32m{[m
[32m+[m					[32m$v = trim($v);[m
[32m+[m					[32m$this->_track_aliases($v);[m
[32m+[m
[32m+[m					[32m$this->qb_from[] = $v = $this->protect_identifiers($v, TRUE, NULL, FALSE);[m
[32m+[m
[32m+[m					[32mif ($this->qb_caching === TRUE)[m
[32m+[m					[32m{[m
[32m+[m						[32m$this->qb_cache_from[] = $v;[m
[32m+[m						[32m$this->qb_cache_exists[] = 'from';[m
[32m+[m					[32m}[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$val = trim($val);[m
[32m+[m
[32m+[m				[32m// Extract any aliases that might exist. We use this information[m
[32m+[m				[32m// in the protect_identifiers to know whether to add a table prefix[m
[32m+[m				[32m$this->_track_aliases($val);[m
[32m+[m
[32m+[m				[32m$this->qb_from[] = $val = $this->protect_identifiers($val, TRUE, NULL, FALSE);[m
[32m+[m
[32m+[m				[32mif ($this->qb_caching === TRUE)[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->qb_cache_from[] = $val;[m
[32m+[m					[32m$this->qb_cache_exists[] = 'from';[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * JOIN[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates the JOIN portion of the query[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	string	the join condition[m
[32m+[m	[32m * @param	string	the type of join[m
[32m+[m	[32m * @param	string	whether not to try to escape identifiers[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function join($table, $cond, $type = '', $escape = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($type !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$type = strtoupper(trim($type));[m
[32m+[m
[32m+[m			[32mif ( ! in_array($type, array('LEFT', 'RIGHT', 'OUTER', 'INNER', 'LEFT OUTER', 'RIGHT OUTER'), TRUE))[m
[32m+[m			[32m{[m
[32m+[m				[32m$type = '';[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$type .= ' ';[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Extract any aliases that might exist. We use this information[m
[32m+[m		[32m// in the protect_identifiers to know whether to add a table prefix[m
[32m+[m		[32m$this->_track_aliases($table);[m
[32m+[m
[32m+[m		[32mis_bool($escape) OR $escape = $this->_protect_identifiers;[m
[32m+[m
[32m+[m		[32mif ( ! $this->_has_operator($cond))[m
[32m+[m		[32m{[m
[32m+[m			[32m$cond = ' USING ('.($escape ? $this->escape_identifiers($cond) : $cond).')';[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($escape === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$cond = ' ON '.$cond;[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m// Split multiple conditions[m
[32m+[m			[32mif (preg_match_all('/\sAND\s|\sOR\s/i', $cond, $joints, PREG_OFFSET_CAPTURE))[m
[32m+[m			[32m{[m
[32m+[m				[32m$conditions = array();[m
[32m+[m				[32m$joints = $joints[0];[m
[32m+[m				[32marray_unshift($joints, array('', 0));[m
[32m+[m
[32m+[m				[32mfor ($i = count($joints) - 1, $pos = strlen($cond); $i >= 0; $i--)[m
[32m+[m				[32m{[m
[32m+[m					[32m$joints[$i][1] += strlen($joints[$i][0]); // offset[m
[32m+[m					[32m$conditions[$i] = substr($cond, $joints[$i][1], $pos - $joints[$i][1]);[m
[32m+[m					[32m$pos = $joints[$i][1] - strlen($joints[$i][0]);[m
[32m+[m					[32m$joints[$i] = $joints[$i][0];[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$conditions = array($cond);[m
[32m+[m				[32m$joints = array('');[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$cond = ' ON ';[m
[32m+[m			[32mfor ($i = 0, $c = count($conditions); $i < $c; $i++)[m
[32m+[m			[32m{[m
[32m+[m				[32m$operator = $this->_get_operator($conditions[$i]);[m
[32m+[m				[32m$cond .= $joints[$i];[m
[32m+[m				[32m$cond .= preg_match("/(\(*)?([\[\]\w\.'-]+)".preg_quote($operator)."(.*)/i", $conditions[$i], $match)[m
[32m+[m					[32m? $match[1].$this->protect_identifiers($match[2]).$operator.$this->protect_identifiers($match[3])[m
[32m+[m					[32m: $conditions[$i];[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Do we want to escape the table name?[m
[32m+[m		[32mif ($escape === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$table = $this->protect_identifiers($table, TRUE, NULL, FALSE);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Assemble the JOIN statement[m
[32m+[m		[32m$this->qb_join[] = $join = $type.'JOIN '.$table.$cond;[m
[32m+[m
[32m+[m		[32mif ($this->qb_caching === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->qb_cache_join[] = $join;[m
[32m+[m			[32m$this->qb_cache_exists[] = 'join';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * WHERE[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates the WHERE portion of the query.[m
[32m+[m	[32m * Separates multiple calls with 'AND'.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @param	bool[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function where($key, $value = NULL, $escape = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_wh('qb_where', $key, $value, 'AND ', $escape);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * OR WHERE[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates the WHERE portion of the query.[m
[32m+[m	[32m * Separates multiple calls with 'OR'.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @param	bool[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function or_where($key, $value = NULL, $escape = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_wh('qb_where', $key, $value, 'OR ', $escape);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * WHERE, HAVING[m
[32m+[m	[32m *[m
[32m+[m	[32m * @used-by	where()[m
[32m+[m	[32m * @used-by	or_where()[m
[32m+[m	[32m * @used-by	having()[m
[32m+[m	[32m * @used-by	or_having()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$qb_key	'qb_where' or 'qb_having'[m
[32m+[m	[32m * @param	mixed	$key[m
[32m+[m	[32m * @param	mixed	$value[m
[32m+[m	[32m * @param	string	$type[m
[32m+[m	[32m * @param	bool	$escape[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _wh($qb_key, $key, $value = NULL, $type = 'AND ', $escape = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32m$qb_cache_key = ($qb_key === 'qb_having') ? 'qb_cache_having' : 'qb_cache_where';[m
[32m+[m
[32m+[m		[32mif ( ! is_array($key))[m
[32m+[m		[32m{[m
[32m+[m			[32m$key = array($key => $value);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// If the escape value was not set will base it on the global setting[m
[32m+[m		[32mis_bool($escape) OR $escape = $this->_protect_identifiers;[m
[32m+[m
[32m+[m		[32mforeach ($key as $k => $v)[m
[32m+[m		[32m{[m
[32m+[m			[32m$prefix = (count($this->$qb_key) === 0 && count($this->$qb_cache_key) === 0)[m
[32m+[m				[32m? $this->_group_get_type('')[m
[32m+[m				[32m: $this->_group_get_type($type);[m
[32m+[m
[32m+[m			[32mif ($v !== NULL)[m
[32m+[m			[32m{[m
[32m+[m				[32mif ($escape === TRUE)[m
[32m+[m				[32m{[m
[32m+[m					[32m$v = $this->escape($v);[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mif ( ! $this->_has_operator($k))[m
[32m+[m				[32m{[m
[32m+[m					[32m$k .= ' = ';[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m			[32melseif ( ! $this->_has_operator($k))[m
[32m+[m			[32m{[m
[32m+[m				[32m// value appears not to have been set, assign the test to IS NULL[m
[32m+[m				[32m$k .= ' IS NULL';[m
[32m+[m			[32m}[m
[32m+[m			[32melseif (preg_match('/\s*(!?=|<>|\sIS(?:\s+NOT)?\s)\s*$/i', $k, $match, PREG_OFFSET_CAPTURE))[m
[32m+[m			[32m{[m
[32m+[m				[32m$k = substr($k, 0, $match[0][1]).($match[1][0] === '=' ? ' IS NULL' : ' IS NOT NULL');[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m${$qb_key} = array('condition' => $prefix.$k, 'value' => $v, 'escape' => $escape);[m
[32m+[m			[32m$this->{$qb_key}[] = ${$qb_key};[m
[32m+[m			[32mif ($this->qb_caching === TRUE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->{$qb_cache_key}[] = ${$qb_key};[m
[32m+[m				[32m$this->qb_cache_exists[] = substr($qb_key, 3);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * WHERE IN[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a WHERE field IN('item', 'item') SQL query,[m
[32m+[m	[32m * joined with 'AND' if appropriate.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$key	The field to search[m
[32m+[m	[32m * @param	array	$values	The values searched on[m
[32m+[m	[32m * @param	bool	$escape[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function where_in($key = NULL, $values = NULL, $escape = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_where_in($key, $values, FALSE, 'AND ', $escape);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * OR WHERE IN[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a WHERE field IN('item', 'item') SQL query,[m
[32m+[m	[32m * joined with 'OR' if appropriate.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$key	The field to search[m
[32m+[m	[32m * @param	array	$values	The values searched on[m
[32m+[m	[32m * @param	bool	$escape[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function or_where_in($key = NULL, $values = NULL, $escape = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_where_in($key, $values, FALSE, 'OR ', $escape);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * WHERE NOT IN[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a WHERE field NOT IN('item', 'item') SQL query,[m
[32m+[m	[32m * joined with 'AND' if appropriate.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$key	The field to search[m
[32m+[m	[32m * @param	array	$values	The values searched on[m
[32m+[m	[32m * @param	bool	$escape[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function where_not_in($key = NULL, $values = NULL, $escape = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_where_in($key, $values, TRUE, 'AND ', $escape);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * OR WHERE NOT IN[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a WHERE field NOT IN('item', 'item') SQL query,[m
[32m+[m	[32m * joined with 'OR' if appropriate.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$key	The field to search[m
[32m+[m	[32m * @param	array	$values	The values searched on[m
[32m+[m	[32m * @param	bool	$escape[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function or_where_not_in($key = NULL, $values = NULL, $escape = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_where_in($key, $values, TRUE, 'OR ', $escape);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Internal WHERE IN[m
[32m+[m	[32m *[m
[32m+[m	[32m * @used-by	where_in()[m
[32m+[m	[32m * @used-by	or_where_in()[m
[32m+[m	[32m * @used-by	where_not_in()[m
[32m+[m	[32m * @used-by	or_where_not_in()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$key	The field to search[m
[32m+[m	[32m * @param	array	$values	The values searched on[m
[32m+[m	[32m * @param	bool	$not	If the statement would be IN or NOT IN[m
[32m+[m	[32m * @param	string	$type[m
[32m+[m	[32m * @param	bool	$escape[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _where_in($key = NULL, $values = NULL, $not = FALSE, $type = 'AND ', $escape = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($key === NULL OR $values === NULL)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! is_array($values))[m
[32m+[m		[32m{[m
[32m+[m			[32m$values = array($values);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mis_bool($escape) OR $escape = $this->_protect_identifiers;[m
[32m+[m
[32m+[m		[32m$not = ($not) ? ' NOT' : '';[m
[32m+[m
[32m+[m		[32mif ($escape === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$where_in = array();[m
[32m+[m			[32mforeach ($values as $value)[m
[32m+[m			[32m{[m
[32m+[m				[32m$where_in[] = $this->escape($value);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$where_in = array_values($values);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$prefix = (count($this->qb_where) === 0 && count($this->qb_cache_where) === 0)[m
[32m+[m			[32m? $this->_group_get_type('')[m
[32m+[m			[32m: $this->_group_get_type($type);[m
[32m+[m
[32m+[m		[32m$where_in = array([m
[32m+[m			[32m'condition' => $prefix.$key.$not.' IN('.implode(', ', $where_in).')',[m
[32m+[m			[32m'value' => NULL,[m
[32m+[m			[32m'escape' => $escape[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32m$this->qb_where[] = $where_in;[m
[32m+[m		[32mif ($this->qb_caching === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->qb_cache_where[] = $where_in;[m
[32m+[m			[32m$this->qb_cache_exists[] = 'where';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * LIKE[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a %LIKE% portion of the query.[m
[32m+[m	[32m * Separates multiple calls with 'AND'.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	$field[m
[32m+[m	[32m * @param	string	$match[m
[32m+[m	[32m * @param	string	$side[m
[32m+[m	[32m * @param	bool	$escape[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function like($field, $match = '', $side = 'both', $escape = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_like($field, $match, 'AND ', $side, '', $escape);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * NOT LIKE[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a NOT LIKE portion of the query.[m
[32m+[m	[32m * Separates multiple calls with 'AND'.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	$field[m
[32m+[m	[32m * @param	string	$match[m
[32m+[m	[32m * @param	string	$side[m
[32m+[m	[32m * @param	bool	$escape[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function not_like($field, $match = '', $side = 'both', $escape = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_like($field, $match, 'AND ', $side, 'NOT', $escape);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * OR LIKE[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a %LIKE% portion of the query.[m
[32m+[m	[32m * Separates multiple calls with 'OR'.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	$field[m
[32m+[m	[32m * @param	string	$match[m
[32m+[m	[32m * @param	string	$side[m
[32m+[m	[32m * @param	bool	$escape[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function or_like($field, $match = '', $side = 'both', $escape = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_like($field, $match, 'OR ', $side, '', $escape);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * OR NOT LIKE[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a NOT LIKE portion of the query.[m
[32m+[m	[32m * Separates multiple calls with 'OR'.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	$field[m
[32m+[m	[32m * @param	string	$match[m
[32m+[m	[32m * @param	string	$side[m
[32m+[m	[32m * @param	bool	$escape[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function or_not_like($field, $match = '', $side = 'both', $escape = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_like($field, $match, 'OR ', $side, 'NOT', $escape);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Internal LIKE[m
[32m+[m	[32m *[m
[32m+[m	[32m * @used-by	like()[m
[32m+[m	[32m * @used-by	or_like()[m
[32m+[m	[32m * @used-by	not_like()[m
[32m+[m	[32m * @used-by	or_not_like()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	$field[m
[32m+[m	[32m * @param	string	$match[m
[32m+[m	[32m * @param	string	$type[m
[32m+[m	[32m * @param	string	$side[m
[32m+[m	[32m * @param	string	$not[m
[32m+[m	[32m * @param	bool	$escape[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _like($field, $match = '', $type = 'AND ', $side = 'both', $not = '', $escape = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! is_array($field))[m
[32m+[m		[32m{[m
[32m+[m			[32m$field = array($field => $match);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mis_bool($escape) OR $escape = $this->_protect_identifiers;[m
[32m+[m		[32m// lowercase $side in case somebody writes e.g. 'BEFORE' instead of 'before' (doh)[m
[32m+[m		[32m$side = strtolower($side);[m
[32m+[m
[32m+[m		[32mforeach ($field as $k => $v)[m
[32m+[m		[32m{[m
[32m+[m			[32m$prefix = (count($this->qb_where) === 0 && count($this->qb_cache_where) === 0)[m
[32m+[m				[32m? $this->_group_get_type('') : $this->_group_get_type($type);[m
[32m+[m
[32m+[m			[32mif ($escape === TRUE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$v = $this->escape_like_str($v);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mswitch ($side)[m
[32m+[m			[32m{[m
[32m+[m				[32mcase 'none':[m
[32m+[m					[32m$v = "'{$v}'";[m
[32m+[m					[32mbreak;[m
[32m+[m				[32mcase 'before':[m
[32m+[m					[32m$v = "'%{$v}'";[m
[32m+[m					[32mbreak;[m
[32m+[m				[32mcase 'after':[m
[32m+[m					[32m$v = "'{$v}%'";[m
[32m+[m					[32mbreak;[m
[32m+[m				[32mcase 'both':[m
[32m+[m				[32mdefault:[m
[32m+[m					[32m$v = "'%{$v}%'";[m
[32m+[m					[32mbreak;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// some platforms require an escape sequence definition for LIKE wildcards[m
[32m+[m			[32mif ($escape === TRUE && $this->_like_escape_str !== '')[m
[32m+[m			[32m{[m
[32m+[m				[32m$v .= sprintf($this->_like_escape_str, $this->_like_escape_chr);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$qb_where = array('condition' => "{$prefix} {$k} {$not} LIKE {$v}", 'value' => NULL, 'escape' => $escape);[m
[32m+[m			[32m$this->qb_where[] = $qb_where;[m
[32m+[m			[32mif ($this->qb_caching === TRUE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->qb_cache_where[] = $qb_where;[m
[32m+[m				[32m$this->qb_cache_exists[] = 'where';[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Starts a query group.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$not	(Internal use only)[m
[32m+[m	[32m * @param	string	$type	(Internal use only)[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function group_start($not = '', $type = 'AND ')[m
[32m+[m	[32m{[m
[32m+[m		[32m$type = $this->_group_get_type($type);[m
[32m+[m
[32m+[m		[32m$this->qb_where_group_started = TRUE;[m
[32m+[m		[32m$prefix = (count($this->qb_where) === 0 && count($this->qb_cache_where) === 0) ? '' : $type;[m
[32m+[m		[32m$where = array([m
[32m+[m			[32m'condition' => $prefix.$not.str_repeat(' ', ++$this->qb_where_group_count).' (',[m
[32m+[m			[32m'value' => NULL,[m
[32m+[m			[32m'escape' => FALSE[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32m$this->qb_where[] = $where;[m
[32m+[m		[32mif ($this->qb_caching)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->qb_cache_where[] = $where;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Starts a query group, but ORs the group[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function or_group_start()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->group_start('', 'OR ');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Starts a query group, but NOTs the group[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function not_group_start()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->group_start('NOT ', 'AND ');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Starts a query group, but OR NOTs the group[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function or_not_group_start()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->group_start('NOT ', 'OR ');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Ends a query group[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function group_end()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->qb_where_group_started = FALSE;[m
[32m+[m		[32m$where = array([m
[32m+[m			[32m'condition' => str_repeat(' ', $this->qb_where_group_count--).')',[m
[32m+[m			[32m'value' => NULL,[m
[32m+[m			[32m'escape' => FALSE[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32m$this->qb_where[] = $where;[m
[32m+[m		[32mif ($this->qb_caching)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->qb_cache_where[] = $where;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Group_get_type[m
[32m+[m	[32m *[m
[32m+[m	[32m * @used-by	group_start()[m
[32m+[m	[32m * @used-by	_like()[m
[32m+[m	[32m * @used-by	_wh()[m
[32m+[m	[32m * @used-by	_where_in()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$type[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _group_get_type($type)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->qb_where_group_started)[m
[32m+[m		[32m{[m
[32m+[m			[32m$type = '';[m
[32m+[m			[32m$this->qb_where_group_started = FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $type;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * GROUP BY[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$by[m
[32m+[m	[32m * @param	bool	$escape[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function group_by($by, $escape = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mis_bool($escape) OR $escape = $this->_protect_identifiers;[m
[32m+[m
[32m+[m		[32mif (is_string($by))[m
[32m+[m		[32m{[m
[32m+[m			[32m$by = ($escape === TRUE)[m
[32m+[m				[32m? explode(',', $by)[m
[32m+[m				[32m: array($by);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mforeach ($by as $val)[m
[32m+[m		[32m{[m
[32m+[m			[32m$val = trim($val);[m
[32m+[m
[32m+[m			[32mif ($val !== '')[m
[32m+[m			[32m{[m
[32m+[m				[32m$val = array('field' => $val, 'escape' => $escape);[m
[32m+[m
[32m+[m				[32m$this->qb_groupby[] = $val;[m
[32m+[m				[32mif ($this->qb_caching === TRUE)[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->qb_cache_groupby[] = $val;[m
[32m+[m					[32m$this->qb_cache_exists[] = 'groupby';[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * HAVING[m
[32m+[m	[32m *[m
[32m+[m	[32m * Separates multiple calls with 'AND'.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$key[m
[32m+[m	[32m * @param	string	$value[m
[32m+[m	[32m * @param	bool	$escape[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function having($key, $value = NULL, $escape = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_wh('qb_having', $key, $value, 'AND ', $escape);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * OR HAVING[m
[32m+[m	[32m *[m
[32m+[m	[32m * Separates multiple calls with 'OR'.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$key[m
[32m+[m	[32m * @param	string	$value[m
[32m+[m	[32m * @param	bool	$escape[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function or_having($key, $value = NULL, $escape = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_wh('qb_having', $key, $value, 'OR ', $escape);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ORDER BY[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$orderby[m
[32m+[m	[32m * @param	string	$direction	ASC, DESC or RANDOM[m
[32m+[m	[32m * @param	bool	$escape[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function order_by($orderby, $direction = '', $escape = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32m$direction = strtoupper(trim($direction));[m
[32m+[m
[32m+[m		[32mif ($direction === 'RANDOM')[m
[32m+[m		[32m{[m
[32m+[m			[32m$direction = '';[m
[32m+[m
[32m+[m			[32m// Do we have a seed value?[m
[32m+[m			[32m$orderby = ctype_digit((string) $orderby)[m
[32m+[m				[32m? sprintf($this->_random_keyword[1], $orderby)[m
[32m+[m				[32m: $this->_random_keyword[0];[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (empty($orderby))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($direction !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$direction = in_array($direction, array('ASC', 'DESC'), TRUE) ? ' '.$direction : '';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mis_bool($escape) OR $escape = $this->_protect_identifiers;[m
[32m+[m
[32m+[m		[32mif ($escape === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$qb_orderby[] = array('field' => $orderby, 'direction' => $direction, 'escape' => FALSE);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$qb_orderby = array();[m
[32m+[m			[32mforeach (explode(',', $orderby) as $field)[m
[32m+[m			[32m{[m
[32m+[m				[32m$qb_orderby[] = ($direction === '' && preg_match('/\s+(ASC|DESC)$/i', rtrim($field), $match, PREG_OFFSET_CAPTURE))[m
[32m+[m					[32m? array('field' => ltrim(substr($field, 0, $match[0][1])), 'direction' => ' '.$match[1][0], 'escape' => TRUE)[m
[32m+[m					[32m: array('field' => trim($field), 'direction' => $direction, 'escape' => TRUE);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->qb_orderby = array_merge($this->qb_orderby, $qb_orderby);[m
[32m+[m		[32mif ($this->qb_caching === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->qb_cache_orderby = array_merge($this->qb_cache_orderby, $qb_orderby);[m
[32m+[m			[32m$this->qb_cache_exists[] = 'orderby';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * LIMIT[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	$value	LIMIT value[m
[32m+[m	[32m * @param	int	$offset	OFFSET value[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function limit($value, $offset = 0)[m
[32m+[m	[32m{[m
[32m+[m		[32mis_null($value) OR $this->qb_limit = (int) $value;[m
[32m+[m		[32mempty($offset) OR $this->qb_offset = (int) $offset;[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Sets the OFFSET value[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	$offset	OFFSET value[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function offset($offset)[m
[32m+[m	[32m{[m
[32m+[m		[32mempty($offset) OR $this->qb_offset = (int) $offset;[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * LIMIT string[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific LIMIT clause.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$sql	SQL Query[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _limit($sql)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $sql.' LIMIT '.($this->qb_offset ? $this->qb_offset.', ' : '').(int) $this->qb_limit;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * The "set" function.[m
[32m+[m	[32m *[m
[32m+[m	[32m * Allows key/value pairs to be set for inserting or updating[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	bool[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set($key, $value = '', $escape = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32m$key = $this->_object_to_array($key);[m
[32m+[m
[32m+[m		[32mif ( ! is_array($key))[m
[32m+[m		[32m{[m
[32m+[m			[32m$key = array($key => $value);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mis_bool($escape) OR $escape = $this->_protect_identifiers;[m
[32m+[m
[32m+[m		[32mforeach ($key as $k => $v)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->qb_set[$this->protect_identifiers($k, FALSE, $escape)] = ($escape)[m
[32m+[m				[32m? $this->escape($v) : $v;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get SELECT query string[m
[32m+[m	[32m *[m
[32m+[m	[32m * Compiles a SELECT query string and returns the sql.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the table name to select from (optional)[m
[32m+[m	[32m * @param	bool	TRUE: resets QB values; FALSE: leave QB values alone[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get_compiled_select($table = '', $reset = TRUE)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($table !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_track_aliases($table);[m
[32m+[m			[32m$this->from($table);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$select = $this->_compile_select();[m
[32m+[m
[32m+[m		[32mif ($reset === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_reset_select();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $select;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get[m
[32m+[m	[32m *[m
[32m+[m	[32m * Compiles the select statement based on the other functions called[m
[32m+[m	[32m * and runs the query[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the table[m
[32m+[m	[32m * @param	string	the limit clause[m
[32m+[m	[32m * @param	string	the offset clause[m
[32m+[m	[32m * @return	CI_DB_result[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get($table = '', $limit = NULL, $offset = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($table !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_track_aliases($table);[m
[32m+[m			[32m$this->from($table);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! empty($limit))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->limit($limit, $offset);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$result = $this->query($this->_compile_select());[m
[32m+[m		[32m$this->_reset_select();[m
[32m+[m		[32mreturn $result;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * "Count All Results" query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string that counts all records[m
[32m+[m	[32m * returned by an Query Builder query.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	bool	the reset clause[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function count_all_results($table = '', $reset = TRUE)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($table !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_track_aliases($table);[m
[32m+[m			[32m$this->from($table);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// ORDER BY usage is often problematic here (most notably[m
[32m+[m		[32m// on Microsoft SQL Server) and ultimately unnecessary[m
[32m+[m		[32m// for selecting COUNT(*) ...[m
[32m+[m		[32m$qb_orderby       = $this->qb_orderby;[m
[32m+[m		[32m$qb_cache_orderby = $this->qb_cache_orderby;[m
[32m+[m		[32m$this->qb_orderby = $this->qb_cache_orderby = array();[m
[32m+[m
[32m+[m		[32m$result = ($this->qb_distinct === TRUE OR ! empty($this->qb_groupby) OR ! empty($this->qb_cache_groupby) OR $this->qb_limit OR $this->qb_offset)[m
[32m+[m			[32m? $this->query($this->_count_string.$this->protect_identifiers('numrows')."\nFROM (\n".$this->_compile_select()."\n) CI_count_all_results")[m
[32m+[m			[32m: $this->query($this->_compile_select($this->_count_string.$this->protect_identifiers('numrows')));[m
[32m+[m
[32m+[m		[32mif ($reset === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_reset_select();[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->qb_orderby       = $qb_orderby;[m
[32m+[m			[32m$this->qb_cache_orderby = $qb_cache_orderby;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($result->num_rows() === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn 0;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$row = $result->row();[m
[32m+[m		[32mreturn (int) $row->numrows;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * get_where()[m
[32m+[m	[32m *[m
[32m+[m	[32m * Allows the where clause, limit and offset to be added directly[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @param	string	$where[m
[32m+[m	[32m * @param	int	$limit[m
[32m+[m	[32m * @param	int	$offset[m
[32m+[m	[32m * @return	CI_DB_result[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get_where($table = '', $where = NULL, $limit = NULL, $offset = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($table !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->from($table);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($where !== NULL)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->where($where);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! empty($limit))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->limit($limit, $offset);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$result = $this->query($this->_compile_select());[m
[32m+[m		[32m$this->_reset_select();[m
[32m+[m		[32mreturn $result;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Insert_Batch[m
[32m+[m	[32m *[m
[32m+[m	[32m * Compiles batch insert strings and runs the queries[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table	Table to insert into[m
[32m+[m	[32m * @param	array	$set 	An associative array of insert values[m
[32m+[m	[32m * @param	bool	$escape	Whether to escape values and identifiers[m
[32m+[m	[32m * @return	int	Number of rows inserted or FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function insert_batch($table, $set = NULL, $escape = NULL, $batch_size = 100)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($set === NULL)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (empty($this->qb_set))[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn ($this->db_debug) ? $this->display_error('db_must_use_set') : FALSE;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32mif (empty($set))[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn ($this->db_debug) ? $this->display_error('insert_batch() called with no data') : FALSE;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$this->set_insert_batch($set, '', $escape);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (strlen($table) === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ( ! isset($this->qb_from[0]))[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn ($this->db_debug) ? $this->display_error('db_must_set_table') : FALSE;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$table = $this->qb_from[0];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Batch this baby[m
[32m+[m		[32m$affected_rows = 0;[m
[32m+[m		[32mfor ($i = 0, $total = count($this->qb_set); $i < $total; $i += $batch_size)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($this->query($this->_insert_batch($this->protect_identifiers($table, TRUE, $escape, FALSE), $this->qb_keys, array_slice($this->qb_set, $i, $batch_size))))[m
[32m+[m			[32m{[m
[32m+[m				[32m$affected_rows += $this->affected_rows();[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->_reset_write();[m
[32m+[m		[32mreturn $affected_rows;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Insert batch statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific insert string from the supplied data.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table	Table name[m
[32m+[m	[32m * @param	array	$keys	INSERT keys[m
[32m+[m	[32m * @param	array	$values	INSERT values[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _insert_batch($table, $keys, $values)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'INSERT INTO '.$table.' ('.implode(', ', $keys).') VALUES '.implode(', ', $values);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * The "set_insert_batch" function.  Allows key/value pairs to be set for batch inserts[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	bool[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_insert_batch($key, $value = '', $escape = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32m$key = $this->_object_to_array_batch($key);[m
[32m+[m
[32m+[m		[32mif ( ! is_array($key))[m
[32m+[m		[32m{[m
[32m+[m			[32m$key = array($key => $value);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mis_bool($escape) OR $escape = $this->_protect_identifiers;[m
[32m+[m
[32m+[m		[32m$keys = array_keys($this->_object_to_array(reset($key)));[m
[32m+[m		[32msort($keys);[m
[32m+[m
[32m+[m		[32mforeach ($key as $row)[m
[32m+[m		[32m{[m
[32m+[m			[32m$row = $this->_object_to_array($row);[m
[32m+[m			[32mif (count(array_diff($keys, array_keys($row))) > 0 OR count(array_diff(array_keys($row), $keys)) > 0)[m
[32m+[m			[32m{[m
[32m+[m				[32m// batch function above returns an error on an empty array[m
[32m+[m				[32m$this->qb_set[] = array();[m
[32m+[m				[32mreturn;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mksort($row); // puts $row in the same order as our keys[m
[32m+[m
[32m+[m			[32mif ($escape !== FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$clean = array();[m
[32m+[m				[32mforeach ($row as $value)[m
[32m+[m				[32m{[m
[32m+[m					[32m$clean[] = $this->escape($value);[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m$row = $clean;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$this->qb_set[] = '('.implode(',', $row).')';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mforeach ($keys as $k)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->qb_keys[] = $this->protect_identifiers($k, FALSE, $escape);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get INSERT query string[m
[32m+[m	[32m *[m
[32m+[m	[32m * Compiles an insert query and returns the sql[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the table to insert into[m
[32m+[m	[32m * @param	bool	TRUE: reset QB values; FALSE: leave QB values alone[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get_compiled_insert($table = '', $reset = TRUE)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->_validate_insert($table) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sql = $this->_insert([m
[32m+[m			[32m$this->protect_identifiers([m
[32m+[m				[32m$this->qb_from[0], TRUE, NULL, FALSE[m
[32m+[m			[32m),[m
[32m+[m			[32marray_keys($this->qb_set),[m
[32m+[m			[32marray_values($this->qb_set)[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32mif ($reset === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_reset_write();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Insert[m
[32m+[m	[32m *[m
[32m+[m	[32m * Compiles an insert string and runs the query[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the table to insert data into[m
[32m+[m	[32m * @param	array	an associative array of insert values[m
[32m+[m	[32m * @param	bool	$escape	Whether to escape values and identifiers[m
[32m+[m	[32m * @return	bool	TRUE on success, FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function insert($table = '', $set = NULL, $escape = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($set !== NULL)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->set($set, '', $escape);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($this->_validate_insert($table) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sql = $this->_insert([m
[32m+[m			[32m$this->protect_identifiers([m
[32m+[m				[32m$this->qb_from[0], TRUE, $escape, FALSE[m
[32m+[m			[32m),[m
[32m+[m			[32marray_keys($this->qb_set),[m
[32m+[m			[32marray_values($this->qb_set)[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32m$this->_reset_write();[m
[32m+[m		[32mreturn $this->query($sql);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Validate Insert[m
[32m+[m	[32m *[m
[32m+[m	[32m * This method is used by both insert() and get_compiled_insert() to[m
[32m+[m	[32m * validate that the there data is actually being set and that table[m
[32m+[m	[32m * has been chosen to be inserted into.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the table to insert data into[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _validate_insert($table = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif (count($this->qb_set) === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($this->db_debug) ? $this->display_error('db_must_use_set') : FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($table !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->qb_from[0] = $table;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! isset($this->qb_from[0]))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($this->db_debug) ? $this->display_error('db_must_set_table') : FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Replace[m
[32m+[m	[32m *[m
[32m+[m	[32m * Compiles an replace into string and runs the query[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the table to replace data into[m
[32m+[m	[32m * @param	array	an associative array of insert values[m
[32m+[m	[32m * @return	bool	TRUE on success, FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function replace($table = '', $set = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($set !== NULL)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->set($set);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (count($this->qb_set) === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($this->db_debug) ? $this->display_error('db_must_use_set') : FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($table === '')[m
[32m+[m		[32m{[m
[32m+[m			[32mif ( ! isset($this->qb_from[0]))[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn ($this->db_debug) ? $this->display_error('db_must_set_table') : FALSE;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$table = $this->qb_from[0];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sql = $this->_replace($this->protect_identifiers($table, TRUE, NULL, FALSE), array_keys($this->qb_set), array_values($this->qb_set));[m
[32m+[m
[32m+[m		[32m$this->_reset_write();[m
[32m+[m		[32mreturn $this->query($sql);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Replace statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific replace string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the table name[m
[32m+[m	[32m * @param	array	the insert keys[m
[32m+[m	[32m * @param	array	the insert values[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _replace($table, $keys, $values)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'REPLACE INTO '.$table.' ('.implode(', ', $keys).') VALUES ('.implode(', ', $values).')';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * FROM tables[m
[32m+[m	[32m *[m
[32m+[m	[32m * Groups tables in FROM clauses if needed, so there is no confusion[m
[32m+[m	[32m * about operator precedence.[m
[32m+[m	[32m *[m
[32m+[m	[32m * Note: This is only used (and overridden) by MySQL and CUBRID.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _from_tables()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn implode(', ', $this->qb_from);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get UPDATE query string[m
[32m+[m	[32m *[m
[32m+[m	[32m * Compiles an update query and returns the sql[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the table to update[m
[32m+[m	[32m * @param	bool	TRUE: reset QB values; FALSE: leave QB values alone[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get_compiled_update($table = '', $reset = TRUE)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Combine any cached components with the current statements[m
[32m+[m		[32m$this->_merge_cache();[m
[32m+[m
[32m+[m		[32mif ($this->_validate_update($table) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sql = $this->_update($this->qb_from[0], $this->qb_set);[m
[32m+[m
[32m+[m		[32mif ($reset === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_reset_write();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * UPDATE[m
[32m+[m	[32m *[m
[32m+[m	[32m * Compiles an update string and runs the query.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @param	array	$set	An associative array of update values[m
[32m+[m	[32m * @param	mixed	$where[m
[32m+[m	[32m * @param	int	$limit[m
[32m+[m	[32m * @return	bool	TRUE on success, FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function update($table = '', $set = NULL, $where = NULL, $limit = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Combine any cached components with the current statements[m
[32m+[m		[32m$this->_merge_cache();[m
[32m+[m
[32m+[m		[32mif ($set !== NULL)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->set($set);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($this->_validate_update($table) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($where !== NULL)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->where($where);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! empty($limit))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->limit($limit);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sql = $this->_update($this->qb_from[0], $this->qb_set);[m
[32m+[m		[32m$this->_reset_write();[m
[32m+[m		[32mreturn $this->query($sql);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Validate Update[m
[32m+[m	[32m *[m
[32m+[m	[32m * This method is used by both update() and get_compiled_update() to[m
[32m+[m	[32m * validate that data is actually being set and that a table has been[m
[32m+[m	[32m * chosen to be update.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the table to update data on[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _validate_update($table)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (count($this->qb_set) === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($this->db_debug) ? $this->display_error('db_must_use_set') : FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($table !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->qb_from = array($this->protect_identifiers($table, TRUE, NULL, FALSE));[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! isset($this->qb_from[0]))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($this->db_debug) ? $this->display_error('db_must_set_table') : FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Update_Batch[m
[32m+[m	[32m *[m
[32m+[m	[32m * Compiles an update string and runs the query[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the table to retrieve the results from[m
[32m+[m	[32m * @param	array	an associative array of update values[m
[32m+[m	[32m * @param	string	the where key[m
[32m+[m	[32m * @return	int	number of rows affected or FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function update_batch($table, $set = NULL, $index = NULL, $batch_size = 100)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Combine any cached components with the current statements[m
[32m+[m		[32m$this->_merge_cache();[m
[32m+[m
[32m+[m		[32mif ($index === NULL)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($this->db_debug) ? $this->display_error('db_must_use_index') : FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($set === NULL)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (empty($this->qb_set_ub))[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn ($this->db_debug) ? $this->display_error('db_must_use_set') : FALSE;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32mif (empty($set))[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn ($this->db_debug) ? $this->display_error('update_batch() called with no data') : FALSE;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$this->set_update_batch($set, $index);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (strlen($table) === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ( ! isset($this->qb_from[0]))[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn ($this->db_debug) ? $this->display_error('db_must_set_table') : FALSE;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$table = $this->qb_from[0];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Batch this baby[m
[32m+[m		[32m$affected_rows = 0;[m
[32m+[m		[32mfor ($i = 0, $total = count($this->qb_set_ub); $i < $total; $i += $batch_size)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($this->query($this->_update_batch($this->protect_identifiers($table, TRUE, NULL, FALSE), array_slice($this->qb_set_ub, $i, $batch_size), $index)))[m
[32m+[m			[32m{[m
[32m+[m				[32m$affected_rows += $this->affected_rows();[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$this->qb_where = array();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->_reset_write();[m
[32m+[m		[32mreturn $affected_rows;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Update_Batch statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific batch update string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table	Table name[m
[32m+[m	[32m * @param	array	$values	Update data[m
[32m+[m	[32m * @param	string	$index	WHERE key[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _update_batch($table, $values, $index)[m
[32m+[m	[32m{[m
[32m+[m		[32m$ids = array();[m
[32m+[m		[32mforeach ($values as $key => $val)[m
[32m+[m		[32m{[m
[32m+[m			[32m$ids[] = $val[$index]['value'];[m
[32m+[m
[32m+[m			[32mforeach (array_keys($val) as $field)[m
[32m+[m			[32m{[m
[32m+[m				[32mif ($field !== $index)[m
[32m+[m				[32m{[m
[32m+[m					[32m$final[$val[$field]['field']][] = 'WHEN '.$val[$index]['field'].' = '.$val[$index]['value'].' THEN '.$val[$field]['value'];[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$cases = '';[m
[32m+[m		[32mforeach ($final as $k => $v)[m
[32m+[m		[32m{[m
[32m+[m			[32m$cases .= $k." = CASE \n"[m
[32m+[m				[32m.implode("\n", $v)."\n"[m
[32m+[m				[32m.'ELSE '.$k.' END, ';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->where($val[$index]['field'].' IN('.implode(',', $ids).')', NULL, FALSE);[m
[32m+[m
[32m+[m		[32mreturn 'UPDATE '.$table.' SET '.substr($cases, 0, -2).$this->_compile_wh('qb_where');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * The "set_update_batch" function.  Allows key/value pairs to be set for batch updating[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	bool[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_update_batch($key, $index = '', $escape = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32m$key = $this->_object_to_array_batch($key);[m
[32m+[m
[32m+[m		[32mif ( ! is_array($key))[m
[32m+[m		[32m{[m
[32m+[m			[32m// @todo error[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mis_bool($escape) OR $escape = $this->_protect_identifiers;[m
[32m+[m
[32m+[m		[32mforeach ($key as $k => $v)[m
[32m+[m		[32m{[m
[32m+[m			[32m$index_set = FALSE;[m
[32m+[m			[32m$clean = array();[m
[32m+[m			[32mforeach ($v as $k2 => $v2)[m
[32m+[m			[32m{[m
[32m+[m				[32mif ($k2 === $index)[m
[32m+[m				[32m{[m
[32m+[m					[32m$index_set = TRUE;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m$clean[$k2] = array([m
[32m+[m					[32m'field'  => $this->protect_identifiers($k2, FALSE, $escape),[m
[32m+[m					[32m'value'  => ($escape === FALSE ? $v2 : $this->escape($v2))[m
[32m+[m				[32m);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif ($index_set === FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn $this->display_error('db_batch_missing_index');[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$this->qb_set_ub[] = $clean;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Empty Table[m
[32m+[m	[32m *[m
[32m+[m	[32m * Compiles a delete string and runs "DELETE FROM table"[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the table to empty[m
[32m+[m	[32m * @return	bool	TRUE on success, FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function empty_table($table = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($table === '')[m
[32m+[m		[32m{[m
[32m+[m			[32mif ( ! isset($this->qb_from[0]))[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn ($this->db_debug) ? $this->display_error('db_must_set_table') : FALSE;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$table = $this->qb_from[0];[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$table = $this->protect_identifiers($table, TRUE, NULL, FALSE);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sql = $this->_delete($table);[m
[32m+[m		[32m$this->_reset_write();[m
[32m+[m		[32mreturn $this->query($sql);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Truncate[m
[32m+[m	[32m *[m
[32m+[m	[32m * Compiles a truncate string and runs the query[m
[32m+[m	[32m * If the database does not support the truncate() command[m
[32m+[m	[32m * This function maps to "DELETE FROM table"[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the table to truncate[m
[32m+[m	[32m * @return	bool	TRUE on success, FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function truncate($table = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($table === '')[m
[32m+[m		[32m{[m
[32m+[m			[32mif ( ! isset($this->qb_from[0]))[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn ($this->db_debug) ? $this->display_error('db_must_set_table') : FALSE;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$table = $this->qb_from[0];[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$table = $this->protect_identifiers($table, TRUE, NULL, FALSE);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sql = $this->_truncate($table);[m
[32m+[m		[32m$this->_reset_write();[m
[32m+[m		[32mreturn $this->query($sql);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Truncate statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific truncate string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * If the database does not support the truncate() command,[m
[32m+[m	[32m * then this method maps to 'DELETE FROM table'[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the table name[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _truncate($table)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'TRUNCATE '.$table;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get DELETE query string[m
[32m+[m	[32m *[m
[32m+[m	[32m * Compiles a delete query string and returns the sql[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the table to delete from[m
[32m+[m	[32m * @param	bool	TRUE: reset QB values; FALSE: leave QB values alone[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get_compiled_delete($table = '', $reset = TRUE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->return_delete_sql = TRUE;[m
[32m+[m		[32m$sql = $this->delete($table, '', NULL, $reset);[m
[32m+[m		[32m$this->return_delete_sql = FALSE;[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Delete[m
[32m+[m	[32m *[m
[32m+[m	[32m * Compiles a delete string and runs the query[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	the table(s) to delete from. String or array[m
[32m+[m	[32m * @param	mixed	the where clause[m
[32m+[m	[32m * @param	mixed	the limit clause[m
[32m+[m	[32m * @param	bool[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function delete($table = '', $where = '', $limit = NULL, $reset_data = TRUE)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Combine any cached components with the current statements[m
[32m+[m		[32m$this->_merge_cache();[m
[32m+[m
[32m+[m		[32mif ($table === '')[m
[32m+[m		[32m{[m
[32m+[m			[32mif ( ! isset($this->qb_from[0]))[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn ($this->db_debug) ? $this->display_error('db_must_set_table') : FALSE;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$table = $this->qb_from[0];[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (is_array($table))[m
[32m+[m		[32m{[m
[32m+[m			[32mempty($where) && $reset_data = FALSE;[m
[32m+[m
[32m+[m			[32mforeach ($table as $single_table)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->delete($single_table, $where, $limit, $reset_data);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$table = $this->protect_identifiers($table, TRUE, NULL, FALSE);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($where !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->where($where);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! empty($limit))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->limit($limit);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (count($this->qb_where) === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($this->db_debug) ? $this->display_error('db_del_must_use_where') : FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sql = $this->_delete($table);[m
[32m+[m		[32mif ($reset_data)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_reset_write();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn ($this->return_delete_sql === TRUE) ? $sql : $this->query($sql);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Delete statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific delete string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the table name[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _delete($table)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'DELETE FROM '.$table.$this->_compile_wh('qb_where')[m
[32m+[m			[32m.($this->qb_limit !== FALSE ? ' LIMIT '.$this->qb_limit : '');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * DB Prefix[m
[32m+[m	[32m *[m
[32m+[m	[32m * Prepends a database prefix if one exists in configuration[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function dbprefix($table = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($table === '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->display_error('db_table_name_required');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->dbprefix.$table;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set DB Prefix[m
[32m+[m	[32m *[m
[32m+[m	[32m * Set's the DB Prefix to something new without needing to reconnect[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the prefix[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_dbprefix($prefix = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->dbprefix = $prefix;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Track Aliases[m
[32m+[m	[32m *[m
[32m+[m	[32m * Used to track SQL statements written with aliased tables.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The table to inspect[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _track_aliases($table)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (is_array($table))[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($table as $t)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_track_aliases($t);[m
[32m+[m			[32m}[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Does the string contain a comma?  If so, we need to separate[m
[32m+[m		[32m// the string into discreet statements[m
[32m+[m		[32mif (strpos($table, ',') !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->_track_aliases(explode(',', $table));[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// if a table alias is used we can recognize it by a space[m
[32m+[m		[32mif (strpos($table, ' ') !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m// if the alias is written with the AS keyword, remove it[m
[32m+[m			[32m$table = preg_replace('/\s+AS\s+/i', ' ', $table);[m
[32m+[m
[32m+[m			[32m// Grab the alias[m
[32m+[m			[32m$table = trim(strrchr($table, ' '));[m
[32m+[m
[32m+[m			[32m// Store the alias, if it doesn't already exist[m
[32m+[m			[32mif ( ! in_array($table, $this->qb_aliased_tables, TRUE))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->qb_aliased_tables[] = $table;[m
[32m+[m				[32mif ($this->qb_caching === TRUE && ! in_array($table, $this->qb_cache_aliased_tables, TRUE))[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->qb_cache_aliased_tables[] = $table;[m
[32m+[m					[32m$this->qb_cache_exists[] = 'aliased_tables';[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Compile the SELECT statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a query string based on which functions were used.[m
[32m+[m	[32m * Should not be called directly.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$select_override[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _compile_select($select_override = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Combine any cached components with the current statements[m
[32m+[m		[32m$this->_merge_cache();[m
[32m+[m
[32m+[m		[32m// Write the "select" portion of the query[m
[32m+[m		[32mif ($select_override !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$sql = $select_override;[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$sql = ( ! $this->qb_distinct) ? 'SELECT ' : 'SELECT DISTINCT ';[m
[32m+[m
[32m+[m			[32mif (count($this->qb_select) === 0)[m
[32m+[m			[32m{[m
[32m+[m				[32m$sql .= '*';[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m// Cycle through the "select" portion of the query and prep each column name.[m
[32m+[m				[32m// The reason we protect identifiers here rather than in the select() function[m
[32m+[m				[32m// is because until the user calls the from() function we don't know if there are aliases[m
[32m+[m				[32mforeach ($this->qb_select as $key => $val)[m
[32m+[m				[32m{[m
[32m+[m					[32m$no_escape = isset($this->qb_no_escape[$key]) ? $this->qb_no_escape[$key] : NULL;[m
[32m+[m					[32m$this->qb_select[$key] = $this->protect_identifiers($val, FALSE, $no_escape);[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m$sql .= implode(', ', $this->qb_select);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Write the "FROM" portion of the query[m
[32m+[m		[32mif (count($this->qb_from) > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32m$sql .= "\nFROM ".$this->_from_tables();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Write the "JOIN" portion of the query[m
[32m+[m		[32mif (count($this->qb_join) > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32m$sql .= "\n".implode("\n", $this->qb_join);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sql .= $this->_compile_wh('qb_where')[m
[32m+[m			[32m.$this->_compile_group_by()[m
[32m+[m			[32m.$this->_compile_wh('qb_having')[m
[32m+[m			[32m.$this->_compile_order_by(); // ORDER BY[m
[32m+[m
[32m+[m		[32m// LIMIT[m
[32m+[m		[32mif ($this->qb_limit !== FALSE OR $this->qb_offset)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->_limit($sql."\n");[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Compile WHERE, HAVING statements[m
[32m+[m	[32m *[m
[32m+[m	[32m * Escapes identifiers in WHERE and HAVING statements at execution time.[m
[32m+[m	[32m *[m
[32m+[m	[32m * Required so that aliases are tracked properly, regardless of whether[m
[32m+[m	[32m * where(), or_where(), having(), or_having are called prior to from(),[m
[32m+[m	[32m * join() and dbprefix is added only if needed.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$qb_key	'qb_where' or 'qb_having'[m
[32m+[m	[32m * @return	string	SQL statement[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _compile_wh($qb_key)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (count($this->$qb_key) > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mfor ($i = 0, $c = count($this->$qb_key); $i < $c; $i++)[m
[32m+[m			[32m{[m
[32m+[m				[32m// Is this condition already compiled?[m
[32m+[m				[32mif (is_string($this->{$qb_key}[$i]))[m
[32m+[m				[32m{[m
[32m+[m					[32mcontinue;[m
[32m+[m				[32m}[m
[32m+[m				[32melseif ($this->{$qb_key}[$i]['escape'] === FALSE)[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->{$qb_key}[$i] = $this->{$qb_key}[$i]['condition'].(isset($this->{$qb_key}[$i]['value']) ? ' '.$this->{$qb_key}[$i]['value'] : '');[m
[32m+[m					[32mcontinue;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m// Split multiple conditions[m
[32m+[m				[32m$conditions = preg_split([m
[32m+[m					[32m'/((?:^|\s+)AND\s+|(?:^|\s+)OR\s+)/i',[m
[32m+[m					[32m$this->{$qb_key}[$i]['condition'],[m
[32m+[m					[32m-1,[m
[32m+[m					[32mPREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY[m
[32m+[m				[32m);[m
[32m+[m
[32m+[m				[32mfor ($ci = 0, $cc = count($conditions); $ci < $cc; $ci++)[m
[32m+[m				[32m{[m
[32m+[m					[32mif (($op = $this->_get_operator($conditions[$ci])) === FALSE[m
[32m+[m						[32mOR ! preg_match('/^(\(?)(.*)('.preg_quote($op, '/').')\s*(.*(?<!\)))?(\)?)$/i', $conditions[$ci], $matches))[m
[32m+[m					[32m{[m
[32m+[m						[32mcontinue;[m
[32m+[m					[32m}[m
[32m+[m
[32m+[m					[32m// $matches = array([m
[32m+[m					[32m//	0 => '(test <= foo)',	/* the whole thing */[m
[32m+[m					[32m//	1 => '(',		/* optional */[m
[32m+[m					[32m//	2 => 'test',		/* the field name */[m
[32m+[m					[32m//	3 => ' <= ',		/* $op */[m
[32m+[m					[32m//	4 => 'foo',		/* optional, if $op is e.g. 'IS NULL' */[m
[32m+[m					[32m//	5 => ')'		/* optional */[m
[32m+[m					[32m// );[m
[32m+[m
[32m+[m					[32mif ( ! empty($matches[4]))[m
[32m+[m					[32m{[m
[32m+[m						[32m$this->_is_literal($matches[4]) OR $matches[4] = $this->protect_identifiers(trim($matches[4]));[m
[32m+[m						[32m$matches[4] = ' '.$matches[4];[m
[32m+[m					[32m}[m
[32m+[m
[32m+[m					[32m$conditions[$ci] = $matches[1].$this->protect_identifiers(trim($matches[2]))[m
[32m+[m						[32m.' '.trim($matches[3]).$matches[4].$matches[5];[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m$this->{$qb_key}[$i] = implode('', $conditions).(isset($this->{$qb_key}[$i]['value']) ? ' '.$this->{$qb_key}[$i]['value'] : '');[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn ($qb_key === 'qb_having' ? "\nHAVING " : "\nWHERE ")[m
[32m+[m				[32m.implode("\n", $this->$qb_key);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn '';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Compile GROUP BY[m
[32m+[m	[32m *[m
[32m+[m	[32m * Escapes identifiers in GROUP BY statements at execution time.[m
[32m+[m	[32m *[m
[32m+[m	[32m * Required so that aliases are tracked properly, regardless of whether[m
[32m+[m	[32m * group_by() is called prior to from(), join() and dbprefix is added[m
[32m+[m	[32m * only if needed.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string	SQL statement[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _compile_group_by()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (count($this->qb_groupby) > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mfor ($i = 0, $c = count($this->qb_groupby); $i < $c; $i++)[m
[32m+[m			[32m{[m
[32m+[m				[32m// Is it already compiled?[m
[32m+[m				[32mif (is_string($this->qb_groupby[$i]))[m
[32m+[m				[32m{[m
[32m+[m					[32mcontinue;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m$this->qb_groupby[$i] = ($this->qb_groupby[$i]['escape'] === FALSE OR $this->_is_literal($this->qb_groupby[$i]['field']))[m
[32m+[m					[32m? $this->qb_groupby[$i]['field'][m
[32m+[m					[32m: $this->protect_identifiers($this->qb_groupby[$i]['field']);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn "\nGROUP BY ".implode(', ', $this->qb_groupby);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn '';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Compile ORDER BY[m
[32m+[m	[32m *[m
[32m+[m	[32m * Escapes identifiers in ORDER BY statements at execution time.[m
[32m+[m	[32m *[m
[32m+[m	[32m * Required so that aliases are tracked properly, regardless of whether[m
[32m+[m	[32m * order_by() is called prior to from(), join() and dbprefix is added[m
[32m+[m	[32m * only if needed.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string	SQL statement[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _compile_order_by()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (empty($this->qb_orderby))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn '';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mfor ($i = 0, $c = count($this->qb_orderby); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (is_string($this->qb_orderby[$i]))[m
[32m+[m			[32m{[m
[32m+[m				[32mcontinue;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif ($this->qb_orderby[$i]['escape'] !== FALSE && ! $this->_is_literal($this->qb_orderby[$i]['field']))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->qb_orderby[$i]['field'] = $this->protect_identifiers($this->qb_orderby[$i]['field']);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$this->qb_orderby[$i] = $this->qb_orderby[$i]['field'].$this->qb_orderby[$i]['direction'];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn "\nORDER BY ".implode(', ', $this->qb_orderby);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Object to Array[m
[32m+[m	[32m *[m
[32m+[m	[32m * Takes an object as input and converts the class variables to array key/vals[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	object[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _object_to_array($object)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! is_object($object))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $object;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$array = array();[m
[32m+[m		[32mforeach (get_object_vars($object) as $key => $val)[m
[32m+[m		[32m{[m
[32m+[m			[32m// There are some built in keys we need to ignore for this conversion[m
[32m+[m			[32mif ( ! is_object($val) && ! is_array($val) && $key !== '_parent_name')[m
[32m+[m			[32m{[m
[32m+[m				[32m$array[$key] = $val;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $array;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Object to Array[m
[32m+[m	[32m *[m
[32m+[m	[32m * Takes an object as input and converts the class variables to array key/vals[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	object[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _object_to_array_batch($object)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! is_object($object))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $object;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$array = array();[m
[32m+[m		[32m$out = get_object_vars($object);[m
[32m+[m		[32m$fields = array_keys($out);[m
[32m+[m
[32m+[m		[32mforeach ($fields as $val)[m
[32m+[m		[32m{[m
[32m+[m			[32m// There are some built in keys we need to ignore for this conversion[m
[32m+[m			[32mif ($val !== '_parent_name')[m
[32m+[m			[32m{[m
[32m+[m				[32m$i = 0;[m
[32m+[m				[32mforeach ($out[$val] as $data)[m
[32m+[m				[32m{[m
[32m+[m					[32m$array[$i++][$val] = $data;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $array;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Start Cache[m
[32m+[m	[32m *[m
[32m+[m	[32m * Starts QB caching[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function start_cache()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->qb_caching = TRUE;[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Stop Cache[m
[32m+[m	[32m *[m
[32m+[m	[32m * Stops QB caching[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function stop_cache()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->qb_caching = FALSE;[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Flush Cache[m
[32m+[m	[32m *[m
[32m+[m	[32m * Empties the QB cache[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function flush_cache()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->_reset_run(array([m
[32m+[m			[32m'qb_cache_select'		=> array(),[m
[32m+[m			[32m'qb_cache_from'			=> array(),[m
[32m+[m			[32m'qb_cache_join'			=> array(),[m
[32m+[m			[32m'qb_cache_where'		=> array(),[m
[32m+[m			[32m'qb_cache_groupby'		=> array(),[m
[32m+[m			[32m'qb_cache_having'		=> array(),[m
[32m+[m			[32m'qb_cache_orderby'		=> array(),[m
[32m+[m			[32m'qb_cache_set'			=> array(),[m
[32m+[m			[32m'qb_cache_exists'		=> array(),[m
[32m+[m			[32m'qb_cache_no_escape'	=> array(),[m
[32m+[m			[32m'qb_cache_aliased_tables'	=> array()[m
[32m+[m		[32m));[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Merge Cache[m
[32m+[m	[32m *[m
[32m+[m	[32m * When called, this function merges any cached QB arrays with[m
[32m+[m	[32m * locally called ones.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _merge_cache()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (count($this->qb_cache_exists) === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (in_array('select', $this->qb_cache_exists, TRUE))[m
[32m+[m		[32m{[m
[32m+[m			[32m$qb_no_escape = $this->qb_cache_no_escape;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mforeach (array_unique($this->qb_cache_exists) as $val) // select, from, etc.[m
[32m+[m		[32m{[m
[32m+[m			[32m$qb_variable	= 'qb_'.$val;[m
[32m+[m			[32m$qb_cache_var	= 'qb_cache_'.$val;[m
[32m+[m			[32m$qb_new 	= $this->$qb_cache_var;[m
[32m+[m
[32m+[m			[32mfor ($i = 0, $c = count($this->$qb_variable); $i < $c; $i++)[m
[32m+[m			[32m{[m
[32m+[m				[32mif ( ! in_array($this->{$qb_variable}[$i], $qb_new, TRUE))[m
[32m+[m				[32m{[m
[32m+[m					[32m$qb_new[] = $this->{$qb_variable}[$i];[m
[32m+[m					[32mif ($val === 'select')[m
[32m+[m					[32m{[m
[32m+[m						[32m$qb_no_escape[] = $this->qb_no_escape[$i];[m
[32m+[m					[32m}[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$this->$qb_variable = $qb_new;[m
[32m+[m			[32mif ($val === 'select')[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->qb_no_escape = $qb_no_escape;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Is literal[m
[32m+[m	[32m *[m
[32m+[m	[32m * Determines if a string represents a literal value or a field name[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$str[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _is_literal($str)[m
[32m+[m	[32m{[m
[32m+[m		[32m$str = trim($str);[m
[32m+[m
[32m+[m		[32mif (empty($str) OR ctype_digit($str) OR (string) (float) $str === $str OR in_array(strtoupper($str), array('TRUE', 'FALSE'), TRUE))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mstatic $_str;[m
[32m+[m
[32m+[m		[32mif (empty($_str))[m
[32m+[m		[32m{[m
[32m+[m			[32m$_str = ($this->_escape_char !== '"')[m
[32m+[m				[32m? array('"', "'") : array("'");[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn in_array($str[0], $_str, TRUE);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Reset Query Builder values.[m
[32m+[m	[32m *[m
[32m+[m	[32m * Publicly-visible method to reset the QB values.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	CI_DB_query_builder[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function reset_query()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->_reset_select();[m
[32m+[m		[32m$this->_reset_write();[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Resets the query builder values.  Called by the get() function[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	An array of fields to reset[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _reset_run($qb_reset_items)[m
[32m+[m	[32m{[m
[32m+[m		[32mforeach ($qb_reset_items as $item => $default_value)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->$item = $default_value;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Resets the query builder values.  Called by the get() function[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _reset_select()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->_reset_run(array([m
[32m+[m			[32m'qb_select'		=> array(),[m
[32m+[m			[32m'qb_from'		=> array(),[m
[32m+[m			[32m'qb_join'		=> array(),[m
[32m+[m			[32m'qb_where'		=> array(),[m
[32m+[m			[32m'qb_groupby'		=> array(),[m
[32m+[m			[32m'qb_having'		=> array(),[m
[32m+[m			[32m'qb_orderby'		=> array(),[m
[32m+[m			[32m'qb_aliased_tables'	=> array(),[m
[32m+[m			[32m'qb_no_escape'		=> array(),[m
[32m+[m			[32m'qb_distinct'		=> FALSE,[m
[32m+[m			[32m'qb_limit'		=> FALSE,[m
[32m+[m			[32m'qb_offset'		=> FALSE[m
[32m+[m		[32m));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Resets the query builder "write" values.[m
[32m+[m	[32m *[m
[32m+[m	[32m * Called by the insert() update() insert_batch() update_batch() and delete() functions[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _reset_write()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->_reset_run(array([m
[32m+[m			[32m'qb_set'	=> array(),[m
[32m+[m			[32m'qb_set_ub'	=> array(),[m
[32m+[m			[32m'qb_from'	=> array(),[m
[32m+[m			[32m'qb_join'	=> array(),[m
[32m+[m			[32m'qb_where'	=> array(),[m
[32m+[m			[32m'qb_orderby'	=> array(),[m
[32m+[m			[32m'qb_keys'	=> array(),[m
[32m+[m			[32m'qb_limit'	=> FALSE[m
[32m+[m		[32m));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/DB_result.php b/system/database/DB_result.php[m
[1mnew file mode 100644[m
[1mindex 0000000..a5a4ca2[m
[1m--- /dev/null[m
[1m+++ b/system/database/DB_result.php[m
[36m@@ -0,0 +1,665 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Database Result Class[m
[32m+[m[32m *[m
[32m+[m[32m * This is the platform-independent result class.[m
[32m+[m[32m * This class will not be called directly. Rather, the adapter[m
[32m+[m[32m * class for the specific database will extend and instantiate it.[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_result {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Connection ID[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	resource|object[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $conn_id;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Result ID[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	resource|object[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $result_id;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Result Array[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[][m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $result_array			= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Result Object[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	object[][m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $result_object			= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Custom Result Object[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	object[][m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $custom_result_object		= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Current Row index[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $current_row			= 0;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Number of rows[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $num_rows;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Row data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $row_data;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	object	$driver_object[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct(&$driver_object)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->conn_id = $driver_object->conn_id;[m
[32m+[m		[32m$this->result_id = $driver_object->result_id;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Number of rows in the result set[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function num_rows()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (is_int($this->num_rows))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->num_rows;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (count($this->result_array) > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->num_rows = count($this->result_array);[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (count($this->result_object) > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->num_rows = count($this->result_object);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->num_rows = count($this->result_array());[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Query result. Acts as a wrapper function for the following functions.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$type	'object', 'array' or a custom class name[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function result($type = 'object')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($type === 'array')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->result_array();[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($type === 'object')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->result_object();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->custom_result_object($type);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Custom query result.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$class_name[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function custom_result_object($class_name)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (isset($this->custom_result_object[$class_name]))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->custom_result_object[$class_name];[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! $this->result_id OR $this->num_rows === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn array();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Don't fetch the result set again if we already have it[m
[32m+[m		[32m$_data = NULL;[m
[32m+[m		[32mif (($c = count($this->result_array)) > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32m$_data = 'result_array';[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (($c = count($this->result_object)) > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32m$_data = 'result_object';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($_data !== NULL)[m
[32m+[m		[32m{[m
[32m+[m			[32mfor ($i = 0; $i < $c; $i++)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->custom_result_object[$class_name][$i] = new $class_name();[m
[32m+[m
[32m+[m				[32mforeach ($this->{$_data}[$i] as $key => $value)[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->custom_result_object[$class_name][$i]->$key = $value;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn $this->custom_result_object[$class_name];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mis_null($this->row_data) OR $this->data_seek(0);[m
[32m+[m		[32m$this->custom_result_object[$class_name] = array();[m
[32m+[m
[32m+[m		[32mwhile ($row = $this->_fetch_object($class_name))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->custom_result_object[$class_name][] = $row;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->custom_result_object[$class_name];[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Query result. "object" version.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function result_object()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (count($this->result_object) > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->result_object;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// In the event that query caching is on, the result_id variable[m
[32m+[m		[32m// will not be a valid resource so we'll simply return an empty[m
[32m+[m		[32m// array.[m
[32m+[m		[32mif ( ! $this->result_id OR $this->num_rows === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn array();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (($c = count($this->result_array)) > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mfor ($i = 0; $i < $c; $i++)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->result_object[$i] = (object) $this->result_array[$i];[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn $this->result_object;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mis_null($this->row_data) OR $this->data_seek(0);[m
[32m+[m		[32mwhile ($row = $this->_fetch_object())[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->result_object[] = $row;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->result_object;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Query result. "array" version.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function result_array()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (count($this->result_array) > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->result_array;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// In the event that query caching is on, the result_id variable[m
[32m+[m		[32m// will not be a valid resource so we'll simply return an empty[m
[32m+[m		[32m// array.[m
[32m+[m		[32mif ( ! $this->result_id OR $this->num_rows === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn array();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (($c = count($this->result_object)) > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mfor ($i = 0; $i < $c; $i++)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->result_array[$i] = (array) $this->result_object[$i];[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn $this->result_array;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mis_null($this->row_data) OR $this->data_seek(0);[m
[32m+[m		[32mwhile ($row = $this->_fetch_assoc())[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->result_array[] = $row;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->result_array;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Row[m
[32m+[m	[32m *[m
[32m+[m	[32m * A wrapper method.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	$n[m
[32m+[m	[32m * @param	string	$type	'object' or 'array'[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function row($n = 0, $type = 'object')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! is_numeric($n))[m
[32m+[m		[32m{[m
[32m+[m			[32m// We cache the row data for subsequent uses[m
[32m+[m			[32mis_array($this->row_data) OR $this->row_data = $this->row_array(0);[m
[32m+[m
[32m+[m			[32m// array_key_exists() instead of isset() to allow for NULL values[m
[32m+[m			[32mif (empty($this->row_data) OR ! array_key_exists($n, $this->row_data))[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn NULL;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn $this->row_data[$n];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($type === 'object') return $this->row_object($n);[m
[32m+[m		[32melseif ($type === 'array') return $this->row_array($n);[m
[32m+[m
[32m+[m		[32mreturn $this->custom_row_object($n, $type);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Assigns an item into a particular column slot[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	$key[m
[32m+[m	[32m * @param	mixed	$value[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_row($key, $value = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32m// We cache the row data for subsequent uses[m
[32m+[m		[32mif ( ! is_array($this->row_data))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->row_data = $this->row_array(0);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (is_array($key))[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($key as $k => $v)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->row_data[$k] = $v;[m
[32m+[m			[32m}[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($key !== '' && $value !== NULL)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->row_data[$key] = $value;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns a single result row - custom object version[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	$n[m
[32m+[m	[32m * @param	string	$type[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function custom_row_object($n, $type)[m
[32m+[m	[32m{[m
[32m+[m		[32misset($this->custom_result_object[$type]) OR $this->custom_result_object($type);[m
[32m+[m
[32m+[m		[32mif (count($this->custom_result_object[$type]) === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn NULL;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($n !== $this->current_row && isset($this->custom_result_object[$type][$n]))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->current_row = $n;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->custom_result_object[$type][$this->current_row];[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns a single result row - object version[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	$n[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function row_object($n = 0)[m
[32m+[m	[32m{[m
[32m+[m		[32m$result = $this->result_object();[m
[32m+[m		[32mif (count($result) === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn NULL;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($n !== $this->current_row && isset($result[$n]))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->current_row = $n;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $result[$this->current_row];[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns a single result row - array version[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	$n[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function row_array($n = 0)[m
[32m+[m	[32m{[m
[32m+[m		[32m$result = $this->result_array();[m
[32m+[m		[32mif (count($result) === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn NULL;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($n !== $this->current_row && isset($result[$n]))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->current_row = $n;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $result[$this->current_row];[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns the "first" row[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$type[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function first_row($type = 'object')[m
[32m+[m	[32m{[m
[32m+[m		[32m$result = $this->result($type);[m
[32m+[m		[32mreturn (count($result) === 0) ? NULL : $result[0];[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns the "last" row[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$type[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function last_row($type = 'object')[m
[32m+[m	[32m{[m
[32m+[m		[32m$result = $this->result($type);[m
[32m+[m		[32mreturn (count($result) === 0) ? NULL : $result[count($result) - 1];[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns the "next" row[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$type[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function next_row($type = 'object')[m
[32m+[m	[32m{[m
[32m+[m		[32m$result = $this->result($type);[m
[32m+[m		[32mif (count($result) === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn NULL;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn isset($result[$this->current_row + 1])[m
[32m+[m			[32m? $result[++$this->current_row][m
[32m+[m			[32m: NULL;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns the "previous" row[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$type[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function previous_row($type = 'object')[m
[32m+[m	[32m{[m
[32m+[m		[32m$result = $this->result($type);[m
[32m+[m		[32mif (count($result) === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn NULL;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (isset($result[$this->current_row - 1]))[m
[32m+[m		[32m{[m
[32m+[m			[32m--$this->current_row;[m
[32m+[m		[32m}[m
[32m+[m		[32mreturn $result[$this->current_row];[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns an unbuffered row and move pointer to next row[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$type	'array', 'object' or a custom class name[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function unbuffered_row($type = 'object')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($type === 'array')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->_fetch_assoc();[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($type === 'object')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->_fetch_object();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->_fetch_object($type);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * The following methods are normally overloaded by the identically named[m
[32m+[m	[32m * methods in the platform-specific driver -- except when query caching[m
[32m+[m	[32m * is used. When caching is enabled we do not load the other driver.[m
[32m+[m	[32m * These functions are primarily here to prevent undefined function errors[m
[32m+[m	[32m * when a cached result object is in use. They are not otherwise fully[m
[32m+[m	[32m * operational due to the unavailability of the database resource IDs with[m
[32m+[m	[32m * cached results.[m
[32m+[m	[32m */[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Number of fields in the result set[m
[32m+[m	[32m *[m
[32m+[m	[32m * Overridden by driver result classes.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function num_fields()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 0;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch Field Names[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates an array of column names.[m
[32m+[m	[32m *[m
[32m+[m	[32m * Overridden by driver result classes.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function list_fields()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn array();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field data[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates an array of objects containing field meta-data.[m
[32m+[m	[32m *[m
[32m+[m	[32m * Overridden by driver result classes.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function field_data()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn array();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Free the result[m
[32m+[m	[32m *[m
[32m+[m	[32m * Overridden by driver result classes.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function free_result()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->result_id = FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Data Seek[m
[32m+[m	[32m *[m
[32m+[m	[32m * Moves the internal pointer to the desired offset. We call[m
[32m+[m	[32m * this internally before fetching results to make sure the[m
[32m+[m	[32m * result set starts at zero.[m
[32m+[m	[32m *[m
[32m+[m	[32m * Overridden by driver result classes.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	$n[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function data_seek($n = 0)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Result - associative array[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the result set as an array.[m
[32m+[m	[32m *[m
[32m+[m	[32m * Overridden by driver result classes.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _fetch_assoc()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn array();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Result - object[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the result set as an object.[m
[32m+[m	[32m *[m
[32m+[m	[32m * Overridden by driver result classes.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$class_name[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _fetch_object($class_name = 'stdClass')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn new $class_name();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/DB_utility.php b/system/database/DB_utility.php[m
[1mnew file mode 100644[m
[1mindex 0000000..8680176[m
[1m--- /dev/null[m
[1m+++ b/system/database/DB_utility.php[m
[36m@@ -0,0 +1,424 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Database Utility Class[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mabstract class CI_DB_utility {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database object[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	object[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $db;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List databases statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_list_databases		= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * OPTIMIZE TABLE statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_optimize_table	= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * REPAIR TABLE statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_repair_table	= FALSE;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	object	&$db	Database object[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct(&$db)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->db =& $db;[m
[32m+[m		[32mlog_message('info', 'Database Utility Class Initialized');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List databases[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function list_databases()[m
[32m+[m	[32m{[m
[32m+[m		[32m// Is there a cached result?[m
[32m+[m		[32mif (isset($this->db->data_cache['db_names']))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->db->data_cache['db_names'];[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($this->_list_databases === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($this->db->db_debug) ? $this->db->display_error('db_unsupported_feature') : FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->db->data_cache['db_names'] = array();[m
[32m+[m
[32m+[m		[32m$query = $this->db->query($this->_list_databases);[m
[32m+[m		[32mif ($query === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->db->data_cache['db_names'];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mfor ($i = 0, $query = $query->result_array(), $c = count($query); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->db->data_cache['db_names'][] = current($query[$i]);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->db->data_cache['db_names'];[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Determine if a particular database exists[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$database_name[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function database_exists($database_name)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn in_array($database_name, $this->list_databases());[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Optimize Table[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table_name[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function optimize_table($table_name)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->_optimize_table === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($this->db->db_debug) ? $this->db->display_error('db_unsupported_feature') : FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$query = $this->db->query(sprintf($this->_optimize_table, $this->db->escape_identifiers($table_name)));[m
[32m+[m		[32mif ($query !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$query = $query->result_array();[m
[32m+[m			[32mreturn current($query);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Optimize Database[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function optimize_database()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->_optimize_table === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($this->db->db_debug) ? $this->db->display_error('db_unsupported_feature') : FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$result = array();[m
[32m+[m		[32mforeach ($this->db->list_tables() as $table_name)[m
[32m+[m		[32m{[m
[32m+[m			[32m$res = $this->db->query(sprintf($this->_optimize_table, $this->db->escape_identifiers($table_name)));[m
[32m+[m			[32mif (is_bool($res))[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn $res;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// Build the result array...[m
[32m+[m			[32m$res = $res->result_array();[m
[32m+[m			[32m$res = current($res);[m
[32m+[m			[32m$key = str_replace($this->db->database.'.', '', current($res));[m
[32m+[m			[32m$keys = array_keys($res);[m
[32m+[m			[32munset($res[$keys[0]]);[m
[32m+[m
[32m+[m			[32m$result[$key] = $res;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $result;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Repair Table[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table_name[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function repair_table($table_name)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->_repair_table === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($this->db->db_debug) ? $this->db->display_error('db_unsupported_feature') : FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$query = $this->db->query(sprintf($this->_repair_table, $this->db->escape_identifiers($table_name)));[m
[32m+[m		[32mif (is_bool($query))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $query;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$query = $query->result_array();[m
[32m+[m		[32mreturn current($query);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Generate CSV from a query result object[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	object	$query		Query result object[m
[32m+[m	[32m * @param	string	$delim		Delimiter (default: ,)[m
[32m+[m	[32m * @param	string	$newline	Newline character (default: \n)[m
[32m+[m	[32m * @param	string	$enclosure	Enclosure (default: ")[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function csv_from_result($query, $delim = ',', $newline = "\n", $enclosure = '"')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! is_object($query) OR ! method_exists($query, 'list_fields'))[m
[32m+[m		[32m{[m
[32m+[m			[32mshow_error('You must submit a valid result object');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$out = '';[m
[32m+[m		[32m// First generate the headings from the table column names[m
[32m+[m		[32mforeach ($query->list_fields() as $name)[m
[32m+[m		[32m{[m
[32m+[m			[32m$out .= $enclosure.str_replace($enclosure, $enclosure.$enclosure, $name).$enclosure.$delim;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$out = substr($out, 0, -strlen($delim)).$newline;[m
[32m+[m
[32m+[m		[32m// Next blast through the result array and build out the rows[m
[32m+[m		[32mwhile ($row = $query->unbuffered_row('array'))[m
[32m+[m		[32m{[m
[32m+[m			[32m$line = array();[m
[32m+[m			[32mforeach ($row as $item)[m
[32m+[m			[32m{[m
[32m+[m				[32m$line[] = $enclosure.str_replace($enclosure, $enclosure.$enclosure, $item).$enclosure;[m
[32m+[m			[32m}[m
[32m+[m			[32m$out .= implode($delim, $line).$newline;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $out;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Generate XML data from a query result object[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	object	$query	Query result object[m
[32m+[m	[32m * @param	array	$params	Any preferences[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function xml_from_result($query, $params = array())[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! is_object($query) OR ! method_exists($query, 'list_fields'))[m
[32m+[m		[32m{[m
[32m+[m			[32mshow_error('You must submit a valid result object');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Set our default values[m
[32m+[m		[32mforeach (array('root' => 'root', 'element' => 'element', 'newline' => "\n", 'tab' => "\t") as $key => $val)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ( ! isset($params[$key]))[m
[32m+[m			[32m{[m
[32m+[m				[32m$params[$key] = $val;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Create variables for convenience[m
[32m+[m		[32mextract($params);[m
[32m+[m
[32m+[m		[32m// Load the xml helper[m
[32m+[m		[32mget_instance()->load->helper('xml');[m
[32m+[m
[32m+[m		[32m// Generate the result[m
[32m+[m		[32m$xml = '<'.$root.'>'.$newline;[m
[32m+[m		[32mwhile ($row = $query->unbuffered_row())[m
[32m+[m		[32m{[m
[32m+[m			[32m$xml .= $tab.'<'.$element.'>'.$newline;[m
[32m+[m			[32mforeach ($row as $key => $val)[m
[32m+[m			[32m{[m
[32m+[m				[32m$xml .= $tab.$tab.'<'.$key.'>'.xml_convert($val).'</'.$key.'>'.$newline;[m
[32m+[m			[32m}[m
[32m+[m			[32m$xml .= $tab.'</'.$element.'>'.$newline;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $xml.'</'.$root.'>'.$newline;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database Backup[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function backup($params = array())[m
[32m+[m	[32m{[m
[32m+[m		[32m// If the parameters have not been submitted as an[m
[32m+[m		[32m// array then we know that it is simply the table[m
[32m+[m		[32m// name, which is a valid short cut.[m
[32m+[m		[32mif (is_string($params))[m
[32m+[m		[32m{[m
[32m+[m			[32m$params = array('tables' => $params);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Set up our default preferences[m
[32m+[m		[32m$prefs = array([m
[32m+[m			[32m'tables'		=> array(),[m
[32m+[m			[32m'ignore'		=> array(),[m
[32m+[m			[32m'filename'		=> '',[m
[32m+[m			[32m'format'		=> 'gzip', // gzip, zip, txt[m
[32m+[m			[32m'add_drop'		=> TRUE,[m
[32m+[m			[32m'add_insert'		=> TRUE,[m
[32m+[m			[32m'newline'		=> "\n",[m
[32m+[m			[32m'foreign_key_checks'	=> TRUE[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32m// Did the user submit any preferences? If so set them....[m
[32m+[m		[32mif (count($params) > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($prefs as $key => $val)[m
[32m+[m			[32m{[m
[32m+[m				[32mif (isset($params[$key]))[m
[32m+[m				[32m{[m
[32m+[m					[32m$prefs[$key] = $params[$key];[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Are we backing up a complete database or individual tables?[m
[32m+[m		[32m// If no table names were submitted we'll fetch the entire table list[m
[32m+[m		[32mif (count($prefs['tables']) === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32m$prefs['tables'] = $this->db->list_tables();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Validate the format[m
[32m+[m		[32mif ( ! in_array($prefs['format'], array('gzip', 'zip', 'txt'), TRUE))[m
[32m+[m		[32m{[m
[32m+[m			[32m$prefs['format'] = 'txt';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Is the encoder supported? If not, we'll either issue an[m
[32m+[m		[32m// error or use plain text depending on the debug settings[m
[32m+[m		[32mif (($prefs['format'] === 'gzip' && ! function_exists('gzencode'))[m
[32m+[m			[32mOR ($prefs['format'] === 'zip' && ! function_exists('gzcompress')))[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($this->db->db_debug)[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn $this->db->display_error('db_unsupported_compression');[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$prefs['format'] = 'txt';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Was a Zip file requested?[m
[32m+[m		[32mif ($prefs['format'] === 'zip')[m
[32m+[m		[32m{[m
[32m+[m			[32m// Set the filename if not provided (only needed with Zip files)[m
[32m+[m			[32mif ($prefs['filename'] === '')[m
[32m+[m			[32m{[m
[32m+[m				[32m$prefs['filename'] = (count($prefs['tables']) === 1 ? $prefs['tables'] : $this->db->database)[m
[32m+[m							[32m.date('Y-m-d_H-i', time()).'.sql';[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m// If they included the .zip file extension we'll remove it[m
[32m+[m				[32mif (preg_match('|.+?\.zip$|', $prefs['filename']))[m
[32m+[m				[32m{[m
[32m+[m					[32m$prefs['filename'] = str_replace('.zip', '', $prefs['filename']);[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m// Tack on the ".sql" file extension if needed[m
[32m+[m				[32mif ( ! preg_match('|.+?\.sql$|', $prefs['filename']))[m
[32m+[m				[32m{[m
[32m+[m					[32m$prefs['filename'] .= '.sql';[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// Load the Zip class and output it[m
[32m+[m			[32m$CI =& get_instance();[m
[32m+[m			[32m$CI->load->library('zip');[m
[32m+[m			[32m$CI->zip->add_data($prefs['filename'], $this->_backup($prefs));[m
[32m+[m			[32mreturn $CI->zip->get_zip();[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($prefs['format'] === 'txt') // Was a text file requested?[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->_backup($prefs);[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($prefs['format'] === 'gzip') // Was a Gzip file requested?[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn gzencode($this->_backup($prefs));[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/cubrid/cubrid_driver.php b/system/database/drivers/cubrid/cubrid_driver.php[m
[1mnew file mode 100644[m
[1mindex 0000000..9d6afea[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/cubrid/cubrid_driver.php[m
[36m@@ -0,0 +1,405 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 2.1.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CUBRID Database Adapter Class[m
[32m+[m[32m *[m
[32m+[m[32m * Note: _DB is an extender class that the app controller[m
[32m+[m[32m * creates dynamically based on whether the query builder[m
[32m+[m[32m * class is being used or not.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		Esen Sagynov[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_cubrid_driver extends CI_DB {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database driver[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $dbdriver = 'cubrid';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Auto-commit flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $auto_commit = TRUE;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Identifier escape character[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_escape_char = '`';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ORDER BY random keyword[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_random_keyword = array('RANDOM()', 'RANDOM(%d)');[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct($params)[m
[32m+[m	[32m{[m
[32m+[m		[32mparent::__construct($params);[m
[32m+[m
[32m+[m		[32mif (preg_match('/^CUBRID:[^:]+(:[0-9][1-9]{0,4})?:[^:]+:[^:]*:[^:]*:(\?.+)?$/', $this->dsn, $matches))[m
[32m+[m		[32m{[m
[32m+[m			[32mif (stripos($matches[2], 'autocommit=off') !== FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->auto_commit = FALSE;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m// If no port is defined by the user, use the default value[m
[32m+[m			[32mempty($this->port) OR $this->port = 33000;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Non-persistent database connection[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$persistent[m
[32m+[m	[32m * @return	resource[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function db_connect($persistent = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (preg_match('/^CUBRID:[^:]+(:[0-9][1-9]{0,4})?:[^:]+:([^:]*):([^:]*):(\?.+)?$/', $this->dsn, $matches))[m
[32m+[m		[32m{[m
[32m+[m			[32m$func = ($persistent !== TRUE) ? 'cubrid_connect_with_url' : 'cubrid_pconnect_with_url';[m
[32m+[m			[32mreturn ($matches[2] === '' && $matches[3] === '' && $this->username !== '' && $this->password !== '')[m
[32m+[m				[32m? $func($this->dsn, $this->username, $this->password)[m
[32m+[m				[32m: $func($this->dsn);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$func = ($persistent !== TRUE) ? 'cubrid_connect' : 'cubrid_pconnect';[m
[32m+[m		[32mreturn ($this->username !== '')[m
[32m+[m			[32m? $func($this->hostname, $this->port, $this->database, $this->username, $this->password)[m
[32m+[m			[32m: $func($this->hostname, $this->port, $this->database);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Reconnect[m
[32m+[m	[32m *[m
[32m+[m	[32m * Keep / reestablish the db connection if no queries have been[m
[32m+[m	[32m * sent for a length of time exceeding the server's idle timeout[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function reconnect()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (cubrid_ping($this->conn_id) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->conn_id = FALSE;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database version number[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function version()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (isset($this->data_cache['version']))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->data_cache['version'];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn ( ! $this->conn_id OR ($version = cubrid_get_server_info($this->conn_id)) === FALSE)[m
[32m+[m			[32m? FALSE[m
[32m+[m			[32m: $this->data_cache['version'] = $version;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Execute the query[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$sql	an SQL query[m
[32m+[m	[32m * @return	resource[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _execute($sql)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn cubrid_query($sql, $this->conn_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Begin Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_begin()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (($autocommit = cubrid_get_autocommit($this->conn_id)) === NULL)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($autocommit === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn cubrid_set_autocommit($this->conn_id, CUBRID_AUTOCOMMIT_FALSE);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Commit Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_commit()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! cubrid_commit($this->conn_id))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($this->auto_commit && ! cubrid_get_autocommit($this->conn_id))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn cubrid_set_autocommit($this->conn_id, CUBRID_AUTOCOMMIT_TRUE);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Rollback Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_rollback()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! cubrid_rollback($this->conn_id))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($this->auto_commit && ! cubrid_get_autocommit($this->conn_id))[m
[32m+[m		[32m{[m
[32m+[m			[32mcubrid_set_autocommit($this->conn_id, CUBRID_AUTOCOMMIT_TRUE);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Platform-dependent string escape[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _escape_str($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn cubrid_real_escape_string($str, $this->conn_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Affected Rows[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function affected_rows()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn cubrid_affected_rows();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Insert ID[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function insert_id()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn cubrid_insert_id($this->conn_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List table query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the table names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$prefix_limit[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_tables($prefix_limit = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = 'SHOW TABLES';[m
[32m+[m
[32m+[m		[32mif ($prefix_limit !== FALSE && $this->dbprefix !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $sql." LIKE '".$this->escape_like_str($this->dbprefix)."%'";[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show column query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the column names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_columns($table = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'SHOW COLUMNS FROM '.$this->protect_identifiers($table, TRUE, NULL, FALSE);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns an object with field data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function field_data($table)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (($query = $this->query('SHOW COLUMNS FROM '.$this->protect_identifiers($table, TRUE, NULL, FALSE))) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m		[32m$query = $query->result_object();[m
[32m+[m
[32m+[m		[32m$retval = array();[m
[32m+[m		[32mfor ($i = 0, $c = count($query); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$retval[$i]			= new stdClass();[m
[32m+[m			[32m$retval[$i]->name		= $query[$i]->Field;[m
[32m+[m
[32m+[m			[32msscanf($query[$i]->Type, '%[a-z](%d)',[m
[32m+[m				[32m$retval[$i]->type,[m
[32m+[m				[32m$retval[$i]->max_length[m
[32m+[m			[32m);[m
[32m+[m
[32m+[m			[32m$retval[$i]->default		= $query[$i]->Default;[m
[32m+[m			[32m$retval[$i]->primary_key	= (int) ($query[$i]->Key === 'PRI');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $retval;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Error[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns an array containing code and message of the last[m
[32m+[m	[32m * database error that has occurred.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function error()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn array('code' => cubrid_errno($this->conn_id), 'message' => cubrid_error($this->conn_id));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * FROM tables[m
[32m+[m	[32m *[m
[32m+[m	[32m * Groups tables in FROM clauses if needed, so there is no confusion[m
[32m+[m	[32m * about operator precedence.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _from_tables()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! empty($this->qb_join) && count($this->qb_from) > 1)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn '('.implode(', ', $this->qb_from).')';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn implode(', ', $this->qb_from);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Close DB Connection[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _close()[m
[32m+[m	[32m{[m
[32m+[m		[32mcubrid_close($this->conn_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/cubrid/cubrid_forge.php b/system/database/drivers/cubrid/cubrid_forge.php[m
[1mnew file mode 100644[m
[1mindex 0000000..95e7ca1[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/cubrid/cubrid_forge.php[m
[36m@@ -0,0 +1,230 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 2.1.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CUBRID Forge Class[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		Esen Sagynov[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_cubrid_forge extends CI_DB_forge {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CREATE DATABASE statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_create_database	= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CREATE TABLE keys flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * Whether table keys are created from within the[m
[32m+[m	[32m * CREATE TABLE statement.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_create_table_keys	= TRUE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * DROP DATABASE statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_drop_database	= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CREATE TABLE IF statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_create_table_if	= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * UNSIGNED support[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_unsigned		= array([m
[32m+[m		[32m'SHORT'		=> 'INTEGER',[m
[32m+[m		[32m'SMALLINT'	=> 'INTEGER',[m
[32m+[m		[32m'INT'		=> 'BIGINT',[m
[32m+[m		[32m'INTEGER'	=> 'BIGINT',[m
[32m+[m		[32m'BIGINT'	=> 'NUMERIC',[m
[32m+[m		[32m'FLOAT'		=> 'DOUBLE',[m
[32m+[m		[32m'REAL'		=> 'DOUBLE'[m
[32m+[m	[32m);[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ALTER TABLE[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$alter_type	ALTER type[m
[32m+[m	[32m * @param	string	$table		Table name[m
[32m+[m	[32m * @param	mixed	$field		Column definition[m
[32m+[m	[32m * @return	string|string[][m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _alter_table($alter_type, $table, $field)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (in_array($alter_type, array('DROP', 'ADD'), TRUE))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn parent::_alter_table($alter_type, $table, $field);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sql = 'ALTER TABLE '.$this->db->escape_identifiers($table);[m
[32m+[m		[32m$sqls = array();[m
[32m+[m		[32mfor ($i = 0, $c = count($field); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($field[$i]['_literal'] !== FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$sqls[] = $sql.' CHANGE '.$field[$i]['_literal'];[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$alter_type = empty($field[$i]['new_name']) ? ' MODIFY ' : ' CHANGE ';[m
[32m+[m				[32m$sqls[] = $sql.$alter_type.$this->_process_column($field[$i]);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sqls;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Process column[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$field[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _process_column($field)[m
[32m+[m	[32m{[m
[32m+[m		[32m$extra_clause = isset($field['after'])[m
[32m+[m			[32m? ' AFTER '.$this->db->escape_identifiers($field['after']) : '';[m
[32m+[m
[32m+[m		[32mif (empty($extra_clause) && isset($field['first']) && $field['first'] === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$extra_clause = ' FIRST';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->db->escape_identifiers($field['name'])[m
[32m+[m			[32m.(empty($field['new_name']) ? '' : ' '.$this->db->escape_identifiers($field['new_name']))[m
[32m+[m			[32m.' '.$field['type'].$field['length'][m
[32m+[m			[32m.$field['unsigned'][m
[32m+[m			[32m.$field['null'][m
[32m+[m			[32m.$field['default'][m
[32m+[m			[32m.$field['auto_increment'][m
[32m+[m			[32m.$field['unique'][m
[32m+[m			[32m.$extra_clause;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute TYPE[m
[32m+[m	[32m *[m
[32m+[m	[32m * Performs a data type mapping between different databases.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_type(&$attributes)[m
[32m+[m	[32m{[m
[32m+[m		[32mswitch (strtoupper($attributes['TYPE']))[m
[32m+[m		[32m{[m
[32m+[m			[32mcase 'TINYINT':[m
[32m+[m				[32m$attributes['TYPE'] = 'SMALLINT';[m
[32m+[m				[32m$attributes['UNSIGNED'] = FALSE;[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mcase 'MEDIUMINT':[m
[32m+[m				[32m$attributes['TYPE'] = 'INTEGER';[m
[32m+[m				[32m$attributes['UNSIGNED'] = FALSE;[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mcase 'LONGTEXT':[m
[32m+[m				[32m$attributes['TYPE'] = 'STRING';[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mdefault: return;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Process indexes[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table	(ignored)[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _process_indexes($table)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = '';[m
[32m+[m
[32m+[m		[32mfor ($i = 0, $c = count($this->keys); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (is_array($this->keys[$i]))[m
[32m+[m			[32m{[m
[32m+[m				[32mfor ($i2 = 0, $c2 = count($this->keys[$i]); $i2 < $c2; $i2++)[m
[32m+[m				[32m{[m
[32m+[m					[32mif ( ! isset($this->fields[$this->keys[$i][$i2]]))[m
[32m+[m					[32m{[m
[32m+[m						[32munset($this->keys[$i][$i2]);[m
[32m+[m						[32mcontinue;[m
[32m+[m					[32m}[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m			[32melseif ( ! isset($this->fields[$this->keys[$i]]))[m
[32m+[m			[32m{[m
[32m+[m				[32munset($this->keys[$i]);[m
[32m+[m				[32mcontinue;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mis_array($this->keys[$i]) OR $this->keys[$i] = array($this->keys[$i]);[m
[32m+[m
[32m+[m			[32m$sql .= ",\n\tKEY ".$this->db->escape_identifiers(implode('_', $this->keys[$i]))[m
[32m+[m				[32m.' ('.implode(', ', $this->db->escape_identifiers($this->keys[$i])).')';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->keys = array();[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/cubrid/cubrid_result.php b/system/database/drivers/cubrid/cubrid_result.php[m
[1mnew file mode 100644[m
[1mindex 0000000..a71b1a2[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/cubrid/cubrid_result.php[m
[36m@@ -0,0 +1,177 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 2.1.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CUBRID Result Class[m
[32m+[m[32m *[m
[32m+[m[32m * This class extends the parent result class: CI_DB_result[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		Esen Sagynov[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_cubrid_result extends CI_DB_result {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Number of rows in the result set[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function num_rows()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn is_int($this->num_rows)[m
[32m+[m			[32m? $this->num_rows[m
[32m+[m			[32m: $this->num_rows = cubrid_num_rows($this->result_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Number of fields in the result set[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function num_fields()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn cubrid_num_fields($this->result_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch Field Names[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates an array of column names[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function list_fields()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn cubrid_column_names($this->result_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field data[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates an array of objects containing field meta-data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function field_data()[m
[32m+[m	[32m{[m
[32m+[m		[32m$retval = array();[m
[32m+[m
[32m+[m		[32mfor ($i = 0, $c = $this->num_fields(); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$retval[$i]			= new stdClass();[m
[32m+[m			[32m$retval[$i]->name		= cubrid_field_name($this->result_id, $i);[m
[32m+[m			[32m$retval[$i]->type		= cubrid_field_type($this->result_id, $i);[m
[32m+[m			[32m$retval[$i]->max_length		= cubrid_field_len($this->result_id, $i);[m
[32m+[m			[32m$retval[$i]->primary_key	= (int) (strpos(cubrid_field_flags($this->result_id, $i), 'primary_key') !== FALSE);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $retval;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Free the result[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function free_result()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (is_resource($this->result_id) OR[m
[32m+[m			[32m(get_resource_type($this->result_id) === 'Unknown' && preg_match('/Resource id #/', strval($this->result_id))))[m
[32m+[m		[32m{[m
[32m+[m			[32mcubrid_close_request($this->result_id);[m
[32m+[m			[32m$this->result_id = FALSE;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Data Seek[m
[32m+[m	[32m *[m
[32m+[m	[32m * Moves the internal pointer to the desired offset. We call[m
[32m+[m	[32m * this internally before fetching results to make sure the[m
[32m+[m	[32m * result set starts at zero.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	$n[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function data_seek($n = 0)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn cubrid_data_seek($this->result_id, $n);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Result - associative array[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the result set as an array[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _fetch_assoc()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn cubrid_fetch_assoc($this->result_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Result - object[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the result set as an object[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$class_name[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _fetch_object($class_name = 'stdClass')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn cubrid_fetch_object($this->result_id, $class_name);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/cubrid/cubrid_utility.php b/system/database/drivers/cubrid/cubrid_utility.php[m
[1mnew file mode 100644[m
[1mindex 0000000..eb906ae[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/cubrid/cubrid_utility.php[m
[36m@@ -0,0 +1,79 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 2.1.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CUBRID Utility Class[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		Esen Sagynov[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_cubrid_utility extends CI_DB_utility {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List databases[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function list_databases()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (isset($this->db->data_cache['db_names']))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->db->data_cache['db_names'];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->db->data_cache['db_names'] = cubrid_list_dbs($this->db->conn_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CUBRID Export[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	Preferences[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _backup($params = array())[m
[32m+[m	[32m{[m
[32m+[m		[32m// No SQL based support in CUBRID as of version 8.4.0. Database or[m
[32m+[m		[32m// table backup can be performed using CUBRID Manager[m
[32m+[m		[32m// database administration tool.[m
[32m+[m		[32mreturn $this->db->display_error('db_unsupported_feature');[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/cubrid/index.html b/system/database/drivers/cubrid/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/cubrid/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/system/database/drivers/ibase/ibase_driver.php b/system/database/drivers/ibase/ibase_driver.php[m
[1mnew file mode 100644[m
[1mindex 0000000..fd866ff[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/ibase/ibase_driver.php[m
[36m@@ -0,0 +1,413 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Firebird/Interbase Database Adapter Class[m
[32m+[m[32m *[m
[32m+[m[32m * Note: _DB is an extender class that the app controller[m
[32m+[m[32m * creates dynamically based on whether the query builder[m
[32m+[m[32m * class is being used or not.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_ibase_driver extends CI_DB {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database driver[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $dbdriver = 'ibase';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ORDER BY random keyword[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_random_keyword = array('RAND()', 'RAND()');[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * IBase Transaction status flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	resource[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_ibase_trans;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Non-persistent database connection[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$persistent[m
[32m+[m	[32m * @return	resource[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function db_connect($persistent = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn ($persistent === TRUE)[m
[32m+[m			[32m? ibase_pconnect($this->hostname.':'.$this->database, $this->username, $this->password, $this->char_set)[m
[32m+[m			[32m: ibase_connect($this->hostname.':'.$this->database, $this->username, $this->password, $this->char_set);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database version number[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function version()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (isset($this->data_cache['version']))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->data_cache['version'];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (($service = ibase_service_attach($this->hostname, $this->username, $this->password)))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->data_cache['version'] = ibase_server_info($service, IBASE_SVC_SERVER_VERSION);[m
[32m+[m
[32m+[m			[32m// Don't keep the service open[m
[32m+[m			[32mibase_service_detach($service);[m
[32m+[m			[32mreturn $this->data_cache['version'];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Execute the query[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$sql	an SQL query[m
[32m+[m	[32m * @return	resource[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _execute($sql)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn ibase_query(isset($this->_ibase_trans) ? $this->_ibase_trans : $this->conn_id, $sql);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Begin Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_begin()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (($trans_handle = ibase_trans($this->conn_id)) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->_ibase_trans = $trans_handle;[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Commit Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_commit()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (ibase_commit($this->_ibase_trans))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_ibase_trans = NULL;[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Rollback Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_rollback()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (ibase_rollback($this->_ibase_trans))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_ibase_trans = NULL;[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Affected Rows[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function affected_rows()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn ibase_affected_rows($this->conn_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Insert ID[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$generator_name[m
[32m+[m	[32m * @param	int	$inc_by[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function insert_id($generator_name, $inc_by = 0)[m
[32m+[m	[32m{[m
[32m+[m		[32m//If a generator hasn't been used before it will return 0[m
[32m+[m		[32mreturn ibase_gen_id('"'.$generator_name.'"', $inc_by);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List table query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the table names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$prefix_limit[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_tables($prefix_limit = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = 'SELECT TRIM("RDB$RELATION_NAME") AS TABLE_NAME FROM "RDB$RELATIONS" WHERE "RDB$RELATION_NAME" NOT LIKE \'RDB$%\' AND "RDB$RELATION_NAME" NOT LIKE \'MON$%\'';[m
[32m+[m
[32m+[m		[32mif ($prefix_limit !== FALSE && $this->dbprefix !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $sql.' AND TRIM("RDB$RELATION_NAME") AS TABLE_NAME LIKE \''.$this->escape_like_str($this->dbprefix)."%' "[m
[32m+[m				[32m.sprintf($this->_like_escape_str, $this->_like_escape_chr);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show column query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the column names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_columns($table = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'SELECT TRIM("RDB$FIELD_NAME") AS COLUMN_NAME FROM "RDB$RELATION_FIELDS" WHERE "RDB$RELATION_NAME" = '.$this->escape($table);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns an object with field data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function field_data($table)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = 'SELECT "rfields"."RDB$FIELD_NAME" AS "name",[m
[32m+[m				[32mCASE "fields"."RDB$FIELD_TYPE"[m
[32m+[m					[32mWHEN 7 THEN \'SMALLINT\'[m
[32m+[m					[32mWHEN 8 THEN \'INTEGER\'[m
[32m+[m					[32mWHEN 9 THEN \'QUAD\'[m
[32m+[m					[32mWHEN 10 THEN \'FLOAT\'[m
[32m+[m					[32mWHEN 11 THEN \'DFLOAT\'[m
[32m+[m					[32mWHEN 12 THEN \'DATE\'[m
[32m+[m					[32mWHEN 13 THEN \'TIME\'[m
[32m+[m					[32mWHEN 14 THEN \'CHAR\'[m
[32m+[m					[32mWHEN 16 THEN \'INT64\'[m
[32m+[m					[32mWHEN 27 THEN \'DOUBLE\'[m
[32m+[m					[32mWHEN 35 THEN \'TIMESTAMP\'[m
[32m+[m					[32mWHEN 37 THEN \'VARCHAR\'[m
[32m+[m					[32mWHEN 40 THEN \'CSTRING\'[m
[32m+[m					[32mWHEN 261 THEN \'BLOB\'[m
[32m+[m					[32mELSE NULL[m
[32m+[m				[32mEND AS "type",[m
[32m+[m				[32m"fields"."RDB$FIELD_LENGTH" AS "max_length",[m
[32m+[m				[32m"rfields"."RDB$DEFAULT_VALUE" AS "default"[m
[32m+[m			[32mFROM "RDB$RELATION_FIELDS" "rfields"[m
[32m+[m				[32mJOIN "RDB$FIELDS" "fields" ON "rfields"."RDB$FIELD_SOURCE" = "fields"."RDB$FIELD_NAME"[m
[32m+[m			[32mWHERE "rfields"."RDB$RELATION_NAME" = '.$this->escape($table).'[m
[32m+[m			[32mORDER BY "rfields"."RDB$FIELD_POSITION"';[m
[32m+[m
[32m+[m		[32mreturn (($query = $this->query($sql)) !== FALSE)[m
[32m+[m			[32m? $query->result_object()[m
[32m+[m			[32m: FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Error[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns an array containing code and message of the last[m
[32m+[m	[32m * database error that has occurred.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function error()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn array('code' => ibase_errcode(), 'message' => ibase_errmsg());[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Update statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific update string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @param	array	$values[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _update($table, $values)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->qb_limit = FALSE;[m
[32m+[m		[32mreturn parent::_update($table, $values);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Truncate statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific truncate string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * If the database does not support the TRUNCATE statement,[m
[32m+[m	[32m * then this method maps to 'DELETE FROM table'[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _truncate($table)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'DELETE FROM '.$table;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Delete statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific delete string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _delete($table)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->qb_limit = FALSE;[m
[32m+[m		[32mreturn parent::_delete($table);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * LIMIT[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific LIMIT clause[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$sql	SQL Query[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _limit($sql)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Limit clause depends on if Interbase or Firebird[m
[32m+[m		[32mif (stripos($this->version(), 'firebird') !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$select = 'FIRST '.$this->qb_limit[m
[32m+[m				[32m.($this->qb_offset ? ' SKIP '.$this->qb_offset : '');[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$select = 'ROWS '[m
[32m+[m				[32m.($this->qb_offset ? $this->qb_offset.' TO '.($this->qb_limit + $this->qb_offset) : $this->qb_limit);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn preg_replace('`SELECT`i', 'SELECT '.$select, $sql, 1);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Insert batch statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific insert string from the supplied data.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table	Table name[m
[32m+[m	[32m * @param	array	$keys	INSERT keys[m
[32m+[m	[32m * @param	array	$values	INSERT values[m
[32m+[m	[32m * @return	string|bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _insert_batch($table, $keys, $values)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn ($this->db_debug) ? $this->display_error('db_unsupported_feature') : FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Close DB Connection[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _close()[m
[32m+[m	[32m{[m
[32m+[m		[32mibase_close($this->conn_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/ibase/ibase_forge.php b/system/database/drivers/ibase/ibase_forge.php[m
[1mnew file mode 100644[m
[1mindex 0000000..77aa4ae[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/ibase/ibase_forge.php[m
[36m@@ -0,0 +1,251 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Interbase/Firebird Forge Class[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_ibase_forge extends CI_DB_forge {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CREATE TABLE IF statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_create_table_if	= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * RENAME TABLE statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_rename_table	= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * DROP TABLE IF statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_drop_table_if	= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * UNSIGNED support[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_unsigned		= array([m
[32m+[m		[32m'SMALLINT'	=> 'INTEGER',[m
[32m+[m		[32m'INTEGER'	=> 'INT64',[m
[32m+[m		[32m'FLOAT'		=> 'DOUBLE PRECISION'[m
[32m+[m	[32m);[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * NULL value representation in CREATE/ALTER TABLE statements[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_null		= 'NULL';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Create database[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$db_name[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function create_database($db_name)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Firebird databases are flat files, so a path is required[m
[32m+[m
[32m+[m		[32m// Hostname is needed for remote access[m
[32m+[m		[32mempty($this->db->hostname) OR $db_name = $this->hostname.':'.$db_name;[m
[32m+[m
[32m+[m		[32mreturn parent::create_database('"'.$db_name.'"');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Drop database[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$db_name	(ignored)[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function drop_database($db_name)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! ibase_drop_db($this->conn_id))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($this->db->db_debug) ? $this->db->display_error('db_unable_to_drop') : FALSE;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! empty($this->db->data_cache['db_names']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$key = array_search(strtolower($this->db->database), array_map('strtolower', $this->db->data_cache['db_names']), TRUE);[m
[32m+[m			[32mif ($key !== FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32munset($this->db->data_cache['db_names'][$key]);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ALTER TABLE[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$alter_type	ALTER type[m
[32m+[m	[32m * @param	string	$table		Table name[m
[32m+[m	[32m * @param	mixed	$field		Column definition[m
[32m+[m	[32m * @return	string|string[][m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _alter_table($alter_type, $table, $field)[m
[32m+[m[41m [m	[32m{[m
[32m+[m		[32mif (in_array($alter_type, array('DROP', 'ADD'), TRUE))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn parent::_alter_table($alter_type, $table, $field);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sql = 'ALTER TABLE '.$this->db->escape_identifiers($table);[m
[32m+[m		[32m$sqls = array();[m
[32m+[m		[32mfor ($i = 0, $c = count($field); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($field[$i]['_literal'] !== FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (isset($field[$i]['type']))[m
[32m+[m			[32m{[m
[32m+[m				[32m$sqls[] = $sql.' ALTER COLUMN '.$this->db->escape_identififers($field[$i]['name'])[m
[32m+[m					[32m.' TYPE '.$field[$i]['type'].$field[$i]['length'];[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif ( ! empty($field[$i]['default']))[m
[32m+[m			[32m{[m
[32m+[m				[32m$sqls[] = $sql.' ALTER COLUMN '.$this->db->escape_identifiers($field[$i]['name'])[m
[32m+[m					[32m.' SET DEFAULT '.$field[$i]['default'];[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (isset($field[$i]['null']))[m
[32m+[m			[32m{[m
[32m+[m				[32m$sqls[] = 'UPDATE "RDB$RELATION_FIELDS" SET "RDB$NULL_FLAG" = '[m
[32m+[m					[32m.($field[$i]['null'] === TRUE ? 'NULL' : '1')[m
[32m+[m					[32m.' WHERE "RDB$FIELD_NAME" = '.$this->db->escape($field[$i]['name'])[m
[32m+[m					[32m.' AND "RDB$RELATION_NAME" = '.$this->db->escape($table);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif ( ! empty($field[$i]['new_name']))[m
[32m+[m			[32m{[m
[32m+[m				[32m$sqls[] = $sql.' ALTER COLUMN '.$this->db->escape_identifiers($field[$i]['name'])[m
[32m+[m					[32m.' TO '.$this->db->escape_identifiers($field[$i]['new_name']);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sqls;[m
[32m+[m[41m [m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Process column[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$field[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _process_column($field)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->db->escape_identifiers($field['name'])[m
[32m+[m			[32m.' '.$field['type'].$field['length'][m
[32m+[m			[32m.$field['null'][m
[32m+[m			[32m.$field['unique'][m
[32m+[m			[32m.$field['default'];[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute TYPE[m
[32m+[m	[32m *[m
[32m+[m	[32m * Performs a data type mapping between different databases.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_type(&$attributes)[m
[32m+[m	[32m{[m
[32m+[m		[32mswitch (strtoupper($attributes['TYPE']))[m
[32m+[m		[32m{[m
[32m+[m			[32mcase 'TINYINT':[m
[32m+[m				[32m$attributes['TYPE'] = 'SMALLINT';[m
[32m+[m				[32m$attributes['UNSIGNED'] = FALSE;[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mcase 'MEDIUMINT':[m
[32m+[m				[32m$attributes['TYPE'] = 'INTEGER';[m
[32m+[m				[32m$attributes['UNSIGNED'] = FALSE;[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mcase 'INT':[m
[32m+[m				[32m$attributes['TYPE'] = 'INTEGER';[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mcase 'BIGINT':[m
[32m+[m				[32m$attributes['TYPE'] = 'INT64';[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mdefault: return;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute AUTO_INCREMENT[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @param	array	&$field[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_auto_increment(&$attributes, &$field)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Not supported[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/ibase/ibase_result.php b/system/database/drivers/ibase/ibase_result.php[m
[1mnew file mode 100644[m
[1mindex 0000000..b548f32[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/ibase/ibase_result.php[m
[36m@@ -0,0 +1,161 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Interbase/Firebird Result Class[m
[32m+[m[32m *[m
[32m+[m[32m * This class extends the parent result class: CI_DB_result[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_ibase_result extends CI_DB_result {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Number of fields in the result set[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function num_fields()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn ibase_num_fields($this->result_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch Field Names[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates an array of column names[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function list_fields()[m
[32m+[m	[32m{[m
[32m+[m		[32m$field_names = array();[m
[32m+[m		[32mfor ($i = 0, $num_fields = $this->num_fields(); $i < $num_fields; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$info = ibase_field_info($this->result_id, $i);[m
[32m+[m			[32m$field_names[] = $info['name'];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $field_names;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field data[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates an array of objects containing field meta-data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function field_data()[m
[32m+[m	[32m{[m
[32m+[m		[32m$retval = array();[m
[32m+[m		[32mfor ($i = 0, $c = $this->num_fields(); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$info = ibase_field_info($this->result_id, $i);[m
[32m+[m
[32m+[m			[32m$retval[$i]			= new stdClass();[m
[32m+[m			[32m$retval[$i]->name		= $info['name'];[m
[32m+[m			[32m$retval[$i]->type		= $info['type'];[m
[32m+[m			[32m$retval[$i]->max_length		= $info['length'];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $retval;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Free the result[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function free_result()[m
[32m+[m	[32m{[m
[32m+[m		[32mibase_free_result($this->result_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Result - associative array[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the result set as an array[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _fetch_assoc()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn ibase_fetch_assoc($this->result_id, IBASE_FETCH_BLOBS);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Result - object[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the result set as an object[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$class_name[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _fetch_object($class_name = 'stdClass')[m
[32m+[m	[32m{[m
[32m+[m		[32m$row = ibase_fetch_object($this->result_id, IBASE_FETCH_BLOBS);[m
[32m+[m
[32m+[m		[32mif ($class_name === 'stdClass' OR ! $row)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $row;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$class_name = new $class_name();[m
[32m+[m		[32mforeach ($row as $key => $value)[m
[32m+[m		[32m{[m
[32m+[m			[32m$class_name->$key = $value;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $class_name;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/ibase/ibase_utility.php b/system/database/drivers/ibase/ibase_utility.php[m
[1mnew file mode 100644[m
[1mindex 0000000..a1e5d69[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/ibase/ibase_utility.php[m
[36m@@ -0,0 +1,69 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Interbase/Firebird Utility Class[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_ibase_utility extends CI_DB_utility {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Export[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$filename[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _backup($filename)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($service = ibase_service_attach($this->db->hostname, $this->db->username, $this->db->password))[m
[32m+[m		[32m{[m
[32m+[m			[32m$res = ibase_backup($service, $this->db->database, $filename.'.fbk');[m
[32m+[m
[32m+[m			[32m// Close the service connection[m
[32m+[m			[32mibase_service_detach($service);[m
[32m+[m			[32mreturn $res;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/ibase/index.html b/system/database/drivers/ibase/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/ibase/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/system/database/drivers/index.html b/system/database/drivers/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/system/database/drivers/mssql/index.html b/system/database/drivers/mssql/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/mssql/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/system/database/drivers/mssql/mssql_driver.php b/system/database/drivers/mssql/mssql_driver.php[m
[1mnew file mode 100644[m
[1mindex 0000000..b2b17d0[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/mssql/mssql_driver.php[m
[36m@@ -0,0 +1,518 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.3.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * MS SQL Database Adapter Class[m
[32m+[m[32m *[m
[32m+[m[32m * Note: _DB is an extender class that the app controller[m
[32m+[m[32m * creates dynamically based on whether the query builder[m
[32m+[m[32m * class is being used or not.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_mssql_driver extends CI_DB {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database driver[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $dbdriver = 'mssql';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ORDER BY random keyword[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_random_keyword = array('NEWID()', 'RAND(%d)');[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Quoted identifier flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * Whether to use SQL-92 standard quoted identifier[m
[32m+[m	[32m * (double quotes) or brackets for identifier escaping.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_quoted_identifier = TRUE;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * Appends the port number to the hostname, if needed.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct($params)[m
[32m+[m	[32m{[m
[32m+[m		[32mparent::__construct($params);[m
[32m+[m
[32m+[m		[32mif ( ! empty($this->port))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->hostname .= (DIRECTORY_SEPARATOR === '\\' ? ',' : ':').$this->port;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Non-persistent database connection[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$persistent[m
[32m+[m	[32m * @return	resource[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function db_connect($persistent = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->conn_id = ($persistent)[m
[32m+[m				[32m? mssql_pconnect($this->hostname, $this->username, $this->password)[m
[32m+[m				[32m: mssql_connect($this->hostname, $this->username, $this->password);[m
[32m+[m
[32m+[m		[32mif ( ! $this->conn_id)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// ----------------------------------------------------------------[m
[32m+[m
[32m+[m		[32m// Select the DB... assuming a database name is specified in the config file[m
[32m+[m		[32mif ($this->database !== '' && ! $this->db_select())[m
[32m+[m		[32m{[m
[32m+[m			[32mlog_message('error', 'Unable to select database: '.$this->database);[m
[32m+[m
[32m+[m			[32mreturn ($this->db_debug === TRUE)[m
[32m+[m				[32m? $this->display_error('db_unable_to_select', $this->database)[m
[32m+[m				[32m: FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Determine how identifiers are escaped[m
[32m+[m		[32m$query = $this->query('SELECT CASE WHEN (@@OPTIONS | 256) = @@OPTIONS THEN 1 ELSE 0 END AS qi');[m
[32m+[m		[32m$query = $query->row_array();[m
[32m+[m		[32m$this->_quoted_identifier = empty($query) ? FALSE : (bool) $query['qi'];[m
[32m+[m		[32m$this->_escape_char = ($this->_quoted_identifier) ? '"' : array('[', ']');[m
[32m+[m
[32m+[m		[32mreturn $this->conn_id;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Select the database[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$database[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function db_select($database = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($database === '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$database = $this->database;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Note: Escaping is required in the event that the DB name[m
[32m+[m		[32m// contains reserved characters.[m
[32m+[m		[32mif (mssql_select_db('['.$database.']', $this->conn_id))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->database = $database;[m
[32m+[m			[32m$this->data_cache = array();[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Execute the query[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$sql	an SQL query[m
[32m+[m	[32m * @return	mixed	resource if rows are returned, bool otherwise[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _execute($sql)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn mssql_query($sql, $this->conn_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Begin Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_begin()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->simple_query('BEGIN TRAN');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Commit Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_commit()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->simple_query('COMMIT TRAN');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Rollback Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_rollback()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->simple_query('ROLLBACK TRAN');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Affected Rows[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function affected_rows()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn mssql_rows_affected($this->conn_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Insert ID[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the last id created in the Identity column.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function insert_id()[m
[32m+[m	[32m{[m
[32m+[m		[32m$query = version_compare($this->version(), '8', '>=')[m
[32m+[m			[32m? 'SELECT SCOPE_IDENTITY() AS last_id'[m
[32m+[m			[32m: 'SELECT @@IDENTITY AS last_id';[m
[32m+[m
[32m+[m		[32m$query = $this->query($query);[m
[32m+[m		[32m$query = $query->row();[m
[32m+[m		[32mreturn $query->last_id;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set client character set[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$charset[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _db_set_charset($charset)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn (ini_set('mssql.charset', $charset) !== FALSE);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Version number query string[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _version()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn "SELECT SERVERPROPERTY('ProductVersion') AS ver";[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List table query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the table names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$prefix_limit[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_tables($prefix_limit = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = 'SELECT '.$this->escape_identifiers('name')[m
[32m+[m			[32m.' FROM '.$this->escape_identifiers('sysobjects')[m
[32m+[m			[32m.' WHERE '.$this->escape_identifiers('type')." = 'U'";[m
[32m+[m
[32m+[m		[32mif ($prefix_limit !== FALSE && $this->dbprefix !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$sql .= ' AND '.$this->escape_identifiers('name')." LIKE '".$this->escape_like_str($this->dbprefix)."%' "[m
[32m+[m				[32m.sprintf($this->_like_escape_str, $this->_like_escape_chr);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql.' ORDER BY '.$this->escape_identifiers('name');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List column query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the column names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_columns($table = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'SELECT COLUMN_NAME[m
[32m+[m			[32mFROM INFORMATION_SCHEMA.Columns[m
[32m+[m			[32mWHERE UPPER(TABLE_NAME) = '.$this->escape(strtoupper($table));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns an object with field data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function field_data($table)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = 'SELECT COLUMN_NAME, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH, NUMERIC_PRECISION, COLUMN_DEFAULT[m
[32m+[m			[32mFROM INFORMATION_SCHEMA.Columns[m
[32m+[m			[32mWHERE UPPER(TABLE_NAME) = '.$this->escape(strtoupper($table));[m
[32m+[m
[32m+[m		[32mif (($query = $this->query($sql)) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m		[32m$query = $query->result_object();[m
[32m+[m
[32m+[m		[32m$retval = array();[m
[32m+[m		[32mfor ($i = 0, $c = count($query); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$retval[$i]			= new stdClass();[m
[32m+[m			[32m$retval[$i]->name		= $query[$i]->COLUMN_NAME;[m
[32m+[m			[32m$retval[$i]->type		= $query[$i]->DATA_TYPE;[m
[32m+[m			[32m$retval[$i]->max_length		= ($query[$i]->CHARACTER_MAXIMUM_LENGTH > 0) ? $query[$i]->CHARACTER_MAXIMUM_LENGTH : $query[$i]->NUMERIC_PRECISION;[m
[32m+[m			[32m$retval[$i]->default		= $query[$i]->COLUMN_DEFAULT;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $retval;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Error[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns an array containing code and message of the last[m
[32m+[m	[32m * database error that has occurred.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function error()[m
[32m+[m	[32m{[m
[32m+[m		[32m// We need this because the error info is discarded by the[m
[32m+[m		[32m// server the first time you request it, and query() already[m
[32m+[m		[32m// calls error() once for logging purposes when a query fails.[m
[32m+[m		[32mstatic $error = array('code' => 0, 'message' => NULL);[m
[32m+[m
[32m+[m		[32m$message = mssql_get_last_message();[m
[32m+[m		[32mif ( ! empty($message))[m
[32m+[m		[32m{[m
[32m+[m			[32m$error['code']    = $this->query('SELECT @@ERROR AS code')->row()->code;[m
[32m+[m			[32m$error['message'] = $message;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $error;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Update statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific update string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @param	array	$values[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _update($table, $values)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->qb_limit = FALSE;[m
[32m+[m		[32m$this->qb_orderby = array();[m
[32m+[m		[32mreturn parent::_update($table, $values);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Truncate statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific truncate string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * If the database does not support the TRUNCATE statement,[m
[32m+[m	[32m * then this method maps to 'DELETE FROM table'[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _truncate($table)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'TRUNCATE TABLE '.$table;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Delete statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific delete string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _delete($table)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->qb_limit)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn 'WITH ci_delete AS (SELECT TOP '.$this->qb_limit.' * FROM '.$table.$this->_compile_wh('qb_where').') DELETE FROM ci_delete';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn parent::_delete($table);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * LIMIT[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific LIMIT clause[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$sql	SQL Query[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _limit($sql)[m
[32m+[m	[32m{[m
[32m+[m		[32m$limit = $this->qb_offset + $this->qb_limit;[m
[32m+[m
[32m+[m		[32m// As of SQL Server 2005 (9.0.*) ROW_NUMBER() is supported,[m
[32m+[m		[32m// however an ORDER BY clause is required for it to work[m
[32m+[m		[32mif (version_compare($this->version(), '9', '>=') && $this->qb_offset && ! empty($this->qb_orderby))[m
[32m+[m		[32m{[m
[32m+[m			[32m$orderby = $this->_compile_order_by();[m
[32m+[m
[32m+[m			[32m// We have to strip the ORDER BY clause[m
[32m+[m			[32m$sql = trim(substr($sql, 0, strrpos($sql, $orderby)));[m
[32m+[m
[32m+[m			[32m// Get the fields to select from our subquery, so that we can avoid CI_rownum appearing in the actual results[m
[32m+[m			[32mif (count($this->qb_select) === 0 OR strpos(implode(',', $this->qb_select), '*') !== FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$select = '*'; // Inevitable[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m// Use only field names and their aliases, everything else is out of our scope.[m
[32m+[m				[32m$select = array();[m
[32m+[m				[32m$field_regexp = ($this->_quoted_identifier)[m
[32m+[m					[32m? '("[^\"]+")' : '(\[[^\]]+\])';[m
[32m+[m				[32mfor ($i = 0, $c = count($this->qb_select); $i < $c; $i++)[m
[32m+[m				[32m{[m
[32m+[m					[32m$select[] = preg_match('/(?:\s|\.)'.$field_regexp.'$/i', $this->qb_select[$i], $m)[m
[32m+[m						[32m? $m[1] : $this->qb_select[$i];[m
[32m+[m				[32m}[m
[32m+[m				[32m$select = implode(', ', $select);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn 'SELECT '.$select." FROM (\n\n"[m
[32m+[m				[32m.preg_replace('/^(SELECT( DISTINCT)?)/i', '\\1 ROW_NUMBER() OVER('.trim($orderby).') AS '.$this->escape_identifiers('CI_rownum').', ', $sql)[m
[32m+[m				[32m."\n\n) ".$this->escape_identifiers('CI_subquery')[m
[32m+[m				[32m."\nWHERE ".$this->escape_identifiers('CI_rownum').' BETWEEN '.($this->qb_offset + 1).' AND '.$limit;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn preg_replace('/(^\SELECT (DISTINCT)?)/i','\\1 TOP '.$limit.' ', $sql);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Insert batch statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific insert string from the supplied data.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table	Table name[m
[32m+[m	[32m * @param	array	$keys	INSERT keys[m
[32m+[m	[32m * @param	array	$values	INSERT values[m
[32m+[m	[32m * @return	string|bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _insert_batch($table, $keys, $values)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Multiple-value inserts are only supported as of SQL Server 2008[m
[32m+[m		[32mif (version_compare($this->version(), '10', '>='))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn parent::_insert_batch($table, $keys, $values);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn ($this->db_debug) ? $this->display_error('db_unsupported_feature') : FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Close DB Connection[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _close()[m
[32m+[m	[32m{[m
[32m+[m		[32mmssql_close($this->conn_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/mssql/mssql_forge.php b/system/database/drivers/mssql/mssql_forge.php[m
[1mnew file mode 100644[m
[1mindex 0000000..9a3e3eb[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/mssql/mssql_forge.php[m
[36m@@ -0,0 +1,151 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.3.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * MS SQL Forge Class[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_mssql_forge extends CI_DB_forge {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CREATE TABLE IF statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_create_table_if	= "IF NOT EXISTS (SELECT * FROM sysobjects WHERE ID = object_id(N'%s') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)\nCREATE TABLE";[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * DROP TABLE IF statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_drop_table_if	= "IF EXISTS (SELECT * FROM sysobjects WHERE ID = object_id(N'%s') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)\nDROP TABLE";[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * UNSIGNED support[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_unsigned		= array([m
[32m+[m		[32m'TINYINT'	=> 'SMALLINT',[m
[32m+[m		[32m'SMALLINT'	=> 'INT',[m
[32m+[m		[32m'INT'		=> 'BIGINT',[m
[32m+[m		[32m'REAL'		=> 'FLOAT'[m
[32m+[m	[32m);[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ALTER TABLE[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$alter_type	ALTER type[m
[32m+[m	[32m * @param	string	$table		Table name[m
[32m+[m	[32m * @param	mixed	$field		Column definition[m
[32m+[m	[32m * @return	string|string[][m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _alter_table($alter_type, $table, $field)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (in_array($alter_type, array('ADD', 'DROP'), TRUE))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn parent::_alter_table($alter_type, $table, $field);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sql = 'ALTER TABLE '.$this->db->escape_identifiers($table).' ALTER COLUMN ';[m
[32m+[m		[32m$sqls = array();[m
[32m+[m		[32mfor ($i = 0, $c = count($field); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$sqls[] = $sql.$this->_process_column($field[$i]);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sqls;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute TYPE[m
[32m+[m	[32m *[m
[32m+[m	[32m * Performs a data type mapping between different databases.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_type(&$attributes)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (isset($attributes['CONSTRAINT']) && strpos($attributes['TYPE'], 'INT') !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32munset($attributes['CONSTRAINT']);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mswitch (strtoupper($attributes['TYPE']))[m
[32m+[m		[32m{[m
[32m+[m			[32mcase 'MEDIUMINT':[m
[32m+[m				[32m$attributes['TYPE'] = 'INTEGER';[m
[32m+[m				[32m$attributes['UNSIGNED'] = FALSE;[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mcase 'INTEGER':[m
[32m+[m				[32m$attributes['TYPE'] = 'INT';[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mdefault: return;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute AUTO_INCREMENT[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @param	array	&$field[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_auto_increment(&$attributes, &$field)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! empty($attributes['AUTO_INCREMENT']) && $attributes['AUTO_INCREMENT'] === TRUE && stripos($field['type'], 'int') !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$field['auto_increment'] = ' IDENTITY(1,1)';[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/mssql/mssql_result.php b/system/database/drivers/mssql/mssql_result.php[m
[1mnew file mode 100644[m
[1mindex 0000000..8e1f416[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/mssql/mssql_result.php[m
[36m@@ -0,0 +1,198 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.3.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * MSSQL Result Class[m
[32m+[m[32m *[m
[32m+[m[32m * This class extends the parent result class: CI_DB_result[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_mssql_result extends CI_DB_result {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Number of rows in the result set[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function num_rows()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn is_int($this->num_rows)[m
[32m+[m			[32m? $this->num_rows[m
[32m+[m			[32m: $this->num_rows = mssql_num_rows($this->result_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Number of fields in the result set[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function num_fields()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn mssql_num_fields($this->result_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch Field Names[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates an array of column names[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function list_fields()[m
[32m+[m	[32m{[m
[32m+[m		[32m$field_names = array();[m
[32m+[m		[32mmssql_field_seek($this->result_id, 0);[m
[32m+[m		[32mwhile ($field = mssql_fetch_field($this->result_id))[m
[32m+[m		[32m{[m
[32m+[m			[32m$field_names[] = $field->name;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $field_names;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field data[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates an array of objects containing field meta-data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function field_data()[m
[32m+[m	[32m{[m
[32m+[m		[32m$retval = array();[m
[32m+[m		[32mfor ($i = 0, $c = $this->num_fields(); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$field = mssql_fetch_field($this->result_id, $i);[m
[32m+[m
[32m+[m			[32m$retval[$i]		= new stdClass();[m
[32m+[m			[32m$retval[$i]->name	= $field->name;[m
[32m+[m			[32m$retval[$i]->type	= $field->type;[m
[32m+[m			[32m$retval[$i]->max_length	= $field->max_length;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $retval;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Free the result[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function free_result()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (is_resource($this->result_id))[m
[32m+[m		[32m{[m
[32m+[m			[32mmssql_free_result($this->result_id);[m
[32m+[m			[32m$this->result_id = FALSE;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Data Seek[m
[32m+[m	[32m *[m
[32m+[m	[32m * Moves the internal pointer to the desired offset. We call[m
[32m+[m	[32m * this internally before fetching results to make sure the[m
[32m+[m	[32m * result set starts at zero.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	$n[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function data_seek($n = 0)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn mssql_data_seek($this->result_id, $n);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Result - associative array[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the result set as an array[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _fetch_assoc()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn mssql_fetch_assoc($this->result_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Result - object[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the result set as an object[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$class_name[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _fetch_object($class_name = 'stdClass')[m
[32m+[m	[32m{[m
[32m+[m		[32m$row = mssql_fetch_object($this->result_id);[m
[32m+[m
[32m+[m		[32mif ($class_name === 'stdClass' OR ! $row)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $row;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$class_name = new $class_name();[m
[32m+[m		[32mforeach ($row as $key => $value)[m
[32m+[m		[32m{[m
[32m+[m			[32m$class_name->$key = $value;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $class_name;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/mssql/mssql_utility.php b/system/database/drivers/mssql/mssql_utility.php[m
[1mnew file mode 100644[m
[1mindex 0000000..90b7107[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/mssql/mssql_utility.php[m
[36m@@ -0,0 +1,77 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.3.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * MS SQL Utility Class[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_mssql_utility extends CI_DB_utility {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List databases statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_list_databases	= 'EXEC sp_helpdb'; // Can also be: EXEC sp_databases[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * OPTIMIZE TABLE statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_optimize_table	= 'ALTER INDEX all ON %s REORGANIZE';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Export[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params	Preferences[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _backup($params = array())[m
[32m+[m	[32m{[m
[32m+[m		[32m// Currently unsupported[m
[32m+[m		[32mreturn $this->db->display_error('db_unsupported_feature');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/mysql/index.html b/system/database/drivers/mysql/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/mysql/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/system/database/drivers/mysql/mysql_driver.php b/system/database/drivers/mysql/mysql_driver.php[m
[1mnew file mode 100644[m
[1mindex 0000000..05a3283[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/mysql/mysql_driver.php[m
[36m@@ -0,0 +1,494 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * MySQL Database Adapter Class[m
[32m+[m[32m *[m
[32m+[m[32m * Note: _DB is an extender class that the app controller[m
[32m+[m[32m * creates dynamically based on whether the query builder[m
[32m+[m[32m * class is being used or not.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_mysql_driver extends CI_DB {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database driver[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $dbdriver = 'mysql';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Compression flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $compress = FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * DELETE hack flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * Whether to use the MySQL "delete hack" which allows the number[m
[32m+[m	[32m * of affected rows to be shown. Uses a preg_replace when enabled,[m
[32m+[m	[32m * adding a bit more processing to all queries.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $delete_hack = TRUE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Strict ON flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * Whether we're running in strict SQL mode.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $stricton;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Identifier escape character[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_escape_char = '`';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct($params)[m
[32m+[m	[32m{[m
[32m+[m		[32mparent::__construct($params);[m
[32m+[m
[32m+[m		[32mif ( ! empty($this->port))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->hostname .= ':'.$this->port;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Non-persistent database connection[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$persistent[m
[32m+[m	[32m * @return	resource[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function db_connect($persistent = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$client_flags = ($this->compress === FALSE) ? 0 : MYSQL_CLIENT_COMPRESS;[m
[32m+[m
[32m+[m		[32mif ($this->encrypt === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$client_flags = $client_flags | MYSQL_CLIENT_SSL;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Error suppression is necessary mostly due to PHP 5.5+ issuing E_DEPRECATED messages[m
[32m+[m		[32m$this->conn_id = ($persistent === TRUE)[m
[32m+[m			[32m? mysql_pconnect($this->hostname, $this->username, $this->password, $client_flags)[m
[32m+[m			[32m: mysql_connect($this->hostname, $this->username, $this->password, TRUE, $client_flags);[m
[32m+[m
[32m+[m		[32m// ----------------------------------------------------------------[m
[32m+[m
[32m+[m		[32m// Select the DB... assuming a database name is specified in the config file[m
[32m+[m		[32mif ($this->database !== '' && ! $this->db_select())[m
[32m+[m		[32m{[m
[32m+[m			[32mlog_message('error', 'Unable to select database: '.$this->database);[m
[32m+[m
[32m+[m			[32mreturn ($this->db_debug === TRUE)[m
[32m+[m				[32m? $this->display_error('db_unable_to_select', $this->database)[m
[32m+[m				[32m: FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (isset($this->stricton) && is_resource($this->conn_id))[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($this->stricton)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->simple_query('SET SESSION sql_mode = CONCAT(@@sql_mode, ",", "STRICT_ALL_TABLES")');[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->simple_query([m
[32m+[m					[32m'SET SESSION sql_mode =[m
[32m+[m					[32mREPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE([m
[32m+[m					[32m@@sql_mode,[m
[32m+[m					[32m"STRICT_ALL_TABLES,", ""),[m
[32m+[m					[32m",STRICT_ALL_TABLES", ""),[m
[32m+[m					[32m"STRICT_ALL_TABLES", ""),[m
[32m+[m					[32m"STRICT_TRANS_TABLES,", ""),[m
[32m+[m					[32m",STRICT_TRANS_TABLES", ""),[m
[32m+[m					[32m"STRICT_TRANS_TABLES", "")'[m
[32m+[m				[32m);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->conn_id;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Reconnect[m
[32m+[m	[32m *[m
[32m+[m	[32m * Keep / reestablish the db connection if no queries have been[m
[32m+[m	[32m * sent for a length of time exceeding the server's idle timeout[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function reconnect()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (mysql_ping($this->conn_id) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->conn_id = FALSE;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Select the database[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$database[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function db_select($database = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($database === '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$database = $this->database;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (mysql_select_db($database, $this->conn_id))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->database = $database;[m
[32m+[m			[32m$this->data_cache = array();[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set client character set[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$charset[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _db_set_charset($charset)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn mysql_set_charset($charset, $this->conn_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database version number[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function version()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (isset($this->data_cache['version']))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->data_cache['version'];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! $this->conn_id OR ($version = mysql_get_server_info($this->conn_id)) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->data_cache['version'] = $version;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Execute the query[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$sql	an SQL query[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _execute($sql)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn mysql_query($this->_prep_query($sql), $this->conn_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Prep the query[m
[32m+[m	[32m *[m
[32m+[m	[32m * If needed, each database adapter can prep the query string[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$sql	an SQL query[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _prep_query($sql)[m
[32m+[m	[32m{[m
[32m+[m		[32m// mysql_affected_rows() returns 0 for "DELETE FROM TABLE" queries. This hack[m
[32m+[m		[32m// modifies the query so that it a proper number of affected rows is returned.[m
[32m+[m		[32mif ($this->delete_hack === TRUE && preg_match('/^\s*DELETE\s+FROM\s+(\S+)\s*$/i', $sql))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn trim($sql).' WHERE 1=1';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Begin Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_begin()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->simple_query('SET AUTOCOMMIT=0');[m
[32m+[m		[32mreturn $this->simple_query('START TRANSACTION'); // can also be BEGIN or BEGIN WORK[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Commit Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_commit()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->simple_query('COMMIT'))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->simple_query('SET AUTOCOMMIT=1');[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Rollback Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_rollback()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->simple_query('ROLLBACK'))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->simple_query('SET AUTOCOMMIT=1');[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Platform-dependent string escape[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _escape_str($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn mysql_real_escape_string($str, $this->conn_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Affected Rows[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function affected_rows()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn mysql_affected_rows($this->conn_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Insert ID[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function insert_id()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn mysql_insert_id($this->conn_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List table query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the table names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$prefix_limit[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_tables($prefix_limit = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = 'SHOW TABLES FROM '.$this->escape_identifiers($this->database);[m
[32m+[m
[32m+[m		[32mif ($prefix_limit !== FALSE && $this->dbprefix !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $sql." LIKE '".$this->escape_like_str($this->dbprefix)."%'";[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show column query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the column names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_columns($table = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'SHOW COLUMNS FROM '.$this->protect_identifiers($table, TRUE, NULL, FALSE);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns an object with field data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function field_data($table)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (($query = $this->query('SHOW COLUMNS FROM '.$this->protect_identifiers($table, TRUE, NULL, FALSE))) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m		[32m$query = $query->result_object();[m
[32m+[m
[32m+[m		[32m$retval = array();[m
[32m+[m		[32mfor ($i = 0, $c = count($query); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$retval[$i]			= new stdClass();[m
[32m+[m			[32m$retval[$i]->name		= $query[$i]->Field;[m
[32m+[m
[32m+[m			[32msscanf($query[$i]->Type, '%[a-z](%d)',[m
[32m+[m				[32m$retval[$i]->type,[m
[32m+[m				[32m$retval[$i]->max_length[m
[32m+[m			[32m);[m
[32m+[m
[32m+[m			[32m$retval[$i]->default		= $query[$i]->Default;[m
[32m+[m			[32m$retval[$i]->primary_key	= (int) ($query[$i]->Key === 'PRI');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $retval;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Error[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns an array containing code and message of the last[m
[32m+[m	[32m * database error that has occurred.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function error()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn array('code' => mysql_errno($this->conn_id), 'message' => mysql_error($this->conn_id));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * FROM tables[m
[32m+[m	[32m *[m
[32m+[m	[32m * Groups tables in FROM clauses if needed, so there is no confusion[m
[32m+[m	[32m * about operator precedence.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _from_tables()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! empty($this->qb_join) && count($this->qb_from) > 1)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn '('.implode(', ', $this->qb_from).')';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn implode(', ', $this->qb_from);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Close DB Connection[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _close()[m
[32m+[m	[32m{[m
[32m+[m		[32m// Error suppression to avoid annoying E_WARNINGs in cases[m
[32m+[m		[32m// where the connection has already been closed for some reason.[m
[32m+[m		[32m@mysql_close($this->conn_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/mysql/mysql_forge.php b/system/database/drivers/mysql/mysql_forge.php[m
[1mnew file mode 100644[m
[1mindex 0000000..f8a998b[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/mysql/mysql_forge.php[m
[36m@@ -0,0 +1,243 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * MySQL Forge Class[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_mysql_forge extends CI_DB_forge {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CREATE DATABASE statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_create_database	= 'CREATE DATABASE %s CHARACTER SET %s COLLATE %s';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CREATE TABLE keys flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * Whether table keys are created from within the[m
[32m+[m	[32m * CREATE TABLE statement.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_create_table_keys	= TRUE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * UNSIGNED support[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_unsigned		= array([m
[32m+[m		[32m'TINYINT',[m
[32m+[m		[32m'SMALLINT',[m
[32m+[m		[32m'MEDIUMINT',[m
[32m+[m		[32m'INT',[m
[32m+[m		[32m'INTEGER',[m
[32m+[m		[32m'BIGINT',[m
[32m+[m		[32m'REAL',[m
[32m+[m		[32m'DOUBLE',[m
[32m+[m		[32m'DOUBLE PRECISION',[m
[32m+[m		[32m'FLOAT',[m
[32m+[m		[32m'DECIMAL',[m
[32m+[m		[32m'NUMERIC'[m
[32m+[m	[32m);[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * NULL value representation in CREATE/ALTER TABLE statements[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_null = 'NULL';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CREATE TABLE attributes[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$attributes	Associative array of table attributes[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _create_table_attr($attributes)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = '';[m
[32m+[m
[32m+[m		[32mforeach (array_keys($attributes) as $key)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (is_string($key))[m
[32m+[m			[32m{[m
[32m+[m				[32m$sql .= ' '.strtoupper($key).' = '.$attributes[$key];[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! empty($this->db->char_set) && ! strpos($sql, 'CHARACTER SET') && ! strpos($sql, 'CHARSET'))[m
[32m+[m		[32m{[m
[32m+[m			[32m$sql .= ' DEFAULT CHARACTER SET = '.$this->db->char_set;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! empty($this->db->dbcollat) && ! strpos($sql, 'COLLATE'))[m
[32m+[m		[32m{[m
[32m+[m			[32m$sql .= ' COLLATE = '.$this->db->dbcollat;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ALTER TABLE[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$alter_type	ALTER type[m
[32m+[m	[32m * @param	string	$table		Table name[m
[32m+[m	[32m * @param	mixed	$field		Column definition[m
[32m+[m	[32m * @return	string|string[][m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _alter_table($alter_type, $table, $field)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($alter_type === 'DROP')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn parent::_alter_table($alter_type, $table, $field);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sql = 'ALTER TABLE '.$this->db->escape_identifiers($table);[m
[32m+[m		[32mfor ($i = 0, $c = count($field); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($field[$i]['_literal'] !== FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$field[$i] = ($alter_type === 'ADD')[m
[32m+[m						[32m? "\n\tADD ".$field[$i]['_literal'][m
[32m+[m						[32m: "\n\tMODIFY ".$field[$i]['_literal'];[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32mif ($alter_type === 'ADD')[m
[32m+[m				[32m{[m
[32m+[m					[32m$field[$i]['_literal'] = "\n\tADD ";[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32m$field[$i]['_literal'] = empty($field[$i]['new_name']) ? "\n\tMODIFY " : "\n\tCHANGE ";[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m$field[$i] = $field[$i]['_literal'].$this->_process_column($field[$i]);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn array($sql.implode(',', $field));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Process column[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$field[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _process_column($field)[m
[32m+[m	[32m{[m
[32m+[m		[32m$extra_clause = isset($field['after'])[m
[32m+[m			[32m? ' AFTER '.$this->db->escape_identifiers($field['after']) : '';[m
[32m+[m
[32m+[m		[32mif (empty($extra_clause) && isset($field['first']) && $field['first'] === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$extra_clause = ' FIRST';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m
[32m+[m		[32mreturn $this->db->escape_identifiers($field['name'])[m
[32m+[m			[32m.(empty($field['new_name']) ? '' : ' '.$this->db->escape_identifiers($field['new_name']))[m
[32m+[m			[32m.' '.$field['type'].$field['length'][m
[32m+[m			[32m.$field['unsigned'][m
[32m+[m			[32m.$field['null'][m
[32m+[m			[32m.$field['default'][m
[32m+[m			[32m.$field['auto_increment'][m
[32m+[m			[32m.$field['unique'][m
[32m+[m			[32m.(empty($field['comment']) ? '' : ' COMMENT '.$field['comment'])[m
[32m+[m			[32m.$extra_clause;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Process indexes[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table	(ignored)[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _process_indexes($table)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = '';[m
[32m+[m
[32m+[m		[32mfor ($i = 0, $c = count($this->keys); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (is_array($this->keys[$i]))[m
[32m+[m			[32m{[m
[32m+[m				[32mfor ($i2 = 0, $c2 = count($this->keys[$i]); $i2 < $c2; $i2++)[m
[32m+[m				[32m{[m
[32m+[m					[32mif ( ! isset($this->fields[$this->keys[$i][$i2]]))[m
[32m+[m					[32m{[m
[32m+[m						[32munset($this->keys[$i][$i2]);[m
[32m+[m						[32mcontinue;[m
[32m+[m					[32m}[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m			[32melseif ( ! isset($this->fields[$this->keys[$i]]))[m
[32m+[m			[32m{[m
[32m+[m				[32munset($this->keys[$i]);[m
[32m+[m				[32mcontinue;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mis_array($this->keys[$i]) OR $this->keys[$i] = array($this->keys[$i]);[m
[32m+[m
[32m+[m			[32m$sql .= ",\n\tKEY ".$this->db->escape_identifiers(implode('_', $this->keys[$i]))[m
[32m+[m				[32m.' ('.implode(', ', $this->db->escape_identifiers($this->keys[$i])).')';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->keys = array();[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/mysql/mysql_result.php b/system/database/drivers/mysql/mysql_result.php[m
[1mnew file mode 100644[m
[1mindex 0000000..07d5187[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/mysql/mysql_result.php[m
[36m@@ -0,0 +1,199 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * MySQL Result Class[m
[32m+[m[32m *[m
[32m+[m[32m * This class extends the parent result class: CI_DB_result[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_mysql_result extends CI_DB_result {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	object	&$driver_object[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct(&$driver_object)[m
[32m+[m	[32m{[m
[32m+[m		[32mparent::__construct($driver_object);[m
[32m+[m
[32m+[m		[32m// Required, due to mysql_data_seek() causing nightmares[m
[32m+[m		[32m// with empty result sets[m
[32m+[m		[32m$this->num_rows = mysql_num_rows($this->result_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Number of rows in the result set[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function num_rows()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->num_rows;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Number of fields in the result set[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function num_fields()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn mysql_num_fields($this->result_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch Field Names[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates an array of column names[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function list_fields()[m
[32m+[m	[32m{[m
[32m+[m		[32m$field_names = array();[m
[32m+[m		[32mmysql_field_seek($this->result_id, 0);[m
[32m+[m		[32mwhile ($field = mysql_fetch_field($this->result_id))[m
[32m+[m		[32m{[m
[32m+[m			[32m$field_names[] = $field->name;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $field_names;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field data[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates an array of objects containing field meta-data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function field_data()[m
[32m+[m	[32m{[m
[32m+[m		[32m$retval = array();[m
[32m+[m		[32mfor ($i = 0, $c = $this->num_fields(); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$retval[$i]			= new stdClass();[m
[32m+[m			[32m$retval[$i]->name		= mysql_field_name($this->result_id, $i);[m
[32m+[m			[32m$retval[$i]->type		= mysql_field_type($this->result_id, $i);[m
[32m+[m			[32m$retval[$i]->max_length		= mysql_field_len($this->result_id, $i);[m
[32m+[m			[32m$retval[$i]->primary_key	= (int) (strpos(mysql_field_flags($this->result_id, $i), 'primary_key') !== FALSE);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $retval;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Free the result[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function free_result()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (is_resource($this->result_id))[m
[32m+[m		[32m{[m
[32m+[m			[32mmysql_free_result($this->result_id);[m
[32m+[m			[32m$this->result_id = FALSE;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Data Seek[m
[32m+[m	[32m *[m
[32m+[m	[32m * Moves the internal pointer to the desired offset. We call[m
[32m+[m	[32m * this internally before fetching results to make sure the[m
[32m+[m	[32m * result set starts at zero.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	$n[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function data_seek($n = 0)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->num_rows[m
[32m+[m			[32m? mysql_data_seek($this->result_id, $n)[m
[32m+[m			[32m: FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Result - associative array[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the result set as an array[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _fetch_assoc()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn mysql_fetch_assoc($this->result_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Result - object[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the result set as an object[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$class_name[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _fetch_object($class_name = 'stdClass')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn mysql_fetch_object($this->result_id, $class_name);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/mysql/mysql_utility.php b/system/database/drivers/mysql/mysql_utility.php[m
[1mnew file mode 100644[m
[1mindex 0000000..ae3c26c[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/mysql/mysql_utility.php[m
[36m@@ -0,0 +1,211 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * MySQL Utility Class[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_mysql_utility extends CI_DB_utility {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List databases statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_list_databases	= 'SHOW DATABASES';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * OPTIMIZE TABLE statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_optimize_table	= 'OPTIMIZE TABLE %s';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * REPAIR TABLE statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_repair_table	= 'REPAIR TABLE %s';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Export[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params	Preferences[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _backup($params = array())[m
[32m+[m	[32m{[m
[32m+[m		[32mif (count($params) === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Extract the prefs for simplicity[m
[32m+[m		[32mextract($params);[m
[32m+[m
[32m+[m		[32m// Build the output[m
[32m+[m		[32m$output = '';[m
[32m+[m
[32m+[m		[32m// Do we need to include a statement to disable foreign key checks?[m
[32m+[m		[32mif ($foreign_key_checks === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$output .= 'SET foreign_key_checks = 0;'.$newline;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mforeach ( (array) $tables as $table)[m
[32m+[m		[32m{[m
[32m+[m			[32m// Is the table in the "ignore" list?[m
[32m+[m			[32mif (in_array($table, (array) $ignore, TRUE))[m
[32m+[m			[32m{[m
[32m+[m				[32mcontinue;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// Get the table schema[m
[32m+[m			[32m$query = $this->db->query('SHOW CREATE TABLE '.$this->db->escape_identifiers($this->db->database.'.'.$table));[m
[32m+[m
[32m+[m			[32m// No result means the table name was invalid[m
[32m+[m			[32mif ($query === FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32mcontinue;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// Write out the table schema[m
[32m+[m			[32m$output .= '#'.$newline.'# TABLE STRUCTURE FOR: '.$table.$newline.'#'.$newline.$newline;[m
[32m+[m
[32m+[m			[32mif ($add_drop === TRUE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$output .= 'DROP TABLE IF EXISTS '.$this->db->protect_identifiers($table).';'.$newline.$newline;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$i = 0;[m
[32m+[m			[32m$result = $query->result_array();[m
[32m+[m			[32mforeach ($result[0] as $val)[m
[32m+[m			[32m{[m
[32m+[m				[32mif ($i++ % 2)[m
[32m+[m				[32m{[m
[32m+[m					[32m$output .= $val.';'.$newline.$newline;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// If inserts are not needed we're done...[m
[32m+[m			[32mif ($add_insert === FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32mcontinue;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// Grab all the data from the current table[m
[32m+[m			[32m$query = $this->db->query('SELECT * FROM '.$this->db->protect_identifiers($table));[m
[32m+[m
[32m+[m			[32mif ($query->num_rows() === 0)[m
[32m+[m			[32m{[m
[32m+[m				[32mcontinue;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// Fetch the field names and determine if the field is an[m
[32m+[m			[32m// integer type. We use this info to decide whether to[m
[32m+[m			[32m// surround the data with quotes or not[m
[32m+[m
[32m+[m			[32m$i = 0;[m
[32m+[m			[32m$field_str = '';[m
[32m+[m			[32m$is_int = array();[m
[32m+[m			[32mwhile ($field = mysql_fetch_field($query->result_id))[m
[32m+[m			[32m{[m
[32m+[m				[32m// Most versions of MySQL store timestamp as a string[m
[32m+[m				[32m$is_int[$i] = in_array(strtolower(mysql_field_type($query->result_id, $i)),[m
[32m+[m							[32marray('tinyint', 'smallint', 'mediumint', 'int', 'bigint'), //, 'timestamp'),[m
[32m+[m							[32mTRUE);[m
[32m+[m
[32m+[m				[32m// Create a string of field names[m
[32m+[m				[32m$field_str .= $this->db->escape_identifiers($field->name).', ';[m
[32m+[m				[32m$i++;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// Trim off the end comma[m
[32m+[m			[32m$field_str = preg_replace('/, $/' , '', $field_str);[m
[32m+[m
[32m+[m			[32m// Build the insert string[m
[32m+[m			[32mforeach ($query->result_array() as $row)[m
[32m+[m			[32m{[m
[32m+[m				[32m$val_str = '';[m
[32m+[m
[32m+[m				[32m$i = 0;[m
[32m+[m				[32mforeach ($row as $v)[m
[32m+[m				[32m{[m
[32m+[m					[32m// Is the value NULL?[m
[32m+[m					[32mif ($v === NULL)[m
[32m+[m					[32m{[m
[32m+[m						[32m$val_str .= 'NULL';[m
[32m+[m					[32m}[m
[32m+[m					[32melse[m
[32m+[m					[32m{[m
[32m+[m						[32m// Escape the data if it's not an integer[m
[32m+[m						[32m$val_str .= ($is_int[$i] === FALSE) ? $this->db->escape($v) : $v;[m
[32m+[m					[32m}[m
[32m+[m
[32m+[m					[32m// Append a comma[m
[32m+[m					[32m$val_str .= ', ';[m
[32m+[m					[32m$i++;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m// Remove the comma at the end of the string[m
[32m+[m				[32m$val_str = preg_replace('/, $/' , '', $val_str);[m
[32m+[m
[32m+[m				[32m// Build the INSERT string[m
[32m+[m				[32m$output .= 'INSERT INTO '.$this->db->protect_identifiers($table).' ('.$field_str.') VALUES ('.$val_str.');'.$newline;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$output .= $newline.$newline;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Do we need to include a statement to re-enable foreign key checks?[m
[32m+[m		[32mif ($foreign_key_checks === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$output .= 'SET foreign_key_checks = 1;'.$newline;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $output;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/mysqli/index.html b/system/database/drivers/mysqli/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/mysqli/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/system/database/drivers/mysqli/mysqli_driver.php b/system/database/drivers/mysqli/mysqli_driver.php[m
[1mnew file mode 100644[m
[1mindex 0000000..7cec29e[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/mysqli/mysqli_driver.php[m
[36m@@ -0,0 +1,544 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.3.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * MySQLi Database Adapter Class[m
[32m+[m[32m *[m
[32m+[m[32m * Note: _DB is an extender class that the app controller[m
[32m+[m[32m * creates dynamically based on whether the query builder[m
[32m+[m[32m * class is being used or not.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_mysqli_driver extends CI_DB {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database driver[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $dbdriver = 'mysqli';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Compression flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $compress = FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * DELETE hack flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * Whether to use the MySQL "delete hack" which allows the number[m
[32m+[m	[32m * of affected rows to be shown. Uses a preg_replace when enabled,[m
[32m+[m	[32m * adding a bit more processing to all queries.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $delete_hack = TRUE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Strict ON flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * Whether we're running in strict SQL mode.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $stricton;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Identifier escape character[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_escape_char = '`';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * MySQLi object[m
[32m+[m	[32m *[m
[32m+[m	[32m * Has to be preserved without being assigned to $conn_id.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	MySQLi[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_mysqli;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database connection[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$persistent[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function db_connect($persistent = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Do we have a socket path?[m
[32m+[m		[32mif ($this->hostname[0] === '/')[m
[32m+[m		[32m{[m
[32m+[m			[32m$hostname = NULL;[m
[32m+[m			[32m$port = NULL;[m
[32m+[m			[32m$socket = $this->hostname;[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$hostname = ($persistent === TRUE)[m
[32m+[m				[32m? 'p:'.$this->hostname : $this->hostname;[m
[32m+[m			[32m$port = empty($this->port) ? NULL : $this->port;[m
[32m+[m			[32m$socket = NULL;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$client_flags = ($this->compress === TRUE) ? MYSQLI_CLIENT_COMPRESS : 0;[m
[32m+[m		[32m$this->_mysqli = mysqli_init();[m
[32m+[m
[32m+[m		[32m$this->_mysqli->options(MYSQLI_OPT_CONNECT_TIMEOUT, 10);[m
[32m+[m
[32m+[m		[32mif (isset($this->stricton))[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($this->stricton)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_mysqli->options(MYSQLI_INIT_COMMAND, 'SET SESSION sql_mode = CONCAT(@@sql_mode, ",", "STRICT_ALL_TABLES")');[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_mysqli->options(MYSQLI_INIT_COMMAND,[m
[32m+[m					[32m'SET SESSION sql_mode =[m
[32m+[m					[32mREPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE([m
[32m+[m					[32m@@sql_mode,[m
[32m+[m					[32m"STRICT_ALL_TABLES,", ""),[m
[32m+[m					[32m",STRICT_ALL_TABLES", ""),[m
[32m+[m					[32m"STRICT_ALL_TABLES", ""),[m
[32m+[m					[32m"STRICT_TRANS_TABLES,", ""),[m
[32m+[m					[32m",STRICT_TRANS_TABLES", ""),[m
[32m+[m					[32m"STRICT_TRANS_TABLES", "")'[m
[32m+[m				[32m);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (is_array($this->encrypt))[m
[32m+[m		[32m{[m
[32m+[m			[32m$ssl = array();[m
[32m+[m			[32mempty($this->encrypt['ssl_key'])    OR $ssl['key']    = $this->encrypt['ssl_key'];[m
[32m+[m			[32mempty($this->encrypt['ssl_cert'])   OR $ssl['cert']   = $this->encrypt['ssl_cert'];[m
[32m+[m			[32mempty($this->encrypt['ssl_ca'])     OR $ssl['ca']     = $this->encrypt['ssl_ca'];[m
[32m+[m			[32mempty($this->encrypt['ssl_capath']) OR $ssl['capath'] = $this->encrypt['ssl_capath'];[m
[32m+[m			[32mempty($this->encrypt['ssl_cipher']) OR $ssl['cipher'] = $this->encrypt['ssl_cipher'];[m
[32m+[m
[32m+[m			[32mif ( ! empty($ssl))[m
[32m+[m			[32m{[m
[32m+[m				[32mif (isset($this->encrypt['ssl_verify']))[m
[32m+[m				[32m{[m
[32m+[m					[32mif ($this->encrypt['ssl_verify'])[m
[32m+[m					[32m{[m
[32m+[m						[32mdefined('MYSQLI_OPT_SSL_VERIFY_SERVER_CERT') && $this->_mysqli->options(MYSQLI_OPT_SSL_VERIFY_SERVER_CERT, TRUE);[m
[32m+[m					[32m}[m
[32m+[m					[32m// Apparently (when it exists), setting MYSQLI_OPT_SSL_VERIFY_SERVER_CERT[m
[32m+[m					[32m// to FALSE didn't do anything, so PHP 5.6.16 introduced yet another[m
[32m+[m					[32m// constant ...[m
[32m+[m					[32m//[m
[32m+[m					[32m// https://secure.php.net/ChangeLog-5.php#5.6.16[m
[32m+[m					[32m// https://bugs.php.net/bug.php?id=68344[m
[32m+[m					[32melseif (defined('MYSQLI_CLIENT_SSL_DONT_VERIFY_SERVER_CERT'))[m
[32m+[m					[32m{[m
[32m+[m						[32m$client_flags |= MYSQLI_CLIENT_SSL_DONT_VERIFY_SERVER_CERT;[m
[32m+[m					[32m}[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m$client_flags |= MYSQLI_CLIENT_SSL;[m
[32m+[m				[32m$this->_mysqli->ssl_set([m
[32m+[m					[32misset($ssl['key'])    ? $ssl['key']    : NULL,[m
[32m+[m					[32misset($ssl['cert'])   ? $ssl['cert']   : NULL,[m
[32m+[m					[32misset($ssl['ca'])     ? $ssl['ca']     : NULL,[m
[32m+[m					[32misset($ssl['capath']) ? $ssl['capath'] : NULL,[m
[32m+[m					[32misset($ssl['cipher']) ? $ssl['cipher'] : NULL[m
[32m+[m				[32m);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($this->_mysqli->real_connect($hostname, $this->username, $this->password, $this->database, $port, $socket, $client_flags))[m
[32m+[m		[32m{[m
[32m+[m			[32m// Prior to version 5.7.3, MySQL silently downgrades to an unencrypted connection if SSL setup fails[m
[32m+[m			[32mif ([m
[32m+[m				[32m($client_flags & MYSQLI_CLIENT_SSL)[m
[32m+[m				[32m&& version_compare($this->_mysqli->client_info, '5.7.3', '<=')[m
[32m+[m				[32m&& empty($this->_mysqli->query("SHOW STATUS LIKE 'ssl_cipher'")->fetch_object()->Value)[m
[32m+[m			[32m)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_mysqli->close();[m
[32m+[m				[32m$message = 'MySQLi was configured for an SSL connection, but got an unencrypted connection instead!';[m
[32m+[m				[32mlog_message('error', $message);[m
[32m+[m				[32mreturn ($this->db_debug) ? $this->display_error($message, '', TRUE) : FALSE;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn $this->_mysqli;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Reconnect[m
[32m+[m	[32m *[m
[32m+[m	[32m * Keep / reestablish the db connection if no queries have been[m
[32m+[m	[32m * sent for a length of time exceeding the server's idle timeout[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function reconnect()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->conn_id !== FALSE && $this->conn_id->ping() === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->conn_id = FALSE;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Select the database[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$database[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function db_select($database = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($database === '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$database = $this->database;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($this->conn_id->select_db($database))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->database = $database;[m
[32m+[m			[32m$this->data_cache = array();[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set client character set[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$charset[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _db_set_charset($charset)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->conn_id->set_charset($charset);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database version number[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function version()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (isset($this->data_cache['version']))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->data_cache['version'];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->data_cache['version'] = $this->conn_id->server_info;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Execute the query[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$sql	an SQL query[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _execute($sql)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->conn_id->query($this->_prep_query($sql));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Prep the query[m
[32m+[m	[32m *[m
[32m+[m	[32m * If needed, each database adapter can prep the query string[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$sql	an SQL query[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _prep_query($sql)[m
[32m+[m	[32m{[m
[32m+[m		[32m// mysqli_affected_rows() returns 0 for "DELETE FROM TABLE" queries. This hack[m
[32m+[m		[32m// modifies the query so that it a proper number of affected rows is returned.[m
[32m+[m		[32mif ($this->delete_hack === TRUE && preg_match('/^\s*DELETE\s+FROM\s+(\S+)\s*$/i', $sql))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn trim($sql).' WHERE 1=1';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Begin Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_begin()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->conn_id->autocommit(FALSE);[m
[32m+[m		[32mreturn is_php('5.5')[m
[32m+[m			[32m? $this->conn_id->begin_transaction()[m
[32m+[m			[32m: $this->simple_query('START TRANSACTION'); // can also be BEGIN or BEGIN WORK[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Commit Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_commit()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->conn_id->commit())[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->conn_id->autocommit(TRUE);[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Rollback Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_rollback()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->conn_id->rollback())[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->conn_id->autocommit(TRUE);[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Platform-dependent string escape[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _escape_str($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->conn_id->real_escape_string($str);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Affected Rows[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function affected_rows()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->conn_id->affected_rows;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Insert ID[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function insert_id()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->conn_id->insert_id;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List table query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the table names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$prefix_limit[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_tables($prefix_limit = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = 'SHOW TABLES FROM '.$this->escape_identifiers($this->database);[m
[32m+[m
[32m+[m		[32mif ($prefix_limit !== FALSE && $this->dbprefix !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $sql." LIKE '".$this->escape_like_str($this->dbprefix)."%'";[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show column query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the column names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_columns($table = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'SHOW COLUMNS FROM '.$this->protect_identifiers($table, TRUE, NULL, FALSE);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns an object with field data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function field_data($table)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (($query = $this->query('SHOW COLUMNS FROM '.$this->protect_identifiers($table, TRUE, NULL, FALSE))) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m		[32m$query = $query->result_object();[m
[32m+[m
[32m+[m		[32m$retval = array();[m
[32m+[m		[32mfor ($i = 0, $c = count($query); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$retval[$i]			= new stdClass();[m
[32m+[m			[32m$retval[$i]->name		= $query[$i]->Field;[m
[32m+[m
[32m+[m			[32msscanf($query[$i]->Type, '%[a-z](%d)',[m
[32m+[m				[32m$retval[$i]->type,[m
[32m+[m				[32m$retval[$i]->max_length[m
[32m+[m			[32m);[m
[32m+[m
[32m+[m			[32m$retval[$i]->default		= $query[$i]->Default;[m
[32m+[m			[32m$retval[$i]->primary_key	= (int) ($query[$i]->Key === 'PRI');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $retval;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Error[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns an array containing code and message of the last[m
[32m+[m	[32m * database error that has occurred.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function error()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! empty($this->_mysqli->connect_errno))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn array([m
[32m+[m				[32m'code'    => $this->_mysqli->connect_errno,[m
[32m+[m				[32m'message' => $this->_mysqli->connect_error[m
[32m+[m			[32m);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn array('code' => $this->conn_id->errno, 'message' => $this->conn_id->error);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * FROM tables[m
[32m+[m	[32m *[m
[32m+[m	[32m * Groups tables in FROM clauses if needed, so there is no confusion[m
[32m+[m	[32m * about operator precedence.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _from_tables()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! empty($this->qb_join) && count($this->qb_from) > 1)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn '('.implode(', ', $this->qb_from).')';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn implode(', ', $this->qb_from);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Close DB Connection[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _close()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->conn_id->close();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/mysqli/mysqli_forge.php b/system/database/drivers/mysqli/mysqli_forge.php[m
[1mnew file mode 100644[m
[1mindex 0000000..dd77edc[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/mysqli/mysqli_forge.php[m
[36m@@ -0,0 +1,244 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.3.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * MySQLi Forge Class[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_mysqli_forge extends CI_DB_forge {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CREATE DATABASE statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_create_database	= 'CREATE DATABASE %s CHARACTER SET %s COLLATE %s';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CREATE TABLE keys flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * Whether table keys are created from within the[m
[32m+[m	[32m * CREATE TABLE statement.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_create_table_keys	= TRUE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * UNSIGNED support[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_unsigned		= array([m
[32m+[m		[32m'TINYINT',[m
[32m+[m		[32m'SMALLINT',[m
[32m+[m		[32m'MEDIUMINT',[m
[32m+[m		[32m'INT',[m
[32m+[m		[32m'INTEGER',[m
[32m+[m		[32m'BIGINT',[m
[32m+[m		[32m'REAL',[m
[32m+[m		[32m'DOUBLE',[m
[32m+[m		[32m'DOUBLE PRECISION',[m
[32m+[m		[32m'FLOAT',[m
[32m+[m		[32m'DECIMAL',[m
[32m+[m		[32m'NUMERIC'[m
[32m+[m	[32m);[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * NULL value representation in CREATE/ALTER TABLE statements[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_null = 'NULL';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CREATE TABLE attributes[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$attributes	Associative array of table attributes[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _create_table_attr($attributes)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = '';[m
[32m+[m
[32m+[m		[32mforeach (array_keys($attributes) as $key)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (is_string($key))[m
[32m+[m			[32m{[m
[32m+[m				[32m$sql .= ' '.strtoupper($key).' = '.$attributes[$key];[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! empty($this->db->char_set) && ! strpos($sql, 'CHARACTER SET') && ! strpos($sql, 'CHARSET'))[m
[32m+[m		[32m{[m
[32m+[m			[32m$sql .= ' DEFAULT CHARACTER SET = '.$this->db->char_set;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! empty($this->db->dbcollat) && ! strpos($sql, 'COLLATE'))[m
[32m+[m		[32m{[m
[32m+[m			[32m$sql .= ' COLLATE = '.$this->db->dbcollat;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ALTER TABLE[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$alter_type	ALTER type[m
[32m+[m	[32m * @param	string	$table		Table name[m
[32m+[m	[32m * @param	mixed	$field		Column definition[m
[32m+[m	[32m * @return	string|string[][m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _alter_table($alter_type, $table, $field)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($alter_type === 'DROP')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn parent::_alter_table($alter_type, $table, $field);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sql = 'ALTER TABLE '.$this->db->escape_identifiers($table);[m
[32m+[m		[32mfor ($i = 0, $c = count($field); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($field[$i]['_literal'] !== FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$field[$i] = ($alter_type === 'ADD')[m
[32m+[m						[32m? "\n\tADD ".$field[$i]['_literal'][m
[32m+[m						[32m: "\n\tMODIFY ".$field[$i]['_literal'];[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32mif ($alter_type === 'ADD')[m
[32m+[m				[32m{[m
[32m+[m					[32m$field[$i]['_literal'] = "\n\tADD ";[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32m$field[$i]['_literal'] = empty($field[$i]['new_name']) ? "\n\tMODIFY " : "\n\tCHANGE ";[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m$field[$i] = $field[$i]['_literal'].$this->_process_column($field[$i]);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn array($sql.implode(',', $field));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Process column[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$field[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _process_column($field)[m
[32m+[m	[32m{[m
[32m+[m		[32m$extra_clause = isset($field['after'])[m
[32m+[m			[32m? ' AFTER '.$this->db->escape_identifiers($field['after']) : '';[m
[32m+[m
[32m+[m		[32mif (empty($extra_clause) && isset($field['first']) && $field['first'] === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$extra_clause = ' FIRST';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->db->escape_identifiers($field['name'])[m
[32m+[m			[32m.(empty($field['new_name']) ? '' : ' '.$this->db->escape_identifiers($field['new_name']))[m
[32m+[m			[32m.' '.$field['type'].$field['length'][m
[32m+[m			[32m.$field['unsigned'][m
[32m+[m			[32m.$field['null'][m
[32m+[m			[32m.$field['default'][m
[32m+[m			[32m.$field['auto_increment'][m
[32m+[m			[32m.$field['unique'][m
[32m+[m			[32m.(empty($field['comment']) ? '' : ' COMMENT '.$field['comment'])[m
[32m+[m			[32m.$extra_clause;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Process indexes[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table	(ignored)[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _process_indexes($table)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = '';[m
[32m+[m
[32m+[m		[32mfor ($i = 0, $c = count($this->keys); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (is_array($this->keys[$i]))[m
[32m+[m			[32m{[m
[32m+[m				[32mfor ($i2 = 0, $c2 = count($this->keys[$i]); $i2 < $c2; $i2++)[m
[32m+[m				[32m{[m
[32m+[m					[32mif ( ! isset($this->fields[$this->keys[$i][$i2]]))[m
[32m+[m					[32m{[m
[32m+[m						[32munset($this->keys[$i][$i2]);[m
[32m+[m						[32mcontinue;[m
[32m+[m					[32m}[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m			[32melseif ( ! isset($this->fields[$this->keys[$i]]))[m
[32m+[m			[32m{[m
[32m+[m				[32munset($this->keys[$i]);[m
[32m+[m				[32mcontinue;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mis_array($this->keys[$i]) OR $this->keys[$i] = array($this->keys[$i]);[m
[32m+[m
[32m+[m			[32m$sql .= ",\n\tKEY ".$this->db->escape_identifiers(implode('_', $this->keys[$i]))[m
[32m+[m				[32m.' ('.implode(', ', $this->db->escape_identifiers($this->keys[$i])).')';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->keys = array();[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/mysqli/mysqli_result.php b/system/database/drivers/mysqli/mysqli_result.php[m
[1mnew file mode 100644[m
[1mindex 0000000..bac0737[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/mysqli/mysqli_result.php[m
[36m@@ -0,0 +1,232 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.3.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * MySQLi Result Class[m
[32m+[m[32m *[m
[32m+[m[32m * This class extends the parent result class: CI_DB_result[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_mysqli_result extends CI_DB_result {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Number of rows in the result set[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function num_rows()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn is_int($this->num_rows)[m
[32m+[m			[32m? $this->num_rows[m
[32m+[m			[32m: $this->num_rows = $this->result_id->num_rows;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Number of fields in the result set[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function num_fields()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->result_id->field_count;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch Field Names[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates an array of column names[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function list_fields()[m
[32m+[m	[32m{[m
[32m+[m		[32m$field_names = array();[m
[32m+[m		[32m$this->result_id->field_seek(0);[m
[32m+[m		[32mwhile ($field = $this->result_id->fetch_field())[m
[32m+[m		[32m{[m
[32m+[m			[32m$field_names[] = $field->name;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $field_names;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field data[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates an array of objects containing field meta-data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function field_data()[m
[32m+[m	[32m{[m
[32m+[m		[32m$retval = array();[m
[32m+[m		[32m$field_data = $this->result_id->fetch_fields();[m
[32m+[m		[32mfor ($i = 0, $c = count($field_data); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$retval[$i]			= new stdClass();[m
[32m+[m			[32m$retval[$i]->name		= $field_data[$i]->name;[m
[32m+[m			[32m$retval[$i]->type		= static::_get_field_type($field_data[$i]->type);[m
[32m+[m			[32m$retval[$i]->max_length		= $field_data[$i]->max_length;[m
[32m+[m			[32m$retval[$i]->primary_key	= (int) ($field_data[$i]->flags & MYSQLI_PRI_KEY_FLAG);[m
[32m+[m			[32m$retval[$i]->default		= $field_data[$i]->def;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $retval;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get field type[m
[32m+[m	[32m *[m
[32m+[m	[32m * Extracts field type info from the bitflags returned by[m
[32m+[m	[32m * mysqli_result::fetch_fields()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @used-by	CI_DB_mysqli_result::field_data()[m
[32m+[m	[32m * @param	int	$type[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprivate static function _get_field_type($type)[m
[32m+[m	[32m{[m
[32m+[m		[32mstatic $map;[m
[32m+[m		[32misset($map) OR $map = array([m
[32m+[m			[32mMYSQLI_TYPE_DECIMAL     => 'decimal',[m
[32m+[m			[32mMYSQLI_TYPE_BIT         => 'bit',[m
[32m+[m			[32mMYSQLI_TYPE_TINY        => 'tinyint',[m
[32m+[m			[32mMYSQLI_TYPE_SHORT       => 'smallint',[m
[32m+[m			[32mMYSQLI_TYPE_INT24       => 'mediumint',[m
[32m+[m			[32mMYSQLI_TYPE_LONG        => 'int',[m
[32m+[m			[32mMYSQLI_TYPE_LONGLONG    => 'bigint',[m
[32m+[m			[32mMYSQLI_TYPE_FLOAT       => 'float',[m
[32m+[m			[32mMYSQLI_TYPE_DOUBLE      => 'double',[m
[32m+[m			[32mMYSQLI_TYPE_TIMESTAMP   => 'timestamp',[m
[32m+[m			[32mMYSQLI_TYPE_DATE        => 'date',[m
[32m+[m			[32mMYSQLI_TYPE_TIME        => 'time',[m
[32m+[m			[32mMYSQLI_TYPE_DATETIME    => 'datetime',[m
[32m+[m			[32mMYSQLI_TYPE_YEAR        => 'year',[m
[32m+[m			[32mMYSQLI_TYPE_NEWDATE     => 'date',[m
[32m+[m			[32mMYSQLI_TYPE_INTERVAL    => 'interval',[m
[32m+[m			[32mMYSQLI_TYPE_ENUM        => 'enum',[m
[32m+[m			[32mMYSQLI_TYPE_SET         => 'set',[m
[32m+[m			[32mMYSQLI_TYPE_TINY_BLOB   => 'tinyblob',[m
[32m+[m			[32mMYSQLI_TYPE_MEDIUM_BLOB => 'mediumblob',[m
[32m+[m			[32mMYSQLI_TYPE_BLOB        => 'blob',[m
[32m+[m			[32mMYSQLI_TYPE_LONG_BLOB   => 'longblob',[m
[32m+[m			[32mMYSQLI_TYPE_STRING      => 'char',[m
[32m+[m			[32mMYSQLI_TYPE_VAR_STRING  => 'varchar',[m
[32m+[m			[32mMYSQLI_TYPE_GEOMETRY    => 'geometry'[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32mreturn isset($map[$type]) ? $map[$type] : $type;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Free the result[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function free_result()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (is_object($this->result_id))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->result_id->free();[m
[32m+[m			[32m$this->result_id = FALSE;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Data Seek[m
[32m+[m	[32m *[m
[32m+[m	[32m * Moves the internal pointer to the desired offset. We call[m
[32m+[m	[32m * this internally before fetching results to make sure the[m
[32m+[m	[32m * result set starts at zero.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	$n[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function data_seek($n = 0)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->result_id->data_seek($n);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Result - associative array[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the result set as an array[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _fetch_assoc()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->result_id->fetch_assoc();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Result - object[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the result set as an object[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$class_name[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _fetch_object($class_name = 'stdClass')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->result_id->fetch_object($class_name);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/mysqli/mysqli_utility.php b/system/database/drivers/mysqli/mysqli_utility.php[m
[1mnew file mode 100644[m
[1mindex 0000000..332da60[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/mysqli/mysqli_utility.php[m
[36m@@ -0,0 +1,211 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.3.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * MySQLi Utility Class[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_mysqli_utility extends CI_DB_utility {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List databases statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_list_databases	= 'SHOW DATABASES';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * OPTIMIZE TABLE statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_optimize_table	= 'OPTIMIZE TABLE %s';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * REPAIR TABLE statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_repair_table	= 'REPAIR TABLE %s';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Export[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params	Preferences[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _backup($params = array())[m
[32m+[m	[32m{[m
[32m+[m		[32mif (count($params) === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Extract the prefs for simplicity[m
[32m+[m		[32mextract($params);[m
[32m+[m
[32m+[m		[32m// Build the output[m
[32m+[m		[32m$output = '';[m
[32m+[m
[32m+[m		[32m// Do we need to include a statement to disable foreign key checks?[m
[32m+[m		[32mif ($foreign_key_checks === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$output .= 'SET foreign_key_checks = 0;'.$newline;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mforeach ( (array) $tables as $table)[m
[32m+[m		[32m{[m
[32m+[m			[32m// Is the table in the "ignore" list?[m
[32m+[m			[32mif (in_array($table, (array) $ignore, TRUE))[m
[32m+[m			[32m{[m
[32m+[m				[32mcontinue;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// Get the table schema[m
[32m+[m			[32m$query = $this->db->query('SHOW CREATE TABLE '.$this->db->escape_identifiers($this->db->database.'.'.$table));[m
[32m+[m
[32m+[m			[32m// No result means the table name was invalid[m
[32m+[m			[32mif ($query === FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32mcontinue;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// Write out the table schema[m
[32m+[m			[32m$output .= '#'.$newline.'# TABLE STRUCTURE FOR: '.$table.$newline.'#'.$newline.$newline;[m
[32m+[m
[32m+[m			[32mif ($add_drop === TRUE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$output .= 'DROP TABLE IF EXISTS '.$this->db->protect_identifiers($table).';'.$newline.$newline;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$i = 0;[m
[32m+[m			[32m$result = $query->result_array();[m
[32m+[m			[32mforeach ($result[0] as $val)[m
[32m+[m			[32m{[m
[32m+[m				[32mif ($i++ % 2)[m
[32m+[m				[32m{[m
[32m+[m					[32m$output .= $val.';'.$newline.$newline;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// If inserts are not needed we're done...[m
[32m+[m			[32mif ($add_insert === FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32mcontinue;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// Grab all the data from the current table[m
[32m+[m			[32m$query = $this->db->query('SELECT * FROM '.$this->db->protect_identifiers($table));[m
[32m+[m
[32m+[m			[32mif ($query->num_rows() === 0)[m
[32m+[m			[32m{[m
[32m+[m				[32mcontinue;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// Fetch the field names and determine if the field is an[m
[32m+[m			[32m// integer type. We use this info to decide whether to[m
[32m+[m			[32m// surround the data with quotes or not[m
[32m+[m
[32m+[m			[32m$i = 0;[m
[32m+[m			[32m$field_str = '';[m
[32m+[m			[32m$is_int = array();[m
[32m+[m			[32mwhile ($field = $query->result_id->fetch_field())[m
[32m+[m			[32m{[m
[32m+[m				[32m// Most versions of MySQL store timestamp as a string[m
[32m+[m				[32m$is_int[$i] = in_array($field->type, array(MYSQLI_TYPE_TINY, MYSQLI_TYPE_SHORT, MYSQLI_TYPE_INT24, MYSQLI_TYPE_LONG), TRUE);[m
[32m+[m
[32m+[m				[32m// Create a string of field names[m
[32m+[m				[32m$field_str .= $this->db->escape_identifiers($field->name).', ';[m
[32m+[m				[32m$i++;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// Trim off the end comma[m
[32m+[m			[32m$field_str = preg_replace('/, $/' , '', $field_str);[m
[32m+[m
[32m+[m			[32m// Build the insert string[m
[32m+[m			[32mforeach ($query->result_array() as $row)[m
[32m+[m			[32m{[m
[32m+[m				[32m$val_str = '';[m
[32m+[m
[32m+[m				[32m$i = 0;[m
[32m+[m				[32mforeach ($row as $v)[m
[32m+[m				[32m{[m
[32m+[m					[32m// Is the value NULL?[m
[32m+[m					[32mif ($v === NULL)[m
[32m+[m					[32m{[m
[32m+[m						[32m$val_str .= 'NULL';[m
[32m+[m					[32m}[m
[32m+[m					[32melse[m
[32m+[m					[32m{[m
[32m+[m						[32m// Escape the data if it's not an integer[m
[32m+[m						[32m$val_str .= ($is_int[$i] === FALSE) ? $this->db->escape($v) : $v;[m
[32m+[m					[32m}[m
[32m+[m
[32m+[m					[32m// Append a comma[m
[32m+[m					[32m$val_str .= ', ';[m
[32m+[m					[32m$i++;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m// Remove the comma at the end of the string[m
[32m+[m				[32m$val_str = preg_replace('/, $/' , '', $val_str);[m
[32m+[m
[32m+[m				[32m// Build the INSERT string[m
[32m+[m				[32m$output .= 'INSERT INTO '.$this->db->protect_identifiers($table).' ('.$field_str.') VALUES ('.$val_str.');'.$newline;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$output .= $newline.$newline;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Do we need to include a statement to re-enable foreign key checks?[m
[32m+[m		[32mif ($foreign_key_checks === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$output .= 'SET foreign_key_checks = 1;'.$newline;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $output;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/oci8/index.html b/system/database/drivers/oci8/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/oci8/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/system/database/drivers/oci8/oci8_driver.php b/system/database/drivers/oci8/oci8_driver.php[m
[1mnew file mode 100644[m
[1mindex 0000000..b90db4b[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/oci8/oci8_driver.php[m
[36m@@ -0,0 +1,701 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.4.1[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * oci8 Database Adapter Class[m
[32m+[m[32m *[m
[32m+[m[32m * Note: _DB is an extender class that the app controller[m
[32m+[m[32m * creates dynamically based on whether the query builder[m
[32m+[m[32m * class is being used or not.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage  Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * oci8 Database Adapter Class[m
[32m+[m[32m *[m
[32m+[m[32m * This is a modification of the DB_driver class to[m
[32m+[m[32m * permit access to oracle databases[m
[32m+[m[32m *[m
[32m+[m[32m * @author	  Kelly McArdle[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_oci8_driver extends CI_DB {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database driver[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $dbdriver = 'oci8';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Statement ID[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	resource[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $stmt_id;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Cursor ID[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	resource[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $curs_id;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Commit mode flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $commit_mode = OCI_COMMIT_ON_SUCCESS;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Limit used flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * If we use LIMIT, we'll add a field that will[m
[32m+[m	[32m * throw off num_fields later.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $limit_used = FALSE;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Reset $stmt_id flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * Used by stored_procedure() to prevent _execute() from[m
[32m+[m	[32m * re-setting the statement ID.[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_reset_stmt_id = TRUE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of reserved identifiers[m
[32m+[m	[32m *[m
[32m+[m	[32m * Identifiers that must NOT be escaped.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[][m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_reserved_identifiers = array('*', 'rownum');[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ORDER BY random keyword[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_random_keyword = array('ASC', 'ASC'); // not currently supported[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * COUNT string[m
[32m+[m	[32m *[m
[32m+[m	[32m * @used-by	CI_DB_driver::count_all()[m
[32m+[m	[32m * @used-by	CI_DB_query_builder::count_all_results()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_count_string = 'SELECT COUNT(1) AS ';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct($params)[m
[32m+[m	[32m{[m
[32m+[m		[32mparent::__construct($params);[m
[32m+[m
[32m+[m		[32m$valid_dsns = array([m
[32m+[m			[32m'tns'	=> '/^\(DESCRIPTION=(\(.+\)){2,}\)$/', // TNS[m
[32m+[m			[32m// Easy Connect string (Oracle 10g+)[m
[32m+[m			[32m'ec'	=> '/^(\/\/)?[a-z0-9.:_-]+(:[1-9][0-9]{0,4})?(\/[a-z0-9$_]+)?(:[^\/])?(\/[a-z0-9$_]+)?$/i',[m
[32m+[m			[32m'in'	=> '/^[a-z0-9$_]+$/i' // Instance name (defined in tnsnames.ora)[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32m/* Space characters don't have any effect when actually[m
[32m+[m		[32m * connecting, but can be a hassle while validating the DSN.[m
[32m+[m		[32m */[m
[32m+[m		[32m$this->dsn = str_replace(array("\n", "\r", "\t", ' '), '', $this->dsn);[m
[32m+[m
[32m+[m		[32mif ($this->dsn !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($valid_dsns as $regexp)[m
[32m+[m			[32m{[m
[32m+[m				[32mif (preg_match($regexp, $this->dsn))[m
[32m+[m				[32m{[m
[32m+[m					[32mreturn;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Legacy support for TNS in the hostname configuration field[m
[32m+[m		[32m$this->hostname = str_replace(array("\n", "\r", "\t", ' '), '', $this->hostname);[m
[32m+[m		[32mif (preg_match($valid_dsns['tns'], $this->hostname))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->dsn = $this->hostname;[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($this->hostname !== '' && strpos($this->hostname, '/') === FALSE && strpos($this->hostname, ':') === FALSE[m
[32m+[m			[32m&& (( ! empty($this->port) && ctype_digit($this->port)) OR $this->database !== ''))[m
[32m+[m		[32m{[m
[32m+[m			[32m/* If the hostname field isn't empty, doesn't contain[m
[32m+[m			[32m * ':' and/or '/' and if port and/or database aren't[m
[32m+[m			[32m * empty, then the hostname field is most likely indeed[m
[32m+[m			[32m * just a hostname. Therefore we'll try and build an[m
[32m+[m			[32m * Easy Connect string from these 3 settings, assuming[m
[32m+[m			[32m * that the database field is a service name.[m
[32m+[m			[32m */[m
[32m+[m			[32m$this->dsn = $this->hostname[m
[32m+[m				[32m.(( ! empty($this->port) && ctype_digit($this->port)) ? ':'.$this->port : '')[m
[32m+[m				[32m.($this->database !== '' ? '/'.ltrim($this->database, '/') : '');[m
[32m+[m
[32m+[m			[32mif (preg_match($valid_dsns['ec'], $this->dsn))[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m/* At this point, we can only try and validate the hostname and[m
[32m+[m		[32m * database fields separately as DSNs.[m
[32m+[m		[32m */[m
[32m+[m		[32mif (preg_match($valid_dsns['ec'], $this->hostname) OR preg_match($valid_dsns['in'], $this->hostname))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->dsn = $this->hostname;[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->database = str_replace(array("\n", "\r", "\t", ' '), '', $this->database);[m
[32m+[m		[32mforeach ($valid_dsns as $regexp)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (preg_match($regexp, $this->database))[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m/* Well - OK, an empty string should work as well.[m
[32m+[m		[32m * PHP will try to use environment variables to[m
[32m+[m		[32m * determine which Oracle instance to connect to.[m
[32m+[m		[32m */[m
[32m+[m		[32m$this->dsn = '';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Non-persistent database connection[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$persistent[m
[32m+[m	[32m * @return	resource[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function db_connect($persistent = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$func = ($persistent === TRUE) ? 'oci_pconnect' : 'oci_connect';[m
[32m+[m		[32mreturn empty($this->char_set)[m
[32m+[m			[32m? $func($this->username, $this->password, $this->dsn)[m
[32m+[m			[32m: $func($this->username, $this->password, $this->dsn, $this->char_set);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database version number[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function version()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (isset($this->data_cache['version']))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->data_cache['version'];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! $this->conn_id OR ($version_string = oci_server_version($this->conn_id)) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (preg_match('#Release\s(\d+(?:\.\d+)+)#', $version_string, $match))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->data_cache['version'] = $match[1];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Execute the query[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$sql	an SQL query[m
[32m+[m	[32m * @return	resource[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _execute($sql)[m
[32m+[m	[32m{[m
[32m+[m		[32m/* Oracle must parse the query before it is run. All of the actions with[m
[32m+[m		[32m * the query are based on the statement id returned by oci_parse().[m
[32m+[m		[32m */[m
[32m+[m		[32mif ($this->_reset_stmt_id === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->stmt_id = oci_parse($this->conn_id, $sql);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32moci_set_prefetch($this->stmt_id, 1000);[m
[32m+[m		[32mreturn oci_execute($this->stmt_id, $this->commit_mode);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get cursor. Returns a cursor from the database[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	resource[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get_cursor()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->curs_id = oci_new_cursor($this->conn_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Stored Procedure.  Executes a stored procedure[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	package name in which the stored procedure is in[m
[32m+[m	[32m * @param	string	stored procedure name to execute[m
[32m+[m	[32m * @param	array	parameters[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m *[m
[32m+[m	[32m * params array keys[m
[32m+[m	[32m *[m
[32m+[m	[32m * KEY      OPTIONAL  NOTES[m
[32m+[m	[32m * name     no        the name of the parameter should be in :<param_name> format[m
[32m+[m	[32m * value    no        the value of the parameter.  If this is an OUT or IN OUT parameter,[m
[32m+[m	[32m *                    this should be a reference to a variable[m
[32m+[m	[32m * type     yes       the type of the parameter[m
[32m+[m	[32m * length   yes       the max size of the parameter[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function stored_procedure($package, $procedure, array $params)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($package === '' OR $procedure === '')[m
[32m+[m		[32m{[m
[32m+[m			[32mlog_message('error', 'Invalid query: '.$package.'.'.$procedure);[m
[32m+[m			[32mreturn ($this->db_debug) ? $this->display_error('db_invalid_query') : FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Build the query string[m
[32m+[m		[32m$sql = 'BEGIN '.$package.'.'.$procedure.'(';[m
[32m+[m
[32m+[m		[32m$have_cursor = FALSE;[m
[32m+[m		[32mforeach ($params as $param)[m
[32m+[m		[32m{[m
[32m+[m			[32m$sql .= $param['name'].',';[m
[32m+[m
[32m+[m			[32mif (isset($param['type']) && $param['type'] === OCI_B_CURSOR)[m
[32m+[m			[32m{[m
[32m+[m				[32m$have_cursor = TRUE;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m		[32m$sql = trim($sql, ',').'); END;';[m
[32m+[m
[32m+[m		[32m$this->_reset_stmt_id = FALSE;[m
[32m+[m		[32m$this->stmt_id = oci_parse($this->conn_id, $sql);[m
[32m+[m		[32m$this->_bind_params($params);[m
[32m+[m		[32m$result = $this->query($sql, FALSE, $have_cursor);[m
[32m+[m		[32m$this->_reset_stmt_id = TRUE;[m
[32m+[m		[32mreturn $result;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Bind parameters[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _bind_params($params)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! is_array($params) OR ! is_resource($this->stmt_id))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mforeach ($params as $param)[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach (array('name', 'value', 'type', 'length') as $val)[m
[32m+[m			[32m{[m
[32m+[m				[32mif ( ! isset($param[$val]))[m
[32m+[m				[32m{[m
[32m+[m					[32m$param[$val] = '';[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32moci_bind_by_name($this->stmt_id, $param['name'], $param['value'], $param['length'], $param['type']);[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Begin Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_begin()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->commit_mode = OCI_NO_AUTO_COMMIT;[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Commit Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_commit()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->commit_mode = OCI_COMMIT_ON_SUCCESS;[m
[32m+[m
[32m+[m		[32mreturn oci_commit($this->conn_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Rollback Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_rollback()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->commit_mode = OCI_COMMIT_ON_SUCCESS;[m
[32m+[m		[32mreturn oci_rollback($this->conn_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Affected Rows[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function affected_rows()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn oci_num_rows($this->stmt_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Insert ID[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function insert_id()[m
[32m+[m	[32m{[m
[32m+[m		[32m// not supported in oracle[m
[32m+[m		[32mreturn $this->display_error('db_unsupported_function');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show table query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the table names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$prefix_limit[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_tables($prefix_limit = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = 'SELECT "TABLE_NAME" FROM "ALL_TABLES"';[m
[32m+[m
[32m+[m		[32mif ($prefix_limit !== FALSE && $this->dbprefix !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $sql.' WHERE "TABLE_NAME" LIKE \''.$this->escape_like_str($this->dbprefix)."%' "[m
[32m+[m				[32m.sprintf($this->_like_escape_str, $this->_like_escape_chr);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show column query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the column names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_columns($table = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif (strpos($table, '.') !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32msscanf($table, '%[^.].%s', $owner, $table);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$owner = $this->username;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn 'SELECT COLUMN_NAME FROM ALL_TAB_COLUMNS[m
[32m+[m			[32mWHERE UPPER(OWNER) = '.$this->escape(strtoupper($owner)).'[m
[32m+[m				[32mAND UPPER(TABLE_NAME) = '.$this->escape(strtoupper($table));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns an object with field data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function field_data($table)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (strpos($table, '.') !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32msscanf($table, '%[^.].%s', $owner, $table);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$owner = $this->username;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sql = 'SELECT COLUMN_NAME, DATA_TYPE, CHAR_LENGTH, DATA_PRECISION, DATA_LENGTH, DATA_DEFAULT, NULLABLE[m
[32m+[m			[32mFROM ALL_TAB_COLUMNS[m
[32m+[m			[32mWHERE UPPER(OWNER) = '.$this->escape(strtoupper($owner)).'[m
[32m+[m				[32mAND UPPER(TABLE_NAME) = '.$this->escape(strtoupper($table));[m
[32m+[m
[32m+[m		[32mif (($query = $this->query($sql)) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m		[32m$query = $query->result_object();[m
[32m+[m
[32m+[m		[32m$retval = array();[m
[32m+[m		[32mfor ($i = 0, $c = count($query); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$retval[$i]			= new stdClass();[m
[32m+[m			[32m$retval[$i]->name		= $query[$i]->COLUMN_NAME;[m
[32m+[m			[32m$retval[$i]->type		= $query[$i]->DATA_TYPE;[m
[32m+[m
[32m+[m			[32m$length = ($query[$i]->CHAR_LENGTH > 0)[m
[32m+[m				[32m? $query[$i]->CHAR_LENGTH : $query[$i]->DATA_PRECISION;[m
[32m+[m			[32mif ($length === NULL)[m
[32m+[m			[32m{[m
[32m+[m				[32m$length = $query[$i]->DATA_LENGTH;[m
[32m+[m			[32m}[m
[32m+[m			[32m$retval[$i]->max_length		= $length;[m
[32m+[m
[32m+[m			[32m$default = $query[$i]->DATA_DEFAULT;[m
[32m+[m			[32mif ($default === NULL && $query[$i]->NULLABLE === 'N')[m
[32m+[m			[32m{[m
[32m+[m				[32m$default = '';[m
[32m+[m			[32m}[m
[32m+[m			[32m$retval[$i]->default = $default;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $retval;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Error[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns an array containing code and message of the last[m
[32m+[m	[32m * database error that has occurred.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function error()[m
[32m+[m	[32m{[m
[32m+[m		[32m// oci_error() returns an array that already contains[m
[32m+[m		[32m// 'code' and 'message' keys, but it can return false[m
[32m+[m		[32m// if there was no error ....[m
[32m+[m		[32mif (is_resource($this->curs_id))[m
[32m+[m		[32m{[m
[32m+[m			[32m$error = oci_error($this->curs_id);[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (is_resource($this->stmt_id))[m
[32m+[m		[32m{[m
[32m+[m			[32m$error = oci_error($this->stmt_id);[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (is_resource($this->conn_id))[m
[32m+[m		[32m{[m
[32m+[m			[32m$error = oci_error($this->conn_id);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$error = oci_error();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn is_array($error)[m
[32m+[m			[32m? $error[m
[32m+[m			[32m: array('code' => '', 'message' => '');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Insert batch statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific insert string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table	Table name[m
[32m+[m	[32m * @param	array	$keys	INSERT keys[m
[32m+[m	[32m * @param 	array	$values	INSERT values[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _insert_batch($table, $keys, $values)[m
[32m+[m	[32m{[m
[32m+[m		[32m$keys = implode(', ', $keys);[m
[32m+[m		[32m$sql = "INSERT ALL\n";[m
[32m+[m
[32m+[m		[32mfor ($i = 0, $c = count($values); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$sql .= '	INTO '.$table.' ('.$keys.') VALUES '.$values[$i]."\n";[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql.'SELECT * FROM dual';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Truncate statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific truncate string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * If the database does not support the TRUNCATE statement,[m
[32m+[m	[32m * then this method maps to 'DELETE FROM table'[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _truncate($table)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'TRUNCATE TABLE '.$table;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Delete statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific delete string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _delete($table)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->qb_limit)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->where('rownum <= ',$this->qb_limit, FALSE);[m
[32m+[m			[32m$this->qb_limit = FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn parent::_delete($table);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * LIMIT[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific LIMIT clause[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$sql	SQL Query[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _limit($sql)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (version_compare($this->version(), '12.1', '>='))[m
[32m+[m		[32m{[m
[32m+[m			[32m// OFFSET-FETCH can be used only with the ORDER BY clause[m
[32m+[m			[32mempty($this->qb_orderby) && $sql .= ' ORDER BY 1';[m
[32m+[m
[32m+[m			[32mreturn $sql.' OFFSET '.(int) $this->qb_offset.' ROWS FETCH NEXT '.$this->qb_limit.' ROWS ONLY';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->limit_used = TRUE;[m
[32m+[m		[32mreturn 'SELECT * FROM (SELECT inner_query.*, rownum rnum FROM ('.$sql.') inner_query WHERE rownum < '.($this->qb_offset + $this->qb_limit + 1).')'[m
[32m+[m			[32m.($this->qb_offset ? ' WHERE rnum >= '.($this->qb_offset + 1) : '');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Close DB Connection[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _close()[m
[32m+[m	[32m{[m
[32m+[m		[32moci_close($this->conn_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * We need to reset our $limit_used hack flag, so it doesn't propagate[m
[32m+[m	[32m * to subsequent queries.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _reset_select()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->limit_used = FALSE;[m
[32m+[m		[32mparent::_reset_select();[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/oci8/oci8_forge.php b/system/database/drivers/oci8/oci8_forge.php[m
[1mnew file mode 100644[m
[1mindex 0000000..0011bb0[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/oci8/oci8_forge.php[m
[36m@@ -0,0 +1,187 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.4.1[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Oracle Forge Class[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_oci8_forge extends CI_DB_forge {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CREATE DATABASE statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_create_database	= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CREATE TABLE IF statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_create_table_if	= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * DROP DATABASE statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_drop_database	= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * DROP TABLE IF statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_drop_table_if	= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * UNSIGNED support[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool|array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_unsigned		= FALSE;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ALTER TABLE[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$alter_type	ALTER type[m
[32m+[m	[32m * @param	string	$table		Table name[m
[32m+[m	[32m * @param	mixed	$field		Column definition[m
[32m+[m	[32m * @return	string|string[][m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _alter_table($alter_type, $table, $field)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($alter_type === 'DROP')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn parent::_alter_table($alter_type, $table, $field);[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($alter_type === 'CHANGE')[m
[32m+[m		[32m{[m
[32m+[m			[32m$alter_type = 'MODIFY';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sql = 'ALTER TABLE '.$this->db->escape_identifiers($table);[m
[32m+[m		[32m$sqls = array();[m
[32m+[m		[32mfor ($i = 0, $c = count($field); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($field[$i]['_literal'] !== FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$field[$i] = "\n\t".$field[$i]['_literal'];[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$field[$i]['_literal'] = "\n\t".$this->_process_column($field[$i]);[m
[32m+[m
[32m+[m				[32mif ( ! empty($field[$i]['comment']))[m
[32m+[m				[32m{[m
[32m+[m					[32m$sqls[] = 'COMMENT ON COLUMN '[m
[32m+[m						[32m.$this->db->escape_identifiers($table).'.'.$this->db->escape_identifiers($field[$i]['name'])[m
[32m+[m						[32m.' IS '.$field[$i]['comment'];[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mif ($alter_type === 'MODIFY' && ! empty($field[$i]['new_name']))[m
[32m+[m				[32m{[m
[32m+[m					[32m$sqls[] = $sql.' RENAME COLUMN '.$this->db->escape_identifiers($field[$i]['name'])[m
[32m+[m						[32m.' TO '.$this->db->escape_identifiers($field[$i]['new_name']);[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m$field[$i] = "\n\t".$field[$i]['_literal'];[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sql .= ' '.$alter_type.' ';[m
[32m+[m		[32m$sql .= (count($field) === 1)[m
[32m+[m				[32m? $field[0][m
[32m+[m				[32m: '('.implode(',', $field).')';[m
[32m+[m
[32m+[m		[32m// RENAME COLUMN must be executed after MODIFY[m
[32m+[m		[32marray_unshift($sqls, $sql);[m
[32m+[m		[32mreturn $sqls;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute AUTO_INCREMENT[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @param	array	&$field[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_auto_increment(&$attributes, &$field)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Not supported - sequences and triggers must be used instead[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute TYPE[m
[32m+[m	[32m *[m
[32m+[m	[32m * Performs a data type mapping between different databases.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_type(&$attributes)[m
[32m+[m	[32m{[m
[32m+[m		[32mswitch (strtoupper($attributes['TYPE']))[m
[32m+[m		[32m{[m
[32m+[m			[32mcase 'TINYINT':[m
[32m+[m				[32m$attributes['TYPE'] = 'NUMBER';[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mcase 'MEDIUMINT':[m
[32m+[m				[32m$attributes['TYPE'] = 'NUMBER';[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mcase 'INT':[m
[32m+[m				[32m$attributes['TYPE'] = 'NUMBER';[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mcase 'BIGINT':[m
[32m+[m				[32m$attributes['TYPE'] = 'NUMBER';[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mdefault: return;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/oci8/oci8_result.php b/system/database/drivers/oci8/oci8_result.php[m
[1mnew file mode 100644[m
[1mindex 0000000..1c4196f[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/oci8/oci8_result.php[m
[36m@@ -0,0 +1,229 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.4.1[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * oci8 Result Class[m
[32m+[m[32m *[m
[32m+[m[32m * This class extends the parent result class: CI_DB_result[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_oci8_result extends CI_DB_result {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Statement ID[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	resource[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $stmt_id;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Cursor ID[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	resource[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $curs_id;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Limit used flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $limit_used;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Commit mode flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $commit_mode;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	object	&$driver_object[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct(&$driver_object)[m
[32m+[m	[32m{[m
[32m+[m		[32mparent::__construct($driver_object);[m
[32m+[m
[32m+[m		[32m$this->stmt_id = $driver_object->stmt_id;[m
[32m+[m		[32m$this->curs_id = $driver_object->curs_id;[m
[32m+[m		[32m$this->limit_used = $driver_object->limit_used;[m
[32m+[m		[32m$this->commit_mode =& $driver_object->commit_mode;[m
[32m+[m		[32m$driver_object->stmt_id = FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Number of fields in the result set[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function num_fields()[m
[32m+[m	[32m{[m
[32m+[m		[32m$count = oci_num_fields($this->stmt_id);[m
[32m+[m
[32m+[m		[32m// if we used a limit we subtract it[m
[32m+[m		[32mreturn ($this->limit_used) ? $count - 1 : $count;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch Field Names[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates an array of column names[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function list_fields()[m
[32m+[m	[32m{[m
[32m+[m		[32m$field_names = array();[m
[32m+[m		[32mfor ($c = 1, $fieldCount = $this->num_fields(); $c <= $fieldCount; $c++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$field_names[] = oci_field_name($this->stmt_id, $c);[m
[32m+[m		[32m}[m
[32m+[m		[32mreturn $field_names;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field data[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates an array of objects containing field meta-data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function field_data()[m
[32m+[m	[32m{[m
[32m+[m		[32m$retval = array();[m
[32m+[m		[32mfor ($c = 1, $fieldCount = $this->num_fields(); $c <= $fieldCount; $c++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$F		= new stdClass();[m
[32m+[m			[32m$F->name	= oci_field_name($this->stmt_id, $c);[m
[32m+[m			[32m$F->type	= oci_field_type($this->stmt_id, $c);[m
[32m+[m			[32m$F->max_length	= oci_field_size($this->stmt_id, $c);[m
[32m+[m
[32m+[m			[32m$retval[] = $F;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $retval;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Free the result[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function free_result()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (is_resource($this->result_id))[m
[32m+[m		[32m{[m
[32m+[m			[32moci_free_statement($this->result_id);[m
[32m+[m			[32m$this->result_id = FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (is_resource($this->stmt_id))[m
[32m+[m		[32m{[m
[32m+[m			[32moci_free_statement($this->stmt_id);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (is_resource($this->curs_id))[m
[32m+[m		[32m{[m
[32m+[m			[32moci_cancel($this->curs_id);[m
[32m+[m			[32m$this->curs_id = NULL;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Result - associative array[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the result set as an array[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _fetch_assoc()[m
[32m+[m	[32m{[m
[32m+[m		[32m$id = ($this->curs_id) ? $this->curs_id : $this->stmt_id;[m
[32m+[m		[32mreturn oci_fetch_assoc($id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Result - object[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the result set as an object[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$class_name[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _fetch_object($class_name = 'stdClass')[m
[32m+[m	[32m{[m
[32m+[m		[32m$row = ($this->curs_id)[m
[32m+[m			[32m? oci_fetch_object($this->curs_id)[m
[32m+[m			[32m: oci_fetch_object($this->stmt_id);[m
[32m+[m
[32m+[m		[32mif ($class_name === 'stdClass' OR ! $row)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $row;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$class_name = new $class_name();[m
[32m+[m		[32mforeach ($row as $key => $value)[m
[32m+[m		[32m{[m
[32m+[m			[32m$class_name->$key = $value;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $class_name;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/oci8/oci8_utility.php b/system/database/drivers/oci8/oci8_utility.php[m
[1mnew file mode 100644[m
[1mindex 0000000..574ff68[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/oci8/oci8_utility.php[m
[36m@@ -0,0 +1,68 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.4.1[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Oracle Utility Class[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_oci8_utility extends CI_DB_utility {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List databases statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_list_databases	= 'SELECT username FROM dba_users'; // Schemas are actual usernames[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Export[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params	Preferences[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _backup($params = array())[m
[32m+[m	[32m{[m
[32m+[m		[32m// Currently unsupported[m
[32m+[m		[32mreturn $this->db->display_error('db_unsupported_feature');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/odbc/index.html b/system/database/drivers/odbc/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/odbc/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/system/database/drivers/odbc/odbc_driver.php b/system/database/drivers/odbc/odbc_driver.php[m
[1mnew file mode 100644[m
[1mindex 0000000..c853903[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/odbc/odbc_driver.php[m
[36m@@ -0,0 +1,425 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.3.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * ODBC Database Adapter Class[m
[32m+[m[32m *[m
[32m+[m[32m * Note: _DB is an extender class that the app controller[m
[32m+[m[32m * creates dynamically based on whether the query builder[m
[32m+[m[32m * class is being used or not.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_odbc_driver extends CI_DB_driver {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database driver[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $dbdriver = 'odbc';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database schema[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $schema = 'public';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Identifier escape character[m
[32m+[m	[32m *[m
[32m+[m	[32m * Must be empty for ODBC.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_escape_char = '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ESCAPE statement string[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_like_escape_str = " {escape '%s'} ";[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ORDER BY random keyword[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_random_keyword = array('RND()', 'RND(%d)');[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ODBC result ID resource returned from odbc_prepare()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	resource[m
[32m+[m	[32m */[m
[32m+[m	[32mprivate $odbc_result;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Values to use with odbc_execute() for prepared statements[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprivate $binds = array();[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct($params)[m
[32m+[m	[32m{[m
[32m+[m		[32mparent::__construct($params);[m
[32m+[m
[32m+[m		[32m// Legacy support for DSN in the hostname field[m
[32m+[m		[32mif (empty($this->dsn))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->dsn = $this->hostname;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Non-persistent database connection[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$persistent[m
[32m+[m	[32m * @return	resource[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function db_connect($persistent = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn ($persistent === TRUE)[m
[32m+[m			[32m? odbc_pconnect($this->dsn, $this->username, $this->password)[m
[32m+[m			[32m: odbc_connect($this->dsn, $this->username, $this->password);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Compile Bindings[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$sql	SQL statement[m
[32m+[m	[32m * @param	array	$binds	An array of values to bind[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function compile_binds($sql, $binds)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (empty($binds) OR empty($this->bind_marker) OR strpos($sql, $this->bind_marker) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $sql;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! is_array($binds))[m
[32m+[m		[32m{[m
[32m+[m			[32m$binds = array($binds);[m
[32m+[m			[32m$bind_count = 1;[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m// Make sure we're using numeric keys[m
[32m+[m			[32m$binds = array_values($binds);[m
[32m+[m			[32m$bind_count = count($binds);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// We'll need the marker length later[m
[32m+[m		[32m$ml = strlen($this->bind_marker);[m
[32m+[m
[32m+[m		[32m// Make sure not to replace a chunk inside a string that happens to match the bind marker[m
[32m+[m		[32mif ($c = preg_match_all("/'[^']*'|\"[^\"]*\"/i", $sql, $matches))[m
[32m+[m		[32m{[m
[32m+[m			[32m$c = preg_match_all('/'.preg_quote($this->bind_marker, '/').'/i',[m
[32m+[m				[32mstr_replace($matches[0],[m
[32m+[m					[32mstr_replace($this->bind_marker, str_repeat(' ', $ml), $matches[0]),[m
[32m+[m					[32m$sql, $c),[m
[32m+[m				[32m$matches, PREG_OFFSET_CAPTURE);[m
[32m+[m
[32m+[m			[32m// Bind values' count must match the count of markers in the query[m
[32m+[m			[32mif ($bind_count !== $c)[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn $sql;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (($c = preg_match_all('/'.preg_quote($this->bind_marker, '/').'/i', $sql, $matches, PREG_OFFSET_CAPTURE)) !== $bind_count)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $sql;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($this->bind_marker !== '?')[m
[32m+[m		[32m{[m
[32m+[m			[32mdo[m
[32m+[m			[32m{[m
[32m+[m				[32m$c--;[m
[32m+[m				[32m$sql = substr_replace($sql, '?', $matches[0][$c][1], $ml);[m
[32m+[m			[32m}[m
[32m+[m			[32mwhile ($c !== 0);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (FALSE !== ($this->odbc_result = odbc_prepare($this->conn_id, $sql)))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->binds = array_values($binds);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Execute the query[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$sql	an SQL query[m
[32m+[m	[32m * @return	resource[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _execute($sql)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! isset($this->odbc_result))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn odbc_exec($this->conn_id, $sql);[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($this->odbc_result === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (TRUE === ($success = odbc_execute($this->odbc_result, $this->binds)))[m
[32m+[m		[32m{[m
[32m+[m			[32m// For queries that return result sets, return the result_id resource on success[m
[32m+[m			[32m$this->is_write_type($sql) OR $success = $this->odbc_result;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->odbc_result = NULL;[m
[32m+[m		[32m$this->binds       = array();[m
[32m+[m
[32m+[m		[32mreturn $success;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Begin Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_begin()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn odbc_autocommit($this->conn_id, FALSE);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Commit Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_commit()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (odbc_commit($this->conn_id))[m
[32m+[m		[32m{[m
[32m+[m			[32modbc_autocommit($this->conn_id, TRUE);[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Rollback Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_rollback()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (odbc_rollback($this->conn_id))[m
[32m+[m		[32m{[m
[32m+[m			[32modbc_autocommit($this->conn_id, TRUE);[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Determines if a query is a "write" type.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	An SQL query string[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function is_write_type($sql)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (preg_match('#^(INSERT|UPDATE).*RETURNING\s.+(\,\s?.+)*$#is', $sql))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn parent::is_write_type($sql);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Platform-dependent string escape[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _escape_str($str)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->display_error('db_unsupported_feature');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Affected Rows[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function affected_rows()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn odbc_num_rows($this->result_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Insert ID[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function insert_id()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn ($this->db_debug) ? $this->display_error('db_unsupported_feature') : FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show table query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the table names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$prefix_limit[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_tables($prefix_limit = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = "SELECT table_name FROM information_schema.tables WHERE table_schema = '".$this->schema."'";[m
[32m+[m
[32m+[m		[32mif ($prefix_limit !== FALSE && $this->dbprefix !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $sql." AND table_name LIKE '".$this->escape_like_str($this->dbprefix)."%' "[m
[32m+[m				[32m.sprintf($this->_like_escape_str, $this->_like_escape_chr);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show column query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the column names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_columns($table = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'SHOW COLUMNS FROM '.$table;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field data query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query so that the column data can be retrieved[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _field_data($table)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'SELECT TOP 1 FROM '.$table;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Error[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns an array containing code and message of the last[m
[32m+[m	[32m * database error that has occurred.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function error()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn array('code' => odbc_error($this->conn_id), 'message' => odbc_errormsg($this->conn_id));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Close DB Connection[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _close()[m
[32m+[m	[32m{[m
[32m+[m		[32modbc_close($this->conn_id);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/odbc/odbc_forge.php b/system/database/drivers/odbc/odbc_forge.php[m
[1mnew file mode 100644[m
[1mindex 0000000..761e81f[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/odbc/odbc_forge.php[m
[36m@@ -0,0 +1,86 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.3.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * ODBC Forge Class[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_odbc_forge extends CI_DB_forge {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CREATE TABLE IF statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_create_table_if	= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * DROP TABLE IF statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_drop_table_if	= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * UNSIGNED support[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool|array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_unsigned		= FALSE;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute AUTO_INCREMENT[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @param	array	&$field[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_auto_increment(&$attributes, &$field)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Not supported (in most databases at least)[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/odbc/odbc_result.php b/system/database/drivers/odbc/odbc_result.php[m
[1mnew file mode 100644[m
[1mindex 0000000..f7c3aec[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/odbc/odbc_result.php[m
[36m@@ -0,0 +1,268 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.3.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * ODBC Result Class[m
[32m+[m[32m *[m
[32m+[m[32m * This class extends the parent result class: CI_DB_result[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_odbc_result extends CI_DB_result {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Number of rows in the result set[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function num_rows()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (is_int($this->num_rows))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->num_rows;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (($this->num_rows = odbc_num_rows($this->result_id)) !== -1)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->num_rows;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Work-around for ODBC subdrivers that don't support num_rows()[m
[32m+[m		[32mif (count($this->result_array) > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->num_rows = count($this->result_array);[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (count($this->result_object) > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->num_rows = count($this->result_object);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->num_rows = count($this->result_array());[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Number of fields in the result set[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function num_fields()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn odbc_num_fields($this->result_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch Field Names[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates an array of column names[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function list_fields()[m
[32m+[m	[32m{[m
[32m+[m		[32m$field_names = array();[m
[32m+[m		[32m$num_fields = $this->num_fields();[m
[32m+[m
[32m+[m		[32mif ($num_fields > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mfor ($i = 1; $i <= $num_fields; $i++)[m
[32m+[m			[32m{[m
[32m+[m				[32m$field_names[] = odbc_field_name($this->result_id, $i);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $field_names;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field data[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates an array of objects containing field meta-data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function field_data()[m
[32m+[m	[32m{[m
[32m+[m		[32m$retval = array();[m
[32m+[m		[32mfor ($i = 0, $odbc_index = 1, $c = $this->num_fields(); $i < $c; $i++, $odbc_index++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$retval[$i]			= new stdClass();[m
[32m+[m			[32m$retval[$i]->name		= odbc_field_name($this->result_id, $odbc_index);[m
[32m+[m			[32m$retval[$i]->type		= odbc_field_type($this->result_id, $odbc_index);[m
[32m+[m			[32m$retval[$i]->max_length		= odbc_field_len($this->result_id, $odbc_index);[m
[32m+[m			[32m$retval[$i]->primary_key	= 0;[m
[32m+[m			[32m$retval[$i]->default		= '';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $retval;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Free the result[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function free_result()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (is_resource($this->result_id))[m
[32m+[m		[32m{[m
[32m+[m			[32modbc_free_result($this->result_id);[m
[32m+[m			[32m$this->result_id = FALSE;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Result - associative array[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the result set as an array[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _fetch_assoc()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn odbc_fetch_array($this->result_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Result - object[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the result set as an object[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$class_name[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _fetch_object($class_name = 'stdClass')[m
[32m+[m	[32m{[m
[32m+[m		[32m$row = odbc_fetch_object($this->result_id);[m
[32m+[m
[32m+[m		[32mif ($class_name === 'stdClass' OR ! $row)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $row;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$class_name = new $class_name();[m
[32m+[m		[32mforeach ($row as $key => $value)[m
[32m+[m		[32m{[m
[32m+[m			[32m$class_name->$key = $value;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $class_name;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('odbc_fetch_array'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ODBC Fetch array[m
[32m+[m	[32m *[m
[32m+[m	[32m * Emulates the native odbc_fetch_array() function when[m
[32m+[m	[32m * it is not available (odbc_fetch_array() requires unixODBC)[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	resource	&$result[m
[32m+[m	[32m * @param	int		$rownumber[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction odbc_fetch_array(&$result, $rownumber = 1)[m
[32m+[m	[32m{[m
[32m+[m		[32m$rs = array();[m
[32m+[m		[32mif ( ! odbc_fetch_into($result, $rs, $rownumber))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$rs_assoc = array();[m
[32m+[m		[32mforeach ($rs as $k => $v)[m
[32m+[m		[32m{[m
[32m+[m			[32m$field_name = odbc_field_name($result, $k+1);[m
[32m+[m			[32m$rs_assoc[$field_name] = $v;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $rs_assoc;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('odbc_fetch_object'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ODBC Fetch object[m
[32m+[m	[32m *[m
[32m+[m	[32m * Emulates the native odbc_fetch_object() function when[m
[32m+[m	[32m * it is not available.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	resource	&$result[m
[32m+[m	[32m * @param	int		$rownumber[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction odbc_fetch_object(&$result, $rownumber = 1)[m
[32m+[m	[32m{[m
[32m+[m		[32m$rs = array();[m
[32m+[m		[32mif ( ! odbc_fetch_into($result, $rs, $rownumber))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$rs_object = new stdClass();[m
[32m+[m		[32mforeach ($rs as $k => $v)[m
[32m+[m		[32m{[m
[32m+[m			[32m$field_name = odbc_field_name($result, $k+1);[m
[32m+[m			[32m$rs_object->$field_name = $v;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $rs_object;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/odbc/odbc_utility.php b/system/database/drivers/odbc/odbc_utility.php[m
[1mnew file mode 100644[m
[1mindex 0000000..2a33428[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/odbc/odbc_utility.php[m
[36m@@ -0,0 +1,63 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.3.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * ODBC Utility Class[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_odbc_utility extends CI_DB_utility {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Export[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params	Preferences[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _backup($params = array())[m
[32m+[m	[32m{[m
[32m+[m		[32m// Currently unsupported[m
[32m+[m		[32mreturn $this->db->display_error('db_unsupported_feature');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/pdo/index.html b/system/database/drivers/pdo/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/pdo/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/system/database/drivers/pdo/pdo_driver.php b/system/database/drivers/pdo/pdo_driver.php[m
[1mnew file mode 100644[m
[1mindex 0000000..c99bb06[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/pdo/pdo_driver.php[m
[36m@@ -0,0 +1,329 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 2.1.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * PDO Database Adapter Class[m
[32m+[m[32m *[m
[32m+[m[32m * Note: _DB is an extender class that the app controller[m
[32m+[m[32m * creates dynamically based on whether the query builder[m
[32m+[m[32m * class is being used or not.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_pdo_driver extends CI_DB {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database driver[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $dbdriver = 'pdo';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * PDO Options[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $options = array();[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * Validates the DSN string and/or detects the subdriver.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct($params)[m
[32m+[m	[32m{[m
[32m+[m		[32mparent::__construct($params);[m
[32m+[m
[32m+[m		[32mif (preg_match('/([^:]+):/', $this->dsn, $match) && count($match) === 2)[m
[32m+[m		[32m{[m
[32m+[m			[32m// If there is a minimum valid dsn string pattern found, we're done[m
[32m+[m			[32m// This is for general PDO users, who tend to have a full DSN string.[m
[32m+[m			[32m$this->subdriver = $match[1];[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m		[32m// Legacy support for DSN specified in the hostname field[m
[32m+[m		[32melseif (preg_match('/([^:]+):/', $this->hostname, $match) && count($match) === 2)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->dsn = $this->hostname;[m
[32m+[m			[32m$this->hostname = NULL;[m
[32m+[m			[32m$this->subdriver = $match[1];[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (in_array($this->subdriver, array('mssql', 'sybase'), TRUE))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->subdriver = 'dblib';[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($this->subdriver === '4D')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->subdriver = '4d';[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! in_array($this->subdriver, array('4d', 'cubrid', 'dblib', 'firebird', 'ibm', 'informix', 'mysql', 'oci', 'odbc', 'pgsql', 'sqlite', 'sqlsrv'), TRUE))[m
[32m+[m		[32m{[m
[32m+[m			[32mlog_message('error', 'PDO: Invalid or non-existent subdriver');[m
[32m+[m
[32m+[m			[32mif ($this->db_debug)[m
[32m+[m			[32m{[m
[32m+[m				[32mshow_error('Invalid or non-existent PDO subdriver');[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->dsn = NULL;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database connection[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$persistent[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function db_connect($persistent = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($persistent === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->options[PDO::ATTR_PERSISTENT] = TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mtry[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn new PDO($this->dsn, $this->username, $this->password, $this->options);[m
[32m+[m		[32m}[m
[32m+[m		[32mcatch (PDOException $e)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($this->db_debug && empty($this->failover))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->display_error($e->getMessage(), '', TRUE);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database version number[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function version()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (isset($this->data_cache['version']))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->data_cache['version'];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Not all subdrivers support the getAttribute() method[m
[32m+[m		[32mtry[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->data_cache['version'] = $this->conn_id->getAttribute(PDO::ATTR_SERVER_VERSION);[m
[32m+[m		[32m}[m
[32m+[m		[32mcatch (PDOException $e)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn parent::version();[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Execute the query[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$sql	SQL query[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _execute($sql)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->conn_id->query($sql);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Begin Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_begin()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->conn_id->beginTransaction();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Commit Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_commit()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->conn_id->commit();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Rollback Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_rollback()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->conn_id->rollBack();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Platform-dependent string escape[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _escape_str($str)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Escape the string[m
[32m+[m		[32m$str = $this->conn_id->quote($str);[m
[32m+[m
[32m+[m		[32m// If there are duplicated quotes, trim them away[m
[32m+[m		[32mreturn ($str[0] === "'")[m
[32m+[m			[32m? substr($str, 1, -1)[m
[32m+[m			[32m: $str;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Affected Rows[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function affected_rows()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn is_object($this->result_id) ? $this->result_id->rowCount() : 0;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Insert ID[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$name[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function insert_id($name = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->conn_id->lastInsertId($name);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field data query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query so that the column data can be retrieved[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _field_data($table)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'SELECT TOP 1 * FROM '.$this->protect_identifiers($table);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Error[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns an array containing code and message of the last[m
[32m+[m	[32m * database error that has occurred.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function error()[m
[32m+[m	[32m{[m
[32m+[m		[32m$error = array('code' => '00000', 'message' => '');[m
[32m+[m		[32m$pdo_error = $this->conn_id->errorInfo();[m
[32m+[m
[32m+[m		[32mif (empty($pdo_error[0]))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $error;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$error['code'] = isset($pdo_error[1]) ? $pdo_error[0].'/'.$pdo_error[1] : $pdo_error[0];[m
[32m+[m		[32mif (isset($pdo_error[2]))[m
[32m+[m		[32m{[m
[32m+[m			[32m $error['message'] = $pdo_error[2];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $error;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Truncate statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific truncate string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * If the database does not support the TRUNCATE statement,[m
[32m+[m	[32m * then this method maps to 'DELETE FROM table'[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _truncate($table)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'TRUNCATE TABLE '.$table;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/pdo/pdo_forge.php b/system/database/drivers/pdo/pdo_forge.php[m
[1mnew file mode 100644[m
[1mindex 0000000..c77a849[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/pdo/pdo_forge.php[m
[36m@@ -0,0 +1,65 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 2.1.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * PDO Forge Class[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_pdo_forge extends CI_DB_forge {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CREATE TABLE IF statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_create_table_if	= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * DROP TABLE IF statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_drop_table_if	= FALSE;[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/pdo/pdo_result.php b/system/database/drivers/pdo/pdo_result.php[m
[1mnew file mode 100644[m
[1mindex 0000000..3a821fb[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/pdo/pdo_result.php[m
[36m@@ -0,0 +1,198 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 2.1.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * PDO Result Class[m
[32m+[m[32m *[m
[32m+[m[32m * This class extends the parent result class: CI_DB_result[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_pdo_result extends CI_DB_result {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Number of rows in the result set[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function num_rows()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (is_int($this->num_rows))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->num_rows;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (count($this->result_array) > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->num_rows = count($this->result_array);[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (count($this->result_object) > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->num_rows = count($this->result_object);[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (($num_rows = $this->result_id->rowCount()) > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->num_rows = $num_rows;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->num_rows = count($this->result_array());[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Number of fields in the result set[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function num_fields()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->result_id->columnCount();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch Field Names[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates an array of column names[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function list_fields()[m
[32m+[m	[32m{[m
[32m+[m		[32m$field_names = array();[m
[32m+[m		[32mfor ($i = 0, $c = $this->num_fields(); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m// Might trigger an E_WARNING due to not all subdrivers[m
[32m+[m			[32m// supporting getColumnMeta()[m
[32m+[m			[32m$field_names[$i] = @$this->result_id->getColumnMeta($i);[m
[32m+[m			[32m$field_names[$i] = $field_names[$i]['name'];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $field_names;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field data[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates an array of objects containing field meta-data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function field_data()[m
[32m+[m	[32m{[m
[32m+[m		[32mtry[m
[32m+[m		[32m{[m
[32m+[m			[32m$retval = array();[m
[32m+[m
[32m+[m			[32mfor ($i = 0, $c = $this->num_fields(); $i < $c; $i++)[m
[32m+[m			[32m{[m
[32m+[m				[32m$field = $this->result_id->getColumnMeta($i);[m
[32m+[m
[32m+[m				[32m$retval[$i]			= new stdClass();[m
[32m+[m				[32m$retval[$i]->name		= $field['name'];[m
[32m+[m				[32m$retval[$i]->type		= $field['native_type'];[m
[32m+[m				[32m$retval[$i]->max_length		= ($field['len'] > 0) ? $field['len'] : NULL;[m
[32m+[m				[32m$retval[$i]->primary_key	= (int) ( ! empty($field['flags']) && in_array('primary_key', $field['flags'], TRUE));[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn $retval;[m
[32m+[m		[32m}[m
[32m+[m		[32mcatch (Exception $e)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($this->db->db_debug)[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn $this->db->display_error('db_unsupported_feature');[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Free the result[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function free_result()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (is_object($this->result_id))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->result_id = FALSE;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Result - associative array[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the result set as an array[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _fetch_assoc()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->result_id->fetch(PDO::FETCH_ASSOC);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Result - object[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the result set as an object[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$class_name[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _fetch_object($class_name = 'stdClass')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->result_id->fetchObject($class_name);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/pdo/pdo_utility.php b/system/database/drivers/pdo/pdo_utility.php[m
[1mnew file mode 100644[m
[1mindex 0000000..9091ea5[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/pdo/pdo_utility.php[m
[36m@@ -0,0 +1,63 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 2.1.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * PDO Utility Class[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_pdo_utility extends CI_DB_utility {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Export[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params	Preferences[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _backup($params = array())[m
[32m+[m	[32m{[m
[32m+[m		[32m// Currently unsupported[m
[32m+[m		[32mreturn $this->db->display_error('db_unsupported_feature');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/pdo/subdrivers/index.html b/system/database/drivers/pdo/subdrivers/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/pdo/subdrivers/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/system/database/drivers/pdo/subdrivers/pdo_4d_driver.php b/system/database/drivers/pdo/subdrivers/pdo_4d_driver.php[m
[1mnew file mode 100644[m
[1mindex 0000000..bbb675d[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/pdo/subdrivers/pdo_4d_driver.php[m
[36m@@ -0,0 +1,200 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * PDO 4D Database Adapter Class[m
[32m+[m[32m *[m
[32m+[m[32m * Note: _DB is an extender class that the app controller[m
[32m+[m[32m * creates dynamically based on whether the query builder[m
[32m+[m[32m * class is being used or not.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_pdo_4d_driver extends CI_DB_pdo_driver {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Sub-driver[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $subdriver = '4d';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Identifier escape character[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[][m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_escape_char = array('[', ']');[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * Builds the DSN if not already set.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct($params)[m
[32m+[m	[32m{[m
[32m+[m		[32mparent::__construct($params);[m
[32m+[m
[32m+[m		[32mif (empty($this->dsn))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->dsn = '4D:host='.(empty($this->hostname) ? '127.0.0.1' : $this->hostname);[m
[32m+[m
[32m+[m			[32mempty($this->port) OR $this->dsn .= ';port='.$this->port;[m
[32m+[m			[32mempty($this->database) OR $this->dsn .= ';dbname='.$this->database;[m
[32m+[m			[32mempty($this->char_set) OR $this->dsn .= ';charset='.$this->char_set;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! empty($this->char_set) && strpos($this->dsn, 'charset=', 3) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->dsn .= ';charset='.$this->char_set;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show table query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the table names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$prefix_limit[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_tables($prefix_limit = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = 'SELECT '.$this->escape_identifiers('TABLE_NAME').' FROM '.$this->escape_identifiers('_USER_TABLES');[m
[32m+[m
[32m+[m		[32mif ($prefix_limit === TRUE && $this->dbprefix !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$sql .= ' WHERE '.$this->escape_identifiers('TABLE_NAME')." LIKE '".$this->escape_like_str($this->dbprefix)."%' "[m
[32m+[m				[32m.sprintf($this->_like_escape_str, $this->_like_escape_chr);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show column query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the column names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_columns($table = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'SELECT '.$this->escape_identifiers('COLUMN_NAME').' FROM '.$this->escape_identifiers('_USER_COLUMNS')[m
[32m+[m			[32m.' WHERE '.$this->escape_identifiers('TABLE_NAME').' = '.$this->escape($table);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field data query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query so that the column data can be retrieved[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _field_data($table)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'SELECT * FROM '.$this->protect_identifiers($table, TRUE, NULL, FALSE).' LIMIT 1';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Update statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific update string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @param	array	$values[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _update($table, $values)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->qb_limit = FALSE;[m
[32m+[m		[32m$this->qb_orderby = array();[m
[32m+[m		[32mreturn parent::_update($table, $values);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Delete statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific delete string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _delete($table)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->qb_limit = FALSE;[m
[32m+[m		[32mreturn parent::_delete($table);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * LIMIT[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific LIMIT clause[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$sql	SQL Query[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _limit($sql)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $sql.' LIMIT '.$this->qb_limit.($this->qb_offset ? ' OFFSET '.$this->qb_offset : '');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/pdo/subdrivers/pdo_4d_forge.php b/system/database/drivers/pdo/subdrivers/pdo_4d_forge.php[m
[1mnew file mode 100644[m
[1mindex 0000000..7135aa1[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/pdo/subdrivers/pdo_4d_forge.php[m
[36m@@ -0,0 +1,217 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * PDO 4D Forge Class[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_pdo_4d_forge extends CI_DB_pdo_forge {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CREATE DATABASE statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_create_database	= 'CREATE SCHEMA %s';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * DROP DATABASE statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_drop_database	= 'DROP SCHEMA %s';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CREATE TABLE IF statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_create_table_if	= 'CREATE TABLE IF NOT EXISTS';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * RENAME TABLE statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_rename_table	= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * DROP TABLE IF statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_drop_table_if	= 'DROP TABLE IF EXISTS';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * UNSIGNED support[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_unsigned		= array([m
[32m+[m		[32m'INT16'		=> 'INT',[m
[32m+[m		[32m'SMALLINT'	=> 'INT',[m
[32m+[m		[32m'INT'		=> 'INT64',[m
[32m+[m		[32m'INT32'		=> 'INT64'[m
[32m+[m	[32m);[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * DEFAULT value representation in CREATE/ALTER TABLE statements[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_default		= FALSE;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ALTER TABLE[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$alter_type	ALTER type[m
[32m+[m	[32m * @param	string	$table		Table name[m
[32m+[m	[32m * @param	mixed	$field		Column definition[m
[32m+[m	[32m * @return	string|string[][m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _alter_table($alter_type, $table, $field)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (in_array($alter_type, array('ADD', 'DROP'), TRUE))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn parent::_alter_table($alter_type, $table, $field);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// No method of modifying columns is supported[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Process column[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$field[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _process_column($field)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->db->escape_identifiers($field['name'])[m
[32m+[m			[32m.' '.$field['type'].$field['length'][m
[32m+[m			[32m.$field['null'][m
[32m+[m			[32m.$field['unique'][m
[32m+[m			[32m.$field['auto_increment'];[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute TYPE[m
[32m+[m	[32m *[m
[32m+[m	[32m * Performs a data type mapping between different databases.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_type(&$attributes)[m
[32m+[m	[32m{[m
[32m+[m		[32mswitch (strtoupper($attributes['TYPE']))[m
[32m+[m		[32m{[m
[32m+[m			[32mcase 'TINYINT':[m
[32m+[m				[32m$attributes['TYPE'] = 'SMALLINT';[m
[32m+[m				[32m$attributes['UNSIGNED'] = FALSE;[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mcase 'MEDIUMINT':[m
[32m+[m				[32m$attributes['TYPE'] = 'INTEGER';[m
[32m+[m				[32m$attributes['UNSIGNED'] = FALSE;[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mcase 'INTEGER':[m
[32m+[m				[32m$attributes['TYPE'] = 'INT';[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mcase 'BIGINT':[m
[32m+[m				[32m$attributes['TYPE'] = 'INT64';[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mdefault: return;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute UNIQUE[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @param	array	&$field[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_unique(&$attributes, &$field)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! empty($attributes['UNIQUE']) && $attributes['UNIQUE'] === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$field['unique'] = ' UNIQUE';[m
[32m+[m
[32m+[m			[32m// UNIQUE must be used with NOT NULL[m
[32m+[m			[32m$field['null'] = ' NOT NULL';[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute AUTO_INCREMENT[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @param	array	&$field[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_auto_increment(&$attributes, &$field)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! empty($attributes['AUTO_INCREMENT']) && $attributes['AUTO_INCREMENT'] === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (stripos($field['type'], 'int') !== FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$field['auto_increment'] = ' AUTO_INCREMENT';[m
[32m+[m			[32m}[m
[32m+[m			[32melseif (strcasecmp($field['type'], 'UUID') === 0)[m
[32m+[m			[32m{[m
[32m+[m				[32m$field['auto_increment'] = ' AUTO_GENERATE';[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/pdo/subdrivers/pdo_cubrid_driver.php b/system/database/drivers/pdo/subdrivers/pdo_cubrid_driver.php[m
[1mnew file mode 100644[m
[1mindex 0000000..3189aab[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/pdo/subdrivers/pdo_cubrid_driver.php[m
[36m@@ -0,0 +1,209 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * PDO CUBRID Database Adapter Class[m
[32m+[m[32m *[m
[32m+[m[32m * Note: _DB is an extender class that the app controller[m
[32m+[m[32m * creates dynamically based on whether the query builder[m
[32m+[m[32m * class is being used or not.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_pdo_cubrid_driver extends CI_DB_pdo_driver {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Sub-driver[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $subdriver = 'cubrid';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Identifier escape character[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_escape_char = '`';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ORDER BY random keyword[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_random_keyword = array('RANDOM()', 'RANDOM(%d)');[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * Builds the DSN if not already set.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct($params)[m
[32m+[m	[32m{[m
[32m+[m		[32mparent::__construct($params);[m
[32m+[m
[32m+[m		[32mif (empty($this->dsn))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->dsn = 'cubrid:host='.(empty($this->hostname) ? '127.0.0.1' : $this->hostname);[m
[32m+[m
[32m+[m			[32mempty($this->port) OR $this->dsn .= ';port='.$this->port;[m
[32m+[m			[32mempty($this->database) OR $this->dsn .= ';dbname='.$this->database;[m
[32m+[m			[32mempty($this->char_set) OR $this->dsn .= ';charset='.$this->char_set;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show table query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the table names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$prefix_limit[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_tables($prefix_limit = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = 'SHOW TABLES';[m
[32m+[m
[32m+[m		[32mif ($prefix_limit === TRUE && $this->dbprefix !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $sql." LIKE '".$this->escape_like_str($this->dbprefix)."%'";[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show column query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the column names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_columns($table = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'SHOW COLUMNS FROM '.$this->protect_identifiers($table, TRUE, NULL, FALSE);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns an object with field data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function field_data($table)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (($query = $this->query('SHOW COLUMNS FROM '.$this->protect_identifiers($table, TRUE, NULL, FALSE))) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m		[32m$query = $query->result_object();[m
[32m+[m
[32m+[m		[32m$retval = array();[m
[32m+[m		[32mfor ($i = 0, $c = count($query); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$retval[$i]			= new stdClass();[m
[32m+[m			[32m$retval[$i]->name		= $query[$i]->Field;[m
[32m+[m
[32m+[m			[32msscanf($query[$i]->Type, '%[a-z](%d)',[m
[32m+[m				[32m$retval[$i]->type,[m
[32m+[m				[32m$retval[$i]->max_length[m
[32m+[m			[32m);[m
[32m+[m
[32m+[m			[32m$retval[$i]->default		= $query[$i]->Default;[m
[32m+[m			[32m$retval[$i]->primary_key	= (int) ($query[$i]->Key === 'PRI');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $retval;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Truncate statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific truncate string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * If the database does not support the TRUNCATE statement,[m
[32m+[m	[32m * then this method maps to 'DELETE FROM table'[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _truncate($table)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'TRUNCATE '.$table;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * FROM tables[m
[32m+[m	[32m *[m
[32m+[m	[32m * Groups tables in FROM clauses if needed, so there is no confusion[m
[32m+[m	[32m * about operator precedence.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _from_tables()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! empty($this->qb_join) && count($this->qb_from) > 1)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn '('.implode(', ', $this->qb_from).')';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn implode(', ', $this->qb_from);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/pdo/subdrivers/pdo_cubrid_forge.php b/system/database/drivers/pdo/subdrivers/pdo_cubrid_forge.php[m
[1mnew file mode 100644[m
[1mindex 0000000..624ce51[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/pdo/subdrivers/pdo_cubrid_forge.php[m
[36m@@ -0,0 +1,230 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * PDO CUBRID Forge Class[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_pdo_cubrid_forge extends CI_DB_pdo_forge {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CREATE DATABASE statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_create_database	= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * DROP DATABASE statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_drop_database	= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CREATE TABLE keys flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * Whether table keys are created from within the[m
[32m+[m	[32m * CREATE TABLE statement.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_create_table_keys	= TRUE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * DROP TABLE IF statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_drop_table_if	= 'DROP TABLE IF EXISTS';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * UNSIGNED support[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_unsigned		= array([m
[32m+[m		[32m'SHORT'		=> 'INTEGER',[m
[32m+[m		[32m'SMALLINT'	=> 'INTEGER',[m
[32m+[m		[32m'INT'		=> 'BIGINT',[m
[32m+[m		[32m'INTEGER'	=> 'BIGINT',[m
[32m+[m		[32m'BIGINT'	=> 'NUMERIC',[m
[32m+[m		[32m'FLOAT'		=> 'DOUBLE',[m
[32m+[m		[32m'REAL'		=> 'DOUBLE'[m
[32m+[m	[32m);[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ALTER TABLE[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$alter_type	ALTER type[m
[32m+[m	[32m * @param	string	$table		Table name[m
[32m+[m	[32m * @param	mixed	$field		Column definition[m
[32m+[m	[32m * @return	string|string[][m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _alter_table($alter_type, $table, $field)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (in_array($alter_type, array('DROP', 'ADD'), TRUE))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn parent::_alter_table($alter_type, $table, $field);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sql = 'ALTER TABLE '.$this->db->escape_identifiers($table);[m
[32m+[m		[32m$sqls = array();[m
[32m+[m		[32mfor ($i = 0, $c = count($field); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($field[$i]['_literal'] !== FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$sqls[] = $sql.' CHANGE '.$field[$i]['_literal'];[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$alter_type = empty($field[$i]['new_name']) ? ' MODIFY ' : ' CHANGE ';[m
[32m+[m				[32m$sqls[] = $sql.$alter_type.$this->_process_column($field[$i]);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sqls;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Process column[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$field[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _process_column($field)[m
[32m+[m	[32m{[m
[32m+[m		[32m$extra_clause = isset($field['after'])[m
[32m+[m			[32m? ' AFTER '.$this->db->escape_identifiers($field['after']) : '';[m
[32m+[m
[32m+[m		[32mif (empty($extra_clause) && isset($field['first']) && $field['first'] === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$extra_clause = ' FIRST';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->db->escape_identifiers($field['name'])[m
[32m+[m			[32m.(empty($field['new_name']) ? '' : ' '.$this->db->escape_identifiers($field['new_name']))[m
[32m+[m			[32m.' '.$field['type'].$field['length'][m
[32m+[m			[32m.$field['unsigned'][m
[32m+[m			[32m.$field['null'][m
[32m+[m			[32m.$field['default'][m
[32m+[m			[32m.$field['auto_increment'][m
[32m+[m			[32m.$field['unique'][m
[32m+[m			[32m.$extra_clause;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute TYPE[m
[32m+[m	[32m *[m
[32m+[m	[32m * Performs a data type mapping between different databases.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_type(&$attributes)[m
[32m+[m	[32m{[m
[32m+[m		[32mswitch (strtoupper($attributes['TYPE']))[m
[32m+[m		[32m{[m
[32m+[m			[32mcase 'TINYINT':[m
[32m+[m				[32m$attributes['TYPE'] = 'SMALLINT';[m
[32m+[m				[32m$attributes['UNSIGNED'] = FALSE;[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mcase 'MEDIUMINT':[m
[32m+[m				[32m$attributes['TYPE'] = 'INTEGER';[m
[32m+[m				[32m$attributes['UNSIGNED'] = FALSE;[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mcase 'LONGTEXT':[m
[32m+[m				[32m$attributes['TYPE'] = 'STRING';[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mdefault: return;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Process indexes[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table	(ignored)[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _process_indexes($table)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = '';[m
[32m+[m
[32m+[m		[32mfor ($i = 0, $c = count($this->keys); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (is_array($this->keys[$i]))[m
[32m+[m			[32m{[m
[32m+[m				[32mfor ($i2 = 0, $c2 = count($this->keys[$i]); $i2 < $c2; $i2++)[m
[32m+[m				[32m{[m
[32m+[m					[32mif ( ! isset($this->fields[$this->keys[$i][$i2]]))[m
[32m+[m					[32m{[m
[32m+[m						[32munset($this->keys[$i][$i2]);[m
[32m+[m						[32mcontinue;[m
[32m+[m					[32m}[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m			[32melseif ( ! isset($this->fields[$this->keys[$i]]))[m
[32m+[m			[32m{[m
[32m+[m				[32munset($this->keys[$i]);[m
[32m+[m				[32mcontinue;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mis_array($this->keys[$i]) OR $this->keys[$i] = array($this->keys[$i]);[m
[32m+[m
[32m+[m			[32m$sql .= ",\n\tKEY ".$this->db->escape_identifiers(implode('_', $this->keys[$i]))[m
[32m+[m				[32m.' ('.implode(', ', $this->db->escape_identifiers($this->keys[$i])).')';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->keys = array();[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/pdo/subdrivers/pdo_dblib_driver.php b/system/database/drivers/pdo/subdrivers/pdo_dblib_driver.php[m
[1mnew file mode 100644[m
[1mindex 0000000..d04f8b3[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/pdo/subdrivers/pdo_dblib_driver.php[m
[36m@@ -0,0 +1,353 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * PDO DBLIB Database Adapter Class[m
[32m+[m[32m *[m
[32m+[m[32m * Note: _DB is an extender class that the app controller[m
[32m+[m[32m * creates dynamically based on whether the query builder[m
[32m+[m[32m * class is being used or not.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_pdo_dblib_driver extends CI_DB_pdo_driver {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Sub-driver[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $subdriver = 'dblib';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ORDER BY random keyword[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_random_keyword = array('NEWID()', 'RAND(%d)');[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Quoted identifier flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * Whether to use SQL-92 standard quoted identifier[m
[32m+[m	[32m * (double quotes) or brackets for identifier escaping.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_quoted_identifier;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * Builds the DSN if not already set.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct($params)[m
[32m+[m	[32m{[m
[32m+[m		[32mparent::__construct($params);[m
[32m+[m
[32m+[m		[32mif (empty($this->dsn))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->dsn = $params['subdriver'].':host='.(empty($this->hostname) ? '127.0.0.1' : $this->hostname);[m
[32m+[m
[32m+[m			[32mif ( ! empty($this->port))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->dsn .= (DIRECTORY_SEPARATOR === '\\' ? ',' : ':').$this->port;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mempty($this->database) OR $this->dsn .= ';dbname='.$this->database;[m
[32m+[m			[32mempty($this->char_set) OR $this->dsn .= ';charset='.$this->char_set;[m
[32m+[m			[32mempty($this->appname) OR $this->dsn .= ';appname='.$this->appname;[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32mif ( ! empty($this->char_set) && strpos($this->dsn, 'charset=', 6) === FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->dsn .= ';charset='.$this->char_set;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$this->subdriver = 'dblib';[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database connection[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$persistent[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function db_connect($persistent = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($persistent === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32mlog_message('debug', "dblib driver doesn't support persistent connections");[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->conn_id = parent::db_connect(FALSE);[m
[32m+[m
[32m+[m		[32mif ( ! is_object($this->conn_id))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->conn_id;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Determine how identifiers are escaped[m
[32m+[m		[32m$query = $this->query('SELECT CASE WHEN (@@OPTIONS | 256) = @@OPTIONS THEN 1 ELSE 0 END AS qi');[m
[32m+[m		[32m$query = $query->row_array();[m
[32m+[m		[32m$this->_quoted_identifier = empty($query) ? FALSE : (bool) $query['qi'];[m
[32m+[m		[32m$this->_escape_char = ($this->_quoted_identifier) ? '"' : array('[', ']');[m
[32m+[m
[32m+[m		[32mreturn $this->conn_id;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show table query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the table names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$prefix_limit[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_tables($prefix_limit = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = 'SELECT '.$this->escape_identifiers('name')[m
[32m+[m			[32m.' FROM '.$this->escape_identifiers('sysobjects')[m
[32m+[m			[32m.' WHERE '.$this->escape_identifiers('type')." = 'U'";[m
[32m+[m
[32m+[m		[32mif ($prefix_limit === TRUE && $this->dbprefix !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$sql .= ' AND '.$this->escape_identifiers('name')." LIKE '".$this->escape_like_str($this->dbprefix)."%' "[m
[32m+[m				[32m.sprintf($this->_like_escape_str, $this->_like_escape_chr);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql.' ORDER BY '.$this->escape_identifiers('name');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show column query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the column names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_columns($table = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'SELECT COLUMN_NAME[m
[32m+[m			[32mFROM INFORMATION_SCHEMA.Columns[m
[32m+[m			[32mWHERE UPPER(TABLE_NAME) = '.$this->escape(strtoupper($table));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns an object with field data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function field_data($table)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = 'SELECT COLUMN_NAME, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH, NUMERIC_PRECISION, COLUMN_DEFAULT[m
[32m+[m			[32mFROM INFORMATION_SCHEMA.Columns[m
[32m+[m			[32mWHERE UPPER(TABLE_NAME) = '.$this->escape(strtoupper($table));[m
[32m+[m
[32m+[m		[32mif (($query = $this->query($sql)) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m		[32m$query = $query->result_object();[m
[32m+[m
[32m+[m		[32m$retval = array();[m
[32m+[m		[32mfor ($i = 0, $c = count($query); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$retval[$i]			= new stdClass();[m
[32m+[m			[32m$retval[$i]->name		= $query[$i]->COLUMN_NAME;[m
[32m+[m			[32m$retval[$i]->type		= $query[$i]->DATA_TYPE;[m
[32m+[m			[32m$retval[$i]->max_length		= ($query[$i]->CHARACTER_MAXIMUM_LENGTH > 0) ? $query[$i]->CHARACTER_MAXIMUM_LENGTH : $query[$i]->NUMERIC_PRECISION;[m
[32m+[m			[32m$retval[$i]->default		= $query[$i]->COLUMN_DEFAULT;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $retval;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Update statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific update string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @param	array	$values[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _update($table, $values)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->qb_limit = FALSE;[m
[32m+[m		[32m$this->qb_orderby = array();[m
[32m+[m		[32mreturn parent::_update($table, $values);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Delete statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific delete string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _delete($table)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->qb_limit)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn 'WITH ci_delete AS (SELECT TOP '.$this->qb_limit.' * FROM '.$table.$this->_compile_wh('qb_where').') DELETE FROM ci_delete';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn parent::_delete($table);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * LIMIT[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific LIMIT clause[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$sql	SQL Query[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _limit($sql)[m
[32m+[m	[32m{[m
[32m+[m		[32m$limit = $this->qb_offset + $this->qb_limit;[m
[32m+[m
[32m+[m		[32m// As of SQL Server 2005 (9.0.*) ROW_NUMBER() is supported,[m
[32m+[m		[32m// however an ORDER BY clause is required for it to work[m
[32m+[m		[32mif (version_compare($this->version(), '9', '>=') && $this->qb_offset && ! empty($this->qb_orderby))[m
[32m+[m		[32m{[m
[32m+[m			[32m$orderby = $this->_compile_order_by();[m
[32m+[m
[32m+[m			[32m// We have to strip the ORDER BY clause[m
[32m+[m			[32m$sql = trim(substr($sql, 0, strrpos($sql, $orderby)));[m
[32m+[m
[32m+[m			[32m// Get the fields to select from our subquery, so that we can avoid CI_rownum appearing in the actual results[m
[32m+[m			[32mif (count($this->qb_select) === 0 OR strpos(implode(',', $this->qb_select), '*') !== FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$select = '*'; // Inevitable[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m// Use only field names and their aliases, everything else is out of our scope.[m
[32m+[m				[32m$select = array();[m
[32m+[m				[32m$field_regexp = ($this->_quoted_identifier)[m
[32m+[m					[32m? '("[^\"]+")' : '(\[[^\]]+\])';[m
[32m+[m				[32mfor ($i = 0, $c = count($this->qb_select); $i < $c; $i++)[m
[32m+[m				[32m{[m
[32m+[m					[32m$select[] = preg_match('/(?:\s|\.)'.$field_regexp.'$/i', $this->qb_select[$i], $m)[m
[32m+[m						[32m? $m[1] : $this->qb_select[$i];[m
[32m+[m				[32m}[m
[32m+[m				[32m$select = implode(', ', $select);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn 'SELECT '.$select." FROM (\n\n"[m
[32m+[m				[32m.preg_replace('/^(SELECT( DISTINCT)?)/i', '\\1 ROW_NUMBER() OVER('.trim($orderby).') AS '.$this->escape_identifiers('CI_rownum').', ', $sql)[m
[32m+[m				[32m."\n\n) ".$this->escape_identifiers('CI_subquery')[m
[32m+[m				[32m."\nWHERE ".$this->escape_identifiers('CI_rownum').' BETWEEN '.($this->qb_offset + 1).' AND '.$limit;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn preg_replace('/(^\SELECT (DISTINCT)?)/i','\\1 TOP '.$limit.' ', $sql);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Insert batch statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific insert string from the supplied data.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table	Table name[m
[32m+[m	[32m * @param	array	$keys	INSERT keys[m
[32m+[m	[32m * @param	array	$values	INSERT values[m
[32m+[m	[32m * @return	string|bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _insert_batch($table, $keys, $values)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Multiple-value inserts are only supported as of SQL Server 2008[m
[32m+[m		[32mif (version_compare($this->version(), '10', '>='))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn parent::_insert_batch($table, $keys, $values);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn ($this->db_debug) ? $this->display_error('db_unsupported_feature') : FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database version number[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return      string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function version()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (isset($this->data_cache['version']))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->data_cache['version'];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->data_cache['version'] = $this->conn_id->query("SELECT SERVERPROPERTY('ProductVersion') AS ver")->fetchColumn(0);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/pdo/subdrivers/pdo_dblib_forge.php b/system/database/drivers/pdo/subdrivers/pdo_dblib_forge.php[m
[1mnew file mode 100644[m
[1mindex 0000000..0216b59[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/pdo/subdrivers/pdo_dblib_forge.php[m
[36m@@ -0,0 +1,149 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * PDO DBLIB Forge Class[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_pdo_dblib_forge extends CI_DB_pdo_forge {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CREATE TABLE IF statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_create_table_if	= "IF NOT EXISTS (SELECT * FROM sysobjects WHERE ID = object_id(N'%s') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)\nCREATE TABLE";[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * DROP TABLE IF statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_drop_table_if	= "IF EXISTS (SELECT * FROM sysobjects WHERE ID = object_id(N'%s') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)\nDROP TABLE";[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * UNSIGNED support[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_unsigned		= array([m
[32m+[m		[32m'TINYINT'	=> 'SMALLINT',[m
[32m+[m		[32m'SMALLINT'	=> 'INT',[m
[32m+[m		[32m'INT'		=> 'BIGINT',[m
[32m+[m		[32m'REAL'		=> 'FLOAT'[m
[32m+[m	[32m);[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ALTER TABLE[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$alter_type	ALTER type[m
[32m+[m	[32m * @param	string	$table		Table name[m
[32m+[m	[32m * @param	mixed	$field		Column definition[m
[32m+[m	[32m * @return	string|string[][m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _alter_table($alter_type, $table, $field)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (in_array($alter_type, array('ADD', 'DROP'), TRUE))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn parent::_alter_table($alter_type, $table, $field);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sql = 'ALTER TABLE '.$this->db->escape_identifiers($table).' ALTER COLUMN ';[m
[32m+[m		[32m$sqls = array();[m
[32m+[m		[32mfor ($i = 0, $c = count($field); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$sqls[] = $sql.$this->_process_column($field[$i]);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sqls;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute TYPE[m
[32m+[m	[32m *[m
[32m+[m	[32m * Performs a data type mapping between different databases.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_type(&$attributes)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (isset($attributes['CONSTRAINT']) && strpos($attributes['TYPE'], 'INT') !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32munset($attributes['CONSTRAINT']);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mswitch (strtoupper($attributes['TYPE']))[m
[32m+[m		[32m{[m
[32m+[m			[32mcase 'MEDIUMINT':[m
[32m+[m				[32m$attributes['TYPE'] = 'INTEGER';[m
[32m+[m				[32m$attributes['UNSIGNED'] = FALSE;[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mcase 'INTEGER':[m
[32m+[m				[32m$attributes['TYPE'] = 'INT';[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mdefault: return;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute AUTO_INCREMENT[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @param	array	&$field[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_auto_increment(&$attributes, &$field)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! empty($attributes['AUTO_INCREMENT']) && $attributes['AUTO_INCREMENT'] === TRUE && stripos($field['type'], 'int') !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$field['auto_increment'] = ' IDENTITY(1,1)';[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/pdo/subdrivers/pdo_firebird_driver.php b/system/database/drivers/pdo/subdrivers/pdo_firebird_driver.php[m
[1mnew file mode 100644[m
[1mindex 0000000..eec5bf2[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/pdo/subdrivers/pdo_firebird_driver.php[m
[36m@@ -0,0 +1,279 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * PDO Firebird Database Adapter Class[m
[32m+[m[32m *[m
[32m+[m[32m * Note: _DB is an extender class that the app controller[m
[32m+[m[32m * creates dynamically based on whether the query builder[m
[32m+[m[32m * class is being used or not.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_pdo_firebird_driver extends CI_DB_pdo_driver {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Sub-driver[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $subdriver = 'firebird';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ORDER BY random keyword[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_random_keyword = array('RAND()', 'RAND()');[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * Builds the DSN if not already set.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct($params)[m
[32m+[m	[32m{[m
[32m+[m		[32mparent::__construct($params);[m
[32m+[m
[32m+[m		[32mif (empty($this->dsn))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->dsn = 'firebird:';[m
[32m+[m
[32m+[m			[32mif ( ! empty($this->database))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->dsn .= 'dbname='.$this->database;[m
[32m+[m			[32m}[m
[32m+[m			[32melseif ( ! empty($this->hostname))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->dsn .= 'dbname='.$this->hostname;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mempty($this->char_set) OR $this->dsn .= ';charset='.$this->char_set;[m
[32m+[m			[32mempty($this->role) OR $this->dsn .= ';role='.$this->role;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! empty($this->char_set) && strpos($this->dsn, 'charset=', 9) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->dsn .= ';charset='.$this->char_set;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show table query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the table names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$prefix_limit[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_tables($prefix_limit = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = 'SELECT "RDB$RELATION_NAME" FROM "RDB$RELATIONS" WHERE "RDB$RELATION_NAME" NOT LIKE \'RDB$%\' AND "RDB$RELATION_NAME" NOT LIKE \'MON$%\'';[m
[32m+[m
[32m+[m		[32mif ($prefix_limit === TRUE && $this->dbprefix !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $sql.' AND "RDB$RELATION_NAME" LIKE \''.$this->escape_like_str($this->dbprefix)."%' "[m
[32m+[m				[32m.sprintf($this->_like_escape_str, $this->_like_escape_chr);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show column query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the column names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_columns($table = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'SELECT "RDB$FIELD_NAME" FROM "RDB$RELATION_FIELDS" WHERE "RDB$RELATION_NAME" = '.$this->escape($table);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns an object with field data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function field_data($table)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = 'SELECT "rfields"."RDB$FIELD_NAME" AS "name",[m
[32m+[m				[32mCASE "fields"."RDB$FIELD_TYPE"[m
[32m+[m					[32mWHEN 7 THEN \'SMALLINT\'[m
[32m+[m					[32mWHEN 8 THEN \'INTEGER\'[m
[32m+[m					[32mWHEN 9 THEN \'QUAD\'[m
[32m+[m					[32mWHEN 10 THEN \'FLOAT\'[m
[32m+[m					[32mWHEN 11 THEN \'DFLOAT\'[m
[32m+[m					[32mWHEN 12 THEN \'DATE\'[m
[32m+[m					[32mWHEN 13 THEN \'TIME\'[m
[32m+[m					[32mWHEN 14 THEN \'CHAR\'[m
[32m+[m					[32mWHEN 16 THEN \'INT64\'[m
[32m+[m					[32mWHEN 27 THEN \'DOUBLE\'[m
[32m+[m					[32mWHEN 35 THEN \'TIMESTAMP\'[m
[32m+[m					[32mWHEN 37 THEN \'VARCHAR\'[m
[32m+[m					[32mWHEN 40 THEN \'CSTRING\'[m
[32m+[m					[32mWHEN 261 THEN \'BLOB\'[m
[32m+[m					[32mELSE NULL[m
[32m+[m				[32mEND AS "type",[m
[32m+[m				[32m"fields"."RDB$FIELD_LENGTH" AS "max_length",[m
[32m+[m				[32m"rfields"."RDB$DEFAULT_VALUE" AS "default"[m
[32m+[m			[32mFROM "RDB$RELATION_FIELDS" "rfields"[m
[32m+[m				[32mJOIN "RDB$FIELDS" "fields" ON "rfields"."RDB$FIELD_SOURCE" = "fields"."RDB$FIELD_NAME"[m
[32m+[m			[32mWHERE "rfields"."RDB$RELATION_NAME" = '.$this->escape($table).'[m
[32m+[m			[32mORDER BY "rfields"."RDB$FIELD_POSITION"';[m
[32m+[m
[32m+[m		[32mreturn (($query = $this->query($sql)) !== FALSE)[m
[32m+[m			[32m? $query->result_object()[m
[32m+[m			[32m: FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Update statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific update string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @param	array	$values[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _update($table, $values)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->qb_limit = FALSE;[m
[32m+[m		[32mreturn parent::_update($table, $values);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Truncate statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific truncate string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * If the database does not support the TRUNCATE statement,[m
[32m+[m	[32m * then this method maps to 'DELETE FROM table'[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _truncate($table)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'DELETE FROM '.$table;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Delete statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific delete string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _delete($table)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->qb_limit = FALSE;[m
[32m+[m		[32mreturn parent::_delete($table);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * LIMIT[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific LIMIT clause[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$sql	SQL Query[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _limit($sql)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Limit clause depends on if Interbase or Firebird[m
[32m+[m		[32mif (stripos($this->version(), 'firebird') !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$select = 'FIRST '.$this->qb_limit[m
[32m+[m				[32m.($this->qb_offset > 0 ? ' SKIP '.$this->qb_offset : '');[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$select = 'ROWS '[m
[32m+[m				[32m.($this->qb_offset > 0 ? $this->qb_offset.' TO '.($this->qb_limit + $this->qb_offset) : $this->qb_limit);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn preg_replace('`SELECT`i', 'SELECT '.$select, $sql);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Insert batch statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific insert string from the supplied data.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table	Table name[m
[32m+[m	[32m * @param	array	$keys	INSERT keys[m
[32m+[m	[32m * @param	array	$values	INSERT values[m
[32m+[m	[32m * @return	string|bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _insert_batch($table, $keys, $values)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn ($this->db_debug) ? $this->display_error('db_unsupported_feature') : FALSE;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/pdo/subdrivers/pdo_firebird_forge.php b/system/database/drivers/pdo/subdrivers/pdo_firebird_forge.php[m
[1mnew file mode 100644[m
[1mindex 0000000..2a5fa64[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/pdo/subdrivers/pdo_firebird_forge.php[m
[36m@@ -0,0 +1,237 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * PDO Firebird Forge Class[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_pdo_firebird_forge extends CI_DB_pdo_forge {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * RENAME TABLE statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_rename_table	= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * UNSIGNED support[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_unsigned		= array([m
[32m+[m		[32m'SMALLINT'	=> 'INTEGER',[m
[32m+[m		[32m'INTEGER'	=> 'INT64',[m
[32m+[m		[32m'FLOAT'		=> 'DOUBLE PRECISION'[m
[32m+[m	[32m);[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * NULL value representation in CREATE/ALTER TABLE statements[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_null		= 'NULL';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Create database[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$db_name[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function create_database($db_name)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Firebird databases are flat files, so a path is required[m
[32m+[m
[32m+[m		[32m// Hostname is needed for remote access[m
[32m+[m		[32mempty($this->db->hostname) OR $db_name = $this->hostname.':'.$db_name;[m
[32m+[m
[32m+[m		[32mreturn parent::create_database('"'.$db_name.'"');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Drop database[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$db_name	(ignored)[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function drop_database($db_name)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! ibase_drop_db($this->conn_id))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($this->db->db_debug) ? $this->db->display_error('db_unable_to_drop') : FALSE;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! empty($this->db->data_cache['db_names']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$key = array_search(strtolower($this->db->database), array_map('strtolower', $this->db->data_cache['db_names']), TRUE);[m
[32m+[m			[32mif ($key !== FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32munset($this->db->data_cache['db_names'][$key]);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ALTER TABLE[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$alter_type	ALTER type[m
[32m+[m	[32m * @param	string	$table		Table name[m
[32m+[m	[32m * @param	mixed	$field		Column definition[m
[32m+[m	[32m * @return	string|string[][m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _alter_table($alter_type, $table, $field)[m
[32m+[m[41m [m	[32m{[m
[32m+[m		[32mif (in_array($alter_type, array('DROP', 'ADD'), TRUE))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn parent::_alter_table($alter_type, $table, $field);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sql = 'ALTER TABLE '.$this->db->escape_identifiers($table);[m
[32m+[m		[32m$sqls = array();[m
[32m+[m		[32mfor ($i = 0, $c = count($field); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($field[$i]['_literal'] !== FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (isset($field[$i]['type']))[m
[32m+[m			[32m{[m
[32m+[m				[32m$sqls[] = $sql.' ALTER COLUMN '.$this->db->escape_identifiers($field[$i]['name'])[m
[32m+[m					[32m.' TYPE '.$field[$i]['type'].$field[$i]['length'];[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif ( ! empty($field[$i]['default']))[m
[32m+[m			[32m{[m
[32m+[m				[32m$sqls[] = $sql.' ALTER COLUMN '.$this->db->escape_identifiers($field[$i]['name'])[m
[32m+[m					[32m.' SET DEFAULT '.$field[$i]['default'];[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (isset($field[$i]['null']))[m
[32m+[m			[32m{[m
[32m+[m				[32m$sqls[] = 'UPDATE "RDB$RELATION_FIELDS" SET "RDB$NULL_FLAG" = '[m
[32m+[m					[32m.($field[$i]['null'] === TRUE ? 'NULL' : '1')[m
[32m+[m					[32m.' WHERE "RDB$FIELD_NAME" = '.$this->db->escape($field[$i]['name'])[m
[32m+[m					[32m.' AND "RDB$RELATION_NAME" = '.$this->db->escape($table);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif ( ! empty($field[$i]['new_name']))[m
[32m+[m			[32m{[m
[32m+[m				[32m$sqls[] = $sql.' ALTER COLUMN '.$this->db->escape_identifiers($field[$i]['name'])[m
[32m+[m					[32m.' TO '.$this->db->escape_identifiers($field[$i]['new_name']);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sqls;[m
[32m+[m[41m [m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Process column[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$field[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _process_column($field)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->db->escape_identifiers($field['name'])[m
[32m+[m			[32m.' '.$field['type'].$field['length'][m
[32m+[m			[32m.$field['null'][m
[32m+[m			[32m.$field['unique'][m
[32m+[m			[32m.$field['default'];[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute TYPE[m
[32m+[m	[32m *[m
[32m+[m	[32m * Performs a data type mapping between different databases.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_type(&$attributes)[m
[32m+[m	[32m{[m
[32m+[m		[32mswitch (strtoupper($attributes['TYPE']))[m
[32m+[m		[32m{[m
[32m+[m			[32mcase 'TINYINT':[m
[32m+[m				[32m$attributes['TYPE'] = 'SMALLINT';[m
[32m+[m				[32m$attributes['UNSIGNED'] = FALSE;[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mcase 'MEDIUMINT':[m
[32m+[m				[32m$attributes['TYPE'] = 'INTEGER';[m
[32m+[m				[32m$attributes['UNSIGNED'] = FALSE;[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mcase 'INT':[m
[32m+[m				[32m$attributes['TYPE'] = 'INTEGER';[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mcase 'BIGINT':[m
[32m+[m				[32m$attributes['TYPE'] = 'INT64';[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mdefault: return;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute AUTO_INCREMENT[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @param	array	&$field[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_auto_increment(&$attributes, &$field)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Not supported[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/pdo/subdrivers/pdo_ibm_driver.php b/system/database/drivers/pdo/subdrivers/pdo_ibm_driver.php[m
[1mnew file mode 100644[m
[1mindex 0000000..43400a4[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/pdo/subdrivers/pdo_ibm_driver.php[m
[36m@@ -0,0 +1,244 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * PDO IBM DB2 Database Adapter Class[m
[32m+[m[32m *[m
[32m+[m[32m * Note: _DB is an extender class that the app controller[m
[32m+[m[32m * creates dynamically based on whether the query builder[m
[32m+[m[32m * class is being used or not.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_pdo_ibm_driver extends CI_DB_pdo_driver {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Sub-driver[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $subdriver = 'ibm';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * Builds the DSN if not already set.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct($params)[m
[32m+[m	[32m{[m
[32m+[m		[32mparent::__construct($params);[m
[32m+[m
[32m+[m		[32mif (empty($this->dsn))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->dsn = 'ibm:';[m
[32m+[m
[32m+[m			[32m// Pre-defined DSN[m
[32m+[m			[32mif (empty($this->hostname) && empty($this->HOSTNAME) && empty($this->port) && empty($this->PORT))[m
[32m+[m			[32m{[m
[32m+[m				[32mif (isset($this->DSN))[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->dsn .= 'DSN='.$this->DSN;[m
[32m+[m				[32m}[m
[32m+[m				[32melseif ( ! empty($this->database))[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->dsn .= 'DSN='.$this->database;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mreturn;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$this->dsn .= 'DRIVER='.(isset($this->DRIVER) ? '{'.$this->DRIVER.'}' : '{IBM DB2 ODBC DRIVER}').';';[m
[32m+[m
[32m+[m			[32mif (isset($this->DATABASE))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->dsn .= 'DATABASE='.$this->DATABASE.';';[m
[32m+[m			[32m}[m
[32m+[m			[32melseif ( ! empty($this->database))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->dsn .= 'DATABASE='.$this->database.';';[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (isset($this->HOSTNAME))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->dsn .= 'HOSTNAME='.$this->HOSTNAME.';';[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->dsn .= 'HOSTNAME='.(empty($this->hostname) ? '127.0.0.1;' : $this->hostname.';');[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (isset($this->PORT))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->dsn .= 'PORT='.$this->port.';';[m
[32m+[m			[32m}[m
[32m+[m			[32melseif ( ! empty($this->port))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->dsn .= ';PORT='.$this->port.';';[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$this->dsn .= 'PROTOCOL='.(isset($this->PROTOCOL) ? $this->PROTOCOL.';' : 'TCPIP;');[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show table query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the table names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$prefix_limit[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_tables($prefix_limit = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = 'SELECT "tabname" FROM "syscat"."tables"[m
[32m+[m			[32mWHERE "type" = \'T\' AND LOWER("tabschema") = '.$this->escape(strtolower($this->database));[m
[32m+[m
[32m+[m		[32mif ($prefix_limit === TRUE && $this->dbprefix !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$sql .= ' AND "tabname" LIKE \''.$this->escape_like_str($this->dbprefix)."%' "[m
[32m+[m				[32m.sprintf($this->_like_escape_str, $this->_like_escape_chr);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show column query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the column names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_columns($table = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'SELECT "colname" FROM "syscat"."columns"[m
[32m+[m			[32mWHERE LOWER("tabschema") = '.$this->escape(strtolower($this->database)).'[m
[32m+[m				[32mAND LOWER("tabname") = '.$this->escape(strtolower($table));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns an object with field data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function field_data($table)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = 'SELECT "colname" AS "name", "typename" AS "type", "default" AS "default", "length" AS "max_length",[m
[32m+[m				[32mCASE "keyseq" WHEN NULL THEN 0 ELSE 1 END AS "primary_key"[m
[32m+[m			[32mFROM "syscat"."columns"[m
[32m+[m			[32mWHERE LOWER("tabschema") = '.$this->escape(strtolower($this->database)).'[m
[32m+[m				[32mAND LOWER("tabname") = '.$this->escape(strtolower($table)).'[m
[32m+[m			[32mORDER BY "colno"';[m
[32m+[m
[32m+[m		[32mreturn (($query = $this->query($sql)) !== FALSE)[m
[32m+[m			[32m? $query->result_object()[m
[32m+[m			[32m: FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Update statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific update string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @param	array	$values[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _update($table, $values)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->qb_limit = FALSE;[m
[32m+[m		[32m$this->qb_orderby = array();[m
[32m+[m		[32mreturn parent::_update($table, $values);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Delete statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific delete string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _delete($table)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->qb_limit = FALSE;[m
[32m+[m		[32mreturn parent::_delete($table);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * LIMIT[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific LIMIT clause[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$sql	SQL Query[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _limit($sql)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql .= ' FETCH FIRST '.($this->qb_limit + $this->qb_offset).' ROWS ONLY';[m
[32m+[m
[32m+[m		[32mreturn ($this->qb_offset)[m
[32m+[m			[32m? 'SELECT * FROM ('.$sql.') WHERE rownum > '.$this->qb_offset[m
[32m+[m			[32m: $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/pdo/subdrivers/pdo_ibm_forge.php b/system/database/drivers/pdo/subdrivers/pdo_ibm_forge.php[m
[1mnew file mode 100644[m
[1mindex 0000000..f1bd2c3[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/pdo/subdrivers/pdo_ibm_forge.php[m
[36m@@ -0,0 +1,154 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * PDO IBM DB2 Forge Class[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_pdo_ibm_forge extends CI_DB_pdo_forge {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * RENAME TABLE IF statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_rename_table	= 'RENAME TABLE %s TO %s';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * UNSIGNED support[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_unsigned		= array([m
[32m+[m		[32m'SMALLINT'	=> 'INTEGER',[m
[32m+[m		[32m'INT'		=> 'BIGINT',[m
[32m+[m		[32m'INTEGER'	=> 'BIGINT'[m
[32m+[m	[32m);[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * DEFAULT value representation in CREATE/ALTER TABLE statements[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_default		= FALSE;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ALTER TABLE[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$alter_type	ALTER type[m
[32m+[m	[32m * @param	string	$table		Table name[m
[32m+[m	[32m * @param	mixed	$field		Column definition[m
[32m+[m	[32m * @return	string|string[][m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _alter_table($alter_type, $table, $field)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($alter_type === 'CHANGE')[m
[32m+[m		[32m{[m
[32m+[m			[32m$alter_type = 'MODIFY';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn parent::_alter_table($alter_type, $table, $field);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute TYPE[m
[32m+[m	[32m *[m
[32m+[m	[32m * Performs a data type mapping between different databases.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_type(&$attributes)[m
[32m+[m	[32m{[m
[32m+[m		[32mswitch (strtoupper($attributes['TYPE']))[m
[32m+[m		[32m{[m
[32m+[m			[32mcase 'TINYINT':[m
[32m+[m				[32m$attributes['TYPE'] = 'SMALLINT';[m
[32m+[m				[32m$attributes['UNSIGNED'] = FALSE;[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mcase 'MEDIUMINT':[m
[32m+[m				[32m$attributes['TYPE'] = 'INTEGER';[m
[32m+[m				[32m$attributes['UNSIGNED'] = FALSE;[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mdefault: return;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute UNIQUE[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @param	array	&$field[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_unique(&$attributes, &$field)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! empty($attributes['UNIQUE']) && $attributes['UNIQUE'] === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$field['unique'] = ' UNIQUE';[m
[32m+[m
[32m+[m			[32m// UNIQUE must be used with NOT NULL[m
[32m+[m			[32m$field['null'] = ' NOT NULL';[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute AUTO_INCREMENT[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @param	array	&$field[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_auto_increment(&$attributes, &$field)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Not supported[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/pdo/subdrivers/pdo_informix_driver.php b/system/database/drivers/pdo/subdrivers/pdo_informix_driver.php[m
[1mnew file mode 100644[m
[1mindex 0000000..e44dcb8[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/pdo/subdrivers/pdo_informix_driver.php[m
[36m@@ -0,0 +1,309 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * PDO Informix Database Adapter Class[m
[32m+[m[32m *[m
[32m+[m[32m * Note: _DB is an extender class that the app controller[m
[32m+[m[32m * creates dynamically based on whether the query builder[m
[32m+[m[32m * class is being used or not.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_pdo_informix_driver extends CI_DB_pdo_driver {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Sub-driver[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $subdriver = 'informix';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ORDER BY random keyword[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_random_keyword = array('ASC', 'ASC'); // Currently not supported[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * Builds the DSN if not already set.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct($params)[m
[32m+[m	[32m{[m
[32m+[m		[32mparent::__construct($params);[m
[32m+[m
[32m+[m		[32mif (empty($this->dsn))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->dsn = 'informix:';[m
[32m+[m
[32m+[m			[32m// Pre-defined DSN[m
[32m+[m			[32mif (empty($this->hostname) && empty($this->host) && empty($this->port) && empty($this->service))[m
[32m+[m			[32m{[m
[32m+[m				[32mif (isset($this->DSN))[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->dsn .= 'DSN='.$this->DSN;[m
[32m+[m				[32m}[m
[32m+[m				[32melseif ( ! empty($this->database))[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->dsn .= 'DSN='.$this->database;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mreturn;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (isset($this->host))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->dsn .= 'host='.$this->host;[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->dsn .= 'host='.(empty($this->hostname) ? '127.0.0.1' : $this->hostname);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (isset($this->service))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->dsn .= '; service='.$this->service;[m
[32m+[m			[32m}[m
[32m+[m			[32melseif ( ! empty($this->port))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->dsn .= '; service='.$this->port;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mempty($this->database) OR $this->dsn .= '; database='.$this->database;[m
[32m+[m			[32mempty($this->server) OR $this->dsn .= '; server='.$this->server;[m
[32m+[m
[32m+[m			[32m$this->dsn .= '; protocol='.(isset($this->protocol) ? $this->protocol : 'onsoctcp')[m
[32m+[m				[32m.'; EnableScrollableCursors=1';[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show table query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the table names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$prefix_limit[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_tables($prefix_limit = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = 'SELECT "tabname" FROM "systables"[m
[32m+[m			[32mWHERE "tabid" > 99 AND "tabtype" = \'T\' AND LOWER("owner") = '.$this->escape(strtolower($this->username));[m
[32m+[m
[32m+[m		[32mif ($prefix_limit === TRUE && $this->dbprefix !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$sql .= ' AND "tabname" LIKE \''.$this->escape_like_str($this->dbprefix)."%' "[m
[32m+[m				[32m.sprintf($this->_like_escape_str, $this->_like_escape_chr);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show column query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the column names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_columns($table = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif (strpos($table, '.') !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32msscanf($table, '%[^.].%s', $owner, $table);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$owner = $this->username;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn 'SELECT "colname" FROM "systables", "syscolumns"[m
[32m+[m			[32mWHERE "systables"."tabid" = "syscolumns"."tabid"[m
[32m+[m				[32mAND "systables"."tabtype" = \'T\'[m
[32m+[m				[32mAND LOWER("systables"."owner") = '.$this->escape(strtolower($owner)).'[m
[32m+[m				[32mAND LOWER("systables"."tabname") = '.$this->escape(strtolower($table));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns an object with field data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function field_data($table)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = 'SELECT "syscolumns"."colname" AS "name",[m
[32m+[m				[32mCASE "syscolumns"."coltype"[m
[32m+[m					[32mWHEN 0 THEN \'CHAR\'[m
[32m+[m					[32mWHEN 1 THEN \'SMALLINT\'[m
[32m+[m					[32mWHEN 2 THEN \'INTEGER\'[m
[32m+[m					[32mWHEN 3 THEN \'FLOAT\'[m
[32m+[m					[32mWHEN 4 THEN \'SMALLFLOAT\'[m
[32m+[m					[32mWHEN 5 THEN \'DECIMAL\'[m
[32m+[m					[32mWHEN 6 THEN \'SERIAL\'[m
[32m+[m					[32mWHEN 7 THEN \'DATE\'[m
[32m+[m					[32mWHEN 8 THEN \'MONEY\'[m
[32m+[m					[32mWHEN 9 THEN \'NULL\'[m
[32m+[m					[32mWHEN 10 THEN \'DATETIME\'[m
[32m+[m					[32mWHEN 11 THEN \'BYTE\'[m
[32m+[m					[32mWHEN 12 THEN \'TEXT\'[m
[32m+[m					[32mWHEN 13 THEN \'VARCHAR\'[m
[32m+[m					[32mWHEN 14 THEN \'INTERVAL\'[m
[32m+[m					[32mWHEN 15 THEN \'NCHAR\'[m
[32m+[m					[32mWHEN 16 THEN \'NVARCHAR\'[m
[32m+[m					[32mWHEN 17 THEN \'INT8\'[m
[32m+[m					[32mWHEN 18 THEN \'SERIAL8\'[m
[32m+[m					[32mWHEN 19 THEN \'SET\'[m
[32m+[m					[32mWHEN 20 THEN \'MULTISET\'[m
[32m+[m					[32mWHEN 21 THEN \'LIST\'[m
[32m+[m					[32mWHEN 22 THEN \'Unnamed ROW\'[m
[32m+[m					[32mWHEN 40 THEN \'LVARCHAR\'[m
[32m+[m					[32mWHEN 41 THEN \'BLOB/CLOB/BOOLEAN\'[m
[32m+[m					[32mWHEN 4118 THEN \'Named ROW\'[m
[32m+[m					[32mELSE "syscolumns"."coltype"[m
[32m+[m				[32mEND AS "type",[m
[32m+[m				[32m"syscolumns"."collength" as "max_length",[m
[32m+[m				[32mCASE "sysdefaults"."type"[m
[32m+[m					[32mWHEN \'L\' THEN "sysdefaults"."default"[m
[32m+[m					[32mELSE NULL[m
[32m+[m				[32mEND AS "default"[m
[32m+[m			[32mFROM "syscolumns", "systables", "sysdefaults"[m
[32m+[m			[32mWHERE "syscolumns"."tabid" = "systables"."tabid"[m
[32m+[m				[32mAND "systables"."tabid" = "sysdefaults"."tabid"[m
[32m+[m				[32mAND "syscolumns"."colno" = "sysdefaults"."colno"[m
[32m+[m				[32mAND "systables"."tabtype" = \'T\'[m
[32m+[m				[32mAND LOWER("systables"."owner") = '.$this->escape(strtolower($this->username)).'[m
[32m+[m				[32mAND LOWER("systables"."tabname") = '.$this->escape(strtolower($table)).'[m
[32m+[m			[32mORDER BY "syscolumns"."colno"';[m
[32m+[m
[32m+[m		[32mreturn (($query = $this->query($sql)) !== FALSE)[m
[32m+[m			[32m? $query->result_object()[m
[32m+[m			[32m: FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Update statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific update string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @param	array	$values[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _update($table, $values)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->qb_limit = FALSE;[m
[32m+[m		[32m$this->qb_orderby = array();[m
[32m+[m		[32mreturn parent::_update($table, $values);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Truncate statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific truncate string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * If the database does not support the TRUNCATE statement,[m
[32m+[m	[32m * then this method maps to 'DELETE FROM table'[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _truncate($table)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'TRUNCATE TABLE ONLY '.$table;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Delete statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific delete string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _delete($table)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->qb_limit = FALSE;[m
[32m+[m		[32mreturn parent::_delete($table);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * LIMIT[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific LIMIT clause[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$sql	$SQL Query[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _limit($sql)[m
[32m+[m	[32m{[m
[32m+[m		[32m$select = 'SELECT '.($this->qb_offset ? 'SKIP '.$this->qb_offset : '').'FIRST '.$this->qb_limit.' ';[m
[32m+[m		[32mreturn preg_replace('/^(SELECT\s)/i', $select, $sql, 1);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/pdo/subdrivers/pdo_informix_forge.php b/system/database/drivers/pdo/subdrivers/pdo_informix_forge.php[m
[1mnew file mode 100644[m
[1mindex 0000000..e4202c2[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/pdo/subdrivers/pdo_informix_forge.php[m
[36m@@ -0,0 +1,163 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * PDO Informix Forge Class[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_pdo_informix_forge extends CI_DB_pdo_forge {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * RENAME TABLE statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_rename_table	= 'RENAME TABLE %s TO %s';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * UNSIGNED support[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_unsigned		= array([m
[32m+[m		[32m'SMALLINT'	=> 'INTEGER',[m
[32m+[m		[32m'INT'		=> 'BIGINT',[m
[32m+[m		[32m'INTEGER'	=> 'BIGINT',[m
[32m+[m		[32m'REAL'		=> 'DOUBLE PRECISION',[m
[32m+[m		[32m'SMALLFLOAT'	=> 'DOUBLE PRECISION'[m
[32m+[m	[32m);[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * DEFAULT value representation in CREATE/ALTER TABLE statements[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_default		= ', ';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ALTER TABLE[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$alter_type	ALTER type[m
[32m+[m	[32m * @param	string	$table		Table name[m
[32m+[m	[32m * @param	mixed	$field		Column definition[m
[32m+[m	[32m * @return	string|string[][m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _alter_table($alter_type, $table, $field)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($alter_type === 'CHANGE')[m
[32m+[m		[32m{[m
[32m+[m			[32m$alter_type = 'MODIFY';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn parent::_alter_table($alter_type, $table, $field);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute TYPE[m
[32m+[m	[32m *[m
[32m+[m	[32m * Performs a data type mapping between different databases.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_type(&$attributes)[m
[32m+[m	[32m{[m
[32m+[m		[32mswitch (strtoupper($attributes['TYPE']))[m
[32m+[m		[32m{[m
[32m+[m			[32mcase 'TINYINT':[m
[32m+[m				[32m$attributes['TYPE'] = 'SMALLINT';[m
[32m+[m				[32m$attributes['UNSIGNED'] = FALSE;[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mcase 'MEDIUMINT':[m
[32m+[m				[32m$attributes['TYPE'] = 'INTEGER';[m
[32m+[m				[32m$attributes['UNSIGNED'] = FALSE;[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mcase 'BYTE':[m
[32m+[m			[32mcase 'TEXT':[m
[32m+[m			[32mcase 'BLOB':[m
[32m+[m			[32mcase 'CLOB':[m
[32m+[m				[32m$attributes['UNIQUE'] = FALSE;[m
[32m+[m				[32mif (isset($attributes['DEFAULT']))[m
[32m+[m				[32m{[m
[32m+[m					[32munset($attributes['DEFAULT']);[m
[32m+[m				[32m}[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mdefault: return;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute UNIQUE[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @param	array	&$field[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_unique(&$attributes, &$field)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! empty($attributes['UNIQUE']) && $attributes['UNIQUE'] === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$field['unique'] = ' UNIQUE CONSTRAINT '.$this->db->escape_identifiers($field['name']);[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute AUTO_INCREMENT[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @param	array	&$field[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_auto_increment(&$attributes, &$field)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Not supported[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/pdo/subdrivers/pdo_mysql_driver.php b/system/database/drivers/pdo/subdrivers/pdo_mysql_driver.php[m
[1mnew file mode 100644[m
[1mindex 0000000..e172145[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/pdo/subdrivers/pdo_mysql_driver.php[m
[36m@@ -0,0 +1,374 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * PDO MySQL Database Adapter Class[m
[32m+[m[32m *[m
[32m+[m[32m * Note: _DB is an extender class that the app controller[m
[32m+[m[32m * creates dynamically based on whether the query builder[m
[32m+[m[32m * class is being used or not.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_pdo_mysql_driver extends CI_DB_pdo_driver {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Sub-driver[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $subdriver = 'mysql';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Compression flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $compress = FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Strict ON flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * Whether we're running in strict SQL mode.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $stricton;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Identifier escape character[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_escape_char = '`';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * Builds the DSN if not already set.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct($params)[m
[32m+[m	[32m{[m
[32m+[m		[32mparent::__construct($params);[m
[32m+[m
[32m+[m		[32mif (empty($this->dsn))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->dsn = 'mysql:host='.(empty($this->hostname) ? '127.0.0.1' : $this->hostname);[m
[32m+[m
[32m+[m			[32mempty($this->port) OR $this->dsn .= ';port='.$this->port;[m
[32m+[m			[32mempty($this->database) OR $this->dsn .= ';dbname='.$this->database;[m
[32m+[m			[32mempty($this->char_set) OR $this->dsn .= ';charset='.$this->char_set;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! empty($this->char_set) && strpos($this->dsn, 'charset=', 6) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->dsn .= ';charset='.$this->char_set;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database connection[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$persistent[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function db_connect($persistent = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (isset($this->stricton))[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($this->stricton)[m
[32m+[m			[32m{[m
[32m+[m				[32m$sql = 'CONCAT(@@sql_mode, ",", "STRICT_ALL_TABLES")';[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$sql = 'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE([m
[32m+[m[32m                                        @@sql_mode,[m
[32m+[m[32m                                        "STRICT_ALL_TABLES,", ""),[m
[32m+[m[32m                                        ",STRICT_ALL_TABLES", ""),[m
[32m+[m[32m                                        "STRICT_ALL_TABLES", ""),[m
[32m+[m[32m                                        "STRICT_TRANS_TABLES,", ""),[m
[32m+[m[32m                                        ",STRICT_TRANS_TABLES", ""),[m
[32m+[m[32m                                        "STRICT_TRANS_TABLES", "")';[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif ( ! empty($sql))[m
[32m+[m			[32m{[m
[32m+[m				[32mif (empty($this->options[PDO::MYSQL_ATTR_INIT_COMMAND]))[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->options[PDO::MYSQL_ATTR_INIT_COMMAND] = 'SET SESSION sql_mode = '.$sql;[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->options[PDO::MYSQL_ATTR_INIT_COMMAND] .= ', @@session.sql_mode = '.$sql;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($this->compress === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->options[PDO::MYSQL_ATTR_COMPRESS] = TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (is_array($this->encrypt))[m
[32m+[m		[32m{[m
[32m+[m			[32m$ssl = array();[m
[32m+[m			[32mempty($this->encrypt['ssl_key'])    OR $ssl[PDO::MYSQL_ATTR_SSL_KEY]    = $this->encrypt['ssl_key'];[m
[32m+[m			[32mempty($this->encrypt['ssl_cert'])   OR $ssl[PDO::MYSQL_ATTR_SSL_CERT]   = $this->encrypt['ssl_cert'];[m
[32m+[m			[32mempty($this->encrypt['ssl_ca'])     OR $ssl[PDO::MYSQL_ATTR_SSL_CA]     = $this->encrypt['ssl_ca'];[m
[32m+[m			[32mempty($this->encrypt['ssl_capath']) OR $ssl[PDO::MYSQL_ATTR_SSL_CAPATH] = $this->encrypt['ssl_capath'];[m
[32m+[m			[32mempty($this->encrypt['ssl_cipher']) OR $ssl[PDO::MYSQL_ATTR_SSL_CIPHER] = $this->encrypt['ssl_cipher'];[m
[32m+[m
[32m+[m			[32m// DO NOT use array_merge() here![m
[32m+[m			[32m// It re-indexes numeric keys and the PDO_MYSQL_ATTR_SSL_* constants are integers.[m
[32m+[m			[32mempty($ssl) OR $this->options += $ssl;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Prior to version 5.7.3, MySQL silently downgrades to an unencrypted connection if SSL setup fails[m
[32m+[m		[32mif ([m
[32m+[m			[32m($pdo = parent::db_connect($persistent)) !== FALSE[m
[32m+[m			[32m&& ! empty($ssl)[m
[32m+[m			[32m&& version_compare($pdo->getAttribute(PDO::ATTR_CLIENT_VERSION), '5.7.3', '<=')[m
[32m+[m			[32m&& empty($pdo->query("SHOW STATUS LIKE 'ssl_cipher'")->fetchObject()->Value)[m
[32m+[m		[32m)[m
[32m+[m		[32m{[m
[32m+[m			[32m$message = 'PDO_MYSQL was configured for an SSL connection, but got an unencrypted connection instead!';[m
[32m+[m			[32mlog_message('error', $message);[m
[32m+[m			[32mreturn ($this->db_debug) ? $this->display_error($message, '', TRUE) : FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $pdo;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Select the database[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$database[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function db_select($database = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($database === '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$database = $this->database;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (FALSE !== $this->simple_query('USE '.$this->escape_identifiers($database)))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->database = $database;[m
[32m+[m			[32m$this->data_cache = array();[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Begin Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_begin()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->conn_id->setAttribute(PDO::ATTR_AUTOCOMMIT, FALSE);[m
[32m+[m		[32mreturn $this->conn_id->beginTransaction();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Commit Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_commit()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->conn_id->commit())[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->conn_id->setAttribute(PDO::ATTR_AUTOCOMMIT, TRUE);[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Rollback Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_rollback()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->conn_id->rollBack())[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->conn_id->setAttribute(PDO::ATTR_AUTOCOMMIT, TRUE);[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show table query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the table names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$prefix_limit[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_tables($prefix_limit = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = 'SHOW TABLES';[m
[32m+[m
[32m+[m		[32mif ($prefix_limit === TRUE && $this->dbprefix !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $sql." LIKE '".$this->escape_like_str($this->dbprefix)."%'";[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show column query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the column names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_columns($table = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'SHOW COLUMNS FROM '.$this->protect_identifiers($table, TRUE, NULL, FALSE);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns an object with field data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function field_data($table)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (($query = $this->query('SHOW COLUMNS FROM '.$this->protect_identifiers($table, TRUE, NULL, FALSE))) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m		[32m$query = $query->result_object();[m
[32m+[m
[32m+[m		[32m$retval = array();[m
[32m+[m		[32mfor ($i = 0, $c = count($query); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$retval[$i]			= new stdClass();[m
[32m+[m			[32m$retval[$i]->name		= $query[$i]->Field;[m
[32m+[m
[32m+[m			[32msscanf($query[$i]->Type, '%[a-z](%d)',[m
[32m+[m				[32m$retval[$i]->type,[m
[32m+[m				[32m$retval[$i]->max_length[m
[32m+[m			[32m);[m
[32m+[m
[32m+[m			[32m$retval[$i]->default		= $query[$i]->Default;[m
[32m+[m			[32m$retval[$i]->primary_key	= (int) ($query[$i]->Key === 'PRI');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $retval;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Truncate statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific truncate string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * If the database does not support the TRUNCATE statement,[m
[32m+[m	[32m * then this method maps to 'DELETE FROM table'[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _truncate($table)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'TRUNCATE '.$table;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * FROM tables[m
[32m+[m	[32m *[m
[32m+[m	[32m * Groups tables in FROM clauses if needed, so there is no confusion[m
[32m+[m	[32m * about operator precedence.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _from_tables()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! empty($this->qb_join) && count($this->qb_from) > 1)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn '('.implode(', ', $this->qb_from).')';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn implode(', ', $this->qb_from);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/pdo/subdrivers/pdo_mysql_forge.php b/system/database/drivers/pdo/subdrivers/pdo_mysql_forge.php[m
[1mnew file mode 100644[m
[1mindex 0000000..629e0a9[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/pdo/subdrivers/pdo_mysql_forge.php[m
[36m@@ -0,0 +1,256 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * PDO MySQL Forge Class[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_pdo_mysql_forge extends CI_DB_pdo_forge {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CREATE DATABASE statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_create_database	= 'CREATE DATABASE %s CHARACTER SET %s COLLATE %s';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CREATE TABLE IF statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_create_table_if	= 'CREATE TABLE IF NOT EXISTS';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CREATE TABLE keys flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * Whether table keys are created from within the[m
[32m+[m	[32m * CREATE TABLE statement.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_create_table_keys	= TRUE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * DROP TABLE IF statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_drop_table_if	= 'DROP TABLE IF EXISTS';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * UNSIGNED support[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_unsigned		= array([m
[32m+[m		[32m'TINYINT',[m
[32m+[m		[32m'SMALLINT',[m
[32m+[m		[32m'MEDIUMINT',[m
[32m+[m		[32m'INT',[m
[32m+[m		[32m'INTEGER',[m
[32m+[m		[32m'BIGINT',[m
[32m+[m		[32m'REAL',[m
[32m+[m		[32m'DOUBLE',[m
[32m+[m		[32m'DOUBLE PRECISION',[m
[32m+[m		[32m'FLOAT',[m
[32m+[m		[32m'DECIMAL',[m
[32m+[m		[32m'NUMERIC'[m
[32m+[m	[32m);[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * NULL value representation in CREATE/ALTER TABLE statements[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_null = 'NULL';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CREATE TABLE attributes[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$attributes	Associative array of table attributes[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _create_table_attr($attributes)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = '';[m
[32m+[m
[32m+[m		[32mforeach (array_keys($attributes) as $key)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (is_string($key))[m
[32m+[m			[32m{[m
[32m+[m				[32m$sql .= ' '.strtoupper($key).' = '.$attributes[$key];[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! empty($this->db->char_set) && ! strpos($sql, 'CHARACTER SET') && ! strpos($sql, 'CHARSET'))[m
[32m+[m		[32m{[m
[32m+[m			[32m$sql .= ' DEFAULT CHARACTER SET = '.$this->db->char_set;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! empty($this->db->dbcollat) && ! strpos($sql, 'COLLATE'))[m
[32m+[m		[32m{[m
[32m+[m			[32m$sql .= ' COLLATE = '.$this->db->dbcollat;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ALTER TABLE[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$alter_type	ALTER type[m
[32m+[m	[32m * @param	string	$table		Table name[m
[32m+[m	[32m * @param	mixed	$field		Column definition[m
[32m+[m	[32m * @return	string|string[][m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _alter_table($alter_type, $table, $field)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($alter_type === 'DROP')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn parent::_alter_table($alter_type, $table, $field);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sql = 'ALTER TABLE '.$this->db->escape_identifiers($table);[m
[32m+[m		[32mfor ($i = 0, $c = count($field); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($field[$i]['_literal'] !== FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$field[$i] = ($alter_type === 'ADD')[m
[32m+[m						[32m? "\n\tADD ".$field[$i]['_literal'][m
[32m+[m						[32m: "\n\tMODIFY ".$field[$i]['_literal'];[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32mif ($alter_type === 'ADD')[m
[32m+[m				[32m{[m
[32m+[m					[32m$field[$i]['_literal'] = "\n\tADD ";[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32m$field[$i]['_literal'] = empty($field[$i]['new_name']) ? "\n\tMODIFY " : "\n\tCHANGE ";[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m$field[$i] = $field[$i]['_literal'].$this->_process_column($field[$i]);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn array($sql.implode(',', $field));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Process column[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$field[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _process_column($field)[m
[32m+[m	[32m{[m
[32m+[m		[32m$extra_clause = isset($field['after'])[m
[32m+[m			[32m? ' AFTER '.$this->db->escape_identifiers($field['after']) : '';[m
[32m+[m
[32m+[m		[32mif (empty($extra_clause) && isset($field['first']) && $field['first'] === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$extra_clause = ' FIRST';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->db->escape_identifiers($field['name'])[m
[32m+[m			[32m.(empty($field['new_name']) ? '' : ' '.$this->db->escape_identifiers($field['new_name']))[m
[32m+[m			[32m.' '.$field['type'].$field['length'][m
[32m+[m			[32m.$field['unsigned'][m
[32m+[m			[32m.$field['null'][m
[32m+[m			[32m.$field['default'][m
[32m+[m			[32m.$field['auto_increment'][m
[32m+[m			[32m.$field['unique'][m
[32m+[m			[32m.(empty($field['comment']) ? '' : ' COMMENT '.$field['comment'])[m
[32m+[m			[32m.$extra_clause;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Process indexes[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table	(ignored)[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _process_indexes($table)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = '';[m
[32m+[m
[32m+[m		[32mfor ($i = 0, $c = count($this->keys); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (is_array($this->keys[$i]))[m
[32m+[m			[32m{[m
[32m+[m				[32mfor ($i2 = 0, $c2 = count($this->keys[$i]); $i2 < $c2; $i2++)[m
[32m+[m				[32m{[m
[32m+[m					[32mif ( ! isset($this->fields[$this->keys[$i][$i2]]))[m
[32m+[m					[32m{[m
[32m+[m						[32munset($this->keys[$i][$i2]);[m
[32m+[m						[32mcontinue;[m
[32m+[m					[32m}[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m			[32melseif ( ! isset($this->fields[$this->keys[$i]]))[m
[32m+[m			[32m{[m
[32m+[m				[32munset($this->keys[$i]);[m
[32m+[m				[32mcontinue;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mis_array($this->keys[$i]) OR $this->keys[$i] = array($this->keys[$i]);[m
[32m+[m
[32m+[m			[32m$sql .= ",\n\tKEY ".$this->db->escape_identifiers(implode('_', $this->keys[$i]))[m
[32m+[m				[32m.' ('.implode(', ', $this->db->escape_identifiers($this->keys[$i])).')';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->keys = array();[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/pdo/subdrivers/pdo_oci_driver.php b/system/database/drivers/pdo/subdrivers/pdo_oci_driver.php[m
[1mnew file mode 100644[m
[1mindex 0000000..fef7a9a[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/pdo/subdrivers/pdo_oci_driver.php[m
[36m@@ -0,0 +1,326 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * PDO Oracle Database Adapter Class[m
[32m+[m[32m *[m
[32m+[m[32m * Note: _DB is an extender class that the app controller[m
[32m+[m[32m * creates dynamically based on whether the query builder[m
[32m+[m[32m * class is being used or not.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_pdo_oci_driver extends CI_DB_pdo_driver {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Sub-driver[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $subdriver = 'oci';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of reserved identifiers[m
[32m+[m	[32m *[m
[32m+[m	[32m * Identifiers that must NOT be escaped.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[][m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_reserved_identifiers = array('*', 'rownum');[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ORDER BY random keyword[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_random_keyword = array('ASC', 'ASC'); // Currently not supported[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * COUNT string[m
[32m+[m	[32m *[m
[32m+[m	[32m * @used-by	CI_DB_driver::count_all()[m
[32m+[m	[32m * @used-by	CI_DB_query_builder::count_all_results()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_count_string = 'SELECT COUNT(1) AS ';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * Builds the DSN if not already set.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct($params)[m
[32m+[m	[32m{[m
[32m+[m		[32mparent::__construct($params);[m
[32m+[m
[32m+[m		[32mif (empty($this->dsn))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->dsn = 'oci:dbname=';[m
[32m+[m
[32m+[m			[32m// Oracle has a slightly different PDO DSN format (Easy Connect),[m
[32m+[m			[32m// which also supports pre-defined DSNs.[m
[32m+[m			[32mif (empty($this->hostname) && empty($this->port))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->dsn .= $this->database;[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->dsn .= '//'.(empty($this->hostname) ? '127.0.0.1' : $this->hostname)[m
[32m+[m					[32m.(empty($this->port) ? '' : ':'.$this->port).'/';[m
[32m+[m
[32m+[m				[32mempty($this->database) OR $this->dsn .= $this->database;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mempty($this->char_set) OR $this->dsn .= ';charset='.$this->char_set;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! empty($this->char_set) && strpos($this->dsn, 'charset=', 4) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->dsn .= ';charset='.$this->char_set;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database version number[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function version()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (isset($this->data_cache['version']))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->data_cache['version'];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$version_string = parent::version();[m
[32m+[m		[32mif (preg_match('#Release\s(?<version>\d+(?:\.\d+)+)#', $version_string, $match))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->data_cache['version'] = $match[1];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show table query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the table names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$prefix_limit[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_tables($prefix_limit = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = 'SELECT "TABLE_NAME" FROM "ALL_TABLES"';[m
[32m+[m
[32m+[m		[32mif ($prefix_limit === TRUE && $this->dbprefix !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $sql.' WHERE "TABLE_NAME" LIKE \''.$this->escape_like_str($this->dbprefix)."%' "[m
[32m+[m				[32m.sprintf($this->_like_escape_str, $this->_like_escape_chr);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show column query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the column names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_columns($table = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif (strpos($table, '.') !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32msscanf($table, '%[^.].%s', $owner, $table);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$owner = $this->username;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn 'SELECT COLUMN_NAME FROM ALL_TAB_COLUMNS[m
[32m+[m			[32mWHERE UPPER(OWNER) = '.$this->escape(strtoupper($owner)).'[m
[32m+[m				[32mAND UPPER(TABLE_NAME) = '.$this->escape(strtoupper($table));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns an object with field data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function field_data($table)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (strpos($table, '.') !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32msscanf($table, '%[^.].%s', $owner, $table);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$owner = $this->username;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sql = 'SELECT COLUMN_NAME, DATA_TYPE, CHAR_LENGTH, DATA_PRECISION, DATA_LENGTH, DATA_DEFAULT, NULLABLE[m
[32m+[m			[32mFROM ALL_TAB_COLUMNS[m
[32m+[m			[32mWHERE UPPER(OWNER) = '.$this->escape(strtoupper($owner)).'[m
[32m+[m				[32mAND UPPER(TABLE_NAME) = '.$this->escape(strtoupper($table));[m
[32m+[m
[32m+[m		[32mif (($query = $this->query($sql)) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m		[32m$query = $query->result_object();[m
[32m+[m
[32m+[m		[32m$retval = array();[m
[32m+[m		[32mfor ($i = 0, $c = count($query); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$retval[$i]			= new stdClass();[m
[32m+[m			[32m$retval[$i]->name		= $query[$i]->COLUMN_NAME;[m
[32m+[m			[32m$retval[$i]->type		= $query[$i]->DATA_TYPE;[m
[32m+[m
[32m+[m			[32m$length = ($query[$i]->CHAR_LENGTH > 0)[m
[32m+[m				[32m? $query[$i]->CHAR_LENGTH : $query[$i]->DATA_PRECISION;[m
[32m+[m			[32mif ($length === NULL)[m
[32m+[m			[32m{[m
[32m+[m				[32m$length = $query[$i]->DATA_LENGTH;[m
[32m+[m			[32m}[m
[32m+[m			[32m$retval[$i]->max_length		= $length;[m
[32m+[m
[32m+[m			[32m$default = $query[$i]->DATA_DEFAULT;[m
[32m+[m			[32mif ($default === NULL && $query[$i]->NULLABLE === 'N')[m
[32m+[m			[32m{[m
[32m+[m				[32m$default = '';[m
[32m+[m			[32m}[m
[32m+[m			[32m$retval[$i]->default		= $query[$i]->COLUMN_DEFAULT;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $retval;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Insert batch statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table	Table name[m
[32m+[m	[32m * @param	array	$keys	INSERT keys[m
[32m+[m	[32m * @param	array	$values	INSERT values[m
[32m+[m	[32m * @return 	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _insert_batch($table, $keys, $values)[m
[32m+[m	[32m{[m
[32m+[m		[32m$keys = implode(', ', $keys);[m
[32m+[m		[32m$sql = "INSERT ALL\n";[m
[32m+[m
[32m+[m		[32mfor ($i = 0, $c = count($values); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$sql .= '	INTO '.$table.' ('.$keys.') VALUES '.$values[$i]."\n";[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql.'SELECT * FROM dual';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Delete statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific delete string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _delete($table)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->qb_limit)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->where('rownum <= ',$this->qb_limit, FALSE);[m
[32m+[m			[32m$this->qb_limit = FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn parent::_delete($table);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * LIMIT[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific LIMIT clause[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$sql	SQL Query[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _limit($sql)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (version_compare($this->version(), '12.1', '>='))[m
[32m+[m		[32m{[m
[32m+[m			[32m// OFFSET-FETCH can be used only with the ORDER BY clause[m
[32m+[m			[32mempty($this->qb_orderby) && $sql .= ' ORDER BY 1';[m
[32m+[m
[32m+[m			[32mreturn $sql.' OFFSET '.(int) $this->qb_offset.' ROWS FETCH NEXT '.$this->qb_limit.' ROWS ONLY';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn 'SELECT * FROM (SELECT inner_query.*, rownum rnum FROM ('.$sql.') inner_query WHERE rownum < '.($this->qb_offset + $this->qb_limit + 1).')'[m
[32m+[m			[32m.($this->qb_offset ? ' WHERE rnum >= '.($this->qb_offset + 1): '');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/pdo/subdrivers/pdo_oci_forge.php b/system/database/drivers/pdo/subdrivers/pdo_oci_forge.php[m
[1mnew file mode 100644[m
[1mindex 0000000..ad26561[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/pdo/subdrivers/pdo_oci_forge.php[m
[36m@@ -0,0 +1,176 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * PDO Oracle Forge Class[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_pdo_oci_forge extends CI_DB_pdo_forge {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CREATE DATABASE statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_create_database	= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CREATE TABLE IF statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_create_table_if	= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * DROP DATABASE statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_drop_database	= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * UNSIGNED support[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool|array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_unsigned		= FALSE;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ALTER TABLE[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$alter_type	ALTER type[m
[32m+[m	[32m * @param	string	$table		Table name[m
[32m+[m	[32m * @param	mixed	$field		Column definition[m
[32m+[m	[32m * @return	string|string[][m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _alter_table($alter_type, $table, $field)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($alter_type === 'DROP')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn parent::_alter_table($alter_type, $table, $field);[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($alter_type === 'CHANGE')[m
[32m+[m		[32m{[m
[32m+[m			[32m$alter_type = 'MODIFY';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sql = 'ALTER TABLE '.$this->db->escape_identifiers($table);[m
[32m+[m		[32m$sqls = array();[m
[32m+[m		[32mfor ($i = 0, $c = count($field); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($field[$i]['_literal'] !== FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$field[$i] = "\n\t".$field[$i]['_literal'];[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$field[$i]['_literal'] = "\n\t".$this->_process_column($field[$i]);[m
[32m+[m
[32m+[m				[32mif ( ! empty($field[$i]['comment']))[m
[32m+[m				[32m{[m
[32m+[m					[32m$sqls[] = 'COMMENT ON COLUMN '[m
[32m+[m						[32m.$this->db->escape_identifiers($table).'.'.$this->db->escape_identifiers($field[$i]['name'])[m
[32m+[m						[32m.' IS '.$field[$i]['comment'];[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mif ($alter_type === 'MODIFY' && ! empty($field[$i]['new_name']))[m
[32m+[m				[32m{[m
[32m+[m					[32m$sqls[] = $sql.' RENAME COLUMN '.$this->db->escape_identifiers($field[$i]['name'])[m
[32m+[m						[32m.' TO '.$this->db->escape_identifiers($field[$i]['new_name']);[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sql .= ' '.$alter_type.' ';[m
[32m+[m		[32m$sql .= (count($field) === 1)[m
[32m+[m				[32m? $field[0][m
[32m+[m				[32m: '('.implode(',', $field).')';[m
[32m+[m
[32m+[m		[32m// RENAME COLUMN must be executed after MODIFY[m
[32m+[m		[32marray_unshift($sqls, $sql);[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute AUTO_INCREMENT[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @param	array	&$field[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_auto_increment(&$attributes, &$field)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Not supported - sequences and triggers must be used instead[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute TYPE[m
[32m+[m	[32m *[m
[32m+[m	[32m * Performs a data type mapping between different databases.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_type(&$attributes)[m
[32m+[m	[32m{[m
[32m+[m		[32mswitch (strtoupper($attributes['TYPE']))[m
[32m+[m		[32m{[m
[32m+[m			[32mcase 'TINYINT':[m
[32m+[m				[32m$attributes['TYPE'] = 'NUMBER';[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mcase 'MEDIUMINT':[m
[32m+[m				[32m$attributes['TYPE'] = 'NUMBER';[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mcase 'INT':[m
[32m+[m				[32m$attributes['TYPE'] = 'NUMBER';[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mcase 'BIGINT':[m
[32m+[m				[32m$attributes['TYPE'] = 'NUMBER';[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mdefault: return;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/pdo/subdrivers/pdo_odbc_driver.php b/system/database/drivers/pdo/subdrivers/pdo_odbc_driver.php[m
[1mnew file mode 100644[m
[1mindex 0000000..4890988[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/pdo/subdrivers/pdo_odbc_driver.php[m
[36m@@ -0,0 +1,229 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * PDO ODBC Database Adapter Class[m
[32m+[m[32m *[m
[32m+[m[32m * Note: _DB is an extender class that the app controller[m
[32m+[m[32m * creates dynamically based on whether the query builder[m
[32m+[m[32m * class is being used or not.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_pdo_odbc_driver extends CI_DB_pdo_driver {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Sub-driver[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $subdriver = 'odbc';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database schema[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $schema = 'public';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Identifier escape character[m
[32m+[m	[32m *[m
[32m+[m	[32m * Must be empty for ODBC.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_escape_char = '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ESCAPE statement string[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_like_escape_str = " {escape '%s'} ";[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ORDER BY random keyword[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_random_keyword = array('RND()', 'RND(%d)');[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * Builds the DSN if not already set.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct($params)[m
[32m+[m	[32m{[m
[32m+[m		[32mparent::__construct($params);[m
[32m+[m
[32m+[m		[32mif (empty($this->dsn))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->dsn = 'odbc:';[m
[32m+[m
[32m+[m			[32m// Pre-defined DSN[m
[32m+[m			[32mif (empty($this->hostname) && empty($this->HOSTNAME) && empty($this->port) && empty($this->PORT))[m
[32m+[m			[32m{[m
[32m+[m				[32mif (isset($this->DSN))[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->dsn .= 'DSN='.$this->DSN;[m
[32m+[m				[32m}[m
[32m+[m				[32melseif ( ! empty($this->database))[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->dsn .= 'DSN='.$this->database;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mreturn;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// If the DSN is not pre-configured - try to build an IBM DB2 connection string[m
[32m+[m			[32m$this->dsn .= 'DRIVER='.(isset($this->DRIVER) ? '{'.$this->DRIVER.'}' : '{IBM DB2 ODBC DRIVER}').';';[m
[32m+[m
[32m+[m			[32mif (isset($this->DATABASE))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->dsn .= 'DATABASE='.$this->DATABASE.';';[m
[32m+[m			[32m}[m
[32m+[m			[32melseif ( ! empty($this->database))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->dsn .= 'DATABASE='.$this->database.';';[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (isset($this->HOSTNAME))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->dsn .= 'HOSTNAME='.$this->HOSTNAME.';';[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->dsn .= 'HOSTNAME='.(empty($this->hostname) ? '127.0.0.1;' : $this->hostname.';');[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (isset($this->PORT))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->dsn .= 'PORT='.$this->port.';';[m
[32m+[m			[32m}[m
[32m+[m			[32melseif ( ! empty($this->port))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->dsn .= ';PORT='.$this->port.';';[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$this->dsn .= 'PROTOCOL='.(isset($this->PROTOCOL) ? $this->PROTOCOL.';' : 'TCPIP;');[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Platform-dependent string escape[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _escape_str($str)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->display_error('db_unsupported_feature');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Determines if a query is a "write" type.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	An SQL query string[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function is_write_type($sql)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (preg_match('#^(INSERT|UPDATE).*RETURNING\s.+(\,\s?.+)*$#is', $sql))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn parent::is_write_type($sql);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show table query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the table names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$prefix_limit[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_tables($prefix_limit = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = "SELECT table_name FROM information_schema.tables WHERE table_schema = '".$this->schema."'";[m
[32m+[m
[32m+[m		[32mif ($prefix_limit !== FALSE && $this->dbprefix !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $sql." AND table_name LIKE '".$this->escape_like_str($this->dbprefix)."%' "[m
[32m+[m				[32m.sprintf($this->_like_escape_str, $this->_like_escape_chr);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show column query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the column names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_columns($table = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'SELECT column_name FROM information_schema.columns WHERE table_name = '.$this->escape($table);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/pdo/subdrivers/pdo_odbc_forge.php b/system/database/drivers/pdo/subdrivers/pdo_odbc_forge.php[m
[1mnew file mode 100644[m
[1mindex 0000000..02b6a2a[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/pdo/subdrivers/pdo_odbc_forge.php[m
[36m@@ -0,0 +1,70 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * PDO ODBC Forge Class[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_pdo_odbc_forge extends CI_DB_pdo_forge {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * UNSIGNED support[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool|array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_unsigned		= FALSE;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute AUTO_INCREMENT[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @param	array	&$field[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_auto_increment(&$attributes, &$field)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Not supported (in most databases at least)[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/pdo/subdrivers/pdo_pgsql_driver.php b/system/database/drivers/pdo/subdrivers/pdo_pgsql_driver.php[m
[1mnew file mode 100644[m
[1mindex 0000000..33c8f1e[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/pdo/subdrivers/pdo_pgsql_driver.php[m
[36m@@ -0,0 +1,384 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * PDO PostgreSQL Database Adapter Class[m
[32m+[m[32m *[m
[32m+[m[32m * Note: _DB is an extender class that the app controller[m
[32m+[m[32m * creates dynamically based on whether the query builder[m
[32m+[m[32m * class is being used or not.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_pdo_pgsql_driver extends CI_DB_pdo_driver {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Sub-driver[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $subdriver = 'pgsql';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database schema[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $schema = 'public';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ORDER BY random keyword[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_random_keyword = array('RANDOM()', 'RANDOM()');[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * Builds the DSN if not already set.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct($params)[m
[32m+[m	[32m{[m
[32m+[m		[32mparent::__construct($params);[m
[32m+[m
[32m+[m		[32mif (empty($this->dsn))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->dsn = 'pgsql:host='.(empty($this->hostname) ? '127.0.0.1' : $this->hostname);[m
[32m+[m
[32m+[m			[32mempty($this->port) OR $this->dsn .= ';port='.$this->port;[m
[32m+[m			[32mempty($this->database) OR $this->dsn .= ';dbname='.$this->database;[m
[32m+[m
[32m+[m			[32mif ( ! empty($this->username))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->dsn .= ';username='.$this->username;[m
[32m+[m				[32mempty($this->password) OR $this->dsn .= ';password='.$this->password;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database connection[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$persistent[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function db_connect($persistent = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->conn_id = parent::db_connect($persistent);[m
[32m+[m
[32m+[m		[32mif (is_object($this->conn_id) && ! empty($this->schema))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->simple_query('SET search_path TO '.$this->schema.',public');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->conn_id;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Insert ID[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$name[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function insert_id($name = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($name === NULL && version_compare($this->version(), '8.1', '>='))[m
[32m+[m		[32m{[m
[32m+[m			[32m$query = $this->query('SELECT LASTVAL() AS ins_id');[m
[32m+[m			[32m$query = $query->row();[m
[32m+[m			[32mreturn $query->ins_id;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->conn_id->lastInsertId($name);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Determines if a query is a "write" type.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	An SQL query string[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function is_write_type($sql)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (preg_match('#^(INSERT|UPDATE).*RETURNING\s.+(\,\s?.+)*$#is', $sql))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn parent::is_write_type($sql);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * "Smart" Escape String[m
[32m+[m	[32m *[m
[32m+[m	[32m * Escapes data based on type[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$str[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function escape($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (is_bool($str))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($str) ? 'TRUE' : 'FALSE';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn parent::escape($str);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ORDER BY[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$orderby[m
[32m+[m	[32m * @param	string	$direction	ASC, DESC or RANDOM[m
[32m+[m	[32m * @param	bool	$escape[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function order_by($orderby, $direction = '', $escape = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32m$direction = strtoupper(trim($direction));[m
[32m+[m		[32mif ($direction === 'RANDOM')[m
[32m+[m		[32m{[m
[32m+[m			[32mif ( ! is_float($orderby) && ctype_digit((string) $orderby))[m
[32m+[m			[32m{[m
[32m+[m				[32m$orderby = ($orderby > 1)[m
[32m+[m					[32m? (float) '0.'.$orderby[m
[32m+[m					[32m: (float) $orderby;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (is_float($orderby))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->simple_query('SET SEED '.$orderby);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$orderby = $this->_random_keyword[0];[m
[32m+[m			[32m$direction = '';[m
[32m+[m			[32m$escape = FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn parent::order_by($orderby, $direction, $escape);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show table query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the table names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$prefix_limit[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_tables($prefix_limit = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = 'SELECT "table_name" FROM "information_schema"."tables" WHERE "table_schema" = \''.$this->schema."'";[m
[32m+[m
[32m+[m		[32mif ($prefix_limit === TRUE && $this->dbprefix !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $sql.' AND "table_name" LIKE \''[m
[32m+[m				[32m.$this->escape_like_str($this->dbprefix)."%' "[m
[32m+[m				[32m.sprintf($this->_like_escape_str, $this->_like_escape_chr);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List column query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the column names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_columns($table = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'SELECT "column_name"[m
[32m+[m			[32mFROM "information_schema"."columns"[m
[32m+[m			[32mWHERE LOWER("table_name") = '.$this->escape(strtolower($table));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns an object with field data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function field_data($table)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = 'SELECT "column_name", "data_type", "character_maximum_length", "numeric_precision", "column_default"[m
[32m+[m			[32mFROM "information_schema"."columns"[m
[32m+[m			[32mWHERE LOWER("table_name") = '.$this->escape(strtolower($table));[m
[32m+[m
[32m+[m		[32mif (($query = $this->query($sql)) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m		[32m$query = $query->result_object();[m
[32m+[m
[32m+[m		[32m$retval = array();[m
[32m+[m		[32mfor ($i = 0, $c = count($query); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$retval[$i]			= new stdClass();[m
[32m+[m			[32m$retval[$i]->name		= $query[$i]->column_name;[m
[32m+[m			[32m$retval[$i]->type		= $query[$i]->data_type;[m
[32m+[m			[32m$retval[$i]->max_length		= ($query[$i]->character_maximum_length > 0) ? $query[$i]->character_maximum_length : $query[$i]->numeric_precision;[m
[32m+[m			[32m$retval[$i]->default		= $query[$i]->column_default;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $retval;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Update statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific update string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @param	array	$values[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _update($table, $values)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->qb_limit = FALSE;[m
[32m+[m		[32m$this->qb_orderby = array();[m
[32m+[m		[32mreturn parent::_update($table, $values);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Update_Batch statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific batch update string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table	Table name[m
[32m+[m	[32m * @param	array	$values	Update data[m
[32m+[m	[32m * @param	string	$index	WHERE key[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _update_batch($table, $values, $index)[m
[32m+[m	[32m{[m
[32m+[m		[32m$ids = array();[m
[32m+[m		[32mforeach ($values as $key => $val)[m
[32m+[m		[32m{[m
[32m+[m			[32m$ids[] = $val[$index]['value'];[m
[32m+[m
[32m+[m			[32mforeach (array_keys($val) as $field)[m
[32m+[m			[32m{[m
[32m+[m				[32mif ($field !== $index)[m
[32m+[m				[32m{[m
[32m+[m					[32m$final[$val[$field]['field']][] = 'WHEN '.$val[$index]['value'].' THEN '.$val[$field]['value'];[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$cases = '';[m
[32m+[m		[32mforeach ($final as $k => $v)[m
[32m+[m		[32m{[m
[32m+[m			[32m$cases .= $k.' = (CASE '.$val[$index]['field']."\n"[m
[32m+[m				[32m.implode("\n", $v)."\n"[m
[32m+[m				[32m.'ELSE '.$k.' END), ';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->where($val[$index]['field'].' IN('.implode(',', $ids).')', NULL, FALSE);[m
[32m+[m
[32m+[m		[32mreturn 'UPDATE '.$table.' SET '.substr($cases, 0, -2).$this->_compile_wh('qb_where');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Delete statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific delete string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _delete($table)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->qb_limit = FALSE;[m
[32m+[m		[32mreturn parent::_delete($table);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * LIMIT[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific LIMIT clause[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$sql	SQL Query[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _limit($sql)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $sql.' LIMIT '.$this->qb_limit.($this->qb_offset ? ' OFFSET '.$this->qb_offset : '');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/pdo/subdrivers/pdo_pgsql_forge.php b/system/database/drivers/pdo/subdrivers/pdo_pgsql_forge.php[m
[1mnew file mode 100644[m
[1mindex 0000000..e5bfee6[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/pdo/subdrivers/pdo_pgsql_forge.php[m
[36m@@ -0,0 +1,210 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * PDO PostgreSQL Forge Class[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_pdo_pgsql_forge extends CI_DB_pdo_forge {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * DROP TABLE IF statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_drop_table_if	= 'DROP TABLE IF EXISTS';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * UNSIGNED support[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_unsigned		= array([m
[32m+[m		[32m'INT2'		=> 'INTEGER',[m
[32m+[m		[32m'SMALLINT'	=> 'INTEGER',[m
[32m+[m		[32m'INT'		=> 'BIGINT',[m
[32m+[m		[32m'INT4'		=> 'BIGINT',[m
[32m+[m		[32m'INTEGER'	=> 'BIGINT',[m
[32m+[m		[32m'INT8'		=> 'NUMERIC',[m
[32m+[m		[32m'BIGINT'	=> 'NUMERIC',[m
[32m+[m		[32m'REAL'		=> 'DOUBLE PRECISION',[m
[32m+[m		[32m'FLOAT'		=> 'DOUBLE PRECISION'[m
[32m+[m	[32m);[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * NULL value representation in CREATE/ALTER TABLE statements[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_null = 'NULL';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	object	&$db	Database object[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct(&$db)[m
[32m+[m	[32m{[m
[32m+[m		[32mparent::__construct($db);[m
[32m+[m
[32m+[m		[32mif (version_compare($this->db->version(), '9.0', '>'))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->create_table_if = 'CREATE TABLE IF NOT EXISTS';[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ALTER TABLE[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$alter_type	ALTER type[m
[32m+[m	[32m * @param	string	$table		Table name[m
[32m+[m	[32m * @param	mixed	$field		Column definition[m
[32m+[m	[32m * @return	string|string[][m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _alter_table($alter_type, $table, $field)[m
[32m+[m[41m [m	[32m{[m
[32m+[m		[32mif (in_array($alter_type, array('DROP', 'ADD'), TRUE))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn parent::_alter_table($alter_type, $table, $field);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sql = 'ALTER TABLE '.$this->db->escape_identifiers($table);[m
[32m+[m		[32m$sqls = array();[m
[32m+[m		[32mfor ($i = 0, $c = count($field); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($field[$i]['_literal'] !== FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (version_compare($this->db->version(), '8', '>=') && isset($field[$i]['type']))[m
[32m+[m			[32m{[m
[32m+[m				[32m$sqls[] = $sql.' ALTER COLUMN '.$this->db->escape_identifiers($field[$i]['name'])[m
[32m+[m					[32m.' TYPE '.$field[$i]['type'].$field[$i]['length'];[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif ( ! empty($field[$i]['default']))[m
[32m+[m			[32m{[m
[32m+[m				[32m$sqls[] = $sql.' ALTER COLUMN '.$this->db->escape_identifiers($field[$i]['name'])[m
[32m+[m					[32m.' SET DEFAULT '.$field[$i]['default'];[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (isset($field[$i]['null']))[m
[32m+[m			[32m{[m
[32m+[m				[32m$sqls[] = $sql.' ALTER COLUMN '.$this->db->escape_identifiers($field[$i]['name'])[m
[32m+[m					[32m.($field[$i]['null'] === TRUE ? ' DROP NOT NULL' : ' SET NOT NULL');[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif ( ! empty($field[$i]['new_name']))[m
[32m+[m			[32m{[m
[32m+[m				[32m$sqls[] = $sql.' RENAME COLUMN '.$this->db->escape_identifiers($field[$i]['name'])[m
[32m+[m					[32m.' TO '.$this->db->escape_identifiers($field[$i]['new_name']);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif ( ! empty($field[$i]['comment']))[m
[32m+[m			[32m{[m
[32m+[m				[32m$sqls[] = 'COMMENT ON COLUMN '[m
[32m+[m					[32m.$this->db->escape_identifiers($table).'.'.$this->db->escape_identifiers($field[$i]['name'])[m
[32m+[m					[32m.' IS '.$field[$i]['comment'];[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sqls;[m
[32m+[m[41m [m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute TYPE[m
[32m+[m	[32m *[m
[32m+[m	[32m * Performs a data type mapping between different databases.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_type(&$attributes)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Reset field lengths for data types that don't support it[m
[32m+[m		[32mif (isset($attributes['CONSTRAINT']) && stripos($attributes['TYPE'], 'int') !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$attributes['CONSTRAINT'] = NULL;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mswitch (strtoupper($attributes['TYPE']))[m
[32m+[m		[32m{[m
[32m+[m			[32mcase 'TINYINT':[m
[32m+[m				[32m$attributes['TYPE'] = 'SMALLINT';[m
[32m+[m				[32m$attributes['UNSIGNED'] = FALSE;[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mcase 'MEDIUMINT':[m
[32m+[m				[32m$attributes['TYPE'] = 'INTEGER';[m
[32m+[m				[32m$attributes['UNSIGNED'] = FALSE;[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mdefault: return;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute AUTO_INCREMENT[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @param	array	&$field[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_auto_increment(&$attributes, &$field)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! empty($attributes['AUTO_INCREMENT']) && $attributes['AUTO_INCREMENT'] === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$field['type'] = ($field['type'] === 'NUMERIC')[m
[32m+[m				[32m? 'BIGSERIAL'[m
[32m+[m				[32m: 'SERIAL';[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/pdo/subdrivers/pdo_sqlite_driver.php b/system/database/drivers/pdo/subdrivers/pdo_sqlite_driver.php[m
[1mnew file mode 100644[m
[1mindex 0000000..93871a9[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/pdo/subdrivers/pdo_sqlite_driver.php[m
[36m@@ -0,0 +1,219 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * PDO SQLite Database Adapter Class[m
[32m+[m[32m *[m
[32m+[m[32m * Note: _DB is an extender class that the app controller[m
[32m+[m[32m * creates dynamically based on whether the query builder[m
[32m+[m[32m * class is being used or not.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_pdo_sqlite_driver extends CI_DB_pdo_driver {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Sub-driver[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $subdriver = 'sqlite';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ORDER BY random keyword[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_random_keyword = array('RANDOM()', 'RANDOM()');[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * Builds the DSN if not already set.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct($params)[m
[32m+[m	[32m{[m
[32m+[m		[32mparent::__construct($params);[m
[32m+[m
[32m+[m		[32mif (empty($this->dsn))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->dsn = 'sqlite:';[m
[32m+[m
[32m+[m			[32mif (empty($this->database) && empty($this->hostname))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->database = ':memory:';[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$this->database = empty($this->database) ? $this->hostname : $this->database;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show table query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the table names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$prefix_limit[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_tables($prefix_limit = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = 'SELECT "NAME" FROM "SQLITE_MASTER" WHERE "TYPE" = \'table\'';[m
[32m+[m
[32m+[m		[32mif ($prefix_limit === TRUE && $this->dbprefix !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $sql.' AND "NAME" LIKE \''.$this->escape_like_str($this->dbprefix)."%' "[m
[32m+[m				[32m.sprintf($this->_like_escape_str, $this->_like_escape_chr);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch Field Names[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table	Table name[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function list_fields($table)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Is there a cached result?[m
[32m+[m		[32mif (isset($this->data_cache['field_names'][$table]))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->data_cache['field_names'][$table];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (($result = $this->query('PRAGMA TABLE_INFO('.$this->protect_identifiers($table, TRUE, NULL, FALSE).')')) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->data_cache['field_names'][$table] = array();[m
[32m+[m		[32mforeach ($result->result_array() as $row)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->data_cache['field_names'][$table][] = $row['name'];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->data_cache['field_names'][$table];[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns an object with field data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function field_data($table)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (($query = $this->query('PRAGMA TABLE_INFO('.$this->protect_identifiers($table, TRUE, NULL, FALSE).')')) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$query = $query->result_array();[m
[32m+[m		[32mif (empty($query))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$retval = array();[m
[32m+[m		[32mfor ($i = 0, $c = count($query); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$retval[$i]			= new stdClass();[m
[32m+[m			[32m$retval[$i]->name		= $query[$i]['name'];[m
[32m+[m			[32m$retval[$i]->type		= $query[$i]['type'];[m
[32m+[m			[32m$retval[$i]->max_length		= NULL;[m
[32m+[m			[32m$retval[$i]->default		= $query[$i]['dflt_value'];[m
[32m+[m			[32m$retval[$i]->primary_key	= isset($query[$i]['pk']) ? (int) $query[$i]['pk'] : 0;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $retval;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Replace statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table	Table name[m
[32m+[m	[32m * @param	array	$keys	INSERT keys[m
[32m+[m	[32m * @param	array	$values	INSERT values[m
[32m+[m	[32m * @return 	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _replace($table, $keys, $values)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'INSERT OR '.parent::_replace($table, $keys, $values);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Truncate statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific truncate string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * If the database does not support the TRUNCATE statement,[m
[32m+[m	[32m * then this method maps to 'DELETE FROM table'[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _truncate($table)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'DELETE FROM '.$table;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/pdo/subdrivers/pdo_sqlite_forge.php b/system/database/drivers/pdo/subdrivers/pdo_sqlite_forge.php[m
[1mnew file mode 100644[m
[1mindex 0000000..67fe6ee[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/pdo/subdrivers/pdo_sqlite_forge.php[m
[36m@@ -0,0 +1,238 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * PDO SQLite Forge Class[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_pdo_sqlite_forge extends CI_DB_pdo_forge {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CREATE TABLE IF statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_create_table_if	= 'CREATE TABLE IF NOT EXISTS';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * DROP TABLE IF statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_drop_table_if	= 'DROP TABLE IF EXISTS';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * UNSIGNED support[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool|array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_unsigned		= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * NULL value representation in CREATE/ALTER TABLE statements[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_null		= 'NULL';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	object	&$db	Database object[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct(&$db)[m
[32m+[m	[32m{[m
[32m+[m		[32mparent::__construct($db);[m
[32m+[m
[32m+[m		[32mif (version_compare($this->db->version(), '3.3', '<'))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_create_table_if = FALSE;[m
[32m+[m			[32m$this->_drop_table_if   = FALSE;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Create database[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$db_name	(ignored)[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function create_database($db_name)[m
[32m+[m	[32m{[m
[32m+[m		[32m// In SQLite, a database is created when you connect to the database.[m
[32m+[m		[32m// We'll return TRUE so that an error isn't generated[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Drop database[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$db_name	(ignored)[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function drop_database($db_name)[m
[32m+[m	[32m{[m
[32m+[m		[32m// In SQLite, a database is dropped when we delete a file[m
[32m+[m		[32mif (file_exists($this->db->database))[m
[32m+[m		[32m{[m
[32m+[m			[32m// We need to close the pseudo-connection first[m
[32m+[m			[32m$this->db->close();[m
[32m+[m			[32mif ( ! @unlink($this->db->database))[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn $this->db->db_debug ? $this->db->display_error('db_unable_to_drop') : FALSE;[m
[32m+[m			[32m}[m
[32m+[m			[32melseif ( ! empty($this->db->data_cache['db_names']))[m
[32m+[m			[32m{[m
[32m+[m				[32m$key = array_search(strtolower($this->db->database), array_map('strtolower', $this->db->data_cache['db_names']), TRUE);[m
[32m+[m				[32mif ($key !== FALSE)[m
[32m+[m				[32m{[m
[32m+[m					[32munset($this->db->data_cache['db_names'][$key]);[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->db->db_debug ? $this->db->display_error('db_unable_to_drop') : FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ALTER TABLE[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$alter_type	ALTER type[m
[32m+[m	[32m * @param	string	$table		Table name[m
[32m+[m	[32m * @param	mixed	$field		Column definition[m
[32m+[m	[32m * @return	string|string[][m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _alter_table($alter_type, $table, $field)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($alter_type === 'DROP' OR $alter_type === 'CHANGE')[m
[32m+[m		[32m{[m
[32m+[m			[32m// drop_column():[m
[32m+[m			[32m//	BEGIN TRANSACTION;[m
[32m+[m			[32m//	CREATE TEMPORARY TABLE t1_backup(a,b);[m
[32m+[m			[32m//	INSERT INTO t1_backup SELECT a,b FROM t1;[m
[32m+[m			[32m//	DROP TABLE t1;[m
[32m+[m			[32m//	CREATE TABLE t1(a,b);[m
[32m+[m			[32m//	INSERT INTO t1 SELECT a,b FROM t1_backup;[m
[32m+[m			[32m//	DROP TABLE t1_backup;[m
[32m+[m			[32m//	COMMIT;[m
[32m+[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn parent::_alter_table($alter_type, $table, $field);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Process column[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$field[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _process_column($field)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->db->escape_identifiers($field['name'])[m
[32m+[m			[32m.' '.$field['type'][m
[32m+[m			[32m.$field['auto_increment'][m
[32m+[m			[32m.$field['null'][m
[32m+[m			[32m.$field['unique'][m
[32m+[m			[32m.$field['default'];[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute TYPE[m
[32m+[m	[32m *[m
[32m+[m	[32m * Performs a data type mapping between different databases.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_type(&$attributes)[m
[32m+[m	[32m{[m
[32m+[m		[32mswitch (strtoupper($attributes['TYPE']))[m
[32m+[m		[32m{[m
[32m+[m			[32mcase 'ENUM':[m
[32m+[m			[32mcase 'SET':[m
[32m+[m				[32m$attributes['TYPE'] = 'TEXT';[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mdefault: return;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute AUTO_INCREMENT[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @param	array	&$field[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_auto_increment(&$attributes, &$field)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! empty($attributes['AUTO_INCREMENT']) && $attributes['AUTO_INCREMENT'] === TRUE && stripos($field['type'], 'int') !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$field['type'] = 'INTEGER PRIMARY KEY';[m
[32m+[m			[32m$field['default'] = '';[m
[32m+[m			[32m$field['null'] = '';[m
[32m+[m			[32m$field['unique'] = '';[m
[32m+[m			[32m$field['auto_increment'] = ' AUTOINCREMENT';[m
[32m+[m
[32m+[m			[32m$this->primary_keys = array();[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/pdo/subdrivers/pdo_sqlsrv_driver.php b/system/database/drivers/pdo/subdrivers/pdo_sqlsrv_driver.php[m
[1mnew file mode 100644[m
[1mindex 0000000..db10029[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/pdo/subdrivers/pdo_sqlsrv_driver.php[m
[36m@@ -0,0 +1,369 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * PDO SQLSRV Database Adapter Class[m
[32m+[m[32m *[m
[32m+[m[32m * Note: _DB is an extender class that the app controller[m
[32m+[m[32m * creates dynamically based on whether the query builder[m
[32m+[m[32m * class is being used or not.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_pdo_sqlsrv_driver extends CI_DB_pdo_driver {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Sub-driver[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $subdriver = 'sqlsrv';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ORDER BY random keyword[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_random_keyword = array('NEWID()', 'RAND(%d)');[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Quoted identifier flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * Whether to use SQL-92 standard quoted identifier[m
[32m+[m	[32m * (double quotes) or brackets for identifier escaping.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_quoted_identifier;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * Builds the DSN if not already set.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct($params)[m
[32m+[m	[32m{[m
[32m+[m		[32mparent::__construct($params);[m
[32m+[m
[32m+[m		[32mif (empty($this->dsn))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->dsn = 'sqlsrv:Server='.(empty($this->hostname) ? '127.0.0.1' : $this->hostname);[m
[32m+[m
[32m+[m			[32mempty($this->port) OR $this->dsn .= ','.$this->port;[m
[32m+[m			[32mempty($this->database) OR $this->dsn .= ';Database='.$this->database;[m
[32m+[m
[32m+[m			[32m// Some custom options[m
[32m+[m
[32m+[m			[32mif (isset($this->QuotedId))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->dsn .= ';QuotedId='.$this->QuotedId;[m
[32m+[m				[32m$this->_quoted_identifier = (bool) $this->QuotedId;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (isset($this->ConnectionPooling))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->dsn .= ';ConnectionPooling='.$this->ConnectionPooling;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif ($this->encrypt === TRUE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->dsn .= ';Encrypt=1';[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (isset($this->TraceOn))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->dsn .= ';TraceOn='.$this->TraceOn;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (isset($this->TrustServerCertificate))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->dsn .= ';TrustServerCertificate='.$this->TrustServerCertificate;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mempty($this->APP) OR $this->dsn .= ';APP='.$this->APP;[m
[32m+[m			[32mempty($this->Failover_Partner) OR $this->dsn .= ';Failover_Partner='.$this->Failover_Partner;[m
[32m+[m			[32mempty($this->LoginTimeout) OR $this->dsn .= ';LoginTimeout='.$this->LoginTimeout;[m
[32m+[m			[32mempty($this->MultipleActiveResultSets) OR $this->dsn .= ';MultipleActiveResultSets='.$this->MultipleActiveResultSets;[m
[32m+[m			[32mempty($this->TraceFile) OR $this->dsn .= ';TraceFile='.$this->TraceFile;[m
[32m+[m			[32mempty($this->WSID) OR $this->dsn .= ';WSID='.$this->WSID;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (preg_match('/QuotedId=(0|1)/', $this->dsn, $match))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_quoted_identifier = (bool) $match[1];[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database connection[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$persistent[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function db_connect($persistent = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! empty($this->char_set) && preg_match('/utf[^8]*8/i', $this->char_set))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->options[PDO::SQLSRV_ENCODING_UTF8] = 1;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->conn_id = parent::db_connect($persistent);[m
[32m+[m
[32m+[m		[32mif ( ! is_object($this->conn_id) OR is_bool($this->_quoted_identifier))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->conn_id;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Determine how identifiers are escaped[m
[32m+[m		[32m$query = $this->query('SELECT CASE WHEN (@@OPTIONS | 256) = @@OPTIONS THEN 1 ELSE 0 END AS qi');[m
[32m+[m		[32m$query = $query->row_array();[m
[32m+[m		[32m$this->_quoted_identifier = empty($query) ? FALSE : (bool) $query['qi'];[m
[32m+[m		[32m$this->_escape_char = ($this->_quoted_identifier) ? '"' : array('[', ']');[m
[32m+[m
[32m+[m		[32mreturn $this->conn_id;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show table query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the table names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$prefix_limit[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_tables($prefix_limit = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = 'SELECT '.$this->escape_identifiers('name')[m
[32m+[m			[32m.' FROM '.$this->escape_identifiers('sysobjects')[m
[32m+[m			[32m.' WHERE '.$this->escape_identifiers('type')." = 'U'";[m
[32m+[m
[32m+[m		[32mif ($prefix_limit === TRUE && $this->dbprefix !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$sql .= ' AND '.$this->escape_identifiers('name')." LIKE '".$this->escape_like_str($this->dbprefix)."%' "[m
[32m+[m				[32m.sprintf($this->_like_escape_str, $this->_like_escape_chr);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql.' ORDER BY '.$this->escape_identifiers('name');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show column query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the column names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_columns($table = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'SELECT COLUMN_NAME[m
[32m+[m			[32mFROM INFORMATION_SCHEMA.Columns[m
[32m+[m			[32mWHERE UPPER(TABLE_NAME) = '.$this->escape(strtoupper($table));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns an object with field data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function field_data($table)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = 'SELECT COLUMN_NAME, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH, NUMERIC_PRECISION, COLUMN_DEFAULT[m
[32m+[m			[32mFROM INFORMATION_SCHEMA.Columns[m
[32m+[m			[32mWHERE UPPER(TABLE_NAME) = '.$this->escape(strtoupper($table));[m
[32m+[m
[32m+[m		[32mif (($query = $this->query($sql)) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m		[32m$query = $query->result_object();[m
[32m+[m
[32m+[m		[32m$retval = array();[m
[32m+[m		[32mfor ($i = 0, $c = count($query); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$retval[$i]			= new stdClass();[m
[32m+[m			[32m$retval[$i]->name		= $query[$i]->COLUMN_NAME;[m
[32m+[m			[32m$retval[$i]->type		= $query[$i]->DATA_TYPE;[m
[32m+[m			[32m$retval[$i]->max_length		= ($query[$i]->CHARACTER_MAXIMUM_LENGTH > 0) ? $query[$i]->CHARACTER_MAXIMUM_LENGTH : $query[$i]->NUMERIC_PRECISION;[m
[32m+[m			[32m$retval[$i]->default		= $query[$i]->COLUMN_DEFAULT;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $retval;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Update statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific update string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @param	array	$values[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _update($table, $values)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->qb_limit = FALSE;[m
[32m+[m		[32m$this->qb_orderby = array();[m
[32m+[m		[32mreturn parent::_update($table, $values);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Delete statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific delete string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _delete($table)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->qb_limit)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn 'WITH ci_delete AS (SELECT TOP '.$this->qb_limit.' * FROM '.$table.$this->_compile_wh('qb_where').') DELETE FROM ci_delete';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn parent::_delete($table);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * LIMIT[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific LIMIT clause[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$sql	SQL Query[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _limit($sql)[m
[32m+[m	[32m{[m
[32m+[m		[32m// As of SQL Server 2012 (11.0.*) OFFSET is supported[m
[32m+[m		[32mif (version_compare($this->version(), '11', '>='))[m
[32m+[m		[32m{[m
[32m+[m			[32m// SQL Server OFFSET-FETCH can be used only with the ORDER BY clause[m
[32m+[m			[32mempty($this->qb_orderby) && $sql .= ' ORDER BY 1';[m
[32m+[m
[32m+[m			[32mreturn $sql.' OFFSET '.(int) $this->qb_offset.' ROWS FETCH NEXT '.$this->qb_limit.' ROWS ONLY';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$limit = $this->qb_offset + $this->qb_limit;[m
[32m+[m
[32m+[m		[32m// An ORDER BY clause is required for ROW_NUMBER() to work[m
[32m+[m		[32mif ($this->qb_offset && ! empty($this->qb_orderby))[m
[32m+[m		[32m{[m
[32m+[m			[32m$orderby = $this->_compile_order_by();[m
[32m+[m
[32m+[m			[32m// We have to strip the ORDER BY clause[m
[32m+[m			[32m$sql = trim(substr($sql, 0, strrpos($sql, $orderby)));[m
[32m+[m
[32m+[m			[32m// Get the fields to select from our subquery, so that we can avoid CI_rownum appearing in the actual results[m
[32m+[m			[32mif (count($this->qb_select) === 0 OR strpos(implode(',', $this->qb_select), '*') !== FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$select = '*'; // Inevitable[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m// Use only field names and their aliases, everything else is out of our scope.[m
[32m+[m				[32m$select = array();[m
[32m+[m				[32m$field_regexp = ($this->_quoted_identifier)[m
[32m+[m					[32m? '("[^\"]+")' : '(\[[^\]]+\])';[m
[32m+[m				[32mfor ($i = 0, $c = count($this->qb_select); $i < $c; $i++)[m
[32m+[m				[32m{[m
[32m+[m					[32m$select[] = preg_match('/(?:\s|\.)'.$field_regexp.'$/i', $this->qb_select[$i], $m)[m
[32m+[m						[32m? $m[1] : $this->qb_select[$i];[m
[32m+[m				[32m}[m
[32m+[m				[32m$select = implode(', ', $select);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn 'SELECT '.$select." FROM (\n\n"[m
[32m+[m				[32m.preg_replace('/^(SELECT( DISTINCT)?)/i', '\\1 ROW_NUMBER() OVER('.trim($orderby).') AS '.$this->escape_identifiers('CI_rownum').', ', $sql)[m
[32m+[m				[32m."\n\n) ".$this->escape_identifiers('CI_subquery')[m
[32m+[m				[32m."\nWHERE ".$this->escape_identifiers('CI_rownum').' BETWEEN '.($this->qb_offset + 1).' AND '.$limit;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn preg_replace('/(^\SELECT (DISTINCT)?)/i','\\1 TOP '.$limit.' ', $sql);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Insert batch statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific insert string from the supplied data.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table	Table name[m
[32m+[m	[32m * @param	array	$keys	INSERT keys[m
[32m+[m	[32m * @param	array	$values	INSERT values[m
[32m+[m	[32m * @return	string|bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _insert_batch($table, $keys, $values)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Multiple-value inserts are only supported as of SQL Server 2008[m
[32m+[m		[32mif (version_compare($this->version(), '10', '>='))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn parent::_insert_batch($table, $keys, $values);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn ($this->db_debug) ? $this->display_error('db_unsupported_feature') : FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/pdo/subdrivers/pdo_sqlsrv_forge.php b/system/database/drivers/pdo/subdrivers/pdo_sqlsrv_forge.php[m
[1mnew file mode 100644[m
[1mindex 0000000..4c9dbe6[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/pdo/subdrivers/pdo_sqlsrv_forge.php[m
[36m@@ -0,0 +1,149 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * PDO SQLSRV Forge Class[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_pdo_sqlsrv_forge extends CI_DB_pdo_forge {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CREATE TABLE IF statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_create_table_if	= "IF NOT EXISTS (SELECT * FROM sysobjects WHERE ID = object_id(N'%s') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)\nCREATE TABLE";[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * DROP TABLE IF statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_drop_table_if	= "IF EXISTS (SELECT * FROM sysobjects WHERE ID = object_id(N'%s') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)\nDROP TABLE";[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * UNSIGNED support[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_unsigned		= array([m
[32m+[m		[32m'TINYINT'	=> 'SMALLINT',[m
[32m+[m		[32m'SMALLINT'	=> 'INT',[m
[32m+[m		[32m'INT'		=> 'BIGINT',[m
[32m+[m		[32m'REAL'		=> 'FLOAT'[m
[32m+[m	[32m);[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ALTER TABLE[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$alter_type	ALTER type[m
[32m+[m	[32m * @param	string	$table		Table name[m
[32m+[m	[32m * @param	mixed	$field		Column definition[m
[32m+[m	[32m * @return	string|string[][m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _alter_table($alter_type, $table, $field)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (in_array($alter_type, array('ADD', 'DROP'), TRUE))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn parent::_alter_table($alter_type, $table, $field);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sql = 'ALTER TABLE '.$this->db->escape_identifiers($table).' ALTER COLUMN ';[m
[32m+[m		[32m$sqls = array();[m
[32m+[m		[32mfor ($i = 0, $c = count($field); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$sqls[] = $sql.$this->_process_column($field[$i]);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sqls;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute TYPE[m
[32m+[m	[32m *[m
[32m+[m	[32m * Performs a data type mapping between different databases.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_type(&$attributes)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (isset($attributes['CONSTRAINT']) && strpos($attributes['TYPE'], 'INT') !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32munset($attributes['CONSTRAINT']);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mswitch (strtoupper($attributes['TYPE']))[m
[32m+[m		[32m{[m
[32m+[m			[32mcase 'MEDIUMINT':[m
[32m+[m				[32m$attributes['TYPE'] = 'INTEGER';[m
[32m+[m				[32m$attributes['UNSIGNED'] = FALSE;[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mcase 'INTEGER':[m
[32m+[m				[32m$attributes['TYPE'] = 'INT';[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mdefault: return;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute AUTO_INCREMENT[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @param	array	&$field[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_auto_increment(&$attributes, &$field)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! empty($attributes['AUTO_INCREMENT']) && $attributes['AUTO_INCREMENT'] === TRUE && stripos($field['type'], 'int') !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$field['auto_increment'] = ' IDENTITY(1,1)';[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/postgre/index.html b/system/database/drivers/postgre/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/postgre/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/system/database/drivers/postgre/postgre_driver.php b/system/database/drivers/postgre/postgre_driver.php[m
[1mnew file mode 100644[m
[1mindex 0000000..5779c87[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/postgre/postgre_driver.php[m
[36m@@ -0,0 +1,619 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.3.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Postgre Database Adapter Class[m
[32m+[m[32m *[m
[32m+[m[32m * Note: _DB is an extender class that the app controller[m
[32m+[m[32m * creates dynamically based on whether the query builder[m
[32m+[m[32m * class is being used or not.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_postgre_driver extends CI_DB {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database driver[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $dbdriver = 'postgre';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database schema[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $schema = 'public';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ORDER BY random keyword[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_random_keyword = array('RANDOM()', 'RANDOM()');[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * Creates a DSN string to be used for db_connect() and db_pconnect()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct($params)[m
[32m+[m	[32m{[m
[32m+[m		[32mparent::__construct($params);[m
[32m+[m
[32m+[m		[32mif ( ! empty($this->dsn))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->dsn === '' OR $this->dsn = '';[m
[32m+[m
[32m+[m		[32mif (strpos($this->hostname, '/') !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m// If UNIX sockets are used, we shouldn't set a port[m
[32m+[m			[32m$this->port = '';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->hostname === '' OR $this->dsn = 'host='.$this->hostname.' ';[m
[32m+[m
[32m+[m		[32mif ( ! empty($this->port) && ctype_digit($this->port))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->dsn .= 'port='.$this->port.' ';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($this->username !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->dsn .= 'user='.$this->username.' ';[m
[32m+[m
[32m+[m			[32m/* An empty password is valid![m
[32m+[m			[32m *[m
[32m+[m			[32m * $db['password'] = NULL must be done in order to ignore it.[m
[32m+[m			[32m */[m
[32m+[m			[32m$this->password === NULL OR $this->dsn .= "password='".$this->password."' ";[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->database === '' OR $this->dsn .= 'dbname='.$this->database.' ';[m
[32m+[m
[32m+[m		[32m/* We don't have these options as elements in our standard configuration[m
[32m+[m		[32m * array, but they might be set by parse_url() if the configuration was[m
[32m+[m		[32m * provided via string. Example:[m
[32m+[m		[32m *[m
[32m+[m		[32m * postgre://username:password@localhost:5432/database?connect_timeout=5&sslmode=1[m
[32m+[m		[32m */[m
[32m+[m		[32mforeach (array('connect_timeout', 'options', 'sslmode', 'service') as $key)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (isset($this->$key) && is_string($this->$key) && $this->$key !== '')[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->dsn .= $key."='".$this->$key."' ";[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->dsn = rtrim($this->dsn);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database connection[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$persistent[m
[32m+[m	[32m * @return	resource[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function db_connect($persistent = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->conn_id = ($persistent === TRUE)[m
[32m+[m			[32m? pg_pconnect($this->dsn)[m
[32m+[m			[32m: pg_connect($this->dsn);[m
[32m+[m
[32m+[m		[32mif ($this->conn_id !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($persistent === TRUE[m
[32m+[m				[32m&& pg_connection_status($this->conn_id) === PGSQL_CONNECTION_BAD[m
[32m+[m				[32m&& pg_ping($this->conn_id) === FALSE[m
[32m+[m			[32m)[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mempty($this->schema) OR $this->simple_query('SET search_path TO '.$this->schema.',public');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->conn_id;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Reconnect[m
[32m+[m	[32m *[m
[32m+[m	[32m * Keep / reestablish the db connection if no queries have been[m
[32m+[m	[32m * sent for a length of time exceeding the server's idle timeout[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function reconnect()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (pg_ping($this->conn_id) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->conn_id = FALSE;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set client character set[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$charset[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _db_set_charset($charset)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn (pg_set_client_encoding($this->conn_id, $charset) === 0);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database version number[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function version()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (isset($this->data_cache['version']))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->data_cache['version'];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! $this->conn_id OR ($pg_version = pg_version($this->conn_id)) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m/* If PHP was compiled with PostgreSQL lib versions earlier[m
[32m+[m		[32m * than 7.4, pg_version() won't return the server version[m
[32m+[m		[32m * and so we'll have to fall back to running a query in[m
[32m+[m		[32m * order to get it.[m
[32m+[m		[32m */[m
[32m+[m		[32mreturn (isset($pg_version['server']) && preg_match('#^(\d+\.\d+)#', $pg_version['server'], $match))[m
[32m+[m			[32m? $this->data_cache['version'] = $match[1][m
[32m+[m			[32m: parent::version();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Execute the query[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$sql	an SQL query[m
[32m+[m	[32m * @return	resource[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _execute($sql)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn pg_query($this->conn_id, $sql);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Begin Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_begin()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn (bool) pg_query($this->conn_id, 'BEGIN');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Commit Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_commit()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn (bool) pg_query($this->conn_id, 'COMMIT');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Rollback Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_rollback()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn (bool) pg_query($this->conn_id, 'ROLLBACK');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Determines if a query is a "write" type.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	An SQL query string[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function is_write_type($sql)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (preg_match('#^(INSERT|UPDATE).*RETURNING\s.+(\,\s?.+)*$#is', $sql))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn parent::is_write_type($sql);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Platform-dependent string escape[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _escape_str($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn pg_escape_string($this->conn_id, $str);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * "Smart" Escape String[m
[32m+[m	[32m *[m
[32m+[m	[32m * Escapes data based on type[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$str[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function escape($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (is_php('5.4.4') && (is_string($str) OR (is_object($str) && method_exists($str, '__toString'))))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn pg_escape_literal($this->conn_id, $str);[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (is_bool($str))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($str) ? 'TRUE' : 'FALSE';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn parent::escape($str);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Affected Rows[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function affected_rows()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn pg_affected_rows($this->result_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Insert ID[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function insert_id()[m
[32m+[m	[32m{[m
[32m+[m		[32m$v = $this->version();[m
[32m+[m
[32m+[m		[32m$table	= (func_num_args() > 0) ? func_get_arg(0) : NULL;[m
[32m+[m		[32m$column	= (func_num_args() > 1) ? func_get_arg(1) : NULL;[m
[32m+[m
[32m+[m		[32mif ($table === NULL && $v >= '8.1')[m
[32m+[m		[32m{[m
[32m+[m			[32m$sql = 'SELECT LASTVAL() AS ins_id';[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($table !== NULL)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($column !== NULL && $v >= '8.0')[m
[32m+[m			[32m{[m
[32m+[m				[32m$sql = 'SELECT pg_get_serial_sequence(\''.$table."', '".$column."') AS seq";[m
[32m+[m				[32m$query = $this->query($sql);[m
[32m+[m				[32m$query = $query->row();[m
[32m+[m				[32m$seq = $query->seq;[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m// seq_name passed in table parameter[m
[32m+[m				[32m$seq = $table;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$sql = 'SELECT CURRVAL(\''.$seq."') AS ins_id";[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn pg_last_oid($this->result_id);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$query = $this->query($sql);[m
[32m+[m		[32m$query = $query->row();[m
[32m+[m		[32mreturn (int) $query->ins_id;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show table query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the table names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$prefix_limit[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_tables($prefix_limit = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = 'SELECT "table_name" FROM "information_schema"."tables" WHERE "table_schema" = \''.$this->schema."'";[m
[32m+[m
[32m+[m		[32mif ($prefix_limit !== FALSE && $this->dbprefix !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $sql.' AND "table_name" LIKE \''[m
[32m+[m				[32m.$this->escape_like_str($this->dbprefix)."%' "[m
[32m+[m				[32m.sprintf($this->_like_escape_str, $this->_like_escape_chr);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List column query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the column names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_columns($table = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'SELECT "column_name"[m
[32m+[m			[32mFROM "information_schema"."columns"[m
[32m+[m			[32mWHERE LOWER("table_name") = '.$this->escape(strtolower($table));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns an object with field data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function field_data($table)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = 'SELECT "column_name", "data_type", "character_maximum_length", "numeric_precision", "column_default"[m
[32m+[m			[32mFROM "information_schema"."columns"[m
[32m+[m			[32mWHERE LOWER("table_name") = '.$this->escape(strtolower($table));[m
[32m+[m
[32m+[m		[32mif (($query = $this->query($sql)) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m		[32m$query = $query->result_object();[m
[32m+[m
[32m+[m		[32m$retval = array();[m
[32m+[m		[32mfor ($i = 0, $c = count($query); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$retval[$i]			= new stdClass();[m
[32m+[m			[32m$retval[$i]->name		= $query[$i]->column_name;[m
[32m+[m			[32m$retval[$i]->type		= $query[$i]->data_type;[m
[32m+[m			[32m$retval[$i]->max_length		= ($query[$i]->character_maximum_length > 0) ? $query[$i]->character_maximum_length : $query[$i]->numeric_precision;[m
[32m+[m			[32m$retval[$i]->default		= $query[$i]->column_default;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $retval;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Error[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns an array containing code and message of the last[m
[32m+[m	[32m * database error that has occurred.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function error()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn array('code' => '', 'message' => pg_last_error($this->conn_id));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ORDER BY[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$orderby[m
[32m+[m	[32m * @param	string	$direction	ASC, DESC or RANDOM[m
[32m+[m	[32m * @param	bool	$escape[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function order_by($orderby, $direction = '', $escape = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32m$direction = strtoupper(trim($direction));[m
[32m+[m		[32mif ($direction === 'RANDOM')[m
[32m+[m		[32m{[m
[32m+[m			[32mif ( ! is_float($orderby) && ctype_digit((string) $orderby))[m
[32m+[m			[32m{[m
[32m+[m				[32m$orderby = ($orderby > 1)[m
[32m+[m					[32m? (float) '0.'.$orderby[m
[32m+[m					[32m: (float) $orderby;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (is_float($orderby))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->simple_query('SET SEED '.$orderby);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$orderby = $this->_random_keyword[0];[m
[32m+[m			[32m$direction = '';[m
[32m+[m			[32m$escape = FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn parent::order_by($orderby, $direction, $escape);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Update statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific update string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @param	array	$values[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _update($table, $values)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->qb_limit = FALSE;[m
[32m+[m		[32m$this->qb_orderby = array();[m
[32m+[m		[32mreturn parent::_update($table, $values);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Update_Batch statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific batch update string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table	Table name[m
[32m+[m	[32m * @param	array	$values	Update data[m
[32m+[m	[32m * @param	string	$index	WHERE key[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _update_batch($table, $values, $index)[m
[32m+[m	[32m{[m
[32m+[m		[32m$ids = array();[m
[32m+[m		[32mforeach ($values as $key => $val)[m
[32m+[m		[32m{[m
[32m+[m			[32m$ids[] = $val[$index]['value'];[m
[32m+[m
[32m+[m			[32mforeach (array_keys($val) as $field)[m
[32m+[m			[32m{[m
[32m+[m				[32mif ($field !== $index)[m
[32m+[m				[32m{[m
[32m+[m					[32m$final[$val[$field]['field']][] = 'WHEN '.$val[$index]['value'].' THEN '.$val[$field]['value'];[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$cases = '';[m
[32m+[m		[32mforeach ($final as $k => $v)[m
[32m+[m		[32m{[m
[32m+[m			[32m$cases .= $k.' = (CASE '.$val[$index]['field']."\n"[m
[32m+[m				[32m.implode("\n", $v)."\n"[m
[32m+[m				[32m.'ELSE '.$k.' END), ';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->where($val[$index]['field'].' IN('.implode(',', $ids).')', NULL, FALSE);[m
[32m+[m
[32m+[m		[32mreturn 'UPDATE '.$table.' SET '.substr($cases, 0, -2).$this->_compile_wh('qb_where');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Delete statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific delete string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _delete($table)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->qb_limit = FALSE;[m
[32m+[m		[32mreturn parent::_delete($table);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * LIMIT[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific LIMIT clause[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$sql	SQL Query[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _limit($sql)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $sql.' LIMIT '.$this->qb_limit.($this->qb_offset ? ' OFFSET '.$this->qb_offset : '');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Close DB Connection[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _close()[m
[32m+[m	[32m{[m
[32m+[m		[32mpg_close($this->conn_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/postgre/postgre_forge.php b/system/database/drivers/postgre/postgre_forge.php[m
[1mnew file mode 100644[m
[1mindex 0000000..cf90325[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/postgre/postgre_forge.php[m
[36m@@ -0,0 +1,205 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.3.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Postgre Forge Class[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_postgre_forge extends CI_DB_forge {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * UNSIGNED support[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_unsigned		= array([m
[32m+[m		[32m'INT2'		=> 'INTEGER',[m
[32m+[m		[32m'SMALLINT'	=> 'INTEGER',[m
[32m+[m		[32m'INT'		=> 'BIGINT',[m
[32m+[m		[32m'INT4'		=> 'BIGINT',[m
[32m+[m		[32m'INTEGER'	=> 'BIGINT',[m
[32m+[m		[32m'INT8'		=> 'NUMERIC',[m
[32m+[m		[32m'BIGINT'	=> 'NUMERIC',[m
[32m+[m		[32m'REAL'		=> 'DOUBLE PRECISION',[m
[32m+[m		[32m'FLOAT'		=> 'DOUBLE PRECISION'[m
[32m+[m	[32m);[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * NULL value representation in CREATE/ALTER TABLE statements[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_null = 'NULL';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	object	&$db	Database object[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct(&$db)[m
[32m+[m	[32m{[m
[32m+[m		[32mparent::__construct($db);[m
[32m+[m
[32m+[m		[32mif (version_compare($this->db->version(), '9.0', '>'))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->create_table_if = 'CREATE TABLE IF NOT EXISTS';[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ALTER TABLE[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$alter_type	ALTER type[m
[32m+[m	[32m * @param	string	$table		Table name[m
[32m+[m	[32m * @param	mixed	$field		Column definition[m
[32m+[m	[32m * @return	string|string[][m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _alter_table($alter_type, $table, $field)[m
[32m+[m[41m [m	[32m{[m
[32m+[m		[32mif (in_array($alter_type, array('DROP', 'ADD'), TRUE))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn parent::_alter_table($alter_type, $table, $field);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sql = 'ALTER TABLE '.$this->db->escape_identifiers($table);[m
[32m+[m		[32m$sqls = array();[m
[32m+[m		[32mfor ($i = 0, $c = count($field); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($field[$i]['_literal'] !== FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (version_compare($this->db->version(), '8', '>=') && isset($field[$i]['type']))[m
[32m+[m			[32m{[m
[32m+[m				[32m$sqls[] = $sql.' ALTER COLUMN '.$this->db->escape_identifiers($field[$i]['name'])[m
[32m+[m					[32m.' TYPE '.$field[$i]['type'].$field[$i]['length'];[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif ( ! empty($field[$i]['default']))[m
[32m+[m			[32m{[m
[32m+[m				[32m$sqls[] = $sql.' ALTER COLUMN '.$this->db->escape_identifiers($field[$i]['name'])[m
[32m+[m					[32m.' SET DEFAULT '.$field[$i]['default'];[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (isset($field[$i]['null']))[m
[32m+[m			[32m{[m
[32m+[m				[32m$sqls[] = $sql.' ALTER COLUMN '.$this->db->escape_identifiers($field[$i]['name'])[m
[32m+[m					[32m.($field[$i]['null'] === TRUE ? ' DROP NOT NULL' : ' SET NOT NULL');[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif ( ! empty($field[$i]['new_name']))[m
[32m+[m			[32m{[m
[32m+[m				[32m$sqls[] = $sql.' RENAME COLUMN '.$this->db->escape_identifiers($field[$i]['name'])[m
[32m+[m					[32m.' TO '.$this->db->escape_identifiers($field[$i]['new_name']);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif ( ! empty($field[$i]['comment']))[m
[32m+[m			[32m{[m
[32m+[m				[32m$sqls[] = 'COMMENT ON COLUMN '[m
[32m+[m					[32m.$this->db->escape_identifiers($table).'.'.$this->db->escape_identifiers($field[$i]['name'])[m
[32m+[m					[32m.' IS '.$field[$i]['comment'];[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sqls;[m
[32m+[m[41m [m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute TYPE[m
[32m+[m	[32m *[m
[32m+[m	[32m * Performs a data type mapping between different databases.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_type(&$attributes)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Reset field lengths for data types that don't support it[m
[32m+[m		[32mif (isset($attributes['CONSTRAINT']) && stripos($attributes['TYPE'], 'int') !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$attributes['CONSTRAINT'] = NULL;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mswitch (strtoupper($attributes['TYPE']))[m
[32m+[m		[32m{[m
[32m+[m			[32mcase 'TINYINT':[m
[32m+[m				[32m$attributes['TYPE'] = 'SMALLINT';[m
[32m+[m				[32m$attributes['UNSIGNED'] = FALSE;[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mcase 'MEDIUMINT':[m
[32m+[m				[32m$attributes['TYPE'] = 'INTEGER';[m
[32m+[m				[32m$attributes['UNSIGNED'] = FALSE;[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mdefault: return;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute AUTO_INCREMENT[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @param	array	&$field[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_auto_increment(&$attributes, &$field)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! empty($attributes['AUTO_INCREMENT']) && $attributes['AUTO_INCREMENT'] === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$field['type'] = ($field['type'] === 'NUMERIC')[m
[32m+[m				[32m? 'BIGSERIAL'[m
[32m+[m				[32m: 'SERIAL';[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/postgre/postgre_result.php b/system/database/drivers/postgre/postgre_result.php[m
[1mnew file mode 100644[m
[1mindex 0000000..daf3306[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/postgre/postgre_result.php[m
[36m@@ -0,0 +1,182 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.3.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Postgres Result Class[m
[32m+[m[32m *[m
[32m+[m[32m * This class extends the parent result class: CI_DB_result[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_postgre_result extends CI_DB_result {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Number of rows in the result set[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function num_rows()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn is_int($this->num_rows)[m
[32m+[m			[32m? $this->num_rows[m
[32m+[m			[32m: $this->num_rows = pg_num_rows($this->result_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Number of fields in the result set[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function num_fields()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn pg_num_fields($this->result_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch Field Names[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates an array of column names[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function list_fields()[m
[32m+[m	[32m{[m
[32m+[m		[32m$field_names = array();[m
[32m+[m		[32mfor ($i = 0, $c = $this->num_fields(); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$field_names[] = pg_field_name($this->result_id, $i);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $field_names;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field data[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates an array of objects containing field meta-data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function field_data()[m
[32m+[m	[32m{[m
[32m+[m		[32m$retval = array();[m
[32m+[m		[32mfor ($i = 0, $c = $this->num_fields(); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$retval[$i]			= new stdClass();[m
[32m+[m			[32m$retval[$i]->name		= pg_field_name($this->result_id, $i);[m
[32m+[m			[32m$retval[$i]->type		= pg_field_type($this->result_id, $i);[m
[32m+[m			[32m$retval[$i]->max_length		= pg_field_size($this->result_id, $i);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $retval;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Free the result[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function free_result()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (is_resource($this->result_id))[m
[32m+[m		[32m{[m
[32m+[m			[32mpg_free_result($this->result_id);[m
[32m+[m			[32m$this->result_id = FALSE;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Data Seek[m
[32m+[m	[32m *[m
[32m+[m	[32m * Moves the internal pointer to the desired offset. We call[m
[32m+[m	[32m * this internally before fetching results to make sure the[m
[32m+[m	[32m * result set starts at zero.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	$n[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function data_seek($n = 0)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn pg_result_seek($this->result_id, $n);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Result - associative array[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the result set as an array[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _fetch_assoc()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn pg_fetch_assoc($this->result_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Result - object[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the result set as an object[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$class_name[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _fetch_object($class_name = 'stdClass')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn pg_fetch_object($this->result_id, NULL, $class_name);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/postgre/postgre_utility.php b/system/database/drivers/postgre/postgre_utility.php[m
[1mnew file mode 100644[m
[1mindex 0000000..3af225f[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/postgre/postgre_utility.php[m
[36m@@ -0,0 +1,78 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.3.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Postgre Utility Class[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_postgre_utility extends CI_DB_utility {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List databases statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_list_databases	= 'SELECT datname FROM pg_database';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * OPTIMIZE TABLE statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_optimize_table	= 'REINDEX TABLE %s';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Export[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params	Preferences[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _backup($params = array())[m
[32m+[m	[32m{[m
[32m+[m		[32m// Currently unsupported[m
[32m+[m		[32mreturn $this->db->display_error('db_unsupported_feature');[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/sqlite/index.html b/system/database/drivers/sqlite/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/sqlite/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/system/database/drivers/sqlite/sqlite_driver.php b/system/database/drivers/sqlite/sqlite_driver.php[m
[1mnew file mode 100644[m
[1mindex 0000000..a061229[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/sqlite/sqlite_driver.php[m
[36m@@ -0,0 +1,330 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.3.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * SQLite Database Adapter Class[m
[32m+[m[32m *[m
[32m+[m[32m * Note: _DB is an extender class that the app controller[m
[32m+[m[32m * creates dynamically based on whether the query builder[m
[32m+[m[32m * class is being used or not.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_sqlite_driver extends CI_DB {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database driver[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $dbdriver = 'sqlite';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ORDER BY random keyword[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_random_keyword = array('RANDOM()', 'RANDOM()');[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Non-persistent database connection[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$persistent[m
[32m+[m	[32m * @return	resource[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function db_connect($persistent = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$error = NULL;[m
[32m+[m		[32m$conn_id = ($persistent === TRUE)[m
[32m+[m			[32m? sqlite_popen($this->database, 0666, $error)[m
[32m+[m			[32m: sqlite_open($this->database, 0666, $error);[m
[32m+[m
[32m+[m		[32misset($error) && log_message('error', $error);[m
[32m+[m
[32m+[m		[32mreturn $conn_id;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database version number[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function version()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn isset($this->data_cache['version'])[m
[32m+[m			[32m? $this->data_cache['version'][m
[32m+[m			[32m: $this->data_cache['version'] = sqlite_libversion();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Execute the query[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$sql	an SQL query[m
[32m+[m	[32m * @return	resource[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _execute($sql)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->is_write_type($sql)[m
[32m+[m			[32m? sqlite_exec($this->conn_id, $sql)[m
[32m+[m			[32m: sqlite_query($this->conn_id, $sql);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Begin Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_begin()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->simple_query('BEGIN TRANSACTION');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Commit Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_commit()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->simple_query('COMMIT');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Rollback Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_rollback()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->simple_query('ROLLBACK');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Platform-dependant string escape[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _escape_str($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn sqlite_escape_string($str);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Affected Rows[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function affected_rows()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn sqlite_changes($this->conn_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Insert ID[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function insert_id()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn sqlite_last_insert_rowid($this->conn_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List table query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the table names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$prefix_limit[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_tables($prefix_limit = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = "SELECT name FROM sqlite_master WHERE type='table'";[m
[32m+[m
[32m+[m		[32mif ($prefix_limit !== FALSE && $this->dbprefix != '')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $sql." AND 'name' LIKE '".$this->escape_like_str($this->dbprefix)."%' ".sprintf($this->_like_escape_str, $this->_like_escape_chr);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show column query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the column names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_columns($table = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m// Not supported[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns an object with field data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function field_data($table)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (($query = $this->query('PRAGMA TABLE_INFO('.$this->protect_identifiers($table, TRUE, NULL, FALSE).')')) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$query = $query->result_array();[m
[32m+[m		[32mif (empty($query))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$retval = array();[m
[32m+[m		[32mfor ($i = 0, $c = count($query); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$retval[$i]			= new stdClass();[m
[32m+[m			[32m$retval[$i]->name		= $query[$i]['name'];[m
[32m+[m			[32m$retval[$i]->type		= $query[$i]['type'];[m
[32m+[m			[32m$retval[$i]->max_length		= NULL;[m
[32m+[m			[32m$retval[$i]->default		= $query[$i]['dflt_value'];[m
[32m+[m			[32m$retval[$i]->primary_key	= isset($query[$i]['pk']) ? (int) $query[$i]['pk'] : 0;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $retval;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Error[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns an array containing code and message of the last[m
[32m+[m	[32m * database error that has occured.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function error()[m
[32m+[m	[32m{[m
[32m+[m		[32m$error = array('code' => sqlite_last_error($this->conn_id));[m
[32m+[m		[32m$error['message'] = sqlite_error_string($error['code']);[m
[32m+[m		[32mreturn $error;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Replace statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific replace string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table	Table name[m
[32m+[m	[32m * @param	array	$keys	INSERT keys[m
[32m+[m	[32m * @param	array	$values	INSERT values[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _replace($table, $keys, $values)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'INSERT OR '.parent::_replace($table, $keys, $values);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Truncate statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific truncate string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * If the database does not support the TRUNCATE statement,[m
[32m+[m	[32m * then this function maps to 'DELETE FROM table'[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _truncate($table)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'DELETE FROM '.$table;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Close DB Connection[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _close()[m
[32m+[m	[32m{[m
[32m+[m		[32msqlite_close($this->conn_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/sqlite/sqlite_forge.php b/system/database/drivers/sqlite/sqlite_forge.php[m
[1mnew file mode 100644[m
[1mindex 0000000..10d5fe6[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/sqlite/sqlite_forge.php[m
[36m@@ -0,0 +1,205 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.3.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * SQLite Forge Class[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_sqlite_forge extends CI_DB_forge {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CREATE TABLE IF statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_create_table_if	= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * UNSIGNED support[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool|array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_unsigned		= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * NULL value representation in CREATE/ALTER TABLE statements[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_null		= 'NULL';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Create database[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$db_name	(ignored)[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function create_database($db_name)[m
[32m+[m	[32m{[m
[32m+[m		[32m// In SQLite, a database is created when you connect to the database.[m
[32m+[m		[32m// We'll return TRUE so that an error isn't generated[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Drop database[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$db_name	(ignored)[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function drop_database($db_name)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! file_exists($this->db->database) OR ! @unlink($this->db->database))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($this->db->db_debug) ? $this->db->display_error('db_unable_to_drop') : FALSE;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! empty($this->db->data_cache['db_names']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$key = array_search(strtolower($this->db->database), array_map('strtolower', $this->db->data_cache['db_names']), TRUE);[m
[32m+[m			[32mif ($key !== FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32munset($this->db->data_cache['db_names'][$key]);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ALTER TABLE[m
[32m+[m	[32m *[m
[32m+[m	[32m * @todo	implement drop_column(), modify_column()[m
[32m+[m	[32m * @param	string	$alter_type	ALTER type[m
[32m+[m	[32m * @param	string	$table		Table name[m
[32m+[m	[32m * @param	mixed	$field		Column definition[m
[32m+[m	[32m * @return	string|string[][m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _alter_table($alter_type, $table, $field)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($alter_type === 'DROP' OR $alter_type === 'CHANGE')[m
[32m+[m		[32m{[m
[32m+[m			[32m// drop_column():[m
[32m+[m			[32m//	BEGIN TRANSACTION;[m
[32m+[m			[32m//	CREATE TEMPORARY TABLE t1_backup(a,b);[m
[32m+[m			[32m//	INSERT INTO t1_backup SELECT a,b FROM t1;[m
[32m+[m			[32m//	DROP TABLE t1;[m
[32m+[m			[32m//	CREATE TABLE t1(a,b);[m
[32m+[m			[32m//	INSERT INTO t1 SELECT a,b FROM t1_backup;[m
[32m+[m			[32m//	DROP TABLE t1_backup;[m
[32m+[m			[32m//	COMMIT;[m
[32m+[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn parent::_alter_table($alter_type, $table, $field);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Process column[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$field[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _process_column($field)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->db->escape_identifiers($field['name'])[m
[32m+[m			[32m.' '.$field['type'][m
[32m+[m			[32m.$field['auto_increment'][m
[32m+[m			[32m.$field['null'][m
[32m+[m			[32m.$field['unique'][m
[32m+[m			[32m.$field['default'];[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute TYPE[m
[32m+[m	[32m *[m
[32m+[m	[32m * Performs a data type mapping between different databases.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_type(&$attributes)[m
[32m+[m	[32m{[m
[32m+[m		[32mswitch (strtoupper($attributes['TYPE']))[m
[32m+[m		[32m{[m
[32m+[m			[32mcase 'ENUM':[m
[32m+[m			[32mcase 'SET':[m
[32m+[m				[32m$attributes['TYPE'] = 'TEXT';[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mdefault: return;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute AUTO_INCREMENT[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @param	array	&$field[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_auto_increment(&$attributes, &$field)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! empty($attributes['AUTO_INCREMENT']) && $attributes['AUTO_INCREMENT'] === TRUE && stripos($field['type'], 'int') !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$field['type'] = 'INTEGER PRIMARY KEY';[m
[32m+[m			[32m$field['default'] = '';[m
[32m+[m			[32m$field['null'] = '';[m
[32m+[m			[32m$field['unique'] = '';[m
[32m+[m			[32m$field['auto_increment'] = ' AUTOINCREMENT';[m
[32m+[m
[32m+[m			[32m$this->primary_keys = array();[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/sqlite/sqlite_result.php b/system/database/drivers/sqlite/sqlite_result.php[m
[1mnew file mode 100644[m
[1mindex 0000000..59516b0[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/sqlite/sqlite_result.php[m
[36m@@ -0,0 +1,164 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.3.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * SQLite Result Class[m
[32m+[m[32m *[m
[32m+[m[32m * This class extends the parent result class: CI_DB_result[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_sqlite_result extends CI_DB_result {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Number of rows in the result set[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function num_rows()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn is_int($this->num_rows)[m
[32m+[m			[32m? $this->num_rows[m
[32m+[m			[32m: $this->num_rows = @sqlite_num_rows($this->result_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Number of fields in the result set[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function num_fields()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn @sqlite_num_fields($this->result_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch Field Names[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates an array of column names[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function list_fields()[m
[32m+[m	[32m{[m
[32m+[m		[32m$field_names = array();[m
[32m+[m		[32mfor ($i = 0, $c = $this->num_fields(); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$field_names[$i] = sqlite_field_name($this->result_id, $i);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $field_names;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field data[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates an array of objects containing field meta-data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function field_data()[m
[32m+[m	[32m{[m
[32m+[m		[32m$retval = array();[m
[32m+[m		[32mfor ($i = 0, $c = $this->num_fields(); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$retval[$i]			= new stdClass();[m
[32m+[m			[32m$retval[$i]->name		= sqlite_field_name($this->result_id, $i);[m
[32m+[m			[32m$retval[$i]->type		= NULL;[m
[32m+[m			[32m$retval[$i]->max_length		= NULL;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $retval;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Data Seek[m
[32m+[m	[32m *[m
[32m+[m	[32m * Moves the internal pointer to the desired offset. We call[m
[32m+[m	[32m * this internally before fetching results to make sure the[m
[32m+[m	[32m * result set starts at zero.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	$n[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function data_seek($n = 0)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn sqlite_seek($this->result_id, $n);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Result - associative array[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the result set as an array[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _fetch_assoc()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn sqlite_fetch_array($this->result_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Result - object[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the result set as an object[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$class_name[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _fetch_object($class_name = 'stdClass')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn sqlite_fetch_object($this->result_id, $class_name);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/sqlite/sqlite_utility.php b/system/database/drivers/sqlite/sqlite_utility.php[m
[1mnew file mode 100644[m
[1mindex 0000000..57f685e[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/sqlite/sqlite_utility.php[m
[36m@@ -0,0 +1,61 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.3.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * SQLite Utility Class[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_sqlite_utility extends CI_DB_utility {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Export[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params	Preferences[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _backup($params = array())[m
[32m+[m	[32m{[m
[32m+[m		[32m// Currently unsupported[m
[32m+[m		[32mreturn $this->db->display_error('db_unsupported_feature');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/sqlite3/index.html b/system/database/drivers/sqlite3/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/sqlite3/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/system/database/drivers/sqlite3/sqlite3_driver.php b/system/database/drivers/sqlite3/sqlite3_driver.php[m
[1mnew file mode 100644[m
[1mindex 0000000..41d9d48[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/sqlite3/sqlite3_driver.php[m
[36m@@ -0,0 +1,350 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * SQLite3 Database Adapter Class[m
[32m+[m[32m *[m
[32m+[m[32m * Note: _DB is an extender class that the app controller[m
[32m+[m[32m * creates dynamically based on whether the query builder[m
[32m+[m[32m * class is being used or not.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		Andrey Andreev[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_sqlite3_driver extends CI_DB {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database driver[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $dbdriver = 'sqlite3';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ORDER BY random keyword[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_random_keyword = array('RANDOM()', 'RANDOM()');[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Non-persistent database connection[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$persistent[m
[32m+[m	[32m * @return	SQLite3[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function db_connect($persistent = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($persistent)[m
[32m+[m		[32m{[m
[32m+[m			[32mlog_message('debug', 'SQLite3 doesn\'t support persistent connections');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mtry[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ( ! $this->password)[m
[32m+[m				[32m? new SQLite3($this->database)[m
[32m+[m				[32m: new SQLite3($this->database, SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE, $this->password);[m
[32m+[m		[32m}[m
[32m+[m		[32mcatch (Exception $e)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database version number[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function version()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (isset($this->data_cache['version']))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->data_cache['version'];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$version = SQLite3::version();[m
[32m+[m		[32mreturn $this->data_cache['version'] = $version['versionString'];[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Execute the query[m
[32m+[m	[32m *[m
[32m+[m	[32m * @todo	Implement use of SQLite3::querySingle(), if needed[m
[32m+[m	[32m * @param	string	$sql[m
[32m+[m	[32m * @return	mixed	SQLite3Result object or bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _execute($sql)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->is_write_type($sql)[m
[32m+[m			[32m? $this->conn_id->exec($sql)[m
[32m+[m			[32m: $this->conn_id->query($sql);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Begin Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_begin()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->conn_id->exec('BEGIN TRANSACTION');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Commit Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_commit()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->conn_id->exec('END TRANSACTION');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Rollback Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_rollback()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->conn_id->exec('ROLLBACK');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Platform-dependent string escape[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _escape_str($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->conn_id->escapeString($str);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Affected Rows[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function affected_rows()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->conn_id->changes();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Insert ID[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function insert_id()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->conn_id->lastInsertRowID();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show table query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the table names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$prefix_limit[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_tables($prefix_limit = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'SELECT "NAME" FROM "SQLITE_MASTER" WHERE "TYPE" = \'table\''[m
[32m+[m			[32m.(($prefix_limit !== FALSE && $this->dbprefix != '')[m
[32m+[m				[32m? ' AND "NAME" LIKE \''.$this->escape_like_str($this->dbprefix).'%\' '.sprintf($this->_like_escape_str, $this->_like_escape_chr)[m
[32m+[m				[32m: '');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch Field Names[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table	Table name[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function list_fields($table)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Is there a cached result?[m
[32m+[m		[32mif (isset($this->data_cache['field_names'][$table]))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->data_cache['field_names'][$table];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (($result = $this->query('PRAGMA TABLE_INFO('.$this->protect_identifiers($table, TRUE, NULL, FALSE).')')) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->data_cache['field_names'][$table] = array();[m
[32m+[m		[32mforeach ($result->result_array() as $row)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->data_cache['field_names'][$table][] = $row['name'];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->data_cache['field_names'][$table];[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns an object with field data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function field_data($table)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (($query = $this->query('PRAGMA TABLE_INFO('.$this->protect_identifiers($table, TRUE, NULL, FALSE).')')) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$query = $query->result_array();[m
[32m+[m		[32mif (empty($query))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$retval = array();[m
[32m+[m		[32mfor ($i = 0, $c = count($query); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$retval[$i]			= new stdClass();[m
[32m+[m			[32m$retval[$i]->name		= $query[$i]['name'];[m
[32m+[m			[32m$retval[$i]->type		= $query[$i]['type'];[m
[32m+[m			[32m$retval[$i]->max_length		= NULL;[m
[32m+[m			[32m$retval[$i]->default		= $query[$i]['dflt_value'];[m
[32m+[m			[32m$retval[$i]->primary_key	= isset($query[$i]['pk']) ? (int) $query[$i]['pk'] : 0;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $retval;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Error[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns an array containing code and message of the last[m
[32m+[m	[32m * database error that has occurred.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function error()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn array('code' => $this->conn_id->lastErrorCode(), 'message' => $this->conn_id->lastErrorMsg());[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Replace statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific replace string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table	Table name[m
[32m+[m	[32m * @param	array	$keys	INSERT keys[m
[32m+[m	[32m * @param	array	$values	INSERT values[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _replace($table, $keys, $values)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'INSERT OR '.parent::_replace($table, $keys, $values);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Truncate statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific truncate string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * If the database does not support the TRUNCATE statement,[m
[32m+[m	[32m * then this method maps to 'DELETE FROM table'[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _truncate($table)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'DELETE FROM '.$table;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Close DB Connection[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _close()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->conn_id->close();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/sqlite3/sqlite3_forge.php b/system/database/drivers/sqlite3/sqlite3_forge.php[m
[1mnew file mode 100644[m
[1mindex 0000000..48c5efc[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/sqlite3/sqlite3_forge.php[m
[36m@@ -0,0 +1,225 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * SQLite3 Forge Class[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author	Andrey Andreev[m
[32m+[m[32m * @link	https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_sqlite3_forge extends CI_DB_forge {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * UNSIGNED support[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool|array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_unsigned		= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * NULL value representation in CREATE/ALTER TABLE statements[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_null		= 'NULL';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	object	&$db	Database object[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct(&$db)[m
[32m+[m	[32m{[m
[32m+[m		[32mparent::__construct($db);[m
[32m+[m
[32m+[m		[32mif (version_compare($this->db->version(), '3.3', '<'))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_create_table_if = FALSE;[m
[32m+[m			[32m$this->_drop_table_if   = FALSE;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Create database[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$db_name[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function create_database($db_name)[m
[32m+[m	[32m{[m
[32m+[m		[32m// In SQLite, a database is created when you connect to the database.[m
[32m+[m		[32m// We'll return TRUE so that an error isn't generated[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Drop database[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$db_name	(ignored)[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function drop_database($db_name)[m
[32m+[m	[32m{[m
[32m+[m		[32m// In SQLite, a database is dropped when we delete a file[m
[32m+[m		[32mif (file_exists($this->db->database))[m
[32m+[m		[32m{[m
[32m+[m			[32m// We need to close the pseudo-connection first[m
[32m+[m			[32m$this->db->close();[m
[32m+[m			[32mif ( ! @unlink($this->db->database))[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn $this->db->db_debug ? $this->db->display_error('db_unable_to_drop') : FALSE;[m
[32m+[m			[32m}[m
[32m+[m			[32melseif ( ! empty($this->db->data_cache['db_names']))[m
[32m+[m			[32m{[m
[32m+[m				[32m$key = array_search(strtolower($this->db->database), array_map('strtolower', $this->db->data_cache['db_names']), TRUE);[m
[32m+[m				[32mif ($key !== FALSE)[m
[32m+[m				[32m{[m
[32m+[m					[32munset($this->db->data_cache['db_names'][$key]);[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->db->db_debug ? $this->db->display_error('db_unable_to_drop') : FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ALTER TABLE[m
[32m+[m	[32m *[m
[32m+[m	[32m * @todo	implement drop_column(), modify_column()[m
[32m+[m	[32m * @param	string	$alter_type	ALTER type[m
[32m+[m	[32m * @param	string	$table		Table name[m
[32m+[m	[32m * @param	mixed	$field		Column definition[m
[32m+[m	[32m * @return	string|string[][m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _alter_table($alter_type, $table, $field)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($alter_type === 'DROP' OR $alter_type === 'CHANGE')[m
[32m+[m		[32m{[m
[32m+[m			[32m// drop_column():[m
[32m+[m			[32m//	BEGIN TRANSACTION;[m
[32m+[m			[32m//	CREATE TEMPORARY TABLE t1_backup(a,b);[m
[32m+[m			[32m//	INSERT INTO t1_backup SELECT a,b FROM t1;[m
[32m+[m			[32m//	DROP TABLE t1;[m
[32m+[m			[32m//	CREATE TABLE t1(a,b);[m
[32m+[m			[32m//	INSERT INTO t1 SELECT a,b FROM t1_backup;[m
[32m+[m			[32m//	DROP TABLE t1_backup;[m
[32m+[m			[32m//	COMMIT;[m
[32m+[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn parent::_alter_table($alter_type, $table, $field);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Process column[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$field[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _process_column($field)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->db->escape_identifiers($field['name'])[m
[32m+[m			[32m.' '.$field['type'][m
[32m+[m			[32m.$field['auto_increment'][m
[32m+[m			[32m.$field['null'][m
[32m+[m			[32m.$field['unique'][m
[32m+[m			[32m.$field['default'];[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute TYPE[m
[32m+[m	[32m *[m
[32m+[m	[32m * Performs a data type mapping between different databases.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_type(&$attributes)[m
[32m+[m	[32m{[m
[32m+[m		[32mswitch (strtoupper($attributes['TYPE']))[m
[32m+[m		[32m{[m
[32m+[m			[32mcase 'ENUM':[m
[32m+[m			[32mcase 'SET':[m
[32m+[m				[32m$attributes['TYPE'] = 'TEXT';[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mdefault: return;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute AUTO_INCREMENT[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @param	array	&$field[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_auto_increment(&$attributes, &$field)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! empty($attributes['AUTO_INCREMENT']) && $attributes['AUTO_INCREMENT'] === TRUE && stripos($field['type'], 'int') !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$field['type'] = 'INTEGER PRIMARY KEY';[m
[32m+[m			[32m$field['default'] = '';[m
[32m+[m			[32m$field['null'] = '';[m
[32m+[m			[32m$field['unique'] = '';[m
[32m+[m			[32m$field['auto_increment'] = ' AUTOINCREMENT';[m
[32m+[m
[32m+[m			[32m$this->primary_keys = array();[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/sqlite3/sqlite3_result.php b/system/database/drivers/sqlite3/sqlite3_result.php[m
[1mnew file mode 100644[m
[1mindex 0000000..a143fd7[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/sqlite3/sqlite3_result.php[m
[36m@@ -0,0 +1,194 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * SQLite3 Result Class[m
[32m+[m[32m *[m
[32m+[m[32m * This class extends the parent result class: CI_DB_result[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		Andrey Andreev[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_sqlite3_result extends CI_DB_result {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Number of fields in the result set[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function num_fields()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->result_id->numColumns();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch Field Names[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates an array of column names[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function list_fields()[m
[32m+[m	[32m{[m
[32m+[m		[32m$field_names = array();[m
[32m+[m		[32mfor ($i = 0, $c = $this->num_fields(); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$field_names[] = $this->result_id->columnName($i);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $field_names;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field data[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates an array of objects containing field meta-data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function field_data()[m
[32m+[m	[32m{[m
[32m+[m		[32mstatic $data_types = array([m
[32m+[m			[32mSQLITE3_INTEGER	=> 'integer',[m
[32m+[m			[32mSQLITE3_FLOAT	=> 'float',[m
[32m+[m			[32mSQLITE3_TEXT	=> 'text',[m
[32m+[m			[32mSQLITE3_BLOB	=> 'blob',[m
[32m+[m			[32mSQLITE3_NULL	=> 'null'[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32m$retval = array();[m
[32m+[m		[32mfor ($i = 0, $c = $this->num_fields(); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$retval[$i]			= new stdClass();[m
[32m+[m			[32m$retval[$i]->name		= $this->result_id->columnName($i);[m
[32m+[m
[32m+[m			[32m$type = $this->result_id->columnType($i);[m
[32m+[m			[32m$retval[$i]->type		= isset($data_types[$type]) ? $data_types[$type] : $type;[m
[32m+[m
[32m+[m			[32m$retval[$i]->max_length		= NULL;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $retval;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Free the result[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function free_result()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (is_object($this->result_id))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->result_id->finalize();[m
[32m+[m			[32m$this->result_id = NULL;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Result - associative array[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the result set as an array[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _fetch_assoc()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->result_id->fetchArray(SQLITE3_ASSOC);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Result - object[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the result set as an object[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$class_name[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _fetch_object($class_name = 'stdClass')[m
[32m+[m	[32m{[m
[32m+[m		[32m// No native support for fetching rows as objects[m
[32m+[m		[32mif (($row = $this->result_id->fetchArray(SQLITE3_ASSOC)) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($class_name === 'stdClass')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn (object) $row;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$class_name = new $class_name();[m
[32m+[m		[32mforeach (array_keys($row) as $key)[m
[32m+[m		[32m{[m
[32m+[m			[32m$class_name->$key = $row[$key];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $class_name;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Data Seek[m
[32m+[m	[32m *[m
[32m+[m	[32m * Moves the internal pointer to the desired offset. We call[m
[32m+[m	[32m * this internally before fetching results to make sure the[m
[32m+[m	[32m * result set starts at zero.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	$n	(ignored)[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function data_seek($n = 0)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Only resetting to the start of the result set is supported[m
[32m+[m		[32mreturn ($n > 0) ? FALSE : $this->result_id->reset();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/sqlite3/sqlite3_utility.php b/system/database/drivers/sqlite3/sqlite3_utility.php[m
[1mnew file mode 100644[m
[1mindex 0000000..c829c1f[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/sqlite3/sqlite3_utility.php[m
[36m@@ -0,0 +1,61 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * SQLite3 Utility Class[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author	Andrey Andreev[m
[32m+[m[32m * @link	https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_sqlite3_utility extends CI_DB_utility {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Export[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params	Preferences[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _backup($params = array())[m
[32m+[m	[32m{[m
[32m+[m		[32m// Not supported[m
[32m+[m		[32mreturn $this->db->display_error('db_unsupported_feature');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/sqlsrv/index.html b/system/database/drivers/sqlsrv/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/sqlsrv/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/system/database/drivers/sqlsrv/sqlsrv_driver.php b/system/database/drivers/sqlsrv/sqlsrv_driver.php[m
[1mnew file mode 100644[m
[1mindex 0000000..05d35a4[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/sqlsrv/sqlsrv_driver.php[m
[36m@@ -0,0 +1,543 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 2.0.3[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * SQLSRV Database Adapter Class[m
[32m+[m[32m *[m
[32m+[m[32m * Note: _DB is an extender class that the app controller[m
[32m+[m[32m * creates dynamically based on whether the query builder[m
[32m+[m[32m * class is being used or not.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Drivers[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_sqlsrv_driver extends CI_DB {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database driver[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $dbdriver = 'sqlsrv';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Scrollable flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * Determines what cursor type to use when executing queries.[m
[32m+[m	[32m *[m
[32m+[m	[32m * FALSE or SQLSRV_CURSOR_FORWARD would increase performance,[m
[32m+[m	[32m * but would disable num_rows() (and possibly insert_id())[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $scrollable;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ORDER BY random keyword[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_random_keyword = array('NEWID()', 'RAND(%d)');[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Quoted identifier flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * Whether to use SQL-92 standard quoted identifier[m
[32m+[m	[32m * (double quotes) or brackets for identifier escaping.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_quoted_identifier = TRUE;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct($params)[m
[32m+[m	[32m{[m
[32m+[m		[32mparent::__construct($params);[m
[32m+[m
[32m+[m		[32m// This is only supported as of SQLSRV 3.0[m
[32m+[m		[32mif ($this->scrollable === NULL)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->scrollable = defined('SQLSRV_CURSOR_CLIENT_BUFFERED')[m
[32m+[m				[32m? SQLSRV_CURSOR_CLIENT_BUFFERED[m
[32m+[m				[32m: FALSE;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database connection[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$pooling[m
[32m+[m	[32m * @return	resource[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function db_connect($pooling = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$charset = in_array(strtolower($this->char_set), array('utf-8', 'utf8'), TRUE)[m
[32m+[m			[32m? 'UTF-8' : SQLSRV_ENC_CHAR;[m
[32m+[m
[32m+[m		[32m$connection = array([m
[32m+[m			[32m'UID'			=> empty($this->username) ? '' : $this->username,[m
[32m+[m			[32m'PWD'			=> empty($this->password) ? '' : $this->password,[m
[32m+[m			[32m'Database'		=> $this->database,[m
[32m+[m			[32m'ConnectionPooling'	=> ($pooling === TRUE) ? 1 : 0,[m
[32m+[m			[32m'CharacterSet'		=> $charset,[m
[32m+[m			[32m'Encrypt'		=> ($this->encrypt === TRUE) ? 1 : 0,[m
[32m+[m			[32m'ReturnDatesAsStrings'	=> 1[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32m// If the username and password are both empty, assume this is a[m
[32m+[m		[32m// 'Windows Authentication Mode' connection.[m
[32m+[m		[32mif (empty($connection['UID']) && empty($connection['PWD']))[m
[32m+[m		[32m{[m
[32m+[m			[32munset($connection['UID'], $connection['PWD']);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (FALSE !== ($this->conn_id = sqlsrv_connect($this->hostname, $connection)))[m
[32m+[m		[32m{[m
[32m+[m			[32m// Determine how identifiers are escaped[m
[32m+[m			[32m$query = $this->query('SELECT CASE WHEN (@@OPTIONS | 256) = @@OPTIONS THEN 1 ELSE 0 END AS qi');[m
[32m+[m			[32m$query = $query->row_array();[m
[32m+[m			[32m$this->_quoted_identifier = empty($query) ? FALSE : (bool) $query['qi'];[m
[32m+[m			[32m$this->_escape_char = ($this->_quoted_identifier) ? '"' : array('[', ']');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->conn_id;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Select the database[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$database[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function db_select($database = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($database === '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$database = $this->database;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($this->_execute('USE '.$this->escape_identifiers($database)))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->database = $database;[m
[32m+[m			[32m$this->data_cache = array();[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Execute the query[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$sql	an SQL query[m
[32m+[m	[32m * @return	resource[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _execute($sql)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn ($this->scrollable === FALSE OR $this->is_write_type($sql))[m
[32m+[m			[32m? sqlsrv_query($this->conn_id, $sql)[m
[32m+[m			[32m: sqlsrv_query($this->conn_id, $sql, NULL, array('Scrollable' => $this->scrollable));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Begin Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_begin()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn sqlsrv_begin_transaction($this->conn_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Commit Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_commit()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn sqlsrv_commit($this->conn_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Rollback Transaction[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _trans_rollback()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn sqlsrv_rollback($this->conn_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Affected Rows[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function affected_rows()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn sqlsrv_rows_affected($this->result_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Insert ID[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the last id created in the Identity column.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function insert_id()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->query('SELECT SCOPE_IDENTITY() AS insert_id')->row()->insert_id;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database version number[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function version()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (isset($this->data_cache['version']))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->data_cache['version'];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! $this->conn_id OR ($info = sqlsrv_server_info($this->conn_id)) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->data_cache['version'] = $info['SQLServerVersion'];[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List table query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the table names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool[m
[32m+[m	[32m * @return	string	$prefix_limit[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_tables($prefix_limit = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = 'SELECT '.$this->escape_identifiers('name')[m
[32m+[m			[32m.' FROM '.$this->escape_identifiers('sysobjects')[m
[32m+[m			[32m.' WHERE '.$this->escape_identifiers('type')." = 'U'";[m
[32m+[m
[32m+[m		[32mif ($prefix_limit === TRUE && $this->dbprefix !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$sql .= ' AND '.$this->escape_identifiers('name')." LIKE '".$this->escape_like_str($this->dbprefix)."%' "[m
[32m+[m				[32m.sprintf($this->_escape_like_str, $this->_escape_like_chr);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sql.' ORDER BY '.$this->escape_identifiers('name');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List column query[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific query string so that the column names can be fetched[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _list_columns($table = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'SELECT COLUMN_NAME[m
[32m+[m			[32mFROM INFORMATION_SCHEMA.Columns[m
[32m+[m			[32mWHERE UPPER(TABLE_NAME) = '.$this->escape(strtoupper($table));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Returns an object with field data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function field_data($table)[m
[32m+[m	[32m{[m
[32m+[m		[32m$sql = 'SELECT COLUMN_NAME, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH, NUMERIC_PRECISION, COLUMN_DEFAULT[m
[32m+[m			[32mFROM INFORMATION_SCHEMA.Columns[m
[32m+[m			[32mWHERE UPPER(TABLE_NAME) = '.$this->escape(strtoupper($table));[m
[32m+[m
[32m+[m		[32mif (($query = $this->query($sql)) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m		[32m$query = $query->result_object();[m
[32m+[m
[32m+[m		[32m$retval = array();[m
[32m+[m		[32mfor ($i = 0, $c = count($query); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$retval[$i]			= new stdClass();[m
[32m+[m			[32m$retval[$i]->name		= $query[$i]->COLUMN_NAME;[m
[32m+[m			[32m$retval[$i]->type		= $query[$i]->DATA_TYPE;[m
[32m+[m			[32m$retval[$i]->max_length		= ($query[$i]->CHARACTER_MAXIMUM_LENGTH > 0) ? $query[$i]->CHARACTER_MAXIMUM_LENGTH : $query[$i]->NUMERIC_PRECISION;[m
[32m+[m			[32m$retval[$i]->default		= $query[$i]->COLUMN_DEFAULT;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $retval;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Error[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns an array containing code and message of the last[m
[32m+[m	[32m * database error that has occurred.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function error()[m
[32m+[m	[32m{[m
[32m+[m		[32m$error = array('code' => '00000', 'message' => '');[m
[32m+[m		[32m$sqlsrv_errors = sqlsrv_errors(SQLSRV_ERR_ERRORS);[m
[32m+[m
[32m+[m		[32mif ( ! is_array($sqlsrv_errors))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $error;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sqlsrv_error = array_shift($sqlsrv_errors);[m
[32m+[m		[32mif (isset($sqlsrv_error['SQLSTATE']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$error['code'] = isset($sqlsrv_error['code']) ? $sqlsrv_error['SQLSTATE'].'/'.$sqlsrv_error['code'] : $sqlsrv_error['SQLSTATE'];[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (isset($sqlsrv_error['code']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$error['code'] = $sqlsrv_error['code'];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (isset($sqlsrv_error['message']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$error['message'] = $sqlsrv_error['message'];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $error;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Update statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific update string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @param	array	$values[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _update($table, $values)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->qb_limit = FALSE;[m
[32m+[m		[32m$this->qb_orderby = array();[m
[32m+[m		[32mreturn parent::_update($table, $values);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Truncate statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific truncate string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * If the database does not support the TRUNCATE statement,[m
[32m+[m	[32m * then this method maps to 'DELETE FROM table'[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _truncate($table)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'TRUNCATE TABLE '.$table;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Delete statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific delete string from the supplied data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _delete($table)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->qb_limit)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn 'WITH ci_delete AS (SELECT TOP '.$this->qb_limit.' * FROM '.$table.$this->_compile_wh('qb_where').') DELETE FROM ci_delete';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn parent::_delete($table);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * LIMIT[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific LIMIT clause[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$sql	SQL Query[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _limit($sql)[m
[32m+[m	[32m{[m
[32m+[m		[32m// As of SQL Server 2012 (11.0.*) OFFSET is supported[m
[32m+[m		[32mif (version_compare($this->version(), '11', '>='))[m
[32m+[m		[32m{[m
[32m+[m			[32m// SQL Server OFFSET-FETCH can be used only with the ORDER BY clause[m
[32m+[m			[32mempty($this->qb_orderby) && $sql .= ' ORDER BY 1';[m
[32m+[m
[32m+[m			[32mreturn $sql.' OFFSET '.(int) $this->qb_offset.' ROWS FETCH NEXT '.$this->qb_limit.' ROWS ONLY';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$limit = $this->qb_offset + $this->qb_limit;[m
[32m+[m
[32m+[m		[32m// An ORDER BY clause is required for ROW_NUMBER() to work[m
[32m+[m		[32mif ($this->qb_offset && ! empty($this->qb_orderby))[m
[32m+[m		[32m{[m
[32m+[m			[32m$orderby = $this->_compile_order_by();[m
[32m+[m
[32m+[m			[32m// We have to strip the ORDER BY clause[m
[32m+[m			[32m$sql = trim(substr($sql, 0, strrpos($sql, $orderby)));[m
[32m+[m
[32m+[m			[32m// Get the fields to select from our subquery, so that we can avoid CI_rownum appearing in the actual results[m
[32m+[m			[32mif (count($this->qb_select) === 0 OR strpos(implode(',', $this->qb_select), '*') !== FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$select = '*'; // Inevitable[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m// Use only field names and their aliases, everything else is out of our scope.[m
[32m+[m				[32m$select = array();[m
[32m+[m				[32m$field_regexp = ($this->_quoted_identifier)[m
[32m+[m					[32m? '("[^\"]+")' : '(\[[^\]]+\])';[m
[32m+[m				[32mfor ($i = 0, $c = count($this->qb_select); $i < $c; $i++)[m
[32m+[m				[32m{[m
[32m+[m					[32m$select[] = preg_match('/(?:\s|\.)'.$field_regexp.'$/i', $this->qb_select[$i], $m)[m
[32m+[m						[32m? $m[1] : $this->qb_select[$i];[m
[32m+[m				[32m}[m
[32m+[m				[32m$select = implode(', ', $select);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn 'SELECT '.$select." FROM (\n\n"[m
[32m+[m				[32m.preg_replace('/^(SELECT( DISTINCT)?)/i', '\\1 ROW_NUMBER() OVER('.trim($orderby).') AS '.$this->escape_identifiers('CI_rownum').', ', $sql)[m
[32m+[m				[32m."\n\n) ".$this->escape_identifiers('CI_subquery')[m
[32m+[m				[32m."\nWHERE ".$this->escape_identifiers('CI_rownum').' BETWEEN '.($this->qb_offset + 1).' AND '.$limit;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn preg_replace('/(^\SELECT (DISTINCT)?)/i','\\1 TOP '.$limit.' ', $sql);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Insert batch statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a platform-specific insert string from the supplied data.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$table	Table name[m
[32m+[m	[32m * @param	array	$keys	INSERT keys[m
[32m+[m	[32m * @param	array	$values	INSERT values[m
[32m+[m	[32m * @return	string|bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _insert_batch($table, $keys, $values)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Multiple-value inserts are only supported as of SQL Server 2008[m
[32m+[m		[32mif (version_compare($this->version(), '10', '>='))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn parent::_insert_batch($table, $keys, $values);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn ($this->db_debug) ? $this->display_error('db_unsupported_feature') : FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Close DB Connection[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _close()[m
[32m+[m	[32m{[m
[32m+[m		[32msqlsrv_close($this->conn_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/sqlsrv/sqlsrv_forge.php b/system/database/drivers/sqlsrv/sqlsrv_forge.php[m
[1mnew file mode 100644[m
[1mindex 0000000..01547e8[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/sqlsrv/sqlsrv_forge.php[m
[36m@@ -0,0 +1,149 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 2.0.3[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * SQLSRV Forge Class[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_sqlsrv_forge extends CI_DB_forge {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CREATE TABLE IF statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_create_table_if	= "IF NOT EXISTS (SELECT * FROM sysobjects WHERE ID = object_id(N'%s') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)\nCREATE TABLE";[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * DROP TABLE IF statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_drop_table_if	= "IF EXISTS (SELECT * FROM sysobjects WHERE ID = object_id(N'%s') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)\nDROP TABLE";[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * UNSIGNED support[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_unsigned		= array([m
[32m+[m		[32m'TINYINT'	=> 'SMALLINT',[m
[32m+[m		[32m'SMALLINT'	=> 'INT',[m
[32m+[m		[32m'INT'		=> 'BIGINT',[m
[32m+[m		[32m'REAL'		=> 'FLOAT'[m
[32m+[m	[32m);[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * ALTER TABLE[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$alter_type	ALTER type[m
[32m+[m	[32m * @param	string	$table		Table name[m
[32m+[m	[32m * @param	mixed	$field		Column definition[m
[32m+[m	[32m * @return	string|string[][m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _alter_table($alter_type, $table, $field)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (in_array($alter_type, array('ADD', 'DROP'), TRUE))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn parent::_alter_table($alter_type, $table, $field);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$sql = 'ALTER TABLE '.$this->db->escape_identifiers($table).' ALTER COLUMN ';[m
[32m+[m		[32m$sqls = array();[m
[32m+[m		[32mfor ($i = 0, $c = count($field); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$sqls[] = $sql.$this->_process_column($field[$i]);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $sqls;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute TYPE[m
[32m+[m	[32m *[m
[32m+[m	[32m * Performs a data type mapping between different databases.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_type(&$attributes)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (isset($attributes['CONSTRAINT']) && strpos($attributes['TYPE'], 'INT') !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32munset($attributes['CONSTRAINT']);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mswitch (strtoupper($attributes['TYPE']))[m
[32m+[m		[32m{[m
[32m+[m			[32mcase 'MEDIUMINT':[m
[32m+[m				[32m$attributes['TYPE'] = 'INTEGER';[m
[32m+[m				[32m$attributes['UNSIGNED'] = FALSE;[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mcase 'INTEGER':[m
[32m+[m				[32m$attributes['TYPE'] = 'INT';[m
[32m+[m				[32mreturn;[m
[32m+[m			[32mdefault: return;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field attribute AUTO_INCREMENT[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	&$attributes[m
[32m+[m	[32m * @param	array	&$field[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _attr_auto_increment(&$attributes, &$field)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! empty($attributes['AUTO_INCREMENT']) && $attributes['AUTO_INCREMENT'] === TRUE && stripos($field['type'], 'int') !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$field['auto_increment'] = ' IDENTITY(1,1)';[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/sqlsrv/sqlsrv_result.php b/system/database/drivers/sqlsrv/sqlsrv_result.php[m
[1mnew file mode 100644[m
[1mindex 0000000..1d0272f[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/sqlsrv/sqlsrv_result.php[m
[36m@@ -0,0 +1,193 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 2.0.3[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * SQLSRV Result Class[m
[32m+[m[32m *[m
[32m+[m[32m * This class extends the parent result class: CI_DB_result[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_sqlsrv_result extends CI_DB_result {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Scrollable flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $scrollable;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	object	$driver_object[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct(&$driver_object)[m
[32m+[m	[32m{[m
[32m+[m		[32mparent::__construct($driver_object);[m
[32m+[m
[32m+[m		[32m$this->scrollable = $driver_object->scrollable;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Number of rows in the result set[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function num_rows()[m
[32m+[m	[32m{[m
[32m+[m		[32m// sqlsrv_num_rows() doesn't work with the FORWARD and DYNAMIC cursors (FALSE is the same as FORWARD)[m
[32m+[m		[32mif ( ! in_array($this->scrollable, array(FALSE, SQLSRV_CURSOR_FORWARD, SQLSRV_CURSOR_DYNAMIC), TRUE))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn parent::num_rows();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn is_int($this->num_rows)[m
[32m+[m			[32m? $this->num_rows[m
[32m+[m			[32m: $this->num_rows = sqlsrv_num_rows($this->result_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Number of fields in the result set[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function num_fields()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn @sqlsrv_num_fields($this->result_id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch Field Names[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates an array of column names[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function list_fields()[m
[32m+[m	[32m{[m
[32m+[m		[32m$field_names = array();[m
[32m+[m		[32mforeach (sqlsrv_field_metadata($this->result_id) as $offset => $field)[m
[32m+[m		[32m{[m
[32m+[m			[32m$field_names[] = $field['Name'];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $field_names;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Field data[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates an array of objects containing field meta-data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function field_data()[m
[32m+[m	[32m{[m
[32m+[m		[32m$retval = array();[m
[32m+[m		[32mforeach (sqlsrv_field_metadata($this->result_id) as $i => $field)[m
[32m+[m		[32m{[m
[32m+[m			[32m$retval[$i]		= new stdClass();[m
[32m+[m			[32m$retval[$i]->name	= $field['Name'];[m
[32m+[m			[32m$retval[$i]->type	= $field['Type'];[m
[32m+[m			[32m$retval[$i]->max_length	= $field['Size'];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $retval;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Free the result[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function free_result()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (is_resource($this->result_id))[m
[32m+[m		[32m{[m
[32m+[m			[32msqlsrv_free_stmt($this->result_id);[m
[32m+[m			[32m$this->result_id = FALSE;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Result - associative array[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the result set as an array[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _fetch_assoc()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn sqlsrv_fetch_array($this->result_id, SQLSRV_FETCH_ASSOC);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Result - object[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the result set as an object[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$class_name[m
[32m+[m	[32m * @return	object[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _fetch_object($class_name = 'stdClass')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn sqlsrv_fetch_object($this->result_id, $class_name);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/drivers/sqlsrv/sqlsrv_utility.php b/system/database/drivers/sqlsrv/sqlsrv_utility.php[m
[1mnew file mode 100644[m
[1mindex 0000000..001107d[m
[1m--- /dev/null[m
[1m+++ b/system/database/drivers/sqlsrv/sqlsrv_utility.php[m
[36m@@ -0,0 +1,77 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 2.0.3[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * SQLSRV Utility Class[m
[32m+[m[32m *[m
[32m+[m[32m * @category	Database[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/database/[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_DB_sqlsrv_utility extends CI_DB_utility {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List databases statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_list_databases	= 'EXEC sp_helpdb'; // Can also be: EXEC sp_databases[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * OPTIMIZE TABLE statement[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_optimize_table	= 'ALTER INDEX all ON %s REORGANIZE';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Export[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params	Preferences[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _backup($params = array())[m
[32m+[m	[32m{[m
[32m+[m		[32m// Currently unsupported[m
[32m+[m		[32mreturn $this->db->display_error('db_unsupported_feature');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/database/index.html b/system/database/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/system/database/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/system/fonts/index.html b/system/fonts/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/system/fonts/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/system/fonts/texb.ttf b/system/fonts/texb.ttf[m
[1mnew file mode 100644[m
[1mindex 0000000..383c88b[m
Binary files /dev/null and b/system/fonts/texb.ttf differ
[1mdiff --git a/system/helpers/array_helper.php b/system/helpers/array_helper.php[m
[1mnew file mode 100644[m
[1mindex 0000000..3d4a496[m
[1m--- /dev/null[m
[1m+++ b/system/helpers/array_helper.php[m
[36m@@ -0,0 +1,115 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter Array Helpers[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Helpers[m
[32m+[m[32m * @category	Helpers[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/helpers/array_helper.html[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('element'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Element[m
[32m+[m	[32m *[m
[32m+[m	[32m * Lets you determine whether an array index is set and whether it has a value.[m
[32m+[m	[32m * If the element is empty it returns NULL (or whatever you specify as the default value.)[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	array[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @return	mixed	depends on what the array contains[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction element($item, array $array, $default = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn array_key_exists($item, $array) ? $array[$item] : $default;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('random_element'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Random Element - Takes an array as input and returns a random element[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array[m
[32m+[m	[32m * @return	mixed	depends on what the array contains[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction random_element($array)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn is_array($array) ? $array[array_rand($array)] : $array;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('elements'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Elements[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns only the array items specified. Will return a default value if[m
[32m+[m	[32m * it is not set.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array[m
[32m+[m	[32m * @param	array[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @return	mixed	depends on what the array contains[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction elements($items, array $array, $default = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32m$return = array();[m
[32m+[m
[32m+[m		[32mis_array($items) OR $items = array($items);[m
[32m+[m
[32m+[m		[32mforeach ($items as $item)[m
[32m+[m		[32m{[m
[32m+[m			[32m$return[$item] = array_key_exists($item, $array) ? $array[$item] : $default;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $return;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/helpers/captcha_helper.php b/system/helpers/captcha_helper.php[m
[1mnew file mode 100644[m
[1mindex 0000000..a67b72b[m
[1m--- /dev/null[m
[1m+++ b/system/helpers/captcha_helper.php[m
[36m@@ -0,0 +1,341 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter CAPTCHA Helper[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Helpers[m
[32m+[m[32m * @category	Helpers[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/helpers/captcha_helper.html[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('create_captcha'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Create CAPTCHA[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$data		Data for the CAPTCHA[m
[32m+[m	[32m * @param	string	$img_path	Path to create the image in (deprecated)[m
[32m+[m	[32m * @param	string	$img_url	URL to the CAPTCHA image folder (deprecated)[m
[32m+[m	[32m * @param	string	$font_path	Server path to font (deprecated)[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction create_captcha($data = '', $img_path = '', $img_url = '', $font_path = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$defaults = array([m
[32m+[m			[32m'word'		=> '',[m
[32m+[m			[32m'img_path'	=> '',[m
[32m+[m			[32m'img_url'	=> '',[m
[32m+[m			[32m'img_width'	=> '150',[m
[32m+[m			[32m'img_height'	=> '30',[m
[32m+[m			[32m'font_path'	=> '',[m
[32m+[m			[32m'expiration'	=> 7200,[m
[32m+[m			[32m'word_length'	=> 8,[m
[32m+[m			[32m'font_size'	=> 16,[m
[32m+[m			[32m'img_id'	=> '',[m
[32m+[m			[32m'pool'		=> '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',[m
[32m+[m			[32m'colors'	=> array([m
[32m+[m				[32m'background'	=> array(255,255,255),[m
[32m+[m				[32m'border'	=> array(153,102,102),[m
[32m+[m				[32m'text'		=> array(204,153,153),[m
[32m+[m				[32m'grid'		=> array(255,182,182)[m
[32m+[m			[32m)[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32mforeach ($defaults as $key => $val)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ( ! is_array($data) && empty($$key))[m
[32m+[m			[32m{[m
[32m+[m				[32m$$key = $val;[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$$key = isset($data[$key]) ? $data[$key] : $val;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($img_path === '' OR $img_url === ''[m
[32m+[m			[32mOR ! is_dir($img_path) OR ! is_really_writable($img_path)[m
[32m+[m			[32mOR ! extension_loaded('gd'))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// -----------------------------------[m
[32m+[m		[32m// Remove old images[m
[32m+[m		[32m// -----------------------------------[m
[32m+[m
[32m+[m		[32m$now = microtime(TRUE);[m
[32m+[m
[32m+[m		[32m$current_dir = @opendir($img_path);[m
[32m+[m		[32mwhile ($filename = @readdir($current_dir))[m
[32m+[m		[32m{[m
[32m+[m			[32mif (in_array(substr($filename, -4), array('.jpg', '.png'))[m
[32m+[m				[32m&& (str_replace(array('.jpg', '.png'), '', $filename) + $expiration) < $now)[m
[32m+[m			[32m{[m
[32m+[m				[32m@unlink($img_path.$filename);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m@closedir($current_dir);[m
[32m+[m
[32m+[m		[32m// -----------------------------------[m
[32m+[m		[32m// Do we have a "word" yet?[m
[32m+[m		[32m// -----------------------------------[m
[32m+[m
[32m+[m		[32mif (empty($word))[m
[32m+[m		[32m{[m
[32m+[m			[32m$word = '';[m
[32m+[m			[32m$pool_length = strlen($pool);[m
[32m+[m			[32m$rand_max = $pool_length - 1;[m
[32m+[m
[32m+[m			[32m// PHP7 or a suitable polyfill[m
[32m+[m			[32mif (function_exists('random_int'))[m
[32m+[m			[32m{[m
[32m+[m				[32mtry[m
[32m+[m				[32m{[m
[32m+[m					[32mfor ($i = 0; $i < $word_length; $i++)[m
[32m+[m					[32m{[m
[32m+[m						[32m$word .= $pool[random_int(0, $rand_max)];[m
[32m+[m					[32m}[m
[32m+[m				[32m}[m
[32m+[m				[32mcatch (Exception $e)[m
[32m+[m				[32m{[m
[32m+[m					[32m// This means fallback to the next possible[m
[32m+[m					[32m// alternative to random_int()[m
[32m+[m					[32m$word = '';[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (empty($word))[m
[32m+[m		[32m{[m
[32m+[m			[32m// Nobody will have a larger character pool than[m
[32m+[m			[32m// 256 characters, but let's handle it just in case ...[m
[32m+[m			[32m//[m
[32m+[m			[32m// No, I do not care that the fallback to mt_rand() can[m
[32m+[m			[32m// handle it; if you trigger this, you're very obviously[m
[32m+[m			[32m// trying to break it. -- Narf[m
[32m+[m			[32mif ($pool_length > 256)[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// We'll try using the operating system's PRNG first,[m
[32m+[m			[32m// which we can access through CI_Security::get_random_bytes()[m
[32m+[m			[32m$security = get_instance()->security;[m
[32m+[m
[32m+[m			[32m// To avoid numerous get_random_bytes() calls, we'll[m
[32m+[m			[32m// just try fetching as much bytes as we need at once.[m
[32m+[m			[32mif (($bytes = $security->get_random_bytes($pool_length)) !== FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$byte_index = $word_index = 0;[m
[32m+[m				[32mwhile ($word_index < $word_length)[m
[32m+[m				[32m{[m
[32m+[m					[32m// Do we have more random data to use?[m
[32m+[m					[32m// It could be exhausted by previous iterations[m
[32m+[m					[32m// ignoring bytes higher than $rand_max.[m
[32m+[m					[32mif ($byte_index === $pool_length)[m
[32m+[m					[32m{[m
[32m+[m						[32m// No failures should be possible if the[m
[32m+[m						[32m// first get_random_bytes() call didn't[m
[32m+[m						[32m// return FALSE, but still ...[m
[32m+[m						[32mfor ($i = 0; $i < 5; $i++)[m
[32m+[m						[32m{[m
[32m+[m							[32mif (($bytes = $security->get_random_bytes($pool_length)) === FALSE)[m
[32m+[m							[32m{[m
[32m+[m								[32mcontinue;[m
[32m+[m							[32m}[m
[32m+[m
[32m+[m							[32m$byte_index = 0;[m
[32m+[m							[32mbreak;[m
[32m+[m						[32m}[m
[32m+[m
[32m+[m						[32mif ($bytes === FALSE)[m
[32m+[m						[32m{[m
[32m+[m							[32m// Sadly, this means fallback to mt_rand()[m
[32m+[m							[32m$word = '';[m
[32m+[m							[32mbreak;[m
[32m+[m						[32m}[m
[32m+[m					[32m}[m
[32m+[m
[32m+[m					[32mlist(, $rand_index) = unpack('C', $bytes[$byte_index++]);[m
[32m+[m					[32mif ($rand_index > $rand_max)[m
[32m+[m					[32m{[m
[32m+[m						[32mcontinue;[m
[32m+[m					[32m}[m
[32m+[m
[32m+[m					[32m$word .= $pool[$rand_index];[m
[32m+[m					[32m$word_index++;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (empty($word))[m
[32m+[m		[32m{[m
[32m+[m			[32mfor ($i = 0; $i < $word_length; $i++)[m
[32m+[m			[32m{[m
[32m+[m				[32m$word .= $pool[mt_rand(0, $rand_max)];[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! is_string($word))[m
[32m+[m		[32m{[m
[32m+[m			[32m$word = (string) $word;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// -----------------------------------[m
[32m+[m		[32m// Determine angle and position[m
[32m+[m		[32m// -----------------------------------[m
[32m+[m		[32m$length	= strlen($word);[m
[32m+[m		[32m$angle	= ($length >= 6) ? mt_rand(-($length-6), ($length-6)) : 0;[m
[32m+[m		[32m$x_axis	= mt_rand(6, (360/$length)-16);[m
[32m+[m		[32m$y_axis = ($angle >= 0) ? mt_rand($img_height, $img_width) : mt_rand(6, $img_height);[m
[32m+[m
[32m+[m		[32m// Create image[m
[32m+[m		[32m// PHP.net recommends imagecreatetruecolor(), but it isn't always available[m
[32m+[m		[32m$im = function_exists('imagecreatetruecolor')[m
[32m+[m			[32m? imagecreatetruecolor($img_width, $img_height)[m
[32m+[m			[32m: imagecreate($img_width, $img_height);[m
[32m+[m
[32m+[m		[32m// -----------------------------------[m
[32m+[m		[32m//  Assign colors[m
[32m+[m		[32m// ----------------------------------[m
[32m+[m
[32m+[m		[32mis_array($colors) OR $colors = $defaults['colors'];[m
[32m+[m
[32m+[m		[32mforeach (array_keys($defaults['colors']) as $key)[m
[32m+[m		[32m{[m
[32m+[m			[32m// Check for a possible missing value[m
[32m+[m			[32mis_array($colors[$key]) OR $colors[$key] = $defaults['colors'][$key];[m
[32m+[m			[32m$colors[$key] = imagecolorallocate($im, $colors[$key][0], $colors[$key][1], $colors[$key][2]);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Create the rectangle[m
[32m+[m		[32mImageFilledRectangle($im, 0, 0, $img_width, $img_height, $colors['background']);[m
[32m+[m
[32m+[m		[32m// -----------------------------------[m
[32m+[m		[32m//  Create the spiral pattern[m
[32m+[m		[32m// -----------------------------------[m
[32m+[m		[32m$theta		= 1;[m
[32m+[m		[32m$thetac		= 7;[m
[32m+[m		[32m$radius		= 16;[m
[32m+[m		[32m$circles	= 20;[m
[32m+[m		[32m$points		= 32;[m
[32m+[m
[32m+[m		[32mfor ($i = 0, $cp = ($circles * $points) - 1; $i < $cp; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$theta += $thetac;[m
[32m+[m			[32m$rad = $radius * ($i / $points);[m
[32m+[m			[32m$x = ($rad * cos($theta)) + $x_axis;[m
[32m+[m			[32m$y = ($rad * sin($theta)) + $y_axis;[m
[32m+[m			[32m$theta += $thetac;[m
[32m+[m			[32m$rad1 = $radius * (($i + 1) / $points);[m
[32m+[m			[32m$x1 = ($rad1 * cos($theta)) + $x_axis;[m
[32m+[m			[32m$y1 = ($rad1 * sin($theta)) + $y_axis;[m
[32m+[m			[32mimageline($im, $x, $y, $x1, $y1, $colors['grid']);[m
[32m+[m			[32m$theta -= $thetac;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// -----------------------------------[m
[32m+[m		[32m//  Write the text[m
[32m+[m		[32m// -----------------------------------[m
[32m+[m
[32m+[m		[32m$use_font = ($font_path !== '' && file_exists($font_path) && function_exists('imagettftext'));[m
[32m+[m		[32mif ($use_font === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m($font_size > 5) && $font_size = 5;[m
[32m+[m			[32m$x = mt_rand(0, $img_width / ($length / 3));[m
[32m+[m			[32m$y = 0;[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m($font_size > 30) && $font_size = 30;[m
[32m+[m			[32m$x = mt_rand(0, $img_width / ($length / 1.5));[m
[32m+[m			[32m$y = $font_size + 2;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mfor ($i = 0; $i < $length; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($use_font === FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$y = mt_rand(0 , $img_height / 2);[m
[32m+[m				[32mimagestring($im, $font_size, $x, $y, $word[$i], $colors['text']);[m
[32m+[m				[32m$x += ($font_size * 2);[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$y = mt_rand($img_height / 2, $img_height - 3);[m
[32m+[m				[32mimagettftext($im, $font_size, $angle, $x, $y, $colors['text'], $font_path, $word[$i]);[m
[32m+[m				[32m$x += $font_size;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Create the border[m
[32m+[m		[32mimagerectangle($im, 0, 0, $img_width - 1, $img_height - 1, $colors['border']);[m
[32m+[m
[32m+[m		[32m// -----------------------------------[m
[32m+[m		[32m//  Generate the image[m
[32m+[m		[32m// -----------------------------------[m
[32m+[m		[32m$img_url = rtrim($img_url, '/').'/';[m
[32m+[m
[32m+[m		[32mif (function_exists('imagejpeg'))[m
[32m+[m		[32m{[m
[32m+[m			[32m$img_filename = $now.'.jpg';[m
[32m+[m			[32mimagejpeg($im, $img_path.$img_filename);[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (function_exists('imagepng'))[m
[32m+[m		[32m{[m
[32m+[m			[32m$img_filename = $now.'.png';[m
[32m+[m			[32mimagepng($im, $img_path.$img_filename);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$img = '<img '.($img_id === '' ? '' : 'id="'.$img_id.'"').' src="'.$img_url.$img_filename.'" style="width: '.$img_width.'; height: '.$img_height .'; border: 0;" alt=" " />';[m
[32m+[m		[32mImageDestroy($im);[m
[32m+[m
[32m+[m		[32mreturn array('word' => $word, 'time' => $now, 'image' => $img, 'filename' => $img_filename);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/helpers/cookie_helper.php b/system/helpers/cookie_helper.php[m
[1mnew file mode 100644[m
[1mindex 0000000..eccd2f3[m
[1m--- /dev/null[m
[1m+++ b/system/helpers/cookie_helper.php[m
[36m@@ -0,0 +1,113 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter Cookie Helpers[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Helpers[m
[32m+[m[32m * @category	Helpers[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/helpers/cookie_helper.html[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('set_cookie'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set cookie[m
[32m+[m	[32m *[m
[32m+[m	[32m * Accepts seven parameters, or you can submit an associative[m
[32m+[m	[32m * array in the first parameter containing all the values.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @param	string	the value of the cookie[m
[32m+[m	[32m * @param	string	the number of seconds until expiration[m
[32m+[m	[32m * @param	string	the cookie domain.  Usually:  .yourdomain.com[m
[32m+[m	[32m * @param	string	the cookie path[m
[32m+[m	[32m * @param	string	the cookie prefix[m
[32m+[m	[32m * @param	bool	true makes the cookie secure[m
[32m+[m	[32m * @param	bool	true makes the cookie accessible via http(s) only (no javascript)[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction set_cookie($name, $value = '', $expire = '', $domain = '', $path = '/', $prefix = '', $secure = NULL, $httponly = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Set the config file options[m
[32m+[m		[32mget_instance()->input->set_cookie($name, $value, $expire, $domain, $path, $prefix, $secure, $httponly);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('get_cookie'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch an item from the COOKIE array[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	bool[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction get_cookie($index, $xss_clean = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mis_bool($xss_clean) OR $xss_clean = (config_item('global_xss_filtering') === TRUE);[m
[32m+[m		[32m$prefix = isset($_COOKIE[$index]) ? '' : config_item('cookie_prefix');[m
[32m+[m		[32mreturn get_instance()->input->cookie($prefix.$index, $xss_clean);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('delete_cookie'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Delete a COOKIE[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @param	string	the cookie domain. Usually: .yourdomain.com[m
[32m+[m	[32m * @param	string	the cookie path[m
[32m+[m	[32m * @param	string	the cookie prefix[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction delete_cookie($name, $domain = '', $path = '/', $prefix = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mset_cookie($name, '', '', $domain, $path, $prefix);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/helpers/date_helper.php b/system/helpers/date_helper.php[m
[1mnew file mode 100644[m
[1mindex 0000000..eca1fc0[m
[1m--- /dev/null[m
[1m+++ b/system/helpers/date_helper.php[m
[36m@@ -0,0 +1,742 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter Date Helpers[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Helpers[m
[32m+[m[32m * @category	Helpers[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/helpers/date_helper.html[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('now'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get "now" time[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns time() based on the timezone parameter or on the[m
[32m+[m	[32m * "time_reference" setting[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction now($timezone = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (empty($timezone))[m
[32m+[m		[32m{[m
[32m+[m			[32m$timezone = config_item('time_reference');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($timezone === 'local' OR $timezone === date_default_timezone_get())[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn time();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$datetime = new DateTime('now', new DateTimeZone($timezone));[m
[32m+[m		[32msscanf($datetime->format('j-n-Y G:i:s'), '%d-%d-%d %d:%d:%d', $day, $month, $year, $hour, $minute, $second);[m
[32m+[m
[32m+[m		[32mreturn mktime($hour, $minute, $second, $month, $day, $year);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('mdate'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Convert MySQL Style Datecodes[m
[32m+[m	[32m *[m
[32m+[m	[32m * This function is identical to PHPs date() function,[m
[32m+[m	[32m * except that it allows date codes to be formatted using[m
[32m+[m	[32m * the MySQL style, where each code letter is preceded[m
[32m+[m	[32m * with a percent sign:  %Y %m %d etc...[m
[32m+[m	[32m *[m
[32m+[m	[32m * The benefit of doing dates this way is that you don't[m
[32m+[m	[32m * have to worry about escaping your text letters that[m
[32m+[m	[32m * match the date codes.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	int[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction mdate($datestr = '', $time = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($datestr === '')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn '';[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (empty($time))[m
[32m+[m		[32m{[m
[32m+[m			[32m$time = now();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$datestr = str_replace([m
[32m+[m			[32m'%\\',[m
[32m+[m			[32m'',[m
[32m+[m			[32mpreg_replace('/([a-z]+?){1}/i', '\\\\\\1', $datestr)[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32mreturn date($datestr, $time);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('standard_date'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Standard Date[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns a date formatted according to the submitted standard.[m
[32m+[m	[32m *[m
[32m+[m	[32m * As of PHP 5.2, the DateTime extension provides constants that[m
[32m+[m	[32m * serve for the exact same purpose and are used with date().[m
[32m+[m	[32m *[m
[32m+[m	[32m * @todo	Remove in version 3.1+.[m
[32m+[m	[32m * @deprecated	3.0.0	Use PHP's native date() instead.[m
[32m+[m	[32m * @link	http://www.php.net/manual/en/class.datetime.php#datetime.constants.types[m
[32m+[m	[32m *[m
[32m+[m	[32m * @example	date(DATE_RFC822, now()); // default[m
[32m+[m	[32m * @example	date(DATE_W3C, $time); // a different format and time[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$fmt = 'DATE_RFC822'	the chosen format[m
[32m+[m	[32m * @param	int	$time = NULL		Unix timestamp[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction standard_date($fmt = 'DATE_RFC822', $time = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (empty($time))[m
[32m+[m		[32m{[m
[32m+[m			[32m$time = now();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Procedural style pre-defined constants from the DateTime extension[m
[32m+[m		[32mif (strpos($fmt, 'DATE_') !== 0 OR defined($fmt) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn date(constant($fmt), $time);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('timespan'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Timespan[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns a span of seconds in this format:[m
[32m+[m	[32m *	10 days 14 hours 36 minutes 47 seconds[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	a number of seconds[m
[32m+[m	[32m * @param	int	Unix timestamp[m
[32m+[m	[32m * @param	int	a number of display units[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction timespan($seconds = 1, $time = '', $units = 7)[m
[32m+[m	[32m{[m
[32m+[m		[32m$CI =& get_instance();[m
[32m+[m		[32m$CI->lang->load('date');[m
[32m+[m
[32m+[m		[32mis_numeric($seconds) OR $seconds = 1;[m
[32m+[m		[32mis_numeric($time) OR $time = time();[m
[32m+[m		[32mis_numeric($units) OR $units = 7;[m
[32m+[m
[32m+[m		[32m$seconds = ($time <= $seconds) ? 1 : $time - $seconds;[m
[32m+[m
[32m+[m		[32m$str = array();[m
[32m+[m		[32m$years = floor($seconds / 31557600);[m
[32m+[m
[32m+[m		[32mif ($years > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32m$str[] = $years.' '.$CI->lang->line($years > 1 ? 'date_years' : 'date_year');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$seconds -= $years * 31557600;[m
[32m+[m		[32m$months = floor($seconds / 2629743);[m
[32m+[m
[32m+[m		[32mif (count($str) < $units && ($years > 0 OR $months > 0))[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($months > 0)[m
[32m+[m			[32m{[m
[32m+[m				[32m$str[] = $months.' '.$CI->lang->line($months > 1 ? 'date_months' : 'date_month');[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$seconds -= $months * 2629743;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$weeks = floor($seconds / 604800);[m
[32m+[m
[32m+[m		[32mif (count($str) < $units && ($years > 0 OR $months > 0 OR $weeks > 0))[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($weeks > 0)[m
[32m+[m			[32m{[m
[32m+[m				[32m$str[] = $weeks.' '.$CI->lang->line($weeks > 1 ? 'date_weeks' : 'date_week');[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$seconds -= $weeks * 604800;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$days = floor($seconds / 86400);[m
[32m+[m
[32m+[m		[32mif (count($str) < $units && ($months > 0 OR $weeks > 0 OR $days > 0))[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($days > 0)[m
[32m+[m			[32m{[m
[32m+[m				[32m$str[] = $days.' '.$CI->lang->line($days > 1 ? 'date_days' : 'date_day');[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$seconds -= $days * 86400;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$hours = floor($seconds / 3600);[m
[32m+[m
[32m+[m		[32mif (count($str) < $units && ($days > 0 OR $hours > 0))[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($hours > 0)[m
[32m+[m			[32m{[m
[32m+[m				[32m$str[] = $hours.' '.$CI->lang->line($hours > 1 ? 'date_hours' : 'date_hour');[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$seconds -= $hours * 3600;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$minutes = floor($seconds / 60);[m
[32m+[m
[32m+[m		[32mif (count($str) < $units && ($days > 0 OR $hours > 0 OR $minutes > 0))[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($minutes > 0)[m
[32m+[m			[32m{[m
[32m+[m				[32m$str[] = $minutes.' '.$CI->lang->line($minutes > 1 ? 'date_minutes' : 'date_minute');[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$seconds -= $minutes * 60;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (count($str) === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32m$str[] = $seconds.' '.$CI->lang->line($seconds > 1 ? 'date_seconds' : 'date_second');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn implode(', ', $str);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('days_in_month'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Number of days in a month[m
[32m+[m	[32m *[m
[32m+[m	[32m * Takes a month/year as input and returns the number of days[m
[32m+[m	[32m * for the given month/year. Takes leap years into consideration.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	a numeric month[m
[32m+[m	[32m * @param	int	a numeric year[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction days_in_month($month = 0, $year = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($month < 1 OR $month > 12)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn 0;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! is_numeric($year) OR strlen($year) !== 4)[m
[32m+[m		[32m{[m
[32m+[m			[32m$year = date('Y');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (defined('CAL_GREGORIAN'))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn cal_days_in_month(CAL_GREGORIAN, $month, $year);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($year >= 1970)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn (int) date('t', mktime(12, 0, 0, $month, 1, $year));[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($month == 2)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($year % 400 === 0 OR ($year % 4 === 0 && $year % 100 !== 0))[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn 29;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$days_in_month	= array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);[m
[32m+[m		[32mreturn $days_in_month[$month - 1];[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('local_to_gmt'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Converts a local Unix timestamp to GMT[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	Unix timestamp[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction local_to_gmt($time = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($time === '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$time = time();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn mktime([m
[32m+[m			[32mgmdate('G', $time),[m
[32m+[m			[32mgmdate('i', $time),[m
[32m+[m			[32mgmdate('s', $time),[m
[32m+[m			[32mgmdate('n', $time),[m
[32m+[m			[32mgmdate('j', $time),[m
[32m+[m			[32mgmdate('Y', $time)[m
[32m+[m		[32m);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('gmt_to_local'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Converts GMT time to a localized value[m
[32m+[m	[32m *[m
[32m+[m	[32m * Takes a Unix timestamp (in GMT) as input, and returns[m
[32m+[m	[32m * at the local value based on the timezone and DST setting[m
[32m+[m	[32m * submitted[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	Unix timestamp[m
[32m+[m	[32m * @param	string	timezone[m
[32m+[m	[32m * @param	bool	whether DST is active[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction gmt_to_local($time = '', $timezone = 'UTC', $dst = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($time === '')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn now();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$time += timezones($timezone) * 3600;[m
[32m+[m
[32m+[m		[32mreturn ($dst === TRUE) ? $time + 3600 : $time;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('mysql_to_unix'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Converts a MySQL Timestamp to Unix[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	MySQL timestamp YYYY-MM-DD HH:MM:SS[m
[32m+[m	[32m * @return	int	Unix timstamp[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction mysql_to_unix($time = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m// We'll remove certain characters for backward compatibility[m
[32m+[m		[32m// since the formatting changed with MySQL 4.1[m
[32m+[m		[32m// YYYY-MM-DD HH:MM:SS[m
[32m+[m
[32m+[m		[32m$time = str_replace(array('-', ':', ' '), '', $time);[m
[32m+[m
[32m+[m		[32m// YYYYMMDDHHMMSS[m
[32m+[m		[32mreturn mktime([m
[32m+[m			[32msubstr($time, 8, 2),[m
[32m+[m			[32msubstr($time, 10, 2),[m
[32m+[m			[32msubstr($time, 12, 2),[m
[32m+[m			[32msubstr($time, 4, 2),[m
[32m+[m			[32msubstr($time, 6, 2),[m
[32m+[m			[32msubstr($time, 0, 4)[m
[32m+[m		[32m);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('unix_to_human'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Unix to "Human"[m
[32m+[m	[32m *[m
[32m+[m	[32m * Formats Unix timestamp to the following prototype: 2006-08-21 11:35 PM[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	Unix timestamp[m
[32m+[m	[32m * @param	bool	whether to show seconds[m
[32m+[m	[32m * @param	string	format: us or euro[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction unix_to_human($time = '', $seconds = FALSE, $fmt = 'us')[m
[32m+[m	[32m{[m
[32m+[m		[32m$r = date('Y', $time).'-'.date('m', $time).'-'.date('d', $time).' ';[m
[32m+[m
[32m+[m		[32mif ($fmt === 'us')[m
[32m+[m		[32m{[m
[32m+[m			[32m$r .= date('h', $time).':'.date('i', $time);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$r .= date('H', $time).':'.date('i', $time);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($seconds)[m
[32m+[m		[32m{[m
[32m+[m			[32m$r .= ':'.date('s', $time);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($fmt === 'us')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $r.' '.date('A', $time);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $r;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('human_to_unix'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Convert "human" date to GMT[m
[32m+[m	[32m *[m
[32m+[m	[32m * Reverses the above process[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	format: us or euro[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction human_to_unix($datestr = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($datestr === '')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$datestr = preg_replace('/\040+/', ' ', trim($datestr));[m
[32m+[m
[32m+[m		[32mif ( ! preg_match('/^(\d{2}|\d{4})\-[0-9]{1,2}\-[0-9]{1,2}\s[0-9]{1,2}:[0-9]{1,2}(?::[0-9]{1,2})?(?:\s[AP]M)?$/i', $datestr))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32msscanf($datestr, '%d-%d-%d %s %s', $year, $month, $day, $time, $ampm);[m
[32m+[m		[32msscanf($time, '%d:%d:%d', $hour, $min, $sec);[m
[32m+[m		[32misset($sec) OR $sec = 0;[m
[32m+[m
[32m+[m		[32mif (isset($ampm))[m
[32m+[m		[32m{[m
[32m+[m			[32m$ampm = strtolower($ampm);[m
[32m+[m
[32m+[m			[32mif ($ampm[0] === 'p' && $hour < 12)[m
[32m+[m			[32m{[m
[32m+[m				[32m$hour += 12;[m
[32m+[m			[32m}[m
[32m+[m			[32melseif ($ampm[0] === 'a' && $hour === 12)[m
[32m+[m			[32m{[m
[32m+[m				[32m$hour = 0;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn mktime($hour, $min, $sec, $month, $day, $year);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('nice_date'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Turns many "reasonably-date-like" strings into something[m
[32m+[m	[32m * that is actually useful. This only works for dates after unix epoch.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @deprecated	3.1.3	Use DateTime::createFromFormat($input_format, $input)->format($output_format);[m
[32m+[m	[32m * @param	string	The terribly formatted date-like string[m
[32m+[m	[32m * @param	string	Date format to return (same as php date function)[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction nice_date($bad_date = '', $format = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (empty($bad_date))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn 'Unknown';[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (empty($format))[m
[32m+[m		[32m{[m
[32m+[m			[32m$format = 'U';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Date like: YYYYMM[m
[32m+[m		[32mif (preg_match('/^\d{6}$/i', $bad_date))[m
[32m+[m		[32m{[m
[32m+[m			[32mif (in_array(substr($bad_date, 0, 2), array('19', '20')))[m
[32m+[m			[32m{[m
[32m+[m				[32m$year  = substr($bad_date, 0, 4);[m
[32m+[m				[32m$month = substr($bad_date, 4, 2);[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$month  = substr($bad_date, 0, 2);[m
[32m+[m				[32m$year   = substr($bad_date, 2, 4);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn date($format, strtotime($year.'-'.$month.'-01'));[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Date Like: YYYYMMDD[m
[32m+[m		[32mif (preg_match('/^\d{8}$/i', $bad_date, $matches))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn DateTime::createFromFormat('Ymd', $bad_date)->format($format);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Date Like: MM-DD-YYYY __or__ M-D-YYYY (or anything in between)[m
[32m+[m		[32mif (preg_match('/^(\d{1,2})-(\d{1,2})-(\d{4})$/i', $bad_date, $matches))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn date($format, strtotime($matches[3].'-'.$matches[1].'-'.$matches[2]));[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Any other kind of string, when converted into UNIX time,[m
[32m+[m		[32m// produces "0 seconds after epoc..." is probably bad...[m
[32m+[m		[32m// return "Invalid Date".[m
[32m+[m		[32mif (date('U', strtotime($bad_date)) === '0')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn 'Invalid Date';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// It's probably a valid-ish date format already[m
[32m+[m		[32mreturn date($format, strtotime($bad_date));[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('timezone_menu'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Timezone Menu[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a drop-down menu of timezones.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	timezone[m
[32m+[m	[32m * @param	string	classname[m
[32m+[m	[32m * @param	string	menu name[m
[32m+[m	[32m * @param	mixed	attributes[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction timezone_menu($default = 'UTC', $class = '', $name = 'timezones', $attributes = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$CI =& get_instance();[m
[32m+[m		[32m$CI->lang->load('date');[m
[32m+[m
[32m+[m		[32m$default = ($default === 'GMT') ? 'UTC' : $default;[m
[32m+[m
[32m+[m		[32m$menu = '<select name="'.$name.'"';[m
[32m+[m
[32m+[m		[32mif ($class !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$menu .= ' class="'.$class.'"';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$menu .= _stringify_attributes($attributes).">\n";[m
[32m+[m
[32m+[m		[32mforeach (timezones() as $key => $val)[m
[32m+[m		[32m{[m
[32m+[m			[32m$selected = ($default === $key) ? ' selected="selected"' : '';[m
[32m+[m			[32m$menu .= '<option value="'.$key.'"'.$selected.'>'.$CI->lang->line($key)."</option>\n";[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $menu.'</select>';[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('timezones'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Timezones[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns an array of timezones. This is a helper function[m
[32m+[m	[32m * for various other ones in this library[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	timezone[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction timezones($tz = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m// Note: Don't change the order of these even though[m
[32m+[m		[32m// some items appear to be in the wrong order[m
[32m+[m
[32m+[m		[32m$zones = array([m
[32m+[m			[32m'UM12'		=> -12,[m
[32m+[m			[32m'UM11'		=> -11,[m
[32m+[m			[32m'UM10'		=> -10,[m
[32m+[m			[32m'UM95'		=> -9.5,[m
[32m+[m			[32m'UM9'		=> -9,[m
[32m+[m			[32m'UM8'		=> -8,[m
[32m+[m			[32m'UM7'		=> -7,[m
[32m+[m			[32m'UM6'		=> -6,[m
[32m+[m			[32m'UM5'		=> -5,[m
[32m+[m			[32m'UM45'		=> -4.5,[m
[32m+[m			[32m'UM4'		=> -4,[m
[32m+[m			[32m'UM35'		=> -3.5,[m
[32m+[m			[32m'UM3'		=> -3,[m
[32m+[m			[32m'UM2'		=> -2,[m
[32m+[m			[32m'UM1'		=> -1,[m
[32m+[m			[32m'UTC'		=> 0,[m
[32m+[m			[32m'UP1'		=> +1,[m
[32m+[m			[32m'UP2'		=> +2,[m
[32m+[m			[32m'UP3'		=> +3,[m
[32m+[m			[32m'UP35'		=> +3.5,[m
[32m+[m			[32m'UP4'		=> +4,[m
[32m+[m			[32m'UP45'		=> +4.5,[m
[32m+[m			[32m'UP5'		=> +5,[m
[32m+[m			[32m'UP55'		=> +5.5,[m
[32m+[m			[32m'UP575'		=> +5.75,[m
[32m+[m			[32m'UP6'		=> +6,[m
[32m+[m			[32m'UP65'		=> +6.5,[m
[32m+[m			[32m'UP7'		=> +7,[m
[32m+[m			[32m'UP8'		=> +8,[m
[32m+[m			[32m'UP875'		=> +8.75,[m
[32m+[m			[32m'UP9'		=> +9,[m
[32m+[m			[32m'UP95'		=> +9.5,[m
[32m+[m			[32m'UP10'		=> +10,[m
[32m+[m			[32m'UP105'		=> +10.5,[m
[32m+[m			[32m'UP11'		=> +11,[m
[32m+[m			[32m'UP115'		=> +11.5,[m
[32m+[m			[32m'UP12'		=> +12,[m
[32m+[m			[32m'UP1275'	=> +12.75,[m
[32m+[m			[32m'UP13'		=> +13,[m
[32m+[m			[32m'UP14'		=> +14[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32mif ($tz === '')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $zones;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn isset($zones[$tz]) ? $zones[$tz] : 0;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('date_range'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Date range[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns a list of dates within a specified period.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	unix_start	UNIX timestamp of period start date[m
[32m+[m	[32m * @param	int	unix_end|days	UNIX timestamp of period end date[m
[32m+[m	[32m *					or interval in days.[m
[32m+[m	[32m * @param	mixed	is_unix		Specifies whether the second parameter[m
[32m+[m	[32m *					is a UNIX timestamp or a day interval[m
[32m+[m	[32m *					 - TRUE or 'unix' for a timestamp[m
[32m+[m	[32m *					 - FALSE or 'days' for an interval[m
[32m+[m	[32m * @param	string  date_format	Output date format, same as in date()[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction date_range($unix_start = '', $mixed = '', $is_unix = TRUE, $format = 'Y-m-d')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($unix_start == '' OR $mixed == '' OR $format == '')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$is_unix = ! ( ! $is_unix OR $is_unix === 'days');[m
[32m+[m
[32m+[m		[32m// Validate input and try strtotime() on invalid timestamps/intervals, just in case[m
[32m+[m		[32mif ( ( ! ctype_digit((string) $unix_start) && ($unix_start = @strtotime($unix_start)) === FALSE)[m
[32m+[m			[32mOR ( ! ctype_digit((string) $mixed) && ($is_unix === FALSE OR ($mixed = @strtotime($mixed)) === FALSE))[m
[32m+[m			[32mOR ($is_unix === TRUE && $mixed < $unix_start))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($is_unix && ($unix_start == $mixed OR date($format, $unix_start) === date($format, $mixed)))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn array(date($format, $unix_start));[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$range = array();[m
[32m+[m
[32m+[m		[32m$from = new DateTime();[m
[32m+[m		[32m$from->setTimestamp($unix_start);[m
[32m+[m
[32m+[m		[32mif ($is_unix)[m
[32m+[m		[32m{[m
[32m+[m			[32m$arg = new DateTime();[m
[32m+[m			[32m$arg->setTimestamp($mixed);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$arg = (int) $mixed;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$period = new DatePeriod($from, new DateInterval('P1D'), $arg);[m
[32m+[m		[32mforeach ($period as $date)[m
[32m+[m		[32m{[m
[32m+[m			[32m$range[] = $date->format($format);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m/* If a period end date was passed to the DatePeriod constructor, it might not[m
[32m+[m		[32m * be in our results. Not sure if this is a bug or it's just possible because[m
[32m+[m		[32m * the end date might actually be less than 24 hours away from the previously[m
[32m+[m		[32m * generated DateTime object, but either way - we have to append it manually.[m
[32m+[m		[32m */[m
[32m+[m		[32mif ( ! is_int($arg) && $range[count($range) - 1] !== $arg->format($format))[m
[32m+[m		[32m{[m
[32m+[m			[32m$range[] = $arg->format($format);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $range;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/helpers/directory_helper.php b/system/helpers/directory_helper.php[m
[1mnew file mode 100644[m
[1mindex 0000000..0d3f205[m
[1m--- /dev/null[m
[1m+++ b/system/helpers/directory_helper.php[m
[36m@@ -0,0 +1,101 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter Directory Helpers[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Helpers[m
[32m+[m[32m * @category	Helpers[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/helpers/directory_helper.html[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('directory_map'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Create a Directory Map[m
[32m+[m	[32m *[m
[32m+[m	[32m * Reads the specified directory and builds an array[m
[32m+[m	[32m * representation of it. Sub-folders contained with the[m
[32m+[m	[32m * directory will be mapped as well.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$source_dir		Path to source[m
[32m+[m	[32m * @param	int	$directory_depth	Depth of directories to traverse[m
[32m+[m	[32m *						(0 = fully recursive, 1 = current dir, etc)[m
[32m+[m	[32m * @param	bool	$hidden			Whether to show hidden files[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction directory_map($source_dir, $directory_depth = 0, $hidden = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($fp = @opendir($source_dir))[m
[32m+[m		[32m{[m
[32m+[m			[32m$filedata	= array();[m
[32m+[m			[32m$new_depth	= $directory_depth - 1;[m
[32m+[m			[32m$source_dir	= rtrim($source_dir, DIRECTORY_SEPARATOR).DIRECTORY_SEPARATOR;[m
[32m+[m
[32m+[m			[32mwhile (FALSE !== ($file = readdir($fp)))[m
[32m+[m			[32m{[m
[32m+[m				[32m// Remove '.', '..', and hidden files [optional][m
[32m+[m				[32mif ($file === '.' OR $file === '..' OR ($hidden === FALSE && $file[0] === '.'))[m
[32m+[m				[32m{[m
[32m+[m					[32mcontinue;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mis_dir($source_dir.$file) && $file .= DIRECTORY_SEPARATOR;[m
[32m+[m
[32m+[m				[32mif (($directory_depth < 1 OR $new_depth > 0) && is_dir($source_dir.$file))[m
[32m+[m				[32m{[m
[32m+[m					[32m$filedata[$file] = directory_map($source_dir.$file, $new_depth, $hidden);[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32m$filedata[] = $file;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mclosedir($fp);[m
[32m+[m			[32mreturn $filedata;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/helpers/download_helper.php b/system/helpers/download_helper.php[m
[1mnew file mode 100644[m
[1mindex 0000000..a9bea94[m
[1m--- /dev/null[m
[1m+++ b/system/helpers/download_helper.php[m
[36m@@ -0,0 +1,158 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter Download Helpers[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Helpers[m
[32m+[m[32m * @category	Helpers[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/helpers/download_helper.html[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('force_download'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Force Download[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates headers that force a download to happen[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	filename[m
[32m+[m	[32m * @param	mixed	the data to be downloaded[m
[32m+[m	[32m * @param	bool	whether to try and send the actual file MIME type[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction force_download($filename = '', $data = '', $set_mime = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($filename === '' OR $data === '')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($data === NULL)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ( ! @is_file($filename) OR ($filesize = @filesize($filename)) === FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$filepath = $filename;[m
[32m+[m			[32m$filename = explode('/', str_replace(DIRECTORY_SEPARATOR, '/', $filename));[m
[32m+[m			[32m$filename = end($filename);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$filesize = strlen($data);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Set the default MIME type to send[m
[32m+[m		[32m$mime = 'application/octet-stream';[m
[32m+[m
[32m+[m		[32m$x = explode('.', $filename);[m
[32m+[m		[32m$extension = end($x);[m
[32m+[m
[32m+[m		[32mif ($set_mime === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (count($x) === 1 OR $extension === '')[m
[32m+[m			[32m{[m
[32m+[m				[32m/* If we're going to detect the MIME type,[m
[32m+[m				[32m * we'll need a file extension.[m
[32m+[m				[32m */[m
[32m+[m				[32mreturn;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// Load the mime types[m
[32m+[m			[32m$mimes =& get_mimes();[m
[32m+[m
[32m+[m			[32m// Only change the default MIME if we can find one[m
[32m+[m			[32mif (isset($mimes[$extension]))[m
[32m+[m			[32m{[m
[32m+[m				[32m$mime = is_array($mimes[$extension]) ? $mimes[$extension][0] : $mimes[$extension];[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m/* It was reported that browsers on Android 2.1 (and possibly older as well)[m
[32m+[m		[32m * need to have the filename extension upper-cased in order to be able to[m
[32m+[m		[32m * download it.[m
[32m+[m		[32m *[m
[32m+[m		[32m * Reference: http://digiblog.de/2011/04/19/android-and-the-download-file-headers/[m
[32m+[m		[32m */[m
[32m+[m		[32mif (count($x) !== 1 && isset($_SERVER['HTTP_USER_AGENT']) && preg_match('/Android\s(1|2\.[01])/', $_SERVER['HTTP_USER_AGENT']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$x[count($x) - 1] = strtoupper($extension);[m
[32m+[m			[32m$filename = implode('.', $x);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($data === NULL && ($fp = @fopen($filepath, 'rb')) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Clean output buffer[m
[32m+[m		[32mif (ob_get_level() !== 0 && @ob_end_clean() === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m@ob_clean();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Generate the server headers[m
[32m+[m		[32mheader('Content-Type: '.$mime);[m
[32m+[m		[32mheader('Content-Disposition: attachment; filename="'.$filename.'"');[m
[32m+[m		[32mheader('Expires: 0');[m
[32m+[m		[32mheader('Content-Transfer-Encoding: binary');[m
[32m+[m		[32mheader('Content-Length: '.$filesize);[m
[32m+[m		[32mheader('Cache-Control: private, no-transform, no-store, must-revalidate');[m
[32m+[m
[32m+[m		[32m// If we have raw data - just dump it[m
[32m+[m		[32mif ($data !== NULL)[m
[32m+[m		[32m{[m
[32m+[m			[32mexit($data);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Flush 1MB chunks of data[m
[32m+[m		[32mwhile ( ! feof($fp) && ($data = fread($fp, 1048576)) !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mecho $data;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mfclose($fp);[m
[32m+[m		[32mexit;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/helpers/email_helper.php b/system/helpers/email_helper.php[m
[1mnew file mode 100644[m
[1mindex 0000000..f851f72[m
[1m--- /dev/null[m
[1m+++ b/system/helpers/email_helper.php[m
[36m@@ -0,0 +1,84 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter Email Helpers[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Helpers[m
[32m+[m[32m * @category	Helpers[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/helpers/email_helper.html[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('valid_email'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Validate email address[m
[32m+[m	[32m *[m
[32m+[m	[32m * @deprecated	3.0.0	Use PHP's filter_var() instead[m
[32m+[m	[32m * @param	string	$email[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction valid_email($email)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn (bool) filter_var($email, FILTER_VALIDATE_EMAIL);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('send_email'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Send an email[m
[32m+[m	[32m *[m
[32m+[m	[32m * @deprecated	3.0.0	Use PHP's mail() instead[m
[32m+[m	[32m * @param	string	$recipient[m
[32m+[m	[32m * @param	string	$subject[m
[32m+[m	[32m * @param	string	$message[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction send_email($recipient, $subject, $message)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn mail($recipient, $subject, $message);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/helpers/file_helper.php b/system/helpers/file_helper.php[m
[1mnew file mode 100644[m
[1mindex 0000000..90e4c90[m
[1m--- /dev/null[m
[1m+++ b/system/helpers/file_helper.php[m
[36m@@ -0,0 +1,453 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter File Helpers[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Helpers[m
[32m+[m[32m * @category	Helpers[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/helpers/file_helper.html[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('read_file'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Read File[m
[32m+[m	[32m *[m
[32m+[m	[32m * Opens the file specified in the path and returns it as a string.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @todo	Remove in version 3.1+.[m
[32m+[m	[32m * @deprecated	3.0.0	It is now just an alias for PHP's native file_get_contents().[m
[32m+[m	[32m * @param	string	$file	Path to file[m
[32m+[m	[32m * @return	string	File contents[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction read_file($file)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn @file_get_contents($file);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('write_file'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Write File[m
[32m+[m	[32m *[m
[32m+[m	[32m * Writes data to the file specified in the path.[m
[32m+[m	[32m * Creates a new file if non-existent.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$path	File path[m
[32m+[m	[32m * @param	string	$data	Data to write[m
[32m+[m	[32m * @param	string	$mode	fopen() mode (default: 'wb')[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction write_file($path, $data, $mode = 'wb')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! $fp = @fopen($path, $mode))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mflock($fp, LOCK_EX);[m
[32m+[m
[32m+[m		[32mfor ($result = $written = 0, $length = strlen($data); $written < $length; $written += $result)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (($result = fwrite($fp, substr($data, $written))) === FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32mbreak;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mflock($fp, LOCK_UN);[m
[32m+[m		[32mfclose($fp);[m
[32m+[m
[32m+[m		[32mreturn is_int($result);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('delete_files'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Delete Files[m
[32m+[m	[32m *[m
[32m+[m	[32m * Deletes all files contained in the supplied directory path.[m
[32m+[m	[32m * Files must be writable or owned by the system in order to be deleted.[m
[32m+[m	[32m * If the second parameter is set to TRUE, any directories contained[m
[32m+[m	[32m * within the supplied base directory will be nuked as well.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$path		File path[m
[32m+[m	[32m * @param	bool	$del_dir	Whether to delete any directories found in the path[m
[32m+[m	[32m * @param	bool	$htdocs		Whether to skip deleting .htaccess and index page files[m
[32m+[m	[32m * @param	int	$_level		Current directory depth level (default: 0; internal use only)[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction delete_files($path, $del_dir = FALSE, $htdocs = FALSE, $_level = 0)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Trim the trailing slash[m
[32m+[m		[32m$path = rtrim($path, '/\\');[m
[32m+[m
[32m+[m		[32mif ( ! $current_dir = @opendir($path))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mwhile (FALSE !== ($filename = @readdir($current_dir)))[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($filename !== '.' && $filename !== '..')[m
[32m+[m			[32m{[m
[32m+[m				[32m$filepath = $path.DIRECTORY_SEPARATOR.$filename;[m
[32m+[m
[32m+[m				[32mif (is_dir($filepath) && $filename[0] !== '.' && ! is_link($filepath))[m
[32m+[m				[32m{[m
[32m+[m					[32mdelete_files($filepath, $del_dir, $htdocs, $_level + 1);[m
[32m+[m				[32m}[m
[32m+[m				[32melseif ($htdocs !== TRUE OR ! preg_match('/^(\.htaccess|index\.(html|htm|php)|web\.config)$/i', $filename))[m
[32m+[m				[32m{[m
[32m+[m					[32m@unlink($filepath);[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mclosedir($current_dir);[m
[32m+[m
[32m+[m		[32mreturn ($del_dir === TRUE && $_level > 0)[m
[32m+[m			[32m? @rmdir($path)[m
[32m+[m			[32m: TRUE;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('get_filenames'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get Filenames[m
[32m+[m	[32m *[m
[32m+[m	[32m * Reads the specified directory and builds an array containing the filenames.[m
[32m+[m	[32m * Any sub-folders contained within the specified path are read as well.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	path to source[m
[32m+[m	[32m * @param	bool	whether to include the path as part of the filename[m
[32m+[m	[32m * @param	bool	internal variable to determine recursion status - do not use in calls[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction get_filenames($source_dir, $include_path = FALSE, $_recursion = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mstatic $_filedata = array();[m
[32m+[m
[32m+[m		[32mif ($fp = @opendir($source_dir))[m
[32m+[m		[32m{[m
[32m+[m			[32m// reset the array and make sure $source_dir has a trailing slash on the initial call[m
[32m+[m			[32mif ($_recursion === FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$_filedata = array();[m
[32m+[m				[32m$source_dir = rtrim(realpath($source_dir), DIRECTORY_SEPARATOR).DIRECTORY_SEPARATOR;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mwhile (FALSE !== ($file = readdir($fp)))[m
[32m+[m			[32m{[m
[32m+[m				[32mif (is_dir($source_dir.$file) && $file[0] !== '.')[m
[32m+[m				[32m{[m
[32m+[m					[32mget_filenames($source_dir.$file.DIRECTORY_SEPARATOR, $include_path, TRUE);[m
[32m+[m				[32m}[m
[32m+[m				[32melseif ($file[0] !== '.')[m
[32m+[m				[32m{[m
[32m+[m					[32m$_filedata[] = ($include_path === TRUE) ? $source_dir.$file : $file;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mclosedir($fp);[m
[32m+[m			[32mreturn $_filedata;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('get_dir_file_info'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get Directory File Information[m
[32m+[m	[32m *[m
[32m+[m	[32m * Reads the specified directory and builds an array containing the filenames,[m
[32m+[m	[32m * filesize, dates, and permissions[m
[32m+[m	[32m *[m
[32m+[m	[32m * Any sub-folders contained within the specified path are read as well.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	path to source[m
[32m+[m	[32m * @param	bool	Look only at the top level directory specified?[m
[32m+[m	[32m * @param	bool	internal variable to determine recursion status - do not use in calls[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction get_dir_file_info($source_dir, $top_level_only = TRUE, $_recursion = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mstatic $_filedata = array();[m
[32m+[m		[32m$relative_path = $source_dir;[m
[32m+[m
[32m+[m		[32mif ($fp = @opendir($source_dir))[m
[32m+[m		[32m{[m
[32m+[m			[32m// reset the array and make sure $source_dir has a trailing slash on the initial call[m
[32m+[m			[32mif ($_recursion === FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$_filedata = array();[m
[32m+[m				[32m$source_dir = rtrim(realpath($source_dir), DIRECTORY_SEPARATOR).DIRECTORY_SEPARATOR;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// Used to be foreach (scandir($source_dir, 1) as $file), but scandir() is simply not as fast[m
[32m+[m			[32mwhile (FALSE !== ($file = readdir($fp)))[m
[32m+[m			[32m{[m
[32m+[m				[32mif (is_dir($source_dir.$file) && $file[0] !== '.' && $top_level_only === FALSE)[m
[32m+[m				[32m{[m
[32m+[m					[32mget_dir_file_info($source_dir.$file.DIRECTORY_SEPARATOR, $top_level_only, TRUE);[m
[32m+[m				[32m}[m
[32m+[m				[32melseif ($file[0] !== '.')[m
[32m+[m				[32m{[m
[32m+[m					[32m$_filedata[$file] = get_file_info($source_dir.$file);[m
[32m+[m					[32m$_filedata[$file]['relative_path'] = $relative_path;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mclosedir($fp);[m
[32m+[m			[32mreturn $_filedata;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('get_file_info'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get File Info[m
[32m+[m	[32m *[m
[32m+[m	[32m * Given a file and path, returns the name, path, size, date modified[m
[32m+[m	[32m * Second parameter allows you to explicitly declare what information you want returned[m
[32m+[m	[32m * Options are: name, server_path, size, date, readable, writable, executable, fileperms[m
[32m+[m	[32m * Returns FALSE if the file cannot be found.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	path to file[m
[32m+[m	[32m * @param	mixed	array or comma separated string of information returned[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction get_file_info($file, $returned_values = array('name', 'server_path', 'size', 'date'))[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! file_exists($file))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (is_string($returned_values))[m
[32m+[m		[32m{[m
[32m+[m			[32m$returned_values = explode(',', $returned_values);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mforeach ($returned_values as $key)[m
[32m+[m		[32m{[m
[32m+[m			[32mswitch ($key)[m
[32m+[m			[32m{[m
[32m+[m				[32mcase 'name':[m
[32m+[m					[32m$fileinfo['name'] = basename($file);[m
[32m+[m					[32mbreak;[m
[32m+[m				[32mcase 'server_path':[m
[32m+[m					[32m$fileinfo['server_path'] = $file;[m
[32m+[m					[32mbreak;[m
[32m+[m				[32mcase 'size':[m
[32m+[m					[32m$fileinfo['size'] = filesize($file);[m
[32m+[m					[32mbreak;[m
[32m+[m				[32mcase 'date':[m
[32m+[m					[32m$fileinfo['date'] = filemtime($file);[m
[32m+[m					[32mbreak;[m
[32m+[m				[32mcase 'readable':[m
[32m+[m					[32m$fileinfo['readable'] = is_readable($file);[m
[32m+[m					[32mbreak;[m
[32m+[m				[32mcase 'writable':[m
[32m+[m					[32m$fileinfo['writable'] = is_really_writable($file);[m
[32m+[m					[32mbreak;[m
[32m+[m				[32mcase 'executable':[m
[32m+[m					[32m$fileinfo['executable'] = is_executable($file);[m
[32m+[m					[32mbreak;[m
[32m+[m				[32mcase 'fileperms':[m
[32m+[m					[32m$fileinfo['fileperms'] = fileperms($file);[m
[32m+[m					[32mbreak;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $fileinfo;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('get_mime_by_extension'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get Mime by Extension[m
[32m+[m	[32m *[m
[32m+[m	[32m * Translates a file extension into a mime type based on config/mimes.php.[m
[32m+[m	[32m * Returns FALSE if it can't determine the type, or open the mime config file[m
[32m+[m	[32m *[m
[32m+[m	[32m * Note: this is NOT an accurate way of determining file mime types, and is here strictly as a convenience[m
[32m+[m	[32m * It should NOT be trusted, and should certainly NOT be used for security[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$filename	File name[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction get_mime_by_extension($filename)[m
[32m+[m	[32m{[m
[32m+[m		[32mstatic $mimes;[m
[32m+[m
[32m+[m		[32mif ( ! is_array($mimes))[m
[32m+[m		[32m{[m
[32m+[m			[32m$mimes = get_mimes();[m
[32m+[m
[32m+[m			[32mif (empty($mimes))[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$extension = strtolower(substr(strrchr($filename, '.'), 1));[m
[32m+[m
[32m+[m		[32mif (isset($mimes[$extension]))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn is_array($mimes[$extension])[m
[32m+[m				[32m? current($mimes[$extension]) // Multiple mime types, just give the first one[m
[32m+[m				[32m: $mimes[$extension];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('symbolic_permissions'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Symbolic Permissions[m
[32m+[m	[32m *[m
[32m+[m	[32m * Takes a numeric value representing a file's permissions and returns[m
[32m+[m	[32m * standard symbolic notation representing that value[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	$perms	Permissions[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction symbolic_permissions($perms)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (($perms & 0xC000) === 0xC000)[m
[32m+[m		[32m{[m
[32m+[m			[32m$symbolic = 's'; // Socket[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (($perms & 0xA000) === 0xA000)[m
[32m+[m		[32m{[m
[32m+[m			[32m$symbolic = 'l'; // Symbolic Link[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (($perms & 0x8000) === 0x8000)[m
[32m+[m		[32m{[m
[32m+[m			[32m$symbolic = '-'; // Regular[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (($perms & 0x6000) === 0x6000)[m
[32m+[m		[32m{[m
[32m+[m			[32m$symbolic = 'b'; // Block special[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (($perms & 0x4000) === 0x4000)[m
[32m+[m		[32m{[m
[32m+[m			[32m$symbolic = 'd'; // Directory[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (($perms & 0x2000) === 0x2000)[m
[32m+[m		[32m{[m
[32m+[m			[32m$symbolic = 'c'; // Character special[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (($perms & 0x1000) === 0x1000)[m
[32m+[m		[32m{[m
[32m+[m			[32m$symbolic = 'p'; // FIFO pipe[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$symbolic = 'u'; // Unknown[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Owner[m
[32m+[m		[32m$symbolic .= (($perms & 0x0100) ? 'r' : '-')[m
[32m+[m			[32m.(($perms & 0x0080) ? 'w' : '-')[m
[32m+[m			[32m.(($perms & 0x0040) ? (($perms & 0x0800) ? 's' : 'x' ) : (($perms & 0x0800) ? 'S' : '-'));[m
[32m+[m
[32m+[m		[32m// Group[m
[32m+[m		[32m$symbolic .= (($perms & 0x0020) ? 'r' : '-')[m
[32m+[m			[32m.(($perms & 0x0010) ? 'w' : '-')[m
[32m+[m			[32m.(($perms & 0x0008) ? (($perms & 0x0400) ? 's' : 'x' ) : (($perms & 0x0400) ? 'S' : '-'));[m
[32m+[m
[32m+[m		[32m// World[m
[32m+[m		[32m$symbolic .= (($perms & 0x0004) ? 'r' : '-')[m
[32m+[m			[32m.(($perms & 0x0002) ? 'w' : '-')[m
[32m+[m			[32m.(($perms & 0x0001) ? (($perms & 0x0200) ? 't' : 'x' ) : (($perms & 0x0200) ? 'T' : '-'));[m
[32m+[m
[32m+[m		[32mreturn $symbolic;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('octal_permissions'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Octal Permissions[m
[32m+[m	[32m *[m
[32m+[m	[32m * Takes a numeric value representing a file's permissions and returns[m
[32m+[m	[32m * a three character string representing the file's octal permissions[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	$perms	Permissions[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction octal_permissions($perms)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn substr(sprintf('%o', $perms), -3);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/helpers/form_helper.php b/system/helpers/form_helper.php[m
[1mnew file mode 100644[m
[1mindex 0000000..8746045[m
[1m--- /dev/null[m
[1m+++ b/system/helpers/form_helper.php[m
[36m@@ -0,0 +1,1055 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter Form Helpers[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Helpers[m
[32m+[m[32m * @category	Helpers[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/helpers/form_helper.html[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('form_open'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Form Declaration[m
[32m+[m	[32m *[m
[32m+[m	[32m * Creates the opening portion of the form.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the URI segments of the form destination[m
[32m+[m	[32m * @param	array	a key/value pair of attributes[m
[32m+[m	[32m * @param	array	a key/value pair hidden data[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction form_open($action = '', $attributes = array(), $hidden = array())[m
[32m+[m	[32m{[m
[32m+[m		[32m$CI =& get_instance();[m
[32m+[m
[32m+[m		[32m// If no action is provided then set to the current url[m
[32m+[m		[32mif ( ! $action)[m
[32m+[m		[32m{[m
[32m+[m			[32m$action = $CI->config->site_url($CI->uri->uri_string());[m
[32m+[m		[32m}[m
[32m+[m		[32m// If an action is not a full URL then turn it into one[m
[32m+[m		[32melseif (strpos($action, '://') === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$action = $CI->config->site_url($action);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$attributes = _attributes_to_string($attributes);[m
[32m+[m
[32m+[m		[32mif (stripos($attributes, 'method=') === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$attributes .= ' method="post"';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (stripos($attributes, 'accept-charset=') === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$attributes .= ' accept-charset="'.strtolower(config_item('charset')).'"';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$form = '<form action="'.$action.'"'.$attributes.">\n";[m
[32m+[m
[32m+[m		[32mif (is_array($hidden))[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($hidden as $name => $value)[m
[32m+[m			[32m{[m
[32m+[m				[32m$form .= '<input type="hidden" name="'.$name.'" value="'.html_escape($value).'" />'."\n";[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Add CSRF field if enabled, but leave it out for GET requests and requests to external websites[m
[32m+[m		[32mif ($CI->config->item('csrf_protection') === TRUE && strpos($action, $CI->config->base_url()) !== FALSE && ! stripos($form, 'method="get"'))[m
[32m+[m		[32m{[m
[32m+[m			[32m// Prepend/append random-length "white noise" around the CSRF[m
[32m+[m			[32m// token input, as a form of protection against BREACH attacks[m
[32m+[m			[32mif (FALSE !== ($noise = $CI->security->get_random_bytes(1)))[m
[32m+[m			[32m{[m
[32m+[m				[32mlist(, $noise) = unpack('c', $noise);[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$noise = mt_rand(-128, 127);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// Prepend if $noise has a negative value, append if positive, do nothing for zero[m
[32m+[m			[32m$prepend = $append = '';[m
[32m+[m			[32mif ($noise < 0)[m
[32m+[m			[32m{[m
[32m+[m				[32m$prepend = str_repeat(" ", abs($noise));[m
[32m+[m			[32m}[m
[32m+[m			[32melseif ($noise > 0)[m
[32m+[m			[32m{[m
[32m+[m				[32m$append  = str_repeat(" ", $noise);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$form .= sprintf([m
[32m+[m				[32m'%s<input type="hidden" name="%s" value="%s" />%s%s',[m
[32m+[m				[32m$prepend,[m
[32m+[m				[32m$CI->security->get_csrf_token_name(),[m
[32m+[m				[32m$CI->security->get_csrf_hash(),[m
[32m+[m				[32m$append,[m
[32m+[m				[32m"\n"[m
[32m+[m			[32m);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $form;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('form_open_multipart'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Form Declaration - Multipart type[m
[32m+[m	[32m *[m
[32m+[m	[32m * Creates the opening portion of the form, but with "multipart/form-data".[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the URI segments of the form destination[m
[32m+[m	[32m * @param	array	a key/value pair of attributes[m
[32m+[m	[32m * @param	array	a key/value pair hidden data[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction form_open_multipart($action = '', $attributes = array(), $hidden = array())[m
[32m+[m	[32m{[m
[32m+[m		[32mif (is_string($attributes))[m
[32m+[m		[32m{[m
[32m+[m			[32m$attributes .= ' enctype="multipart/form-data"';[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$attributes['enctype'] = 'multipart/form-data';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn form_open($action, $attributes, $hidden);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('form_hidden'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Hidden Input Field[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates hidden fields. You can pass a simple key/value string or[m
[32m+[m	[32m * an associative array with multiple values.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	$name		Field name[m
[32m+[m	[32m * @param	string	$value		Field value[m
[32m+[m	[32m * @param	bool	$recursing[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction form_hidden($name, $value = '', $recursing = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mstatic $form;[m
[32m+[m
[32m+[m		[32mif ($recursing === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$form = "\n";[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (is_array($name))[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($name as $key => $val)[m
[32m+[m			[32m{[m
[32m+[m				[32mform_hidden($key, $val, TRUE);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn $form;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! is_array($value))[m
[32m+[m		[32m{[m
[32m+[m			[32m$form .= '<input type="hidden" name="'.$name.'" value="'.html_escape($value)."\" />\n";[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($value as $k => $v)[m
[32m+[m			[32m{[m
[32m+[m				[32m$k = is_int($k) ? '' : $k;[m
[32m+[m				[32mform_hidden($name.'['.$k.']', $v, TRUE);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $form;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('form_input'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Text Input Field[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction form_input($data = '', $value = '', $extra = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$defaults = array([m
[32m+[m			[32m'type' => 'text',[m
[32m+[m			[32m'name' => is_array($data) ? '' : $data,[m
[32m+[m			[32m'value' => $value[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32mreturn '<input '._parse_form_attributes($data, $defaults)._attributes_to_string($extra)." />\n";[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('form_password'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Password Field[m
[32m+[m	[32m *[m
[32m+[m	[32m * Identical to the input function but adds the "password" type[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction form_password($data = '', $value = '', $extra = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mis_array($data) OR $data = array('name' => $data);[m
[32m+[m		[32m$data['type'] = 'password';[m
[32m+[m		[32mreturn form_input($data, $value, $extra);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('form_upload'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Upload Field[m
[32m+[m	[32m *[m
[32m+[m	[32m * Identical to the input function but adds the "file" type[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction form_upload($data = '', $value = '', $extra = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$defaults = array('type' => 'file', 'name' => '');[m
[32m+[m		[32mis_array($data) OR $data = array('name' => $data);[m
[32m+[m		[32m$data['type'] = 'file';[m
[32m+[m
[32m+[m		[32mreturn '<input '._parse_form_attributes($data, $defaults)._attributes_to_string($extra)." />\n";[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('form_textarea'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Textarea field[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	$data[m
[32m+[m	[32m * @param	string	$value[m
[32m+[m	[32m * @param	mixed	$extra[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction form_textarea($data = '', $value = '', $extra = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$defaults = array([m
[32m+[m			[32m'name' => is_array($data) ? '' : $data,[m
[32m+[m			[32m'cols' => '40',[m
[32m+[m			[32m'rows' => '10'[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32mif ( ! is_array($data) OR ! isset($data['value']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$val = $value;[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$val = $data['value'];[m
[32m+[m			[32munset($data['value']); // textareas don't use the value attribute[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn '<textarea '._parse_form_attributes($data, $defaults)._attributes_to_string($extra).'>'[m
[32m+[m			[32m.html_escape($val)[m
[32m+[m			[32m."</textarea>\n";[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('form_multiselect'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Multi-select menu[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	array[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction form_multiselect($name = '', $options = array(), $selected = array(), $extra = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$extra = _attributes_to_string($extra);[m
[32m+[m		[32mif (stripos($extra, 'multiple') === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$extra .= ' multiple="multiple"';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn form_dropdown($name, $options, $selected, $extra);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('form_dropdown'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Drop-down Menu[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	$data[m
[32m+[m	[32m * @param	mixed	$options[m
[32m+[m	[32m * @param	mixed	$selected[m
[32m+[m	[32m * @param	mixed	$extra[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction form_dropdown($data = '', $options = array(), $selected = array(), $extra = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$defaults = array();[m
[32m+[m
[32m+[m		[32mif (is_array($data))[m
[32m+[m		[32m{[m
[32m+[m			[32mif (isset($data['selected']))[m
[32m+[m			[32m{[m
[32m+[m				[32m$selected = $data['selected'];[m
[32m+[m				[32munset($data['selected']); // select tags don't have a selected attribute[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (isset($data['options']))[m
[32m+[m			[32m{[m
[32m+[m				[32m$options = $data['options'];[m
[32m+[m				[32munset($data['options']); // select tags don't use an options attribute[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$defaults = array('name' => $data);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mis_array($selected) OR $selected = array($selected);[m
[32m+[m		[32mis_array($options) OR $options = array($options);[m
[32m+[m
[32m+[m		[32m// If no selected state was submitted we will attempt to set it automatically[m
[32m+[m		[32mif (empty($selected))[m
[32m+[m		[32m{[m
[32m+[m			[32mif (is_array($data))[m
[32m+[m			[32m{[m
[32m+[m				[32mif (isset($data['name'], $_POST[$data['name']]))[m
[32m+[m				[32m{[m
[32m+[m					[32m$selected = array($_POST[$data['name']]);[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m			[32melseif (isset($_POST[$data]))[m
[32m+[m			[32m{[m
[32m+[m				[32m$selected = array($_POST[$data]);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$extra = _attributes_to_string($extra);[m
[32m+[m
[32m+[m		[32m$multiple = (count($selected) > 1 && stripos($extra, 'multiple') === FALSE) ? ' multiple="multiple"' : '';[m
[32m+[m
[32m+[m		[32m$form = '<select '.rtrim(_parse_form_attributes($data, $defaults)).$extra.$multiple.">\n";[m
[32m+[m
[32m+[m		[32mforeach ($options as $key => $val)[m
[32m+[m		[32m{[m
[32m+[m			[32m$key = (string) $key;[m
[32m+[m
[32m+[m			[32mif (is_array($val))[m
[32m+[m			[32m{[m
[32m+[m				[32mif (empty($val))[m
[32m+[m				[32m{[m
[32m+[m					[32mcontinue;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m$form .= '<optgroup label="'.$key."\">\n";[m
[32m+[m
[32m+[m				[32mforeach ($val as $optgroup_key => $optgroup_val)[m
[32m+[m				[32m{[m
[32m+[m					[32m$sel = in_array($optgroup_key, $selected) ? ' selected="selected"' : '';[m
[32m+[m					[32m$form .= '<option value="'.html_escape($optgroup_key).'"'.$sel.'>'[m
[32m+[m						[32m.(string) $optgroup_val."</option>\n";[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m$form .= "</optgroup>\n";[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$form .= '<option value="'.html_escape($key).'"'[m
[32m+[m					[32m.(in_array($key, $selected) ? ' selected="selected"' : '').'>'[m
[32m+[m					[32m.(string) $val."</option>\n";[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $form."</select>\n";[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('form_checkbox'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Checkbox Field[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	bool[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction form_checkbox($data = '', $value = '', $checked = FALSE, $extra = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$defaults = array('type' => 'checkbox', 'name' => ( ! is_array($data) ? $data : ''), 'value' => $value);[m
[32m+[m
[32m+[m		[32mif (is_array($data) && array_key_exists('checked', $data))[m
[32m+[m		[32m{[m
[32m+[m			[32m$checked = $data['checked'];[m
[32m+[m
[32m+[m			[32mif ($checked == FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32munset($data['checked']);[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$data['checked'] = 'checked';[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($checked == TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$defaults['checked'] = 'checked';[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32munset($defaults['checked']);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn '<input '._parse_form_attributes($data, $defaults)._attributes_to_string($extra)." />\n";[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('form_radio'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Radio Button[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	bool[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction form_radio($data = '', $value = '', $checked = FALSE, $extra = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mis_array($data) OR $data = array('name' => $data);[m
[32m+[m		[32m$data['type'] = 'radio';[m
[32m+[m
[32m+[m		[32mreturn form_checkbox($data, $value, $checked, $extra);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('form_submit'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Submit Button[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction form_submit($data = '', $value = '', $extra = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$defaults = array([m
[32m+[m			[32m'type' => 'submit',[m
[32m+[m			[32m'name' => is_array($data) ? '' : $data,[m
[32m+[m			[32m'value' => $value[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32mreturn '<input '._parse_form_attributes($data, $defaults)._attributes_to_string($extra)." />\n";[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('form_reset'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Reset Button[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction form_reset($data = '', $value = '', $extra = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$defaults = array([m
[32m+[m			[32m'type' => 'reset',[m
[32m+[m			[32m'name' => is_array($data) ? '' : $data,[m
[32m+[m			[32m'value' => $value[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32mreturn '<input '._parse_form_attributes($data, $defaults)._attributes_to_string($extra)." />\n";[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('form_button'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Form Button[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction form_button($data = '', $content = '', $extra = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$defaults = array([m
[32m+[m			[32m'name' => is_array($data) ? '' : $data,[m
[32m+[m			[32m'type' => 'button'[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32mif (is_array($data) && isset($data['content']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$content = $data['content'];[m
[32m+[m			[32munset($data['content']); // content is not an attribute[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn '<button '._parse_form_attributes($data, $defaults)._attributes_to_string($extra).'>'[m
[32m+[m			[32m.$content[m
[32m+[m			[32m."</button>\n";[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('form_label'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Form Label Tag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The text to appear onscreen[m
[32m+[m	[32m * @param	string	The id the label applies to[m
[32m+[m	[32m * @param	mixed	Additional attributes[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction form_label($label_text = '', $id = '', $attributes = array())[m
[32m+[m	[32m{[m
[32m+[m
[32m+[m		[32m$label = '<label';[m
[32m+[m
[32m+[m		[32mif ($id !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$label .= ' for="'.$id.'"';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$label .= _attributes_to_string($attributes);[m
[32m+[m
[32m+[m		[32mreturn $label.'>'.$label_text.'</label>';[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('form_fieldset'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fieldset Tag[m
[32m+[m	[32m *[m
[32m+[m	[32m * Used to produce <fieldset><legend>text</legend>.  To close fieldset[m
[32m+[m	[32m * use form_fieldset_close()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The legend text[m
[32m+[m	[32m * @param	array	Additional attributes[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction form_fieldset($legend_text = '', $attributes = array())[m
[32m+[m	[32m{[m
[32m+[m		[32m$fieldset = '<fieldset'._attributes_to_string($attributes).">\n";[m
[32m+[m		[32mif ($legend_text !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $fieldset.'<legend>'.$legend_text."</legend>\n";[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $fieldset;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('form_fieldset_close'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fieldset Close Tag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction form_fieldset_close($extra = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn '</fieldset>'.$extra;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('form_close'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Form Close Tag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction form_close($extra = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn '</form>'.$extra;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('form_prep'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Form Prep[m
[32m+[m	[32m *[m
[32m+[m	[32m * Formats text so that it can be safely placed in a form field in the event it has HTML tags.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @deprecated	3.0.0	An alias for html_escape()[m
[32m+[m	[32m * @param	string|string[]	$str		Value to escape[m
[32m+[m	[32m * @return	string|string[]	Escaped values[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction form_prep($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn html_escape($str, TRUE);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('set_value'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Form Value[m
[32m+[m	[32m *[m
[32m+[m	[32m * Grabs a value from the POST array for the specified field so you can[m
[32m+[m	[32m * re-populate an input field or textarea. If Form Validation[m
[32m+[m	[32m * is active it retrieves the info from the validation class[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$field		Field name[m
[32m+[m	[32m * @param	string	$default	Default value[m
[32m+[m	[32m * @param	bool	$html_escape	Whether to escape HTML special characters or not[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction set_value($field, $default = '', $html_escape = TRUE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$CI =& get_instance();[m
[32m+[m
[32m+[m		[32m$value = (isset($CI->form_validation) && is_object($CI->form_validation) && $CI->form_validation->has_rule($field))[m
[32m+[m			[32m? $CI->form_validation->set_value($field, $default)[m
[32m+[m			[32m: $CI->input->post($field, FALSE);[m
[32m+[m
[32m+[m		[32misset($value) OR $value = $default;[m
[32m+[m		[32mreturn ($html_escape) ? html_escape($value) : $value;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('set_select'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set Select[m
[32m+[m	[32m *[m
[32m+[m	[32m * Let's you set the selected value of a <select> menu via data in the POST array.[m
[32m+[m	[32m * If Form Validation is active it retrieves the info from the validation class[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	bool[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction set_select($field, $value = '', $default = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$CI =& get_instance();[m
[32m+[m
[32m+[m		[32mif (isset($CI->form_validation) && is_object($CI->form_validation) && $CI->form_validation->has_rule($field))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $CI->form_validation->set_select($field, $value, $default);[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (($input = $CI->input->post($field, FALSE)) === NULL)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($default === TRUE) ? ' selected="selected"' : '';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$value = (string) $value;[m
[32m+[m		[32mif (is_array($input))[m
[32m+[m		[32m{[m
[32m+[m			[32m// Note: in_array('', array(0)) returns TRUE, do not use it[m
[32m+[m			[32mforeach ($input as &$v)[m
[32m+[m			[32m{[m
[32m+[m				[32mif ($value === $v)[m
[32m+[m				[32m{[m
[32m+[m					[32mreturn ' selected="selected"';[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn '';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn ($input === $value) ? ' selected="selected"' : '';[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('set_checkbox'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set Checkbox[m
[32m+[m	[32m *[m
[32m+[m	[32m * Let's you set the selected value of a checkbox via the value in the POST array.[m
[32m+[m	[32m * If Form Validation is active it retrieves the info from the validation class[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	bool[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction set_checkbox($field, $value = '', $default = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$CI =& get_instance();[m
[32m+[m
[32m+[m		[32mif (isset($CI->form_validation) && is_object($CI->form_validation) && $CI->form_validation->has_rule($field))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $CI->form_validation->set_checkbox($field, $value, $default);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Form inputs are always strings ...[m
[32m+[m		[32m$value = (string) $value;[m
[32m+[m		[32m$input = $CI->input->post($field, FALSE);[m
[32m+[m
[32m+[m		[32mif (is_array($input))[m
[32m+[m		[32m{[m
[32m+[m			[32m// Note: in_array('', array(0)) returns TRUE, do not use it[m
[32m+[m			[32mforeach ($input as &$v)[m
[32m+[m			[32m{[m
[32m+[m				[32mif ($value === $v)[m
[32m+[m				[32m{[m
[32m+[m					[32mreturn ' checked="checked"';[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn '';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Unchecked checkbox and radio inputs are not even submitted by browsers ...[m
[32m+[m		[32mif ($CI->input->method() === 'post')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($input === $value) ? ' checked="checked"' : '';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn ($default === TRUE) ? ' checked="checked"' : '';[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('set_radio'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set Radio[m
[32m+[m	[32m *[m
[32m+[m	[32m * Let's you set the selected value of a radio field via info in the POST array.[m
[32m+[m	[32m * If Form Validation is active it retrieves the info from the validation class[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$field[m
[32m+[m	[32m * @param	string	$value[m
[32m+[m	[32m * @param	bool	$default[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction set_radio($field, $value = '', $default = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$CI =& get_instance();[m
[32m+[m
[32m+[m		[32mif (isset($CI->form_validation) && is_object($CI->form_validation) && $CI->form_validation->has_rule($field))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $CI->form_validation->set_radio($field, $value, $default);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Form inputs are always strings ...[m
[32m+[m		[32m$value = (string) $value;[m
[32m+[m		[32m$input = $CI->input->post($field, FALSE);[m
[32m+[m
[32m+[m		[32mif (is_array($input))[m
[32m+[m		[32m{[m
[32m+[m			[32m// Note: in_array('', array(0)) returns TRUE, do not use it[m
[32m+[m			[32mforeach ($input as &$v)[m
[32m+[m			[32m{[m
[32m+[m				[32mif ($value === $v)[m
[32m+[m				[32m{[m
[32m+[m					[32mreturn ' checked="checked"';[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn '';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Unchecked checkbox and radio inputs are not even submitted by browsers ...[m
[32m+[m		[32mif ($CI->input->method() === 'post')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($input === $value) ? ' checked="checked"' : '';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn ($default === TRUE) ? ' checked="checked"' : '';[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('form_error'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Form Error[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the error for a specific form field. This is a helper for the[m
[32m+[m	[32m * form validation class.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction form_error($field = '', $prefix = '', $suffix = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif (FALSE === ($OBJ =& _get_validation_object()))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn '';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $OBJ->error($field, $prefix, $suffix);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('validation_errors'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Validation Error String[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns all the errors associated with a form submission. This is a helper[m
[32m+[m	[32m * function for the form validation class.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction validation_errors($prefix = '', $suffix = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif (FALSE === ($OBJ =& _get_validation_object()))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn '';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $OBJ->error_string($prefix, $suffix);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('_parse_form_attributes'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Parse the form attributes[m
[32m+[m	[32m *[m
[32m+[m	[32m * Helper function used by some of the form helpers[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$attributes	List of attributes[m
[32m+[m	[32m * @param	array	$default	Default values[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction _parse_form_attributes($attributes, $default)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (is_array($attributes))[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($default as $key => $val)[m
[32m+[m			[32m{[m
[32m+[m				[32mif (isset($attributes[$key]))[m
[32m+[m				[32m{[m
[32m+[m					[32m$default[$key] = $attributes[$key];[m
[32m+[m					[32munset($attributes[$key]);[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (count($attributes) > 0)[m
[32m+[m			[32m{[m
[32m+[m				[32m$default = array_merge($default, $attributes);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$att = '';[m
[32m+[m
[32m+[m		[32mforeach ($default as $key => $val)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($key === 'value')[m
[32m+[m			[32m{[m
[32m+[m				[32m$val = html_escape($val);[m
[32m+[m			[32m}[m
[32m+[m			[32melseif ($key === 'name' && ! strlen($default['name']))[m
[32m+[m			[32m{[m
[32m+[m				[32mcontinue;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$att .= $key.'="'.$val.'" ';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $att;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('_attributes_to_string'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Attributes To String[m
[32m+[m	[32m *[m
[32m+[m	[32m * Helper function used by some of the form helpers[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction _attributes_to_string($attributes)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (empty($attributes))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn '';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (is_object($attributes))[m
[32m+[m		[32m{[m
[32m+[m			[32m$attributes = (array) $attributes;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (is_array($attributes))[m
[32m+[m		[32m{[m
[32m+[m			[32m$atts = '';[m
[32m+[m
[32m+[m			[32mforeach ($attributes as $key => $val)[m
[32m+[m			[32m{[m
[32m+[m				[32m$atts .= ' '.$key.'="'.$val.'"';[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn $atts;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (is_string($attributes))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ' '.$attributes;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('_get_validation_object'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Validation Object[m
[32m+[m	[32m *[m
[32m+[m	[32m * Determines what the form validation class was instantiated as, fetches[m
[32m+[m	[32m * the object and returns it.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction &_get_validation_object()[m
[32m+[m	[32m{[m
[32m+[m		[32m$CI =& get_instance();[m
[32m+[m
[32m+[m		[32m// We set this as a variable since we're returning by reference.[m
[32m+[m		[32m$return = FALSE;[m
[32m+[m
[32m+[m		[32mif (FALSE !== ($object = $CI->load->is_loaded('Form_validation')))[m
[32m+[m		[32m{[m
[32m+[m			[32mif ( ! isset($CI->$object) OR ! is_object($CI->$object))[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn $return;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn $CI->$object;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $return;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/helpers/html_helper.php b/system/helpers/html_helper.php[m
[1mnew file mode 100644[m
[1mindex 0000000..260afe9[m
[1m--- /dev/null[m
[1m+++ b/system/helpers/html_helper.php[m
[36m@@ -0,0 +1,410 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter HTML Helpers[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Helpers[m
[32m+[m[32m * @category	Helpers[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/helpers/html_helper.html[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('heading'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Heading[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates an HTML heading tag.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	content[m
[32m+[m	[32m * @param	int	heading level[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction heading($data = '', $h = '1', $attributes = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn '<h'.$h._stringify_attributes($attributes).'>'.$data.'</h'.$h.'>';[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('ul'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Unordered List[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates an HTML unordered list from an single or multi-dimensional array.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction ul($list, $attributes = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn _list('ul', $list, $attributes);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('ol'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Ordered List[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates an HTML ordered list from an single or multi-dimensional array.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction ol($list, $attributes = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn _list('ol', $list, $attributes);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('_list'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Generates the list[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates an HTML ordered list from an single or multi-dimensional array.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @param	int[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction _list($type = 'ul', $list = array(), $attributes = '', $depth = 0)[m
[32m+[m	[32m{[m
[32m+[m		[32m// If an array wasn't submitted there's nothing to do...[m
[32m+[m		[32mif ( ! is_array($list))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $list;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Set the indentation based on the depth[m
[32m+[m		[32m$out = str_repeat(' ', $depth)[m
[32m+[m			[32m// Write the opening list tag[m
[32m+[m			[32m.'<'.$type._stringify_attributes($attributes).">\n";[m
[32m+[m
[32m+[m
[32m+[m		[32m// Cycle through the list elements.  If an array is[m
[32m+[m		[32m// encountered we will recursively call _list()[m
[32m+[m
[32m+[m		[32mstatic $_last_list_item = '';[m
[32m+[m		[32mforeach ($list as $key => $val)[m
[32m+[m		[32m{[m
[32m+[m			[32m$_last_list_item = $key;[m
[32m+[m
[32m+[m			[32m$out .= str_repeat(' ', $depth + 2).'<li>';[m
[32m+[m
[32m+[m			[32mif ( ! is_array($val))[m
[32m+[m			[32m{[m
[32m+[m				[32m$out .= $val;[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$out .= $_last_list_item."\n"._list($type, $val, '', $depth + 4).str_repeat(' ', $depth + 2);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$out .= "</li>\n";[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Set the indentation for the closing tag and apply it[m
[32m+[m		[32mreturn $out.str_repeat(' ', $depth).'</'.$type.">\n";[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('img'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Image[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates an <img /> element[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @param	bool[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction img($src = '', $index_page = FALSE, $attributes = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! is_array($src) )[m
[32m+[m		[32m{[m
[32m+[m			[32m$src = array('src' => $src);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// If there is no alt attribute defined, set it to an empty string[m
[32m+[m		[32mif ( ! isset($src['alt']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$src['alt'] = '';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$img = '<img';[m
[32m+[m
[32m+[m		[32mforeach ($src as $k => $v)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($k === 'src' && ! preg_match('#^(data:[a-z,;])|(([a-z]+:)?(?<!data:)//)#i', $v))[m
[32m+[m			[32m{[m
[32m+[m				[32mif ($index_page === TRUE)[m
[32m+[m				[32m{[m
[32m+[m					[32m$img .= ' src="'.get_instance()->config->site_url($v).'"';[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32m$img .= ' src="'.get_instance()->config->base_url($v).'"';[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$img .= ' '.$k.'="'.$v.'"';[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $img._stringify_attributes($attributes).' />';[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('doctype'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Doctype[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a page document type declaration[m
[32m+[m	[32m *[m
[32m+[m	[32m * Examples of valid options: html5, xhtml-11, xhtml-strict, xhtml-trans,[m
[32m+[m	[32m * xhtml-frame, html4-strict, html4-trans, and html4-frame.[m
[32m+[m	[32m * All values are saved in the doctypes config file.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	type	The doctype to be generated[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction doctype($type = 'xhtml1-strict')[m
[32m+[m	[32m{[m
[32m+[m		[32mstatic $doctypes;[m
[32m+[m
[32m+[m		[32mif ( ! is_array($doctypes))[m
[32m+[m		[32m{[m
[32m+[m			[32mif (file_exists(APPPATH.'config/doctypes.php'))[m
[32m+[m			[32m{[m
[32m+[m				[32minclude(APPPATH.'config/doctypes.php');[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (file_exists(APPPATH.'config/'.ENVIRONMENT.'/doctypes.php'))[m
[32m+[m			[32m{[m
[32m+[m				[32minclude(APPPATH.'config/'.ENVIRONMENT.'/doctypes.php');[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (empty($_doctypes) OR ! is_array($_doctypes))[m
[32m+[m			[32m{[m
[32m+[m				[32m$doctypes = array();[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$doctypes = $_doctypes;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn isset($doctypes[$type]) ? $doctypes[$type] : FALSE;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('link_tag'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Link[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates link to a CSS file[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	stylesheet hrefs or an array[m
[32m+[m	[32m * @param	string	rel[m
[32m+[m	[32m * @param	string	type[m
[32m+[m	[32m * @param	string	title[m
[32m+[m	[32m * @param	string	media[m
[32m+[m	[32m * @param	bool	should index_page be added to the css path[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction link_tag($href = '', $rel = 'stylesheet', $type = 'text/css', $title = '', $media = '', $index_page = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$CI =& get_instance();[m
[32m+[m		[32m$link = '<link ';[m
[32m+[m
[32m+[m		[32mif (is_array($href))[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($href as $k => $v)[m
[32m+[m			[32m{[m
[32m+[m				[32mif ($k === 'href' && ! preg_match('#^([a-z]+:)?//#i', $v))[m
[32m+[m				[32m{[m
[32m+[m					[32mif ($index_page === TRUE)[m
[32m+[m					[32m{[m
[32m+[m						[32m$link .= 'href="'.$CI->config->site_url($v).'" ';[m
[32m+[m					[32m}[m
[32m+[m					[32melse[m
[32m+[m					[32m{[m
[32m+[m						[32m$link .= 'href="'.$CI->config->base_url($v).'" ';[m
[32m+[m					[32m}[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32m$link .= $k.'="'.$v.'" ';[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32mif (preg_match('#^([a-z]+:)?//#i', $href))[m
[32m+[m			[32m{[m
[32m+[m				[32m$link .= 'href="'.$href.'" ';[m
[32m+[m			[32m}[m
[32m+[m			[32melseif ($index_page === TRUE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$link .= 'href="'.$CI->config->site_url($href).'" ';[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$link .= 'href="'.$CI->config->base_url($href).'" ';[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$link .= 'rel="'.$rel.'" type="'.$type.'" ';[m
[32m+[m
[32m+[m			[32mif ($media !== '')[m
[32m+[m			[32m{[m
[32m+[m				[32m$link .= 'media="'.$media.'" ';[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif ($title !== '')[m
[32m+[m			[32m{[m
[32m+[m				[32m$link .= 'title="'.$title.'" ';[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $link."/>\n";[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('meta'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Generates meta tags from an array of key/values[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction meta($name = '', $content = '', $type = 'name', $newline = "\n")[m
[32m+[m	[32m{[m
[32m+[m		[32m// Since we allow the data to be passes as a string, a simple array[m
[32m+[m		[32m// or a multidimensional one, we need to do a little prepping.[m
[32m+[m		[32mif ( ! is_array($name))[m
[32m+[m		[32m{[m
[32m+[m			[32m$name = array(array('name' => $name, 'content' => $content, 'type' => $type, 'newline' => $newline));[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (isset($name['name']))[m
[32m+[m		[32m{[m
[32m+[m			[32m// Turn single array into multidimensional[m
[32m+[m			[32m$name = array($name);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$str = '';[m
[32m+[m		[32mforeach ($name as $meta)[m
[32m+[m		[32m{[m
[32m+[m			[32m$type		= (isset($meta['type']) && $meta['type'] !== 'name')	? 'http-equiv' : 'name';[m
[32m+[m			[32m$name		= isset($meta['name'])					? $meta['name'] : '';[m
[32m+[m			[32m$content	= isset($meta['content'])				? $meta['content'] : '';[m
[32m+[m			[32m$newline	= isset($meta['newline'])				? $meta['newline'] : "\n";[m
[32m+[m
[32m+[m			[32m$str .= '<meta '.$type.'="'.$name.'" content="'.$content.'" />'.$newline;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $str;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('br'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Generates HTML BR tags based on number supplied[m
[32m+[m	[32m *[m
[32m+[m	[32m * @deprecated	3.0.0	Use str_repeat() instead[m
[32m+[m	[32m * @param	int	$count	Number of times to repeat the tag[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction br($count = 1)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn str_repeat('<br />', $count);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('nbs'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Generates non-breaking space entities based on number supplied[m
[32m+[m	[32m *[m
[32m+[m	[32m * @deprecated	3.0.0	Use str_repeat() instead[m
[32m+[m	[32m * @param	int[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction nbs($num = 1)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn str_repeat('&nbsp;', $num);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/helpers/index.html b/system/helpers/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/system/helpers/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/system/helpers/inflector_helper.php b/system/helpers/inflector_helper.php[m
[1mnew file mode 100644[m
[1mindex 0000000..8354d83[m
[1m--- /dev/null[m
[1m+++ b/system/helpers/inflector_helper.php[m
[36m@@ -0,0 +1,276 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter Inflector Helpers[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Helpers[m
[32m+[m[32m * @category	Helpers[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/helpers/inflector_helper.html[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('singular'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Singular[m
[32m+[m	[32m *[m
[32m+[m	[32m * Takes a plural word and makes it singular[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$str	Input string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction singular($str)[m
[32m+[m	[32m{[m
[32m+[m		[32m$result = strval($str);[m
[32m+[m
[32m+[m		[32mif ( ! is_countable($result))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $result;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$singular_rules = array([m
[32m+[m			[32m'/(matr)ices$/'		=> '\1ix',[m
[32m+[m			[32m'/(vert|ind)ices$/'	=> '\1ex',[m
[32m+[m			[32m'/^(ox)en/'		=> '\1',[m
[32m+[m			[32m'/(alias)es$/'		=> '\1',[m
[32m+[m			[32m'/([octop|vir])i$/'	=> '\1us',[m
[32m+[m			[32m'/(cris|ax|test)es$/'	=> '\1is',[m
[32m+[m			[32m'/(shoe)s$/'		=> '\1',[m
[32m+[m			[32m'/(o)es$/'		=> '\1',[m
[32m+[m			[32m'/(bus|campus)es$/'	=> '\1',[m
[32m+[m			[32m'/([m|l])ice$/'		=> '\1ouse',[m
[32m+[m			[32m'/(x|ch|ss|sh)es$/'	=> '\1',[m
[32m+[m			[32m'/(m)ovies$/'		=> '\1\2ovie',[m
[32m+[m			[32m'/(s)eries$/'		=> '\1\2eries',[m
[32m+[m			[32m'/([^aeiouy]|qu)ies$/'	=> '\1y',[m
[32m+[m			[32m'/([lr])ves$/'		=> '\1f',[m
[32m+[m			[32m'/(tive)s$/'		=> '\1',[m
[32m+[m			[32m'/(hive)s$/'		=> '\1',[m
[32m+[m			[32m'/([^f])ves$/'		=> '\1fe',[m
[32m+[m			[32m'/(^analy)ses$/'	=> '\1sis',[m
[32m+[m			[32m'/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$/' => '\1\2sis',[m
[32m+[m			[32m'/([ti])a$/'		=> '\1um',[m
[32m+[m			[32m'/(p)eople$/'		=> '\1\2erson',[m
[32m+[m			[32m'/(m)en$/'		=> '\1an',[m
[32m+[m			[32m'/(s)tatuses$/'		=> '\1\2tatus',[m
[32m+[m			[32m'/(c)hildren$/'		=> '\1\2hild',[m
[32m+[m			[32m'/(n)ews$/'		=> '\1\2ews',[m
[32m+[m			[32m'/(quiz)zes$/'		=> '\1',[m
[32m+[m			[32m'/([^us])s$/'		=> '\1'[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32mforeach ($singular_rules as $rule => $replacement)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (preg_match($rule, $result))[m
[32m+[m			[32m{[m
[32m+[m				[32m$result = preg_replace($rule, $replacement, $result);[m
[32m+[m				[32mbreak;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $result;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('plural'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Plural[m
[32m+[m	[32m *[m
[32m+[m	[32m * Takes a singular word and makes it plural[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$str	Input string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction plural($str)[m
[32m+[m	[32m{[m
[32m+[m		[32m$result = strval($str);[m
[32m+[m
[32m+[m		[32mif ( ! is_countable($result))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $result;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$plural_rules = array([m
[32m+[m			[32m'/(quiz)$/'                => '\1zes',      // quizzes[m
[32m+[m			[32m'/^(ox)$/'                 => '\1\2en',     // ox[m
[32m+[m			[32m'/([m|l])ouse$/'           => '\1ice',      // mouse, louse[m
[32m+[m			[32m'/(matr|vert|ind)ix|ex$/'  => '\1ices',     // matrix, vertex, index[m
[32m+[m			[32m'/(x|ch|ss|sh)$/'          => '\1es',       // search, switch, fix, box, process, address[m
[32m+[m			[32m'/([^aeiouy]|qu)y$/'       => '\1ies',      // query, ability, agency[m
[32m+[m			[32m'/(hive)$/'                => '\1s',        // archive, hive[m
[32m+[m			[32m'/(?:([^f])fe|([lr])f)$/'  => '\1\2ves',    // half, safe, wife[m
[32m+[m			[32m'/sis$/'                   => 'ses',        // basis, diagnosis[m
[32m+[m			[32m'/([ti])um$/'              => '\1a',        // datum, medium[m
[32m+[m			[32m'/(p)erson$/'              => '\1eople',    // person, salesperson[m
[32m+[m			[32m'/(m)an$/'                 => '\1en',       // man, woman, spokesman[m
[32m+[m			[32m'/(c)hild$/'               => '\1hildren',  // child[m
[32m+[m			[32m'/(buffal|tomat)o$/'       => '\1\2oes',    // buffalo, tomato[m
[32m+[m			[32m'/(bu|campu)s$/'           => '\1\2ses',    // bus, campus[m
[32m+[m			[32m'/(alias|status|virus)$/'  => '\1es',       // alias[m
[32m+[m			[32m'/(octop)us$/'             => '\1i',        // octopus[m
[32m+[m			[32m'/(ax|cris|test)is$/'      => '\1es',       // axis, crisis[m
[32m+[m			[32m'/s$/'                     => 's',          // no change (compatibility)[m
[32m+[m			[32m'/$/'                      => 's',[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32mforeach ($plural_rules as $rule => $replacement)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (preg_match($rule, $result))[m
[32m+[m			[32m{[m
[32m+[m				[32m$result = preg_replace($rule, $replacement, $result);[m
[32m+[m				[32mbreak;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $result;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('camelize'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Camelize[m
[32m+[m	[32m *[m
[32m+[m	[32m * Takes multiple words separated by spaces or underscores and camelizes them[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$str	Input string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction camelize($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn strtolower($str[0]).substr(str_replace(' ', '', ucwords(preg_replace('/[\s_]+/', ' ', $str))), 1);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('underscore'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Underscore[m
[32m+[m	[32m *[m
[32m+[m	[32m * Takes multiple words separated by spaces and underscores them[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$str	Input string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction underscore($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn preg_replace('/[\s]+/', '_', trim(MB_ENABLED ? mb_strtolower($str) : strtolower($str)));[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('humanize'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Humanize[m
[32m+[m	[32m *[m
[32m+[m	[32m * Takes multiple words separated by the separator and changes them to spaces[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$str		Input string[m
[32m+[m	[32m * @param 	string	$separator	Input separator[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction humanize($str, $separator = '_')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn ucwords(preg_replace('/['.preg_quote($separator).']+/', ' ', trim(MB_ENABLED ? mb_strtolower($str) : strtolower($str))));[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('is_countable'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Checks if the given word has a plural version.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$word	Word to check[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction is_countable($word)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn ! in_array([m
[32m+[m			[32mstrtolower($word),[m
[32m+[m			[32marray([m
[32m+[m				[32m'audio',[m
[32m+[m				[32m'bison',[m
[32m+[m				[32m'chassis',[m
[32m+[m				[32m'compensation',[m
[32m+[m				[32m'coreopsis',[m
[32m+[m				[32m'data',[m
[32m+[m				[32m'deer',[m
[32m+[m				[32m'education',[m
[32m+[m				[32m'emoji',[m
[32m+[m				[32m'equipment',[m
[32m+[m				[32m'fish',[m
[32m+[m				[32m'furniture',[m
[32m+[m				[32m'gold',[m
[32m+[m				[32m'information',[m
[32m+[m				[32m'knowledge',[m
[32m+[m				[32m'love',[m
[32m+[m				[32m'rain',[m
[32m+[m				[32m'money',[m
[32m+[m				[32m'moose',[m
[32m+[m				[32m'nutrition',[m
[32m+[m				[32m'offspring',[m
[32m+[m				[32m'plankton',[m
[32m+[m				[32m'pokemon',[m
[32m+[m				[32m'police',[m
[32m+[m				[32m'rice',[m
[32m+[m				[32m'series',[m
[32m+[m				[32m'sheep',[m
[32m+[m				[32m'species',[m
[32m+[m				[32m'swine',[m
[32m+[m				[32m'traffic',[m
[32m+[m				[32m'wheat'[m
[32m+[m			[32m)[m
[32m+[m		[32m);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/helpers/language_helper.php b/system/helpers/language_helper.php[m
[1mnew file mode 100644[m
[1mindex 0000000..f1dc815[m
[1m--- /dev/null[m
[1m+++ b/system/helpers/language_helper.php[m
[36m@@ -0,0 +1,75 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter Language Helpers[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Helpers[m
[32m+[m[32m * @category	Helpers[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/helpers/language_helper.html[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('lang'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Lang[m
[32m+[m	[32m *[m
[32m+[m	[32m * Fetches a language variable and optionally outputs a form label[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$line		The language line[m
[32m+[m	[32m * @param	string	$for		The "for" value (id of the form element)[m
[32m+[m	[32m * @param	array	$attributes	Any additional HTML attributes[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction lang($line, $for = '', $attributes = array())[m
[32m+[m	[32m{[m
[32m+[m		[32m$line = get_instance()->lang->line($line);[m
[32m+[m
[32m+[m		[32mif ($for !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$line = '<label for="'.$for.'"'._stringify_attributes($attributes).'>'.$line.'</label>';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $line;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/helpers/number_helper.php b/system/helpers/number_helper.php[m
[1mnew file mode 100644[m
[1mindex 0000000..00e6451[m
[1m--- /dev/null[m
[1m+++ b/system/helpers/number_helper.php[m
[36m@@ -0,0 +1,94 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter Number Helpers[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Helpers[m
[32m+[m[32m * @category	Helpers[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/helpers/number_helper.html[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('byte_format'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Formats a numbers as bytes, based on size, and adds the appropriate suffix[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	will be cast as int[m
[32m+[m	[32m * @param	int[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction byte_format($num, $precision = 1)[m
[32m+[m	[32m{[m
[32m+[m		[32m$CI =& get_instance();[m
[32m+[m		[32m$CI->lang->load('number');[m
[32m+[m
[32m+[m		[32mif ($num >= 1000000000000)[m
[32m+[m		[32m{[m
[32m+[m			[32m$num = round($num / 1099511627776, $precision);[m
[32m+[m			[32m$unit = $CI->lang->line('terabyte_abbr');[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($num >= 1000000000)[m
[32m+[m		[32m{[m
[32m+[m			[32m$num = round($num / 1073741824, $precision);[m
[32m+[m			[32m$unit = $CI->lang->line('gigabyte_abbr');[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($num >= 1000000)[m
[32m+[m		[32m{[m
[32m+[m			[32m$num = round($num / 1048576, $precision);[m
[32m+[m			[32m$unit = $CI->lang->line('megabyte_abbr');[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($num >= 1000)[m
[32m+[m		[32m{[m
[32m+[m			[32m$num = round($num / 1024, $precision);[m
[32m+[m			[32m$unit = $CI->lang->line('kilobyte_abbr');[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$unit = $CI->lang->line('bytes');[m
[32m+[m			[32mreturn number_format($num).' '.$unit;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn number_format($num, $precision).' '.$unit;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/helpers/path_helper.php b/system/helpers/path_helper.php[m
[1mnew file mode 100644[m
[1mindex 0000000..697f6bd[m
[1m--- /dev/null[m
[1m+++ b/system/helpers/path_helper.php[m
[36m@@ -0,0 +1,82 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter Path Helpers[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Helpers[m
[32m+[m[32m * @category	Helpers[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/helpers/path_helper.html[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('set_realpath'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set Realpath[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	bool	checks to see if the path exists[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction set_realpath($path, $check_existance = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Security check to make sure the path is NOT a URL. No remote file inclusion![m
[32m+[m		[32mif (preg_match('#^(http:\/\/|https:\/\/|www\.|ftp|php:\/\/)#i', $path) OR filter_var($path, FILTER_VALIDATE_IP) === $path)[m
[32m+[m		[32m{[m
[32m+[m			[32mshow_error('The path you submitted must be a local server path, not a URL');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Resolve the path[m
[32m+[m		[32mif (realpath($path) !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$path = realpath($path);[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($check_existance && ! is_dir($path) && ! is_file($path))[m
[32m+[m		[32m{[m
[32m+[m			[32mshow_error('Not a valid path: '.$path);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Add a trailing slash, if this is a directory[m
[32m+[m		[32mreturn is_dir($path) ? rtrim($path, DIRECTORY_SEPARATOR).DIRECTORY_SEPARATOR : $path;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/helpers/security_helper.php b/system/helpers/security_helper.php[m
[1mnew file mode 100644[m
[1mindex 0000000..fb55385[m
[1m--- /dev/null[m
[1m+++ b/system/helpers/security_helper.php[m
[36m@@ -0,0 +1,137 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter Security Helpers[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Helpers[m
[32m+[m[32m * @category	Helpers[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/helpers/security_helper.html[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('xss_clean'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * XSS Filtering[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	bool	whether or not the content is an image file[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction xss_clean($str, $is_image = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn get_instance()->security->xss_clean($str, $is_image);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('sanitize_filename'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Sanitize Filename[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction sanitize_filename($filename)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn get_instance()->security->sanitize_filename($filename);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('do_hash'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Hash encode a string[m
[32m+[m	[32m *[m
[32m+[m	[32m * @todo	Remove in version 3.1+.[m
[32m+[m	[32m * @deprecated	3.0.0	Use PHP's native hash() instead.[m
[32m+[m	[32m * @param	string	$str[m
[32m+[m	[32m * @param	string	$type = 'sha1'[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction do_hash($str, $type = 'sha1')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! in_array(strtolower($type), hash_algos()))[m
[32m+[m		[32m{[m
[32m+[m			[32m$type = 'md5';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn hash($type, $str);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('strip_image_tags'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Strip Image Tags[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction strip_image_tags($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn get_instance()->security->strip_image_tags($str);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('encode_php_tags'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Convert PHP tags to entities[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction encode_php_tags($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn str_replace(array('<?', '?>'), array('&lt;?', '?&gt;'), $str);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/helpers/smiley_helper.php b/system/helpers/smiley_helper.php[m
[1mnew file mode 100644[m
[1mindex 0000000..b7f1d2e[m
[1m--- /dev/null[m
[1m+++ b/system/helpers/smiley_helper.php[m
[36m@@ -0,0 +1,255 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter Smiley Helpers[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Helpers[m
[32m+[m[32m * @category	Helpers[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/helpers/smiley_helper.html[m
[32m+[m[32m * @deprecated	3.0.0	This helper is too specific for CI.[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('smiley_js'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Smiley Javascript[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the javascript required for the smiley insertion.  Optionally takes[m
[32m+[m	[32m * an array of aliases to loosely couple the smiley array to the view.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	alias name or array of alias->field_id pairs[m
[32m+[m	[32m * @param	string	field_id if alias name was passed in[m
[32m+[m	[32m * @param	bool[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction smiley_js($alias = '', $field_id = '', $inline = TRUE)[m
[32m+[m	[32m{[m
[32m+[m		[32mstatic $do_setup = TRUE;[m
[32m+[m		[32m$r = '';[m
[32m+[m
[32m+[m		[32mif ($alias !== '' && ! is_array($alias))[m
[32m+[m		[32m{[m
[32m+[m			[32m$alias = array($alias => $field_id);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($do_setup === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$do_setup = FALSE;[m
[32m+[m			[32m$m = array();[m
[32m+[m
[32m+[m			[32mif (is_array($alias))[m
[32m+[m			[32m{[m
[32m+[m				[32mforeach ($alias as $name => $id)[m
[32m+[m				[32m{[m
[32m+[m					[32m$m[] = '"'.$name.'" : "'.$id.'"';[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$m = '{'.implode(',', $m).'}';[m
[32m+[m
[32m+[m			[32m$r .= <<<EOF[m
[32m+[m			[32mvar smiley_map = {$m};[m
[32m+[m
[32m+[m			[32mfunction insert_smiley(smiley, field_id) {[m
[32m+[m				[32mvar el = document.getElementById(field_id), newStart;[m
[32m+[m
[32m+[m				[32mif ( ! el && smiley_map[field_id]) {[m
[32m+[m					[32mel = document.getElementById(smiley_map[field_id]);[m
[32m+[m
[32m+[m					[32mif ( ! el)[m
[32m+[m						[32mreturn false;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mel.focus();[m
[32m+[m				[32msmiley = " " + smiley;[m
[32m+[m
[32m+[m				[32mif ('selectionStart' in el) {[m
[32m+[m					[32mnewStart = el.selectionStart + smiley.length;[m
[32m+[m
[32m+[m					[32mel.value = el.value.substr(0, el.selectionStart) +[m
[32m+[m									[32msmiley +[m
[32m+[m									[32mel.value.substr(el.selectionEnd, el.value.length);[m
[32m+[m					[32mel.setSelectionRange(newStart, newStart);[m
[32m+[m				[32m}[m
[32m+[m				[32melse if (document.selection) {[m
[32m+[m					[32mdocument.selection.createRange().text = smiley;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m[32mEOF;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (is_array($alias))[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($alias as $name => $id)[m
[32m+[m			[32m{[m
[32m+[m				[32m$r .= 'smiley_map["'.$name.'"] = "'.$id."\";\n";[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn ($inline)[m
[32m+[m			[32m? '<script type="text/javascript" charset="utf-8">/*<![CDATA[ */'.$r.'// ]]></script>'[m
[32m+[m			[32m: $r;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('get_clickable_smileys'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get Clickable Smileys[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns an array of image tag links that can be clicked to be inserted[m
[32m+[m	[32m * into a form field.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the URL to the folder containing the smiley images[m
[32m+[m	[32m * @param	array[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction get_clickable_smileys($image_url, $alias = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m// For backward compatibility with js_insert_smiley[m
[32m+[m		[32mif (is_array($alias))[m
[32m+[m		[32m{[m
[32m+[m			[32m$smileys = $alias;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (FALSE === ($smileys = _get_smiley_array()))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Add a trailing slash to the file path if needed[m
[32m+[m		[32m$image_url = rtrim($image_url, '/').'/';[m
[32m+[m
[32m+[m		[32m$used = array();[m
[32m+[m		[32mforeach ($smileys as $key => $val)[m
[32m+[m		[32m{[m
[32m+[m			[32m// Keep duplicates from being used, which can happen if the[m
[32m+[m			[32m// mapping array contains multiple identical replacements. For example:[m
[32m+[m			[32m// :-) and :) might be replaced with the same image so both smileys[m
[32m+[m			[32m// will be in the array.[m
[32m+[m			[32mif (isset($used[$smileys[$key][0]]))[m
[32m+[m			[32m{[m
[32m+[m				[32mcontinue;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$link[] = '<a href="javascript:void(0);" onclick="insert_smiley(\''.$key.'\', \''.$alias.'\')"><img src="'.$image_url.$smileys[$key][0].'" alt="'.$smileys[$key][3].'" style="width: '.$smileys[$key][1].'; height: '.$smileys[$key][2].'; border: 0;" /></a>';[m
[32m+[m			[32m$used[$smileys[$key][0]] = TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $link;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('parse_smileys'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Parse Smileys[m
[32m+[m	[32m *[m
[32m+[m	[32m * Takes a string as input and swaps any contained smileys for the actual image[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the text to be parsed[m
[32m+[m	[32m * @param	string	the URL to the folder containing the smiley images[m
[32m+[m	[32m * @param	array[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction parse_smileys($str = '', $image_url = '', $smileys = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($image_url === '' OR ( ! is_array($smileys) && FALSE === ($smileys = _get_smiley_array())))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $str;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Add a trailing slash to the file path if needed[m
[32m+[m		[32m$image_url = rtrim($image_url, '/').'/';[m
[32m+[m
[32m+[m		[32mforeach ($smileys as $key => $val)[m
[32m+[m		[32m{[m
[32m+[m			[32m$str = str_replace($key, '<img src="'.$image_url.$smileys[$key][0].'" alt="'.$smileys[$key][3].'" style="width: '.$smileys[$key][1].'; height: '.$smileys[$key][2].'; border: 0;" />', $str);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $str;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('_get_smiley_array'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get Smiley Array[m
[32m+[m	[32m *[m
[32m+[m	[32m * Fetches the config/smiley.php file[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction _get_smiley_array()[m
[32m+[m	[32m{[m
[32m+[m		[32mstatic $_smileys;[m
[32m+[m
[32m+[m		[32mif ( ! is_array($_smileys))[m
[32m+[m		[32m{[m
[32m+[m			[32mif (file_exists(APPPATH.'config/smileys.php'))[m
[32m+[m			[32m{[m
[32m+[m				[32minclude(APPPATH.'config/smileys.php');[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (file_exists(APPPATH.'config/'.ENVIRONMENT.'/smileys.php'))[m
[32m+[m			[32m{[m
[32m+[m				[32minclude(APPPATH.'config/'.ENVIRONMENT.'/smileys.php');[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (empty($smileys) OR ! is_array($smileys))[m
[32m+[m			[32m{[m
[32m+[m				[32m$_smileys = array();[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$_smileys = $smileys;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $_smileys;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/helpers/string_helper.php b/system/helpers/string_helper.php[m
[1mnew file mode 100644[m
[1mindex 0000000..3aa92fa[m
[1m--- /dev/null[m
[1m+++ b/system/helpers/string_helper.php[m
[36m@@ -0,0 +1,304 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter String Helpers[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Helpers[m
[32m+[m[32m * @category	Helpers[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/helpers/string_helper.html[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('trim_slashes'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Trim Slashes[m
[32m+[m	[32m *[m
[32m+[m	[32m * Removes any leading/trailing slashes from a string:[m
[32m+[m	[32m *[m
[32m+[m	[32m * /this/that/theother/[m
[32m+[m	[32m *[m
[32m+[m	[32m * becomes:[m
[32m+[m	[32m *[m
[32m+[m	[32m * this/that/theother[m
[32m+[m	[32m *[m
[32m+[m	[32m * @todo	Remove in version 3.1+.[m
[32m+[m	[32m * @deprecated	3.0.0	This is just an alias for PHP's native trim()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction trim_slashes($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn trim($str, '/');[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('strip_slashes'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Strip Slashes[m
[32m+[m	[32m *[m
[32m+[m	[32m * Removes slashes contained in a string or in an array[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	string or array[m
[32m+[m	[32m * @return	mixed	string or array[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction strip_slashes($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! is_array($str))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn stripslashes($str);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mforeach ($str as $key => $val)[m
[32m+[m		[32m{[m
[32m+[m			[32m$str[$key] = strip_slashes($val);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $str;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('strip_quotes'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Strip Quotes[m
[32m+[m	[32m *[m
[32m+[m	[32m * Removes single and double quotes from a string[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction strip_quotes($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn str_replace(array('"', "'"), '', $str);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('quotes_to_entities'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Quotes to Entities[m
[32m+[m	[32m *[m
[32m+[m	[32m * Converts single and double quotes to entities[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction quotes_to_entities($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn str_replace(array("\'","\"","'",'"'), array("&#39;","&quot;","&#39;","&quot;"), $str);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('reduce_double_slashes'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Reduce Double Slashes[m
[32m+[m	[32m *[m
[32m+[m	[32m * Converts double slashes in a string to a single slash,[m
[32m+[m	[32m * except those found in http://[m
[32m+[m	[32m *[m
[32m+[m	[32m * http://www.some-site.com//index.php[m
[32m+[m	[32m *[m
[32m+[m	[32m * becomes:[m
[32m+[m	[32m *[m
[32m+[m	[32m * http://www.some-site.com/index.php[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction reduce_double_slashes($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn preg_replace('#(^|[^:])//+#', '\\1/', $str);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('reduce_multiples'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Reduce Multiples[m
[32m+[m	[32m *[m
[32m+[m	[32m * Reduces multiple instances of a particular character.  Example:[m
[32m+[m	[32m *[m
[32m+[m	[32m * Fred, Bill,, Joe, Jimmy[m
[32m+[m	[32m *[m
[32m+[m	[32m * becomes:[m
[32m+[m	[32m *[m
[32m+[m	[32m * Fred, Bill, Joe, Jimmy[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	string	the character you wish to reduce[m
[32m+[m	[32m * @param	bool	TRUE/FALSE - whether to trim the character from the beginning/end[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction reduce_multiples($str, $character = ',', $trim = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$str = preg_replace('#'.preg_quote($character, '#').'{2,}#', $character, $str);[m
[32m+[m		[32mreturn ($trim === TRUE) ? trim($str, $character) : $str;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('random_string'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Create a "Random" String[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	type of random string.  basic, alpha, alnum, numeric, nozero, unique, md5, encrypt and sha1[m
[32m+[m	[32m * @param	int	number of characters[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction random_string($type = 'alnum', $len = 8)[m
[32m+[m	[32m{[m
[32m+[m		[32mswitch ($type)[m
[32m+[m		[32m{[m
[32m+[m			[32mcase 'basic':[m
[32m+[m				[32mreturn mt_rand();[m
[32m+[m			[32mcase 'alnum':[m
[32m+[m			[32mcase 'numeric':[m
[32m+[m			[32mcase 'nozero':[m
[32m+[m			[32mcase 'alpha':[m
[32m+[m				[32mswitch ($type)[m
[32m+[m				[32m{[m
[32m+[m					[32mcase 'alpha':[m
[32m+[m						[32m$pool = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';[m
[32m+[m						[32mbreak;[m
[32m+[m					[32mcase 'alnum':[m
[32m+[m						[32m$pool = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';[m
[32m+[m						[32mbreak;[m
[32m+[m					[32mcase 'numeric':[m
[32m+[m						[32m$pool = '0123456789';[m
[32m+[m						[32mbreak;[m
[32m+[m					[32mcase 'nozero':[m
[32m+[m						[32m$pool = '123456789';[m
[32m+[m						[32mbreak;[m
[32m+[m				[32m}[m
[32m+[m				[32mreturn substr(str_shuffle(str_repeat($pool, ceil($len / strlen($pool)))), 0, $len);[m
[32m+[m			[32mcase 'unique': // todo: remove in 3.1+[m
[32m+[m			[32mcase 'md5':[m
[32m+[m				[32mreturn md5(uniqid(mt_rand()));[m
[32m+[m			[32mcase 'encrypt': // todo: remove in 3.1+[m
[32m+[m			[32mcase 'sha1':[m
[32m+[m				[32mreturn sha1(uniqid(mt_rand(), TRUE));[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('increment_string'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Add's _1 to a string or increment the ending number to allow _2, _3, etc[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	required[m
[32m+[m	[32m * @param	string	What should the duplicate number be appended with[m
[32m+[m	[32m * @param	string	Which number should be used for the first dupe increment[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction increment_string($str, $separator = '_', $first = 1)[m
[32m+[m	[32m{[m
[32m+[m		[32mpreg_match('/(.+)'.preg_quote($separator, '/').'([0-9]+)$/', $str, $match);[m
[32m+[m		[32mreturn isset($match[2]) ? $match[1].$separator.($match[2] + 1) : $str.$separator.$first;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('alternator'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Alternator[m
[32m+[m	[32m *[m
[32m+[m	[32m * Allows strings to be alternated. See docs...[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string (as many parameters as needed)[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction alternator()[m
[32m+[m	[32m{[m
[32m+[m		[32mstatic $i;[m
[32m+[m
[32m+[m		[32mif (func_num_args() === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32m$i = 0;[m
[32m+[m			[32mreturn '';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$args = func_get_args();[m
[32m+[m		[32mreturn $args[($i++ % count($args))];[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('repeater'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Repeater function[m
[32m+[m	[32m *[m
[32m+[m	[32m * @todo	Remove in version 3.1+.[m
[32m+[m	[32m * @deprecated	3.0.0	This is just an alias for PHP's native str_repeat()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$data	String to repeat[m
[32m+[m	[32m * @param	int	$num	Number of repeats[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction repeater($data, $num = 1)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn ($num > 0) ? str_repeat($data, $num) : '';[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/helpers/text_helper.php b/system/helpers/text_helper.php[m
[1mnew file mode 100644[m
[1mindex 0000000..3e2dca8[m
[1m--- /dev/null[m
[1m+++ b/system/helpers/text_helper.php[m
[36m@@ -0,0 +1,567 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter Text Helpers[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Helpers[m
[32m+[m[32m * @category	Helpers[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/helpers/text_helper.html[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('word_limiter'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Word Limiter[m
[32m+[m	[32m *[m
[32m+[m	[32m * Limits a string to X number of words.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	int[m
[32m+[m	[32m * @param	string	the end character. Usually an ellipsis[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction word_limiter($str, $limit = 100, $end_char = '&#8230;')[m
[32m+[m	[32m{[m
[32m+[m		[32mif (trim($str) === '')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $str;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mpreg_match('/^\s*+(?:\S++\s*+){1,'.(int) $limit.'}/', $str, $matches);[m
[32m+[m
[32m+[m		[32mif (strlen($str) === strlen($matches[0]))[m
[32m+[m		[32m{[m
[32m+[m			[32m$end_char = '';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn rtrim($matches[0]).$end_char;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('character_limiter'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Character Limiter[m
[32m+[m	[32m *[m
[32m+[m	[32m * Limits the string based on the character count.  Preserves complete words[m
[32m+[m	[32m * so the character count may not be exactly as specified.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	int[m
[32m+[m	[32m * @param	string	the end character. Usually an ellipsis[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction character_limiter($str, $n = 500, $end_char = '&#8230;')[m
[32m+[m	[32m{[m
[32m+[m		[32mif (mb_strlen($str) < $n)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $str;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// a bit complicated, but faster than preg_replace with \s+[m
[32m+[m		[32m$str = preg_replace('/ {2,}/', ' ', str_replace(array("\r", "\n", "\t", "\v", "\f"), ' ', $str));[m
[32m+[m
[32m+[m		[32mif (mb_strlen($str) <= $n)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $str;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$out = '';[m
[32m+[m		[32mforeach (explode(' ', trim($str)) as $val)[m
[32m+[m		[32m{[m
[32m+[m			[32m$out .= $val.' ';[m
[32m+[m
[32m+[m			[32mif (mb_strlen($out) >= $n)[m
[32m+[m			[32m{[m
[32m+[m				[32m$out = trim($out);[m
[32m+[m				[32mreturn (mb_strlen($out) === mb_strlen($str)) ? $out : $out.$end_char;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('ascii_to_entities'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * High ASCII to Entities[m
[32m+[m	[32m *[m
[32m+[m	[32m * Converts high ASCII text and MS Word special characters to character entities[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$str[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction ascii_to_entities($str)[m
[32m+[m	[32m{[m
[32m+[m		[32m$out = '';[m
[32m+[m		[32m$length = defined('MB_OVERLOAD_STRING')[m
[32m+[m			[32m? mb_strlen($str, '8bit') - 1[m
[32m+[m			[32m: strlen($str) - 1;[m
[32m+[m		[32mfor ($i = 0, $count = 1, $temp = array(); $i <= $length; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$ordinal = ord($str[$i]);[m
[32m+[m
[32m+[m			[32mif ($ordinal < 128)[m
[32m+[m			[32m{[m
[32m+[m				[32m/*[m
[32m+[m					[32mIf the $temp array has a value but we have moved on, then it seems only[m
[32m+[m					[32mfair that we output that entity and restart $temp before continuing. -Paul[m
[32m+[m				[32m*/[m
[32m+[m				[32mif (count($temp) === 1)[m
[32m+[m				[32m{[m
[32m+[m					[32m$out .= '&#'.array_shift($temp).';';[m
[32m+[m					[32m$count = 1;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m$out .= $str[$i];[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32mif (count($temp) === 0)[m
[32m+[m				[32m{[m
[32m+[m					[32m$count = ($ordinal < 224) ? 2 : 3;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m$temp[] = $ordinal;[m
[32m+[m
[32m+[m				[32mif (count($temp) === $count)[m
[32m+[m				[32m{[m
[32m+[m					[32m$number = ($count === 3)[m
[32m+[m						[32m? (($temp[0] % 16) * 4096) + (($temp[1] % 64) * 64) + ($temp[2] % 64)[m
[32m+[m						[32m: (($temp[0] % 32) * 64) + ($temp[1] % 64);[m
[32m+[m
[32m+[m					[32m$out .= '&#'.$number.';';[m
[32m+[m					[32m$count = 1;[m
[32m+[m					[32m$temp = array();[m
[32m+[m				[32m}[m
[32m+[m				[32m// If this is the last iteration, just output whatever we have[m
[32m+[m				[32melseif ($i === $length)[m
[32m+[m				[32m{[m
[32m+[m					[32m$out .= '&#'.implode(';', $temp).';';[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $out;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('entities_to_ascii'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Entities to ASCII[m
[32m+[m	[32m *[m
[32m+[m	[32m * Converts character entities back to ASCII[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	bool[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction entities_to_ascii($str, $all = TRUE)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (preg_match_all('/\&#(\d+)\;/', $str, $matches))[m
[32m+[m		[32m{[m
[32m+[m			[32mfor ($i = 0, $s = count($matches[0]); $i < $s; $i++)[m
[32m+[m			[32m{[m
[32m+[m				[32m$digits = $matches[1][$i];[m
[32m+[m				[32m$out = '';[m
[32m+[m
[32m+[m				[32mif ($digits < 128)[m
[32m+[m				[32m{[m
[32m+[m					[32m$out .= chr($digits);[m
[32m+[m
[32m+[m				[32m}[m
[32m+[m				[32melseif ($digits < 2048)[m
[32m+[m				[32m{[m
[32m+[m					[32m$out .= chr(192 + (($digits - ($digits % 64)) / 64)).chr(128 + ($digits % 64));[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32m$out .= chr(224 + (($digits - ($digits % 4096)) / 4096))[m
[32m+[m						[32m.chr(128 + ((($digits % 4096) - ($digits % 64)) / 64))[m
[32m+[m						[32m.chr(128 + ($digits % 64));[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m$str = str_replace($matches[0][$i], $out, $str);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($all)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn str_replace([m
[32m+[m				[32marray('&amp;', '&lt;', '&gt;', '&quot;', '&apos;', '&#45;'),[m
[32m+[m				[32marray('&', '<', '>', '"', "'", '-'),[m
[32m+[m				[32m$str[m
[32m+[m			[32m);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $str;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('word_censor'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Word Censoring Function[m
[32m+[m	[32m *[m
[32m+[m	[32m * Supply a string and an array of disallowed words and any[m
[32m+[m	[32m * matched words will be converted to #### or to the replacement[m
[32m+[m	[32m * word you've submitted.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the text string[m
[32m+[m	[32m * @param	string	the array of censored words[m
[32m+[m	[32m * @param	string	the optional replacement value[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction word_censor($str, $censored, $replacement = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! is_array($censored))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $str;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$str = ' '.$str.' ';[m
[32m+[m
[32m+[m		[32m// \w, \b and a few others do not match on a unicode character[m
[32m+[m		[32m// set for performance reasons. As a result words like über[m
[32m+[m		[32m// will not match on a word boundary. Instead, we'll assume that[m
[32m+[m		[32m// a bad word will be bookeneded by any of these characters.[m
[32m+[m		[32m$delim = '[-_\'\"`(){}<>\[\]|!?@#%&,.:;^~*+=\/ 0-9\n\r\t]';[m
[32m+[m
[32m+[m		[32mforeach ($censored as $badword)[m
[32m+[m		[32m{[m
[32m+[m			[32m$badword = str_replace('\*', '\w*?', preg_quote($badword, '/'));[m
[32m+[m			[32mif ($replacement !== '')[m
[32m+[m			[32m{[m
[32m+[m				[32m$str = preg_replace([m
[32m+[m					[32m"/({$delim})(".$badword.")({$delim})/i",[m
[32m+[m					[32m"\\1{$replacement}\\3",[m
[32m+[m					[32m$str[m
[32m+[m				[32m);[m
[32m+[m			[32m}[m
[32m+[m			[32melseif (preg_match_all("/{$delim}(".$badword."){$delim}/i", $str, $matches, PREG_PATTERN_ORDER | PREG_OFFSET_CAPTURE))[m
[32m+[m			[32m{[m
[32m+[m				[32m$matches = $matches[1];[m
[32m+[m				[32mfor ($i = count($matches) - 1; $i >= 0; $i--)[m
[32m+[m				[32m{[m
[32m+[m					[32m$length = strlen($matches[$i][0]);[m
[32m+[m					[32m$str = substr_replace([m
[32m+[m						[32m$str,[m
[32m+[m						[32mstr_repeat('#', $length),[m
[32m+[m						[32m$matches[$i][1],[m
[32m+[m						[32m$length[m
[32m+[m					[32m);[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn trim($str);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('highlight_code'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Code Highlighter[m
[32m+[m	[32m *[m
[32m+[m	[32m * Colorizes code strings[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the text string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction highlight_code($str)[m
[32m+[m	[32m{[m
[32m+[m		[32m/* The highlight string function encodes and highlights[m
[32m+[m		[32m * brackets so we need them to start raw.[m
[32m+[m		[32m *[m
[32m+[m		[32m * Also replace any existing PHP tags to temporary markers[m
[32m+[m		[32m * so they don't accidentally break the string out of PHP,[m
[32m+[m		[32m * and thus, thwart the highlighting.[m
[32m+[m		[32m */[m
[32m+[m		[32m$str = str_replace([m
[32m+[m			[32marray('&lt;', '&gt;', '<?', '?>', '<%', '%>', '\\', '</script>'),[m
[32m+[m			[32marray('<', '>', 'phptagopen', 'phptagclose', 'asptagopen', 'asptagclose', 'backslashtmp', 'scriptclose'),[m
[32m+[m			[32m$str[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32m// The highlight_string function requires that the text be surrounded[m
[32m+[m		[32m// by PHP tags, which we will remove later[m
[32m+[m		[32m$str = highlight_string('<?php '.$str.' ?>', TRUE);[m
[32m+[m
[32m+[m		[32m// Remove our artificially added PHP, and the syntax highlighting that came with it[m
[32m+[m		[32m$str = preg_replace([m
[32m+[m			[32marray([m
[32m+[m				[32m'/<span style="color: #([A-Z0-9]+)">&lt;\?php(&nbsp;| )/i',[m
[32m+[m				[32m'/(<span style="color: #[A-Z0-9]+">.*?)\?&gt;<\/span>\n<\/span>\n<\/code>/is',[m
[32m+[m				[32m'/<span style="color: #[A-Z0-9]+"\><\/span>/i'[m
[32m+[m			[32m),[m
[32m+[m			[32marray([m
[32m+[m				[32m'<span style="color: #$1">',[m
[32m+[m				[32m"$1</span>\n</span>\n</code>",[m
[32m+[m				[32m''[m
[32m+[m			[32m),[m
[32m+[m			[32m$str[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32m// Replace our markers back to PHP tags.[m
[32m+[m		[32mreturn str_replace([m
[32m+[m			[32marray('phptagopen', 'phptagclose', 'asptagopen', 'asptagclose', 'backslashtmp', 'scriptclose'),[m
[32m+[m			[32marray('&lt;?', '?&gt;', '&lt;%', '%&gt;', '\\', '&lt;/script&gt;'),[m
[32m+[m			[32m$str[m
[32m+[m		[32m);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('highlight_phrase'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Phrase Highlighter[m
[32m+[m	[32m *[m
[32m+[m	[32m * Highlights a phrase within a text string[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$str		the text string[m
[32m+[m	[32m * @param	string	$phrase		the phrase you'd like to highlight[m
[32m+[m	[32m * @param	string	$tag_open	the openging tag to precede the phrase with[m
[32m+[m	[32m * @param	string	$tag_close	the closing tag to end the phrase with[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction highlight_phrase($str, $phrase, $tag_open = '<mark>', $tag_close = '</mark>')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn ($str !== '' && $phrase !== '')[m
[32m+[m			[32m? preg_replace('/('.preg_quote($phrase, '/').')/i'.(UTF8_ENABLED ? 'u' : ''), $tag_open.'\\1'.$tag_close, $str)[m
[32m+[m			[32m: $str;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('convert_accented_characters'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Convert Accented Foreign Characters to ASCII[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$str	Input string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction convert_accented_characters($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mstatic $array_from, $array_to;[m
[32m+[m
[32m+[m		[32mif ( ! is_array($array_from))[m
[32m+[m		[32m{[m
[32m+[m			[32mif (file_exists(APPPATH.'config/foreign_chars.php'))[m
[32m+[m			[32m{[m
[32m+[m				[32minclude(APPPATH.'config/foreign_chars.php');[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (file_exists(APPPATH.'config/'.ENVIRONMENT.'/foreign_chars.php'))[m
[32m+[m			[32m{[m
[32m+[m				[32minclude(APPPATH.'config/'.ENVIRONMENT.'/foreign_chars.php');[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (empty($foreign_characters) OR ! is_array($foreign_characters))[m
[32m+[m			[32m{[m
[32m+[m				[32m$array_from = array();[m
[32m+[m				[32m$array_to = array();[m
[32m+[m
[32m+[m				[32mreturn $str;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$array_from = array_keys($foreign_characters);[m
[32m+[m			[32m$array_to = array_values($foreign_characters);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn preg_replace($array_from, $array_to, $str);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('word_wrap'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Word Wrap[m
[32m+[m	[32m *[m
[32m+[m	[32m * Wraps text at the specified character. Maintains the integrity of words.[m
[32m+[m	[32m * Anything placed between {unwrap}{/unwrap} will not be word wrapped, nor[m
[32m+[m	[32m * will URLs.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$str		the text string[m
[32m+[m	[32m * @param	int	$charlim = 76	the number of characters to wrap at[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction word_wrap($str, $charlim = 76)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Set the character limit[m
[32m+[m		[32mis_numeric($charlim) OR $charlim = 76;[m
[32m+[m
[32m+[m		[32m// Reduce multiple spaces[m
[32m+[m		[32m$str = preg_replace('| +|', ' ', $str);[m
[32m+[m
[32m+[m		[32m// Standardize newlines[m
[32m+[m		[32mif (strpos($str, "\r") !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$str = str_replace(array("\r\n", "\r"), "\n", $str);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// If the current word is surrounded by {unwrap} tags we'll[m
[32m+[m		[32m// strip the entire chunk and replace it with a marker.[m
[32m+[m		[32m$unwrap = array();[m
[32m+[m		[32mif (preg_match_all('|\{unwrap\}(.+?)\{/unwrap\}|s', $str, $matches))[m
[32m+[m		[32m{[m
[32m+[m			[32mfor ($i = 0, $c = count($matches[0]); $i < $c; $i++)[m
[32m+[m			[32m{[m
[32m+[m				[32m$unwrap[] = $matches[1][$i];[m
[32m+[m				[32m$str = str_replace($matches[0][$i], '{{unwrapped'.$i.'}}', $str);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Use PHP's native function to do the initial wordwrap.[m
[32m+[m		[32m// We set the cut flag to FALSE so that any individual words that are[m
[32m+[m		[32m// too long get left alone. In the next step we'll deal with them.[m
[32m+[m		[32m$str = wordwrap($str, $charlim, "\n", FALSE);[m
[32m+[m
[32m+[m		[32m// Split the string into individual lines of text and cycle through them[m
[32m+[m		[32m$output = '';[m
[32m+[m		[32mforeach (explode("\n", $str) as $line)[m
[32m+[m		[32m{[m
[32m+[m			[32m// Is the line within the allowed character count?[m
[32m+[m			[32m// If so we'll join it to the output and continue[m
[32m+[m			[32mif (mb_strlen($line) <= $charlim)[m
[32m+[m			[32m{[m
[32m+[m				[32m$output .= $line."\n";[m
[32m+[m				[32mcontinue;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$temp = '';[m
[32m+[m			[32mwhile (mb_strlen($line) > $charlim)[m
[32m+[m			[32m{[m
[32m+[m				[32m// If the over-length word is a URL we won't wrap it[m
[32m+[m				[32mif (preg_match('!\[url.+\]|://|www\.!', $line))[m
[32m+[m				[32m{[m
[32m+[m					[32mbreak;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m// Trim the word down[m
[32m+[m				[32m$temp .= mb_substr($line, 0, $charlim - 1);[m
[32m+[m				[32m$line = mb_substr($line, $charlim - 1);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// If $temp contains data it means we had to split up an over-length[m
[32m+[m			[32m// word into smaller chunks so we'll add it back to our current line[m
[32m+[m			[32mif ($temp !== '')[m
[32m+[m			[32m{[m
[32m+[m				[32m$output .= $temp."\n".$line."\n";[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$output .= $line."\n";[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Put our markers back[m
[32m+[m		[32mif (count($unwrap) > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($unwrap as $key => $val)[m
[32m+[m			[32m{[m
[32m+[m				[32m$output = str_replace('{{unwrapped'.$key.'}}', $val, $output);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $output;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('ellipsize'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Ellipsize String[m
[32m+[m	[32m *[m
[32m+[m	[32m * This function will strip tags from a string, split it at its max_length and ellipsize[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	string to ellipsize[m
[32m+[m	[32m * @param	int	max length of string[m
[32m+[m	[32m * @param	mixed	int (1|0) or float, .5, .2, etc for position to split[m
[32m+[m	[32m * @param	string	ellipsis ; Default '...'[m
[32m+[m	[32m * @return	string	ellipsized string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction ellipsize($str, $max_length, $position = 1, $ellipsis = '&hellip;')[m
[32m+[m	[32m{[m
[32m+[m		[32m// Strip tags[m
[32m+[m		[32m$str = trim(strip_tags($str));[m
[32m+[m
[32m+[m		[32m// Is the string long enough to ellipsize?[m
[32m+[m		[32mif (mb_strlen($str) <= $max_length)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $str;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$beg = mb_substr($str, 0, floor($max_length * $position));[m
[32m+[m		[32m$position = ($position > 1) ? 1 : $position;[m
[32m+[m
[32m+[m		[32mif ($position === 1)[m
[32m+[m		[32m{[m
[32m+[m			[32m$end = mb_substr($str, 0, -($max_length - mb_strlen($beg)));[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$end = mb_substr($str, -($max_length - mb_strlen($beg)));[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $beg.$ellipsis.$end;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/helpers/typography_helper.php b/system/helpers/typography_helper.php[m
[1mnew file mode 100644[m
[1mindex 0000000..e97c83b[m
[1m--- /dev/null[m
[1m+++ b/system/helpers/typography_helper.php[m
[36m@@ -0,0 +1,104 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter Typography Helpers[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Helpers[m
[32m+[m[32m * @category	Helpers[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/helpers/typography_helper.html[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('nl2br_except_pre'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Convert newlines to HTML line breaks except within PRE tags[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction nl2br_except_pre($str)[m
[32m+[m	[32m{[m
[32m+[m		[32m$CI =& get_instance();[m
[32m+[m		[32m$CI->load->library('typography');[m
[32m+[m		[32mreturn $CI->typography->nl2br_except_pre($str);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('auto_typography'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Auto Typography Wrapper Function[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$str[m
[32m+[m	[32m * @param	bool	$reduce_linebreaks = FALSE	whether to reduce multiple instances of double newlines to two[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction auto_typography($str, $reduce_linebreaks = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$CI =& get_instance();[m
[32m+[m		[32m$CI->load->library('typography');[m
[32m+[m		[32mreturn $CI->typography->auto_typography($str, $reduce_linebreaks);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('entity_decode'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * HTML Entities Decode[m
[32m+[m	[32m *[m
[32m+[m	[32m * This function is a replacement for html_entity_decode()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction entity_decode($str, $charset = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn get_instance()->security->entity_decode($str, $charset);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/helpers/url_helper.php b/system/helpers/url_helper.php[m
[1mnew file mode 100644[m
[1mindex 0000000..a22c4c2[m
[1m--- /dev/null[m
[1m+++ b/system/helpers/url_helper.php[m
[36m@@ -0,0 +1,569 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter URL Helpers[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Helpers[m
[32m+[m[32m * @category	Helpers[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/helpers/url_helper.html[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('site_url'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Site URL[m
[32m+[m	[32m *[m
[32m+[m	[32m * Create a local URL based on your basepath. Segments can be passed via the[m
[32m+[m	[32m * first parameter either as a string or an array.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$uri[m
[32m+[m	[32m * @param	string	$protocol[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction site_url($uri = '', $protocol = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn get_instance()->config->site_url($uri, $protocol);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('base_url'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Base URL[m
[32m+[m	[32m *[m
[32m+[m	[32m * Create a local URL based on your basepath.[m
[32m+[m	[32m * Segments can be passed in as a string or an array, same as site_url[m
[32m+[m	[32m * or a URL to a file can be passed in, e.g. to an image file.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$uri[m
[32m+[m	[32m * @param	string	$protocol[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction base_url($uri = '', $protocol = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn get_instance()->config->base_url($uri, $protocol);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('current_url'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Current URL[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the full URL (including segments) of the page where this[m
[32m+[m	[32m * function is placed[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction current_url()[m
[32m+[m	[32m{[m
[32m+[m		[32m$CI =& get_instance();[m
[32m+[m		[32mreturn $CI->config->site_url($CI->uri->uri_string());[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('uri_string'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * URL String[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the URI segments.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction uri_string()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn get_instance()->uri->uri_string();[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('index_page'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Index page[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the "index_page" from your config file[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction index_page()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn get_instance()->config->item('index_page');[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('anchor'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Anchor Link[m
[32m+[m	[32m *[m
[32m+[m	[32m * Creates an anchor based on the local URL.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the URL[m
[32m+[m	[32m * @param	string	the link title[m
[32m+[m	[32m * @param	mixed	any attributes[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction anchor($uri = '', $title = '', $attributes = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$title = (string) $title;[m
[32m+[m
[32m+[m		[32m$site_url = is_array($uri)[m
[32m+[m			[32m? site_url($uri)[m
[32m+[m			[32m: (preg_match('#^(\w+:)?//#i', $uri) ? $uri : site_url($uri));[m
[32m+[m
[32m+[m		[32mif ($title === '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$title = $site_url;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($attributes !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$attributes = _stringify_attributes($attributes);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn '<a href="'.$site_url.'"'.$attributes.'>'.$title.'</a>';[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('anchor_popup'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Anchor Link - Pop-up version[m
[32m+[m	[32m *[m
[32m+[m	[32m * Creates an anchor based on the local URL. The link[m
[32m+[m	[32m * opens a new window based on the attributes specified.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the URL[m
[32m+[m	[32m * @param	string	the link title[m
[32m+[m	[32m * @param	mixed	any attributes[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction anchor_popup($uri = '', $title = '', $attributes = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$title = (string) $title;[m
[32m+[m		[32m$site_url = preg_match('#^(\w+:)?//#i', $uri) ? $uri : site_url($uri);[m
[32m+[m
[32m+[m		[32mif ($title === '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$title = $site_url;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($attributes === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn '<a href="'.$site_url.'" onclick="window.open(\''.$site_url."', '_blank'); return false;\">".$title.'</a>';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! is_array($attributes))[m
[32m+[m		[32m{[m
[32m+[m			[32m$attributes = array($attributes);[m
[32m+[m
[32m+[m			[32m// Ref: http://www.w3schools.com/jsref/met_win_open.asp[m
[32m+[m			[32m$window_name = '_blank';[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! empty($attributes['window_name']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$window_name = $attributes['window_name'];[m
[32m+[m			[32munset($attributes['window_name']);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$window_name = '_blank';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mforeach (array('width' => '800', 'height' => '600', 'scrollbars' => 'yes', 'menubar' => 'no', 'status' => 'yes', 'resizable' => 'yes', 'screenx' => '0', 'screeny' => '0') as $key => $val)[m
[32m+[m		[32m{[m
[32m+[m			[32m$atts[$key] = isset($attributes[$key]) ? $attributes[$key] : $val;[m
[32m+[m			[32munset($attributes[$key]);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$attributes = _stringify_attributes($attributes);[m
[32m+[m
[32m+[m		[32mreturn '<a href="'.$site_url[m
[32m+[m			[32m.'" onclick="window.open(\''.$site_url."', '".$window_name."', '"._stringify_attributes($atts, TRUE)."'); return false;\""[m
[32m+[m			[32m.$attributes.'>'.$title.'</a>';[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('mailto'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Mailto Link[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the email address[m
[32m+[m	[32m * @param	string	the link title[m
[32m+[m	[32m * @param	mixed	any attributes[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction mailto($email, $title = '', $attributes = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$title = (string) $title;[m
[32m+[m
[32m+[m		[32mif ($title === '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$title = $email;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn '<a href="mailto:'.$email.'"'._stringify_attributes($attributes).'>'.$title.'</a>';[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('safe_mailto'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Encoded Mailto Link[m
[32m+[m	[32m *[m
[32m+[m	[32m * Create a spam-protected mailto link written in Javascript[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the email address[m
[32m+[m	[32m * @param	string	the link title[m
[32m+[m	[32m * @param	mixed	any attributes[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction safe_mailto($email, $title = '', $attributes = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$title = (string) $title;[m
[32m+[m
[32m+[m		[32mif ($title === '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$title = $email;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$x = str_split('<a href="mailto:', 1);[m
[32m+[m
[32m+[m		[32mfor ($i = 0, $l = strlen($email); $i < $l; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$x[] = '|'.ord($email[$i]);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$x[] = '"';[m
[32m+[m
[32m+[m		[32mif ($attributes !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32mif (is_array($attributes))[m
[32m+[m			[32m{[m
[32m+[m				[32mforeach ($attributes as $key => $val)[m
[32m+[m				[32m{[m
[32m+[m					[32m$x[] = ' '.$key.'="';[m
[32m+[m					[32mfor ($i = 0, $l = strlen($val); $i < $l; $i++)[m
[32m+[m					[32m{[m
[32m+[m						[32m$x[] = '|'.ord($val[$i]);[m
[32m+[m					[32m}[m
[32m+[m					[32m$x[] = '"';[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32mfor ($i = 0, $l = strlen($attributes); $i < $l; $i++)[m
[32m+[m				[32m{[m
[32m+[m					[32m$x[] = $attributes[$i];[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$x[] = '>';[m
[32m+[m
[32m+[m		[32m$temp = array();[m
[32m+[m		[32mfor ($i = 0, $l = strlen($title); $i < $l; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$ordinal = ord($title[$i]);[m
[32m+[m
[32m+[m			[32mif ($ordinal < 128)[m
[32m+[m			[32m{[m
[32m+[m				[32m$x[] = '|'.$ordinal;[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32mif (count($temp) === 0)[m
[32m+[m				[32m{[m
[32m+[m					[32m$count = ($ordinal < 224) ? 2 : 3;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m$temp[] = $ordinal;[m
[32m+[m				[32mif (count($temp) === $count)[m
[32m+[m				[32m{[m
[32m+[m					[32m$number = ($count === 3)[m
[32m+[m							[32m? (($temp[0] % 16) * 4096) + (($temp[1] % 64) * 64) + ($temp[2] % 64)[m
[32m+[m							[32m: (($temp[0] % 32) * 64) + ($temp[1] % 64);[m
[32m+[m					[32m$x[] = '|'.$number;[m
[32m+[m					[32m$count = 1;[m
[32m+[m					[32m$temp = array();[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$x[] = '<'; $x[] = '/'; $x[] = 'a'; $x[] = '>';[m
[32m+[m
[32m+[m		[32m$x = array_reverse($x);[m
[32m+[m
[32m+[m		[32m$output = "<script type=\"text/javascript\">\n"[m
[32m+[m			[32m."\t//<![CDATA[\n"[m
[32m+[m			[32m."\tvar l=new Array();\n";[m
[32m+[m
[32m+[m		[32mfor ($i = 0, $c = count($x); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$output .= "\tl[".$i."] = '".$x[$i]."';\n";[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$output .= "\n\tfor (var i = l.length-1; i >= 0; i=i-1) {\n"[m
[32m+[m			[32m."\t\tif (l[i].substring(0, 1) === '|') document.write(\"&#\"+unescape(l[i].substring(1))+\";\");\n"[m
[32m+[m			[32m."\t\telse document.write(unescape(l[i]));\n"[m
[32m+[m			[32m."\t}\n"[m
[32m+[m			[32m."\t//]]>\n"[m
[32m+[m			[32m.'</script>';[m
[32m+[m
[32m+[m		[32mreturn $output;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('auto_link'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Auto-linker[m
[32m+[m	[32m *[m
[32m+[m	[32m * Automatically links URL and Email addresses.[m
[32m+[m	[32m * Note: There's a bit of extra code here to deal with[m
[32m+[m	[32m * URLs or emails that end in a period. We'll strip these[m
[32m+[m	[32m * off and add them after the link.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the string[m
[32m+[m	[32m * @param	string	the type: email, url, or both[m
[32m+[m	[32m * @param	bool	whether to create pop-up links[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction auto_link($str, $type = 'both', $popup = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Find and replace any URLs.[m
[32m+[m		[32mif ($type !== 'email' && preg_match_all('#(\w*://|www\.)[a-z0-9]+(-+[a-z0-9]+)*(\.[a-z0-9]+(-+[a-z0-9]+)*)+(/([^\s()<>;]+\w)?/?)?#i', $str, $matches, PREG_OFFSET_CAPTURE | PREG_SET_ORDER))[m
[32m+[m		[32m{[m
[32m+[m			[32m// Set our target HTML if using popup links.[m
[32m+[m			[32m$target = ($popup) ? ' target="_blank" rel="noopener"' : '';[m
[32m+[m
[32m+[m			[32m// We process the links in reverse order (last -> first) so that[m
[32m+[m			[32m// the returned string offsets from preg_match_all() are not[m
[32m+[m			[32m// moved as we add more HTML.[m
[32m+[m			[32mforeach (array_reverse($matches) as $match)[m
[32m+[m			[32m{[m
[32m+[m				[32m// $match[0] is the matched string/link[m
[32m+[m				[32m// $match[1] is either a protocol prefix or 'www.'[m
[32m+[m				[32m//[m
[32m+[m				[32m// With PREG_OFFSET_CAPTURE, both of the above is an array,[m
[32m+[m				[32m// where the actual value is held in [0] and its offset at the [1] index.[m
[32m+[m				[32m$a = '<a href="'.(strpos($match[1][0], '/') ? '' : 'http://').$match[0][0].'"'.$target.'>'.$match[0][0].'</a>';[m
[32m+[m				[32m$str = substr_replace($str, $a, $match[0][1], strlen($match[0][0]));[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Find and replace any emails.[m
[32m+[m		[32mif ($type !== 'url' && preg_match_all('#([\w\.\-\+]+@[a-z0-9\-]+\.[a-z0-9\-\.]+[^[:punct:]\s])#i', $str, $matches, PREG_OFFSET_CAPTURE))[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach (array_reverse($matches[0]) as $match)[m
[32m+[m			[32m{[m
[32m+[m				[32mif (filter_var($match[0], FILTER_VALIDATE_EMAIL) !== FALSE)[m
[32m+[m				[32m{[m
[32m+[m					[32m$str = substr_replace($str, safe_mailto($match[0]), $match[1], strlen($match[0]));[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $str;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('prep_url'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Prep URL[m
[32m+[m	[32m *[m
[32m+[m	[32m * Simply adds the http:// part if no scheme is included[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the URL[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction prep_url($str = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($str === 'http://' OR $str === '')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn '';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$url = parse_url($str);[m
[32m+[m
[32m+[m		[32mif ( ! $url OR ! isset($url['scheme']))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn 'http://'.$str;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $str;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('url_title'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Create URL Title[m
[32m+[m	[32m *[m
[32m+[m	[32m * Takes a "title" string as input and creates a[m
[32m+[m	[32m * human-friendly URL string with a "separator" string[m
[32m+[m	[32m * as the word separator.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @todo	Remove old 'dash' and 'underscore' usage in 3.1+.[m
[32m+[m	[32m * @param	string	$str		Input string[m
[32m+[m	[32m * @param	string	$separator	Word separator[m
[32m+[m	[32m *			(usually '-' or '_')[m
[32m+[m	[32m * @param	bool	$lowercase	Whether to transform the output string to lowercase[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction url_title($str, $separator = '-', $lowercase = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($separator === 'dash')[m
[32m+[m		[32m{[m
[32m+[m			[32m$separator = '-';[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($separator === 'underscore')[m
[32m+[m		[32m{[m
[32m+[m			[32m$separator = '_';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$q_separator = preg_quote($separator, '#');[m
[32m+[m
[32m+[m		[32m$trans = array([m
[32m+[m			[32m'&.+?;'			=> '',[m
[32m+[m			[32m'[^\w\d _-]'		=> '',[m
[32m+[m			[32m'\s+'			=> $separator,[m
[32m+[m			[32m'('.$q_separator.')+'	=> $separator[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32m$str = strip_tags($str);[m
[32m+[m		[32mforeach ($trans as $key => $val)[m
[32m+[m		[32m{[m
[32m+[m			[32m$str = preg_replace('#'.$key.'#i'.(UTF8_ENABLED ? 'u' : ''), $val, $str);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($lowercase === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$str = strtolower($str);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn trim(trim($str, $separator));[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('redirect'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Header Redirect[m
[32m+[m	[32m *[m
[32m+[m	[32m * Header redirect in two flavors[m
[32m+[m	[32m * For very fine grained control over headers, you could use the Output[m
[32m+[m	[32m * Library's set_header() function.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$uri	URL[m
[32m+[m	[32m * @param	string	$method	Redirect method[m
[32m+[m	[32m *			'auto', 'location' or 'refresh'[m
[32m+[m	[32m * @param	int	$code	HTTP Response status code[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction redirect($uri = '', $method = 'auto', $code = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! preg_match('#^(\w+:)?//#i', $uri))[m
[32m+[m		[32m{[m
[32m+[m			[32m$uri = site_url($uri);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// IIS environment likely? Use 'refresh' for better compatibility[m
[32m+[m		[32mif ($method === 'auto' && isset($_SERVER['SERVER_SOFTWARE']) && strpos($_SERVER['SERVER_SOFTWARE'], 'Microsoft-IIS') !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$method = 'refresh';[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($method !== 'refresh' && (empty($code) OR ! is_numeric($code)))[m
[32m+[m		[32m{[m
[32m+[m			[32mif (isset($_SERVER['SERVER_PROTOCOL'], $_SERVER['REQUEST_METHOD']) && $_SERVER['SERVER_PROTOCOL'] === 'HTTP/1.1')[m
[32m+[m			[32m{[m
[32m+[m				[32m$code = ($_SERVER['REQUEST_METHOD'] !== 'GET')[m
[32m+[m					[32m? 303	// reference: http://en.wikipedia.org/wiki/Post/Redirect/Get[m
[32m+[m					[32m: 307;[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$code = 302;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mswitch ($method)[m
[32m+[m		[32m{[m
[32m+[m			[32mcase 'refresh':[m
[32m+[m				[32mheader('Refresh:0;url='.$uri);[m
[32m+[m				[32mbreak;[m
[32m+[m			[32mdefault:[m
[32m+[m				[32mheader('Location: '.$uri, TRUE, $code);[m
[32m+[m				[32mbreak;[m
[32m+[m		[32m}[m
[32m+[m		[32mexit;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/helpers/xml_helper.php b/system/helpers/xml_helper.php[m
[1mnew file mode 100644[m
[1mindex 0000000..68fb9d7[m
[1m--- /dev/null[m
[1m+++ b/system/helpers/xml_helper.php[m
[36m@@ -0,0 +1,90 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter XML Helpers[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Helpers[m
[32m+[m[32m * @category	Helpers[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/helpers/xml_helper.html[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mif ( ! function_exists('xml_convert'))[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Convert Reserved XML characters to Entities[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	bool[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mfunction xml_convert($str, $protect_all = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$temp = '__TEMP_AMPERSANDS__';[m
[32m+[m
[32m+[m		[32m// Replace entities to temporary markers so that[m
[32m+[m		[32m// ampersands won't get messed up[m
[32m+[m		[32m$str = preg_replace('/&#(\d+);/', $temp.'\\1;', $str);[m
[32m+[m
[32m+[m		[32mif ($protect_all === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$str = preg_replace('/&(\w+);/', $temp.'\\1;', $str);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$str = str_replace([m
[32m+[m			[32marray('&', '<', '>', '"', "'", '-'),[m
[32m+[m			[32marray('&amp;', '&lt;', '&gt;', '&quot;', '&apos;', '&#45;'),[m
[32m+[m			[32m$str[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32m// Decode the temp markers back to entities[m
[32m+[m		[32m$str = preg_replace('/'.$temp.'(\d+);/', '&#\\1;', $str);[m
[32m+[m
[32m+[m		[32mif ($protect_all === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn preg_replace('/'.$temp.'(\w+);/', '&\\1;', $str);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $str;[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/index.html b/system/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/system/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/system/language/english/calendar_lang.php b/system/language/english/calendar_lang.php[m
[1mnew file mode 100644[m
[1mindex 0000000..e8d673d[m
[1m--- /dev/null[m
[1m+++ b/system/language/english/calendar_lang.php[m
[36m@@ -0,0 +1,84 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m$lang['cal_su'] = 'Su';[m
[32m+[m[32m$lang['cal_mo'] = 'Mo';[m
[32m+[m[32m$lang['cal_tu'] = 'Tu';[m
[32m+[m[32m$lang['cal_we'] = 'We';[m
[32m+[m[32m$lang['cal_th'] = 'Th';[m
[32m+[m[32m$lang['cal_fr'] = 'Fr';[m
[32m+[m[32m$lang['cal_sa'] = 'Sa';[m
[32m+[m[32m$lang['cal_sun'] = 'Sun';[m
[32m+[m[32m$lang['cal_mon'] = 'Mon';[m
[32m+[m[32m$lang['cal_tue'] = 'Tue';[m
[32m+[m[32m$lang['cal_wed'] = 'Wed';[m
[32m+[m[32m$lang['cal_thu'] = 'Thu';[m
[32m+[m[32m$lang['cal_fri'] = 'Fri';[m
[32m+[m[32m$lang['cal_sat'] = 'Sat';[m
[32m+[m[32m$lang['cal_sunday'] = 'Sunday';[m
[32m+[m[32m$lang['cal_monday'] = 'Monday';[m
[32m+[m[32m$lang['cal_tuesday'] = 'Tuesday';[m
[32m+[m[32m$lang['cal_wednesday'] = 'Wednesday';[m
[32m+[m[32m$lang['cal_thursday'] = 'Thursday';[m
[32m+[m[32m$lang['cal_friday'] = 'Friday';[m
[32m+[m[32m$lang['cal_saturday'] = 'Saturday';[m
[32m+[m[32m$lang['cal_jan'] = 'Jan';[m
[32m+[m[32m$lang['cal_feb'] = 'Feb';[m
[32m+[m[32m$lang['cal_mar'] = 'Mar';[m
[32m+[m[32m$lang['cal_apr'] = 'Apr';[m
[32m+[m[32m$lang['cal_may'] = 'May';[m
[32m+[m[32m$lang['cal_jun'] = 'Jun';[m
[32m+[m[32m$lang['cal_jul'] = 'Jul';[m
[32m+[m[32m$lang['cal_aug'] = 'Aug';[m
[32m+[m[32m$lang['cal_sep'] = 'Sep';[m
[32m+[m[32m$lang['cal_oct'] = 'Oct';[m
[32m+[m[32m$lang['cal_nov'] = 'Nov';[m
[32m+[m[32m$lang['cal_dec'] = 'Dec';[m
[32m+[m[32m$lang['cal_january'] = 'January';[m
[32m+[m[32m$lang['cal_february'] = 'February';[m
[32m+[m[32m$lang['cal_march'] = 'March';[m
[32m+[m[32m$lang['cal_april'] = 'April';[m
[32m+[m[32m$lang['cal_mayl'] = 'May';[m
[32m+[m[32m$lang['cal_june'] = 'June';[m
[32m+[m[32m$lang['cal_july'] = 'July';[m
[32m+[m[32m$lang['cal_august'] = 'August';[m
[32m+[m[32m$lang['cal_september'] = 'September';[m
[32m+[m[32m$lang['cal_october'] = 'October';[m
[32m+[m[32m$lang['cal_november'] = 'November';[m
[32m+[m[32m$lang['cal_december'] = 'December';[m
[1mdiff --git a/system/language/english/date_lang.php b/system/language/english/date_lang.php[m
[1mnew file mode 100644[m
[1mindex 0000000..52bedb5[m
[1m--- /dev/null[m
[1m+++ b/system/language/english/date_lang.php[m
[36m@@ -0,0 +1,94 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m$lang['date_year'] = 'Year';[m
[32m+[m[32m$lang['date_years'] = 'Years';[m
[32m+[m[32m$lang['date_month'] = 'Month';[m
[32m+[m[32m$lang['date_months'] = 'Months';[m
[32m+[m[32m$lang['date_week'] = 'Week';[m
[32m+[m[32m$lang['date_weeks'] = 'Weeks';[m
[32m+[m[32m$lang['date_day'] = 'Day';[m
[32m+[m[32m$lang['date_days'] = 'Days';[m
[32m+[m[32m$lang['date_hour'] = 'Hour';[m
[32m+[m[32m$lang['date_hours'] = 'Hours';[m
[32m+[m[32m$lang['date_minute'] = 'Minute';[m
[32m+[m[32m$lang['date_minutes'] = 'Minutes';[m
[32m+[m[32m$lang['date_second'] = 'Second';[m
[32m+[m[32m$lang['date_seconds'] = 'Seconds';[m
[32m+[m
[32m+[m[32m$lang['UM12']	= '(UTC -12:00) Baker/Howland Island';[m
[32m+[m[32m$lang['UM11']	= '(UTC -11:00) Niue';[m
[32m+[m[32m$lang['UM10']	= '(UTC -10:00) Hawaii-Aleutian Standard Time, Cook Islands, Tahiti';[m
[32m+[m[32m$lang['UM95']	= '(UTC -9:30) Marquesas Islands';[m
[32m+[m[32m$lang['UM9']	= '(UTC -9:00) Alaska Standard Time, Gambier Islands';[m
[32m+[m[32m$lang['UM8']	= '(UTC -8:00) Pacific Standard Time, Clipperton Island';[m
[32m+[m[32m$lang['UM7']	= '(UTC -7:00) Mountain Standard Time';[m
[32m+[m[32m$lang['UM6']	= '(UTC -6:00) Central Standard Time';[m
[32m+[m[32m$lang['UM5']	= '(UTC -5:00) Eastern Standard Time, Western Caribbean Standard Time';[m
[32m+[m[32m$lang['UM45']	= '(UTC -4:30) Venezuelan Standard Time';[m
[32m+[m[32m$lang['UM4']	= '(UTC -4:00) Atlantic Standard Time, Eastern Caribbean Standard Time';[m
[32m+[m[32m$lang['UM35']	= '(UTC -3:30) Newfoundland Standard Time';[m
[32m+[m[32m$lang['UM3']	= '(UTC -3:00) Argentina, Brazil, French Guiana, Uruguay';[m
[32m+[m[32m$lang['UM2']	= '(UTC -2:00) South Georgia/South Sandwich Islands';[m
[32m+[m[32m$lang['UM1']	= '(UTC -1:00) Azores, Cape Verde Islands';[m
[32m+[m[32m$lang['UTC']	= '(UTC) Greenwich Mean Time, Western European Time';[m
[32m+[m[32m$lang['UP1']	= '(UTC +1:00) Central European Time, West Africa Time';[m
[32m+[m[32m$lang['UP2']	= '(UTC +2:00) Central Africa Time, Eastern European Time, Kaliningrad Time';[m
[32m+[m[32m$lang['UP3']	= '(UTC +3:00) Moscow Time, East Africa Time, Arabia Standard Time';[m
[32m+[m[32m$lang['UP35']	= '(UTC +3:30) Iran Standard Time';[m
[32m+[m[32m$lang['UP4']	= '(UTC +4:00) Azerbaijan Standard Time, Samara Time';[m
[32m+[m[32m$lang['UP45']	= '(UTC +4:30) Afghanistan';[m
[32m+[m[32m$lang['UP5']	= '(UTC +5:00) Pakistan Standard Time, Yekaterinburg Time';[m
[32m+[m[32m$lang['UP55']	= '(UTC +5:30) Indian Standard Time, Sri Lanka Time';[m
[32m+[m[32m$lang['UP575']	= '(UTC +5:45) Nepal Time';[m
[32m+[m[32m$lang['UP6']	= '(UTC +6:00) Bangladesh Standard Time, Bhutan Time, Omsk Time';[m
[32m+[m[32m$lang['UP65']	= '(UTC +6:30) Cocos Islands, Myanmar';[m
[32m+[m[32m$lang['UP7']	= '(UTC +7:00) Krasnoyarsk Time, Cambodia, Laos, Thailand, Vietnam';[m
[32m+[m[32m$lang['UP8']	= '(UTC +8:00) Australian Western Standard Time, Beijing Time, Irkutsk Time';[m
[32m+[m[32m$lang['UP875']	= '(UTC +8:45) Australian Central Western Standard Time';[m
[32m+[m[32m$lang['UP9']	= '(UTC +9:00) Japan Standard Time, Korea Standard Time, Yakutsk Time';[m
[32m+[m[32m$lang['UP95']	= '(UTC +9:30) Australian Central Standard Time';[m
[32m+[m[32m$lang['UP10']	= '(UTC +10:00) Australian Eastern Standard Time, Vladivostok Time';[m
[32m+[m[32m$lang['UP105']	= '(UTC +10:30) Lord Howe Island';[m
[32m+[m[32m$lang['UP11']	= '(UTC +11:00) Srednekolymsk Time, Solomon Islands, Vanuatu';[m
[32m+[m[32m$lang['UP115']	= '(UTC +11:30) Norfolk Island';[m
[32m+[m[32m$lang['UP12']	= '(UTC +12:00) Fiji, Gilbert Islands, Kamchatka Time, New Zealand Standard Time';[m
[32m+[m[32m$lang['UP1275']	= '(UTC +12:45) Chatham Islands Standard Time';[m
[32m+[m[32m$lang['UP13']	= '(UTC +13:00) Samoa Time Zone, Phoenix Islands Time, Tonga';[m
[32m+[m[32m$lang['UP14']	= '(UTC +14:00) Line Islands';[m
[1mdiff --git a/system/language/english/db_lang.php b/system/language/english/db_lang.php[m
[1mnew file mode 100644[m
[1mindex 0000000..d04c492[m
[1m--- /dev/null[m
[1m+++ b/system/language/english/db_lang.php[m
[36m@@ -0,0 +1,63 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m$lang['db_invalid_connection_str'] = 'Unable to determine the database settings based on the connection string you submitted.';[m
[32m+[m[32m$lang['db_unable_to_connect'] = 'Unable to connect to your database server using the provided settings.';[m
[32m+[m[32m$lang['db_unable_to_select'] = 'Unable to select the specified database: %s';[m
[32m+[m[32m$lang['db_unable_to_create'] = 'Unable to create the specified database: %s';[m
[32m+[m[32m$lang['db_invalid_query'] = 'The query you submitted is not valid.';[m
[32m+[m[32m$lang['db_must_set_table'] = 'You must set the database table to be used with your query.';[m
[32m+[m[32m$lang['db_must_use_set'] = 'You must use the "set" method to update an entry.';[m
[32m+[m[32m$lang['db_must_use_index'] = 'You must specify an index to match on for batch updates.';[m
[32m+[m[32m$lang['db_batch_missing_index'] = 'One or more rows submitted for batch updating is missing the specified index.';[m
[32m+[m[32m$lang['db_must_use_where'] = 'Updates are not allowed unless they contain a "where" clause.';[m
[32m+[m[32m$lang['db_del_must_use_where'] = 'Deletes are not allowed unless they contain a "where" or "like" clause.';[m
[32m+[m[32m$lang['db_field_param_missing'] = 'To fetch fields requires the name of the table as a parameter.';[m
[32m+[m[32m$lang['db_unsupported_function'] = 'This feature is not available for the database you are using.';[m
[32m+[m[32m$lang['db_transaction_failure'] = 'Transaction failure: Rollback performed.';[m
[32m+[m[32m$lang['db_unable_to_drop'] = 'Unable to drop the specified database.';[m
[32m+[m[32m$lang['db_unsupported_feature'] = 'Unsupported feature of the database platform you are using.';[m
[32m+[m[32m$lang['db_unsupported_compression'] = 'The file compression format you chose is not supported by your server.';[m
[32m+[m[32m$lang['db_filepath_error'] = 'Unable to write data to the file path you have submitted.';[m
[32m+[m[32m$lang['db_invalid_cache_path'] = 'The cache path you submitted is not valid or writable.';[m
[32m+[m[32m$lang['db_table_name_required'] = 'A table name is required for that operation.';[m
[32m+[m[32m$lang['db_column_name_required'] = 'A column name is required for that operation.';[m
[32m+[m[32m$lang['db_column_definition_required'] = 'A column definition is required for that operation.';[m
[32m+[m[32m$lang['db_unable_to_set_charset'] = 'Unable to set client connection character set: %s';[m
[32m+[m[32m$lang['db_error_heading'] = 'A Database Error Occurred';[m
[1mdiff --git a/system/language/english/email_lang.php b/system/language/english/email_lang.php[m
[1mnew file mode 100644[m
[1mindex 0000000..56589e0[m
[1m--- /dev/null[m
[1m+++ b/system/language/english/email_lang.php[m
[36m@@ -0,0 +1,58 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m$lang['email_must_be_array'] = 'The email validation method must be passed an array.';[m
[32m+[m[32m$lang['email_invalid_address'] = 'Invalid email address: %s';[m
[32m+[m[32m$lang['email_attachment_missing'] = 'Unable to locate the following email attachment: %s';[m
[32m+[m[32m$lang['email_attachment_unreadable'] = 'Unable to open this attachment: %s';[m
[32m+[m[32m$lang['email_no_from'] = 'Cannot send mail with no "From" header.';[m
[32m+[m[32m$lang['email_no_recipients'] = 'You must include recipients: To, Cc, or Bcc';[m
[32m+[m[32m$lang['email_send_failure_phpmail'] = 'Unable to send email using PHP mail(). Your server might not be configured to send mail using this method.';[m
[32m+[m[32m$lang['email_send_failure_sendmail'] = 'Unable to send email using PHP Sendmail. Your server might not be configured to send mail using this method.';[m
[32m+[m[32m$lang['email_send_failure_smtp'] = 'Unable to send email using PHP SMTP. Your server might not be configured to send mail using this method.';[m
[32m+[m[32m$lang['email_sent'] = 'Your message has been successfully sent using the following protocol: %s';[m
[32m+[m[32m$lang['email_no_socket'] = 'Unable to open a socket to Sendmail. Please check settings.';[m
[32m+[m[32m$lang['email_no_hostname'] = 'You did not specify a SMTP hostname.';[m
[32m+[m[32m$lang['email_smtp_error'] = 'The following SMTP error was encountered: %s';[m
[32m+[m[32m$lang['email_no_smtp_unpw'] = 'Error: You must assign a SMTP username and password.';[m
[32m+[m[32m$lang['email_failed_smtp_login'] = 'Failed to send AUTH LOGIN command. Error: %s';[m
[32m+[m[32m$lang['email_smtp_auth_un'] = 'Failed to authenticate username. Error: %s';[m
[32m+[m[32m$lang['email_smtp_auth_pw'] = 'Failed to authenticate password. Error: %s';[m
[32m+[m[32m$lang['email_smtp_data_failure'] = 'Unable to send data: %s';[m
[32m+[m[32m$lang['email_exit_status'] = 'Exit status code: %s';[m
[1mdiff --git a/system/language/english/form_validation_lang.php b/system/language/english/form_validation_lang.php[m
[1mnew file mode 100644[m
[1mindex 0000000..305de37[m
[1m--- /dev/null[m
[1m+++ b/system/language/english/form_validation_lang.php[m
[36m@@ -0,0 +1,68 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m$lang['form_validation_required']		= 'The {field} field is required.';[m
[32m+[m[32m$lang['form_validation_isset']			= 'The {field} field must have a value.';[m
[32m+[m[32m$lang['form_validation_valid_email']		= 'The {field} field must contain a valid email address.';[m
[32m+[m[32m$lang['form_validation_valid_emails']		= 'The {field} field must contain all valid email addresses.';[m
[32m+[m[32m$lang['form_validation_valid_url']		= 'The {field} field must contain a valid URL.';[m
[32m+[m[32m$lang['form_validation_valid_ip']		= 'The {field} field must contain a valid IP.';[m
[32m+[m[32m$lang['form_validation_min_length']		= 'The {field} field must be at least {param} characters in length.';[m
[32m+[m[32m$lang['form_validation_max_length']		= 'The {field} field cannot exceed {param} characters in length.';[m
[32m+[m[32m$lang['form_validation_exact_length']		= 'The {field} field must be exactly {param} characters in length.';[m
[32m+[m[32m$lang['form_validation_alpha']			= 'The {field} field may only contain alphabetical characters.';[m
[32m+[m[32m$lang['form_validation_alpha_numeric']		= 'The {field} field may only contain alpha-numeric characters.';[m
[32m+[m[32m$lang['form_validation_alpha_numeric_spaces']	= 'The {field} field may only contain alpha-numeric characters and spaces.';[m
[32m+[m[32m$lang['form_validation_alpha_dash']		= 'The {field} field may only contain alpha-numeric characters, underscores, and dashes.';[m
[32m+[m[32m$lang['form_validation_numeric']		= 'The {field} field must contain only numbers.';[m
[32m+[m[32m$lang['form_validation_is_numeric']		= 'The {field} field must contain only numeric characters.';[m
[32m+[m[32m$lang['form_validation_integer']		= 'The {field} field must contain an integer.';[m
[32m+[m[32m$lang['form_validation_regex_match']		= 'The {field} field is not in the correct format.';[m
[32m+[m[32m$lang['form_validation_matches']		= 'The {field} field does not match the {param} field.';[m
[32m+[m[32m$lang['form_validation_differs']		= 'The {field} field must differ from the {param} field.';[m
[32m+[m[32m$lang['form_validation_is_unique'] 		= 'The {field} field must contain a unique value.';[m
[32m+[m[32m$lang['form_validation_is_natural']		= 'The {field} field must only contain digits.';[m
[32m+[m[32m$lang['form_validation_is_natural_no_zero']	= 'The {field} field must only contain digits and must be greater than zero.';[m
[32m+[m[32m$lang['form_validation_decimal']		= 'The {field} field must contain a decimal number.';[m
[32m+[m[32m$lang['form_validation_less_than']		= 'The {field} field must contain a number less than {param}.';[m
[32m+[m[32m$lang['form_validation_less_than_equal_to']	= 'The {field} field must contain a number less than or equal to {param}.';[m
[32m+[m[32m$lang['form_validation_greater_than']		= 'The {field} field must contain a number greater than {param}.';[m
[32m+[m[32m$lang['form_validation_greater_than_equal_to']	= 'The {field} field must contain a number greater than or equal to {param}.';[m
[32m+[m[32m$lang['form_validation_error_message_not_set']	= 'Unable to access an error message corresponding to your field name {field}.';[m
[32m+[m[32m$lang['form_validation_in_list']		= 'The {field} field must be one of: {param}.';[m
[1mdiff --git a/system/language/english/ftp_lang.php b/system/language/english/ftp_lang.php[m
[1mnew file mode 100644[m
[1mindex 0000000..5345018[m
[1m--- /dev/null[m
[1m+++ b/system/language/english/ftp_lang.php[m
[36m@@ -0,0 +1,51 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m$lang['ftp_no_connection']		= 'Unable to locate a valid connection ID. Please make sure you are connected before performing any file routines.';[m
[32m+[m[32m$lang['ftp_unable_to_connect']		= 'Unable to connect to your FTP server using the supplied hostname.';[m
[32m+[m[32m$lang['ftp_unable_to_login']		= 'Unable to login to your FTP server. Please check your username and password.';[m
[32m+[m[32m$lang['ftp_unable_to_mkdir']		= 'Unable to create the directory you have specified.';[m
[32m+[m[32m$lang['ftp_unable_to_changedir']	= 'Unable to change directories.';[m
[32m+[m[32m$lang['ftp_unable_to_chmod']		= 'Unable to set file permissions. Please check your path.';[m
[32m+[m[32m$lang['ftp_unable_to_upload']		= 'Unable to upload the specified file. Please check your path.';[m
[32m+[m[32m$lang['ftp_unable_to_download']		= 'Unable to download the specified file. Please check your path.';[m
[32m+[m[32m$lang['ftp_no_source_file']		= 'Unable to locate the source file. Please check your path.';[m
[32m+[m[32m$lang['ftp_unable_to_rename']		= 'Unable to rename the file.';[m
[32m+[m[32m$lang['ftp_unable_to_delete']		= 'Unable to delete the file.';[m
[32m+[m[32m$lang['ftp_unable_to_move']		= 'Unable to move the file. Please make sure the destination directory exists.';[m
[1mdiff --git a/system/language/english/imglib_lang.php b/system/language/english/imglib_lang.php[m
[1mnew file mode 100644[m
[1mindex 0000000..976006e[m
[1m--- /dev/null[m
[1m+++ b/system/language/english/imglib_lang.php[m
[36m@@ -0,0 +1,57 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m$lang['imglib_source_image_required'] = 'You must specify a source image in your preferences.';[m
[32m+[m[32m$lang['imglib_gd_required'] = 'The GD image library is required for this feature.';[m
[32m+[m[32m$lang['imglib_gd_required_for_props'] = 'Your server must support the GD image library in order to determine the image properties.';[m
[32m+[m[32m$lang['imglib_unsupported_imagecreate'] = 'Your server does not support the GD function required to process this type of image.';[m
[32m+[m[32m$lang['imglib_gif_not_supported'] = 'GIF images are often not supported due to licensing restrictions. You may have to use JPG or PNG images instead.';[m
[32m+[m[32m$lang['imglib_jpg_not_supported'] = 'JPG images are not supported.';[m
[32m+[m[32m$lang['imglib_png_not_supported'] = 'PNG images are not supported.';[m
[32m+[m[32m$lang['imglib_jpg_or_png_required'] = 'The image resize protocol specified in your preferences only works with JPEG or PNG image types.';[m
[32m+[m[32m$lang['imglib_copy_error'] = 'An error was encountered while attempting to replace the file. Please make sure your file directory is writable.';[m
[32m+[m[32m$lang['imglib_rotate_unsupported'] = 'Image rotation does not appear to be supported by your server.';[m
[32m+[m[32m$lang['imglib_libpath_invalid'] = 'The path to your image library is not correct. Please set the correct path in your image preferences.';[m
[32m+[m[32m$lang['imglib_image_process_failed'] = 'Image processing failed. Please verify that your server supports the chosen protocol and that the path to your image library is correct.';[m
[32m+[m[32m$lang['imglib_rotation_angle_required'] = 'An angle of rotation is required to rotate the image.';[m
[32m+[m[32m$lang['imglib_invalid_path'] = 'The path to the image is not correct.';[m
[32m+[m[32m$lang['imglib_invalid_image'] = 'The provided image is not valid.';[m
[32m+[m[32m$lang['imglib_copy_failed'] = 'The image copy routine failed.';[m
[32m+[m[32m$lang['imglib_missing_font'] = 'Unable to find a font to use.';[m
[32m+[m[32m$lang['imglib_save_failed'] = 'Unable to save the image. Please make sure the image and file directory are writable.';[m
[1mdiff --git a/system/language/english/index.html b/system/language/english/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/system/language/english/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/system/language/english/migration_lang.php b/system/language/english/migration_lang.php[m
[1mnew file mode 100644[m
[1mindex 0000000..68f431b[m
[1m--- /dev/null[m
[1m+++ b/system/language/english/migration_lang.php[m
[36m@@ -0,0 +1,47 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m$lang['migration_none_found'] = 'No migrations were found.';[m
[32m+[m[32m$lang['migration_not_found'] = 'No migration could be found with the version number: %s.';[m
[32m+[m[32m$lang['migration_sequence_gap'] = 'There is a gap in the migration sequence near version number: %s.';[m
[32m+[m[32m$lang['migration_multiple_version'] = 'There are multiple migrations with the same version number: %s.';[m
[32m+[m[32m$lang['migration_class_doesnt_exist'] = 'The migration class "%s" could not be found.';[m
[32m+[m[32m$lang['migration_missing_up_method'] = 'The migration class "%s" is missing an "up" method.';[m
[32m+[m[32m$lang['migration_missing_down_method'] = 'The migration class "%s" is missing a "down" method.';[m
[32m+[m[32m$lang['migration_invalid_filename'] = 'Migration "%s" has an invalid filename.';[m
[1mdiff --git a/system/language/english/number_lang.php b/system/language/english/number_lang.php[m
[1mnew file mode 100644[m
[1mindex 0000000..85e5816[m
[1m--- /dev/null[m
[1m+++ b/system/language/english/number_lang.php[m
[36m@@ -0,0 +1,44 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m$lang['terabyte_abbr'] = 'TB';[m
[32m+[m[32m$lang['gigabyte_abbr'] = 'GB';[m
[32m+[m[32m$lang['megabyte_abbr'] = 'MB';[m
[32m+[m[32m$lang['kilobyte_abbr'] = 'KB';[m
[32m+[m[32m$lang['bytes'] = 'Bytes';[m
[1mdiff --git a/system/language/english/pagination_lang.php b/system/language/english/pagination_lang.php[m
[1mnew file mode 100644[m
[1mindex 0000000..7ea4449[m
[1m--- /dev/null[m
[1m+++ b/system/language/english/pagination_lang.php[m
[36m@@ -0,0 +1,43 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m$lang['pagination_first_link'] = '&lsaquo; First';[m
[32m+[m[32m$lang['pagination_next_link'] = '&gt;';[m
[32m+[m[32m$lang['pagination_prev_link'] = '&lt;';[m
[32m+[m[32m$lang['pagination_last_link'] = 'Last &rsaquo;';[m
[1mdiff --git a/system/language/english/profiler_lang.php b/system/language/english/profiler_lang.php[m
[1mnew file mode 100644[m
[1mindex 0000000..f0de6a7[m
[1m--- /dev/null[m
[1m+++ b/system/language/english/profiler_lang.php[m
[36m@@ -0,0 +1,60 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m$lang['profiler_database'] = 'DATABASE';[m
[32m+[m[32m$lang['profiler_controller_info'] = 'CLASS/METHOD';[m
[32m+[m[32m$lang['profiler_benchmarks'] = 'BENCHMARKS';[m
[32m+[m[32m$lang['profiler_queries'] = 'QUERIES';[m
[32m+[m[32m$lang['profiler_get_data'] = 'GET DATA';[m
[32m+[m[32m$lang['profiler_post_data'] = 'POST DATA';[m
[32m+[m[32m$lang['profiler_uri_string'] = 'URI STRING';[m
[32m+[m[32m$lang['profiler_memory_usage'] = 'MEMORY USAGE';[m
[32m+[m[32m$lang['profiler_config'] = 'CONFIG VARIABLES';[m
[32m+[m[32m$lang['profiler_session_data'] = 'SESSION DATA';[m
[32m+[m[32m$lang['profiler_headers'] = 'HTTP HEADERS';[m
[32m+[m[32m$lang['profiler_no_db'] = 'Database driver is not currently loaded';[m
[32m+[m[32m$lang['profiler_no_queries'] = 'No queries were run';[m
[32m+[m[32m$lang['profiler_no_post'] = 'No POST data exists';[m
[32m+[m[32m$lang['profiler_no_get'] = 'No GET data exists';[m
[32m+[m[32m$lang['profiler_no_uri'] = 'No URI data exists';[m
[32m+[m[32m$lang['profiler_no_memory'] = 'Memory Usage Unavailable';[m
[32m+[m[32m$lang['profiler_no_profiles'] = 'No Profile data - all Profiler sections have been disabled.';[m
[32m+[m[32m$lang['profiler_section_hide'] = 'Hide';[m
[32m+[m[32m$lang['profiler_section_show'] = 'Show';[m
[32m+[m[32m$lang['profiler_seconds'] = 'seconds';[m
[1mdiff --git a/system/language/english/unit_test_lang.php b/system/language/english/unit_test_lang.php[m
[1mnew file mode 100644[m
[1mindex 0000000..4fccc5f[m
[1m--- /dev/null[m
[1m+++ b/system/language/english/unit_test_lang.php[m
[36m@@ -0,0 +1,58 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m$lang['ut_test_name'] = 'Test Name';[m
[32m+[m[32m$lang['ut_test_datatype'] = 'Test Datatype';[m
[32m+[m[32m$lang['ut_res_datatype'] = 'Expected Datatype';[m
[32m+[m[32m$lang['ut_result'] = 'Result';[m
[32m+[m[32m$lang['ut_undefined'] = 'Undefined Test Name';[m
[32m+[m[32m$lang['ut_file'] = 'File Name';[m
[32m+[m[32m$lang['ut_line'] = 'Line Number';[m
[32m+[m[32m$lang['ut_passed'] = 'Passed';[m
[32m+[m[32m$lang['ut_failed'] = 'Failed';[m
[32m+[m[32m$lang['ut_boolean'] = 'Boolean';[m
[32m+[m[32m$lang['ut_integer'] = 'Integer';[m
[32m+[m[32m$lang['ut_float'] = 'Float';[m
[32m+[m[32m$lang['ut_double'] = 'Float'; // can be the same as float[m
[32m+[m[32m$lang['ut_string'] = 'String';[m
[32m+[m[32m$lang['ut_array'] = 'Array';[m
[32m+[m[32m$lang['ut_object'] = 'Object';[m
[32m+[m[32m$lang['ut_resource'] = 'Resource';[m
[32m+[m[32m$lang['ut_null'] = 'Null';[m
[32m+[m[32m$lang['ut_notes'] = 'Notes';[m
[1mdiff --git a/system/language/english/upload_lang.php b/system/language/english/upload_lang.php[m
[1mnew file mode 100644[m
[1mindex 0000000..b301c99[m
[1m--- /dev/null[m
[1m+++ b/system/language/english/upload_lang.php[m
[36m@@ -0,0 +1,55 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m$lang['upload_userfile_not_set'] = 'Unable to find a post variable called userfile.';[m
[32m+[m[32m$lang['upload_file_exceeds_limit'] = 'The uploaded file exceeds the maximum allowed size in your PHP configuration file.';[m
[32m+[m[32m$lang['upload_file_exceeds_form_limit'] = 'The uploaded file exceeds the maximum size allowed by the submission form.';[m
[32m+[m[32m$lang['upload_file_partial'] = 'The file was only partially uploaded.';[m
[32m+[m[32m$lang['upload_no_temp_directory'] = 'The temporary folder is missing.';[m
[32m+[m[32m$lang['upload_unable_to_write_file'] = 'The file could not be written to disk.';[m
[32m+[m[32m$lang['upload_stopped_by_extension'] = 'The file upload was stopped by extension.';[m
[32m+[m[32m$lang['upload_no_file_selected'] = 'You did not select a file to upload.';[m
[32m+[m[32m$lang['upload_invalid_filetype'] = 'The filetype you are attempting to upload is not allowed.';[m
[32m+[m[32m$lang['upload_invalid_filesize'] = 'The file you are attempting to upload is larger than the permitted size.';[m
[32m+[m[32m$lang['upload_invalid_dimensions'] = 'The image you are attempting to upload doesn\'t fit into the allowed dimensions.';[m
[32m+[m[32m$lang['upload_destination_error'] = 'A problem was encountered while attempting to move the uploaded file to the final destination.';[m
[32m+[m[32m$lang['upload_no_filepath'] = 'The upload path does not appear to be valid.';[m
[32m+[m[32m$lang['upload_no_file_types'] = 'You have not specified any allowed file types.';[m
[32m+[m[32m$lang['upload_bad_filename'] = 'The file name you submitted already exists on the server.';[m
[32m+[m[32m$lang['upload_not_writable'] = 'The upload destination folder does not appear to be writable.';[m
[1mdiff --git a/system/language/index.html b/system/language/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/system/language/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/system/libraries/Cache/Cache.php b/system/libraries/Cache/Cache.php[m
[1mnew file mode 100644[m
[1mindex 0000000..f13c024[m
[1m--- /dev/null[m
[1m+++ b/system/libraries/Cache/Cache.php[m
[36m@@ -0,0 +1,255 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 2.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter Caching Class[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Libraries[m
[32m+[m[32m * @category	Core[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_Cache extends CI_Driver_Library {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Valid cache drivers[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $valid_drivers = array([m
[32m+[m		[32m'apc',[m
[32m+[m		[32m'dummy',[m
[32m+[m		[32m'file',[m
[32m+[m		[32m'memcached',[m
[32m+[m		[32m'redis',[m
[32m+[m		[32m'wincache'[m
[32m+[m	[32m);[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Path of cache files (if file-based cache)[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_cache_path = NULL;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Reference to the driver[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_adapter = 'dummy';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fallback driver[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_backup_driver = 'dummy';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Cache key prefix[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $key_prefix = '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * Initialize class properties based on the configuration array.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$config = array()[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct($config = array())[m
[32m+[m	[32m{[m
[32m+[m		[32misset($config['adapter']) && $this->_adapter = $config['adapter'];[m
[32m+[m		[32misset($config['backup']) && $this->_backup_driver = $config['backup'];[m
[32m+[m		[32misset($config['key_prefix']) && $this->key_prefix = $config['key_prefix'];[m
[32m+[m
[32m+[m		[32m// If the specified adapter isn't available, check the backup.[m
[32m+[m		[32mif ( ! $this->is_supported($this->_adapter))[m
[32m+[m		[32m{[m
[32m+[m			[32mif ( ! $this->is_supported($this->_backup_driver))[m
[32m+[m			[32m{[m
[32m+[m				[32m// Backup isn't supported either. Default to 'Dummy' driver.[m
[32m+[m				[32mlog_message('error', 'Cache adapter "'.$this->_adapter.'" and backup "'.$this->_backup_driver.'" are both unavailable. Cache is now using "Dummy" adapter.');[m
[32m+[m				[32m$this->_adapter = 'dummy';[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m// Backup is supported. Set it to primary.[m
[32m+[m				[32mlog_message('debug', 'Cache adapter "'.$this->_adapter.'" is unavailable. Falling back to "'.$this->_backup_driver.'" backup adapter.');[m
[32m+[m				[32m$this->_adapter = $this->_backup_driver;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get[m
[32m+[m	[32m *[m
[32m+[m	[32m * Look for a value in the cache. If it exists, return the data[m
[32m+[m	[32m * if not, return FALSE[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$id[m
[32m+[m	[32m * @return	mixed	value matching $id or FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get($id)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->{$this->_adapter}->get($this->key_prefix.$id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Cache Save[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$id	Cache ID[m
[32m+[m	[32m * @param	mixed	$data	Data to store[m
[32m+[m	[32m * @param	int	$ttl	Cache TTL (in seconds)[m
[32m+[m	[32m * @param	bool	$raw	Whether to store the raw value[m
[32m+[m	[32m * @return	bool	TRUE on success, FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function save($id, $data, $ttl = 60, $raw = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->{$this->_adapter}->save($this->key_prefix.$id, $data, $ttl, $raw);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Delete from Cache[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$id	Cache ID[m
[32m+[m	[32m * @return	bool	TRUE on success, FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function delete($id)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->{$this->_adapter}->delete($this->key_prefix.$id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Increment a raw value[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$id	Cache ID[m
[32m+[m	[32m * @param	int	$offset	Step/value to add[m
[32m+[m	[32m * @return	mixed	New value on success or FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function increment($id, $offset = 1)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->{$this->_adapter}->increment($this->key_prefix.$id, $offset);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Decrement a raw value[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$id	Cache ID[m
[32m+[m	[32m * @param	int	$offset	Step/value to reduce by[m
[32m+[m	[32m * @return	mixed	New value on success or FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function decrement($id, $offset = 1)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->{$this->_adapter}->decrement($this->key_prefix.$id, $offset);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Clean the cache[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool	TRUE on success, FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function clean()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->{$this->_adapter}->clean();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Cache Info[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$type = 'user'	user/filehits[m
[32m+[m	[32m * @return	mixed	array containing cache info on success OR FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function cache_info($type = 'user')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->{$this->_adapter}->cache_info($type);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get Cache Metadata[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$id	key to get cache metadata on[m
[32m+[m	[32m * @return	mixed	cache item metadata[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get_metadata($id)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->{$this->_adapter}->get_metadata($this->key_prefix.$id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Is the requested driver supported in this environment?[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$driver	The driver to test[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function is_supported($driver)[m
[32m+[m	[32m{[m
[32m+[m		[32mstatic $support;[m
[32m+[m
[32m+[m		[32mif ( ! isset($support, $support[$driver]))[m
[32m+[m		[32m{[m
[32m+[m			[32m$support[$driver] = $this->{$driver}->is_supported();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $support[$driver];[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/libraries/Cache/drivers/Cache_apc.php b/system/libraries/Cache/drivers/Cache_apc.php[m
[1mnew file mode 100644[m
[1mindex 0000000..b42a832[m
[1m--- /dev/null[m
[1m+++ b/system/libraries/Cache/drivers/Cache_apc.php[m
[36m@@ -0,0 +1,217 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 2.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter APC Caching Class[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Libraries[m
[32m+[m[32m * @category	Core[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_Cache_apc extends CI_Driver {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * Only present so that an error message is logged[m
[32m+[m	[32m * if APC is not available.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! $this->is_supported())[m
[32m+[m		[32m{[m
[32m+[m			[32mlog_message('error', 'Cache: Failed to initialize APC; extension not loaded/enabled?');[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get[m
[32m+[m	[32m *[m
[32m+[m	[32m * Look for a value in the cache. If it exists, return the data[m
[32m+[m	[32m * if not, return FALSE[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	mixed	value that is stored/FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get($id)[m
[32m+[m	[32m{[m
[32m+[m		[32m$success = FALSE;[m
[32m+[m		[32m$data = apc_fetch($id, $success);[m
[32m+[m
[32m+[m		[32mreturn ($success === TRUE) ? $data : FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Cache Save[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$id	Cache ID[m
[32m+[m	[32m * @param	mixed	$data	Data to store[m
[32m+[m	[32m * @param	int	$ttl	Length of time (in seconds) to cache the data[m
[32m+[m	[32m * @param	bool	$raw	Whether to store the raw value (unused)[m
[32m+[m	[32m * @return	bool	TRUE on success, FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function save($id, $data, $ttl = 60, $raw = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn apc_store($id, $data, (int) $ttl);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Delete from Cache[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	unique identifier of the item in the cache[m
[32m+[m	[32m * @return	bool	true on success/false on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function delete($id)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn apc_delete($id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Increment a raw value[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$id	Cache ID[m
[32m+[m	[32m * @param	int	$offset	Step/value to add[m
[32m+[m	[32m * @return	mixed	New value on success or FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function increment($id, $offset = 1)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn apc_inc($id, $offset);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Decrement a raw value[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$id	Cache ID[m
[32m+[m	[32m * @param	int	$offset	Step/value to reduce by[m
[32m+[m	[32m * @return	mixed	New value on success or FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function decrement($id, $offset = 1)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn apc_dec($id, $offset);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Clean the cache[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool	false on failure/true on success[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function clean()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn apc_clear_cache('user');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Cache Info[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	user/filehits[m
[32m+[m	[32m * @return	mixed	array on success, false on failure[m
[32m+[m	[32m */[m
[32m+[m	[32m public function cache_info($type = NULL)[m
[32m+[m	[32m {[m
[32m+[m		[32m return apc_cache_info($type);[m
[32m+[m	[32m }[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get Cache Metadata[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	key to get cache metadata on[m
[32m+[m	[32m * @return	mixed	array on success/false on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get_metadata($id)[m
[32m+[m	[32m{[m
[32m+[m		[32m$cache_info = apc_cache_info('user', FALSE);[m
[32m+[m		[32mif (empty($cache_info) OR empty($cache_info['cache_list']))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mforeach ($cache_info['cache_list'] as &$entry)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($entry['info'] !== $id)[m
[32m+[m			[32m{[m
[32m+[m				[32mcontinue;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$success  = FALSE;[m
[32m+[m			[32m$metadata = array([m
[32m+[m				[32m'expire' => ($entry['ttl'] ? $entry['mtime'] + $entry['ttl'] : 0),[m
[32m+[m				[32m'mtime'  => $entry['ttl'],[m
[32m+[m				[32m'data'   => apc_fetch($id, $success)[m
[32m+[m			[32m);[m
[32m+[m
[32m+[m			[32mreturn ($success === TRUE) ? $metadata : FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * is_supported()[m
[32m+[m	[32m *[m
[32m+[m	[32m * Check to see if APC is available on this system, bail if it isn't.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function is_supported()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn (extension_loaded('apc') && ini_get('apc.enabled'));[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/libraries/Cache/drivers/Cache_dummy.php b/system/libraries/Cache/drivers/Cache_dummy.php[m
[1mnew file mode 100644[m
[1mindex 0000000..bbaf96f[m
[1m--- /dev/null[m
[1m+++ b/system/libraries/Cache/drivers/Cache_dummy.php[m
[36m@@ -0,0 +1,172 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 2.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter Dummy Caching Class[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Libraries[m
[32m+[m[32m * @category	Core[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_Cache_dummy extends CI_Driver {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get[m
[32m+[m	[32m *[m
[32m+[m	[32m * Since this is the dummy class, it's always going to return FALSE.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	bool	FALSE[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get($id)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Cache Save[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	Unique Key[m
[32m+[m	[32m * @param	mixed	Data to store[m
[32m+[m	[32m * @param	int	Length of time (in seconds) to cache the data[m
[32m+[m	[32m * @param	bool	Whether to store the raw value[m
[32m+[m	[32m * @return	bool	TRUE, Simulating success[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function save($id, $data, $ttl = 60, $raw = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Delete from Cache[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	unique identifier of the item in the cache[m
[32m+[m	[32m * @return	bool	TRUE, simulating success[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function delete($id)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Increment a raw value[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$id	Cache ID[m
[32m+[m	[32m * @param	int	$offset	Step/value to add[m
[32m+[m	[32m * @return	mixed	New value on success or FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function increment($id, $offset = 1)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Decrement a raw value[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$id	Cache ID[m
[32m+[m	[32m * @param	int	$offset	Step/value to reduce by[m
[32m+[m	[32m * @return	mixed	New value on success or FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function decrement($id, $offset = 1)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Clean the cache[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool	TRUE, simulating success[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function clean()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Cache Info[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	user/filehits[m
[32m+[m	[32m * @return	bool	FALSE[m
[32m+[m	[32m */[m
[32m+[m	[32m public function cache_info($type = NULL)[m
[32m+[m	[32m {[m
[32m+[m		[32m return FALSE;[m
[32m+[m	[32m }[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get Cache Metadata[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	key to get cache metadata on[m
[32m+[m	[32m * @return	bool	FALSE[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get_metadata($id)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Is this caching driver supported on the system?[m
[32m+[m	[32m * Of course this one is.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool	TRUE[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function is_supported()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/libraries/Cache/drivers/Cache_file.php b/system/libraries/Cache/drivers/Cache_file.php[m
[1mnew file mode 100644[m
[1mindex 0000000..4f38303[m
[1m--- /dev/null[m
[1m+++ b/system/libraries/Cache/drivers/Cache_file.php[m
[36m@@ -0,0 +1,286 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 2.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter File Caching Class[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Libraries[m
[32m+[m[32m * @category	Core[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_Cache_file extends CI_Driver {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Directory in which to save cache files[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_cache_path;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Initialize file-based cache[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct()[m
[32m+[m	[32m{[m
[32m+[m		[32m$CI =& get_instance();[m
[32m+[m		[32m$CI->load->helper('file');[m
[32m+[m		[32m$path = $CI->config->item('cache_path');[m
[32m+[m		[32m$this->_cache_path = ($path === '') ? APPPATH.'cache/' : $path;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch from cache[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$id	Cache ID[m
[32m+[m	[32m * @return	mixed	Data on success, FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get($id)[m
[32m+[m	[32m{[m
[32m+[m		[32m$data = $this->_get($id);[m
[32m+[m		[32mreturn is_array($data) ? $data['data'] : FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Save into cache[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$id	Cache ID[m
[32m+[m	[32m * @param	mixed	$data	Data to store[m
[32m+[m	[32m * @param	int	$ttl	Time to live in seconds[m
[32m+[m	[32m * @param	bool	$raw	Whether to store the raw value (unused)[m
[32m+[m	[32m * @return	bool	TRUE on success, FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function save($id, $data, $ttl = 60, $raw = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$contents = array([m
[32m+[m			[32m'time'		=> time(),[m
[32m+[m			[32m'ttl'		=> $ttl,[m
[32m+[m			[32m'data'		=> $data[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32mif (write_file($this->_cache_path.$id, serialize($contents)))[m
[32m+[m		[32m{[m
[32m+[m			[32mchmod($this->_cache_path.$id, 0640);[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Delete from Cache[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	unique identifier of item in cache[m
[32m+[m	[32m * @return	bool	true on success/false on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function delete($id)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn is_file($this->_cache_path.$id) ? unlink($this->_cache_path.$id) : FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Increment a raw value[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$id	Cache ID[m
[32m+[m	[32m * @param	int	$offset	Step/value to add[m
[32m+[m	[32m * @return	New value on success, FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function increment($id, $offset = 1)[m
[32m+[m	[32m{[m
[32m+[m		[32m$data = $this->_get($id);[m
[32m+[m
[32m+[m		[32mif ($data === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$data = array('data' => 0, 'ttl' => 60);[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! is_int($data['data']))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$new_value = $data['data'] + $offset;[m
[32m+[m		[32mreturn $this->save($id, $new_value, $data['ttl'])[m
[32m+[m			[32m? $new_value[m
[32m+[m			[32m: FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Decrement a raw value[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$id	Cache ID[m
[32m+[m	[32m * @param	int	$offset	Step/value to reduce by[m
[32m+[m	[32m * @return	New value on success, FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function decrement($id, $offset = 1)[m
[32m+[m	[32m{[m
[32m+[m		[32m$data = $this->_get($id);[m
[32m+[m
[32m+[m		[32mif ($data === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$data = array('data' => 0, 'ttl' => 60);[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! is_int($data['data']))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$new_value = $data['data'] - $offset;[m
[32m+[m		[32mreturn $this->save($id, $new_value, $data['ttl'])[m
[32m+[m			[32m? $new_value[m
[32m+[m			[32m: FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Clean the Cache[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool	false on failure/true on success[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function clean()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn delete_files($this->_cache_path, FALSE, TRUE);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Cache Info[m
[32m+[m	[32m *[m
[32m+[m	[32m * Not supported by file-based caching[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	user/filehits[m
[32m+[m	[32m * @return	mixed	FALSE[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function cache_info($type = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn get_dir_file_info($this->_cache_path);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get Cache Metadata[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	key to get cache metadata on[m
[32m+[m	[32m * @return	mixed	FALSE on failure, array on success.[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get_metadata($id)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! is_file($this->_cache_path.$id))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$data = unserialize(file_get_contents($this->_cache_path.$id));[m
[32m+[m
[32m+[m		[32mif (is_array($data))[m
[32m+[m		[32m{[m
[32m+[m			[32m$mtime = filemtime($this->_cache_path.$id);[m
[32m+[m
[32m+[m			[32mif ( ! isset($data['ttl'], $data['time']))[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn array([m
[32m+[m				[32m'expire' => $data['time'] + $data['ttl'],[m
[32m+[m				[32m'mtime'	 => $mtime[m
[32m+[m			[32m);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Is supported[m
[32m+[m	[32m *[m
[32m+[m	[32m * In the file driver, check to see that the cache directory is indeed writable[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function is_supported()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn is_really_writable($this->_cache_path);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get all data[m
[32m+[m	[32m *[m
[32m+[m	[32m * Internal method to get all the relevant data about a cache item[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$id	Cache ID[m
[32m+[m	[32m * @return	mixed	Data array on success or FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _get($id)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! is_file($this->_cache_path.$id))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$data = unserialize(file_get_contents($this->_cache_path.$id));[m
[32m+[m
[32m+[m		[32mif ($data['ttl'] > 0 && time() > $data['time'] + $data['ttl'])[m
[32m+[m		[32m{[m
[32m+[m			[32munlink($this->_cache_path.$id);[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $data;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/libraries/Cache/drivers/Cache_memcached.php b/system/libraries/Cache/drivers/Cache_memcached.php[m
[1mnew file mode 100644[m
[1mindex 0000000..9dfee47[m
[1m--- /dev/null[m
[1m+++ b/system/libraries/Cache/drivers/Cache_memcached.php[m
[36m@@ -0,0 +1,313 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 2.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter Memcached Caching Class[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Libraries[m
[32m+[m[32m * @category	Core[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_Cache_memcached extends CI_Driver {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Holds the memcached object[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var object[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_memcached;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Memcached configuration[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_config = array([m
[32m+[m		[32m'default' => array([m
[32m+[m			[32m'host'		=> '127.0.0.1',[m
[32m+[m			[32m'port'		=> 11211,[m
[32m+[m			[32m'weight'	=> 1[m
[32m+[m		[32m)[m
[32m+[m	[32m);[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * Setup Memcache(d)[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct()[m
[32m+[m	[32m{[m
[32m+[m		[32m// Try to load memcached server info from the config file.[m
[32m+[m		[32m$CI =& get_instance();[m
[32m+[m		[32m$defaults = $this->_config['default'];[m
[32m+[m
[32m+[m		[32mif ($CI->config->load('memcached', TRUE, TRUE))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_config = $CI->config->config['memcached'];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (class_exists('Memcached', FALSE))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_memcached = new Memcached();[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (class_exists('Memcache', FALSE))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_memcached = new Memcache();[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32mlog_message('error', 'Cache: Failed to create Memcache(d) object; extension not loaded?');[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mforeach ($this->_config as $cache_server)[m
[32m+[m		[32m{[m
[32m+[m			[32misset($cache_server['hostname']) OR $cache_server['hostname'] = $defaults['host'];[m
[32m+[m			[32misset($cache_server['port']) OR $cache_server['port'] = $defaults['port'];[m
[32m+[m			[32misset($cache_server['weight']) OR $cache_server['weight'] = $defaults['weight'];[m
[32m+[m
[32m+[m			[32mif ($this->_memcached instanceof Memcache)[m
[32m+[m			[32m{[m
[32m+[m				[32m// Third parameter is persistence and defaults to TRUE.[m
[32m+[m				[32m$this->_memcached->addServer([m
[32m+[m					[32m$cache_server['hostname'],[m
[32m+[m					[32m$cache_server['port'],[m
[32m+[m					[32mTRUE,[m
[32m+[m					[32m$cache_server['weight'][m
[32m+[m				[32m);[m
[32m+[m			[32m}[m
[32m+[m			[32melseif ($this->_memcached instanceof Memcached)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_memcached->addServer([m
[32m+[m					[32m$cache_server['hostname'],[m
[32m+[m					[32m$cache_server['port'],[m
[32m+[m					[32m$cache_server['weight'][m
[32m+[m				[32m);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch from cache[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$id	Cache ID[m
[32m+[m	[32m * @return	mixed	Data on success, FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get($id)[m
[32m+[m	[32m{[m
[32m+[m		[32m$data = $this->_memcached->get($id);[m
[32m+[m
[32m+[m		[32mreturn is_array($data) ? $data[0] : $data;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Save[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$id	Cache ID[m
[32m+[m	[32m * @param	mixed	$data	Data being cached[m
[32m+[m	[32m * @param	int	$ttl	Time to live[m
[32m+[m	[32m * @param	bool	$raw	Whether to store the raw value[m
[32m+[m	[32m * @return	bool	TRUE on success, FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function save($id, $data, $ttl = 60, $raw = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($raw !== TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$data = array($data, time(), $ttl);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($this->_memcached instanceof Memcached)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->_memcached->set($id, $data, $ttl);[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($this->_memcached instanceof Memcache)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->_memcached->set($id, $data, 0, $ttl);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Delete from Cache[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	$id	key to be deleted.[m
[32m+[m	[32m * @return	bool	true on success, false on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function delete($id)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_memcached->delete($id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Increment a raw value[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$id	Cache ID[m
[32m+[m	[32m * @param	int	$offset	Step/value to add[m
[32m+[m	[32m * @return	mixed	New value on success or FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function increment($id, $offset = 1)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (($result = $this->_memcached->increment($id, $offset)) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->_memcached->add($id, $offset) ? $offset : FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $result;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Decrement a raw value[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$id	Cache ID[m
[32m+[m	[32m * @param	int	$offset	Step/value to reduce by[m
[32m+[m	[32m * @return	mixed	New value on success or FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function decrement($id, $offset = 1)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (($result = $this->_memcached->decrement($id, $offset)) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->_memcached->add($id, 0) ? 0 : FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $result;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Clean the Cache[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool	false on failure/true on success[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function clean()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_memcached->flush();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Cache Info[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	mixed	array on success, false on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function cache_info()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_memcached->getStats();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get Cache Metadata[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	$id	key to get cache metadata on[m
[32m+[m	[32m * @return	mixed	FALSE on failure, array on success.[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get_metadata($id)[m
[32m+[m	[32m{[m
[32m+[m		[32m$stored = $this->_memcached->get($id);[m
[32m+[m
[32m+[m		[32mif (count($stored) !== 3)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mlist($data, $time, $ttl) = $stored;[m
[32m+[m
[32m+[m		[32mreturn array([m
[32m+[m			[32m'expire'	=> $time + $ttl,[m
[32m+[m			[32m'mtime'		=> $time,[m
[32m+[m			[32m'data'		=> $data[m
[32m+[m		[32m);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Is supported[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns FALSE if memcached is not supported on the system.[m
[32m+[m	[32m * If it is, we setup the memcached object & return TRUE[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function is_supported()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn (extension_loaded('memcached') OR extension_loaded('memcache'));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class destructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * Closes the connection to Memcache(d) if present.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __destruct()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->_memcached instanceof Memcache)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_memcached->close();[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($this->_memcached instanceof Memcached && method_exists($this->_memcached, 'quit'))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_memcached->quit();[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/libraries/Cache/drivers/Cache_redis.php b/system/libraries/Cache/drivers/Cache_redis.php[m
[1mnew file mode 100644[m
[1mindex 0000000..bfd6204[m
[1m--- /dev/null[m
[1m+++ b/system/libraries/Cache/drivers/Cache_redis.php[m
[36m@@ -0,0 +1,328 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter Redis Caching Class[m
[32m+[m[32m *[m
[32m+[m[32m * @package	   CodeIgniter[m
[32m+[m[32m * @subpackage Libraries[m
[32m+[m[32m * @category   Core[m
[32m+[m[32m * @author	   Anton Lindqvist <anton@qvister.se>[m
[32m+[m[32m * @link[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_Cache_redis extends CI_Driver[m
[32m+[m[32m{[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Default config[m
[32m+[m	[32m *[m
[32m+[m	[32m * @static[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected static $_default_config = array([m
[32m+[m		[32m'socket_type' => 'tcp',[m
[32m+[m		[32m'host' => '127.0.0.1',[m
[32m+[m		[32m'password' => NULL,[m
[32m+[m		[32m'port' => 6379,[m
[32m+[m		[32m'timeout' => 0[m
[32m+[m	[32m);[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Redis connection[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	Redis[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_redis;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * An internal cache for storing keys of serialized values.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_serialized = array();[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * Setup Redis[m
[32m+[m	[32m *[m
[32m+[m	[32m * Loads Redis config file if present. Will halt execution[m
[32m+[m	[32m * if a Redis connection can't be established.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m * @see		Redis::connect()[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! $this->is_supported())[m
[32m+[m		[32m{[m
[32m+[m			[32mlog_message('error', 'Cache: Failed to create Redis object; extension not loaded?');[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$CI =& get_instance();[m
[32m+[m
[32m+[m		[32mif ($CI->config->load('redis', TRUE, TRUE))[m
[32m+[m		[32m{[m
[32m+[m			[32m$config = array_merge(self::$_default_config, $CI->config->item('redis'));[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$config = self::$_default_config;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->_redis = new Redis();[m
[32m+[m
[32m+[m		[32mtry[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($config['socket_type'] === 'unix')[m
[32m+[m			[32m{[m
[32m+[m				[32m$success = $this->_redis->connect($config['socket']);[m
[32m+[m			[32m}[m
[32m+[m			[32melse // tcp socket[m
[32m+[m			[32m{[m
[32m+[m				[32m$success = $this->_redis->connect($config['host'], $config['port'], $config['timeout']);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif ( ! $success)[m
[32m+[m			[32m{[m
[32m+[m				[32mlog_message('error', 'Cache: Redis connection failed. Check your configuration.');[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (isset($config['password']) && ! $this->_redis->auth($config['password']))[m
[32m+[m			[32m{[m
[32m+[m				[32mlog_message('error', 'Cache: Redis authentication failed.');[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m		[32mcatch (RedisException $e)[m
[32m+[m		[32m{[m
[32m+[m			[32mlog_message('error', 'Cache: Redis connection refused ('.$e->getMessage().')');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Initialize the index of serialized values.[m
[32m+[m		[32m$serialized = $this->_redis->sMembers('_ci_redis_serialized');[m
[32m+[m		[32mempty($serialized) OR $this->_serialized = array_flip($serialized);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get cache[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$key	Cache ID[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get($key)[m
[32m+[m	[32m{[m
[32m+[m		[32m$value = $this->_redis->get($key);[m
[32m+[m
[32m+[m		[32mif ($value !== FALSE && isset($this->_serialized[$key]))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn unserialize($value);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $value;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Save cache[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$id	Cache ID[m
[32m+[m	[32m * @param	mixed	$data	Data to save[m
[32m+[m	[32m * @param	int	$ttl	Time to live in seconds[m
[32m+[m	[32m * @param	bool	$raw	Whether to store the raw value (unused)[m
[32m+[m	[32m * @return	bool	TRUE on success, FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function save($id, $data, $ttl = 60, $raw = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (is_array($data) OR is_object($data))[m
[32m+[m		[32m{[m
[32m+[m			[32mif ( ! $this->_redis->sIsMember('_ci_redis_serialized', $id) && ! $this->_redis->sAdd('_ci_redis_serialized', $id))[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32misset($this->_serialized[$id]) OR $this->_serialized[$id] = TRUE;[m
[32m+[m			[32m$data = serialize($data);[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (isset($this->_serialized[$id]))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_serialized[$id] = NULL;[m
[32m+[m			[32m$this->_redis->sRemove('_ci_redis_serialized', $id);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->_redis->set($id, $data, $ttl);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Delete from cache[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$key	Cache key[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function delete($key)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->_redis->delete($key) !== 1)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (isset($this->_serialized[$key]))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_serialized[$key] = NULL;[m
[32m+[m			[32m$this->_redis->sRemove('_ci_redis_serialized', $key);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Increment a raw value[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$id	Cache ID[m
[32m+[m	[32m * @param	int	$offset	Step/value to add[m
[32m+[m	[32m * @return	mixed	New value on success or FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function increment($id, $offset = 1)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_redis->incr($id, $offset);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Decrement a raw value[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$id	Cache ID[m
[32m+[m	[32m * @param	int	$offset	Step/value to reduce by[m
[32m+[m	[32m * @return	mixed	New value on success or FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function decrement($id, $offset = 1)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_redis->decr($id, $offset);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Clean cache[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m * @see		Redis::flushDB()[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function clean()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_redis->flushDB();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get cache driver info[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$type	Not supported in Redis.[m
[32m+[m	[32m *				Only included in order to offer a[m
[32m+[m	[32m *				consistent cache API.[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m * @see		Redis::info()[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function cache_info($type = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_redis->info();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get cache metadata[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$key	Cache key[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get_metadata($key)[m
[32m+[m	[32m{[m
[32m+[m		[32m$value = $this->get($key);[m
[32m+[m
[32m+[m		[32mif ($value !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn array([m
[32m+[m				[32m'expire' => time() + $this->_redis->ttl($key),[m
[32m+[m				[32m'data' => $value[m
[32m+[m			[32m);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Check if Redis driver is supported[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function is_supported()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn extension_loaded('redis');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class destructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * Closes the connection to Redis if present.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __destruct()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->_redis)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_redis->close();[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/libraries/Cache/drivers/Cache_wincache.php b/system/libraries/Cache/drivers/Cache_wincache.php[m
[1mnew file mode 100644[m
[1mindex 0000000..b4279bb[m
[1m--- /dev/null[m
[1m+++ b/system/libraries/Cache/drivers/Cache_wincache.php[m
[36m@@ -0,0 +1,217 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter Wincache Caching Class[m
[32m+[m[32m *[m
[32m+[m[32m * Read more about Wincache functions here:[m
[32m+[m[32m * http://www.php.net/manual/en/ref.wincache.php[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Libraries[m
[32m+[m[32m * @category	Core[m
[32m+[m[32m * @author		Mike Murkovic[m
[32m+[m[32m * @link[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_Cache_wincache extends CI_Driver {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * Only present so that an error message is logged[m
[32m+[m	[32m * if APC is not available.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! $this->is_supported())[m
[32m+[m		[32m{[m
[32m+[m			[32mlog_message('error', 'Cache: Failed to initialize Wincache; extension not loaded/enabled?');[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get[m
[32m+[m	[32m *[m
[32m+[m	[32m * Look for a value in the cache. If it exists, return the data,[m
[32m+[m	[32m * if not, return FALSE[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$id	Cache Ide[m
[32m+[m	[32m * @return	mixed	Value that is stored/FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get($id)[m
[32m+[m	[32m{[m
[32m+[m		[32m$success = FALSE;[m
[32m+[m		[32m$data = wincache_ucache_get($id, $success);[m
[32m+[m
[32m+[m		[32m// Success returned by reference from wincache_ucache_get()[m
[32m+[m		[32mreturn ($success) ? $data : FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Cache Save[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$id	Cache ID[m
[32m+[m	[32m * @param	mixed	$data	Data to store[m
[32m+[m	[32m * @param	int	$ttl	Time to live (in seconds)[m
[32m+[m	[32m * @param	bool	$raw	Whether to store the raw value (unused)[m
[32m+[m	[32m * @return	bool	true on success/false on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function save($id, $data, $ttl = 60, $raw = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn wincache_ucache_set($id, $data, $ttl);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Delete from Cache[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	unique identifier of the item in the cache[m
[32m+[m	[32m * @return	bool	true on success/false on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function delete($id)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn wincache_ucache_delete($id);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Increment a raw value[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$id	Cache ID[m
[32m+[m	[32m * @param	int	$offset	Step/value to add[m
[32m+[m	[32m * @return	mixed	New value on success or FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function increment($id, $offset = 1)[m
[32m+[m	[32m{[m
[32m+[m		[32m$success = FALSE;[m
[32m+[m		[32m$value = wincache_ucache_inc($id, $offset, $success);[m
[32m+[m
[32m+[m		[32mreturn ($success === TRUE) ? $value : FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Decrement a raw value[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$id	Cache ID[m
[32m+[m	[32m * @param	int	$offset	Step/value to reduce by[m
[32m+[m	[32m * @return	mixed	New value on success or FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function decrement($id, $offset = 1)[m
[32m+[m	[32m{[m
[32m+[m		[32m$success = FALSE;[m
[32m+[m		[32m$value = wincache_ucache_dec($id, $offset, $success);[m
[32m+[m
[32m+[m		[32mreturn ($success === TRUE) ? $value : FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Clean the cache[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool	false on failure/true on success[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function clean()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn wincache_ucache_clear();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Cache Info[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	mixed	array on success, false on failure[m
[32m+[m	[32m */[m
[32m+[m	[32m public function cache_info()[m
[32m+[m	[32m {[m
[32m+[m		[32m return wincache_ucache_info(TRUE);[m
[32m+[m	[32m }[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get Cache Metadata[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	key to get cache metadata on[m
[32m+[m	[32m * @return	mixed	array on success/false on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get_metadata($id)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($stored = wincache_ucache_info(FALSE, $id))[m
[32m+[m		[32m{[m
[32m+[m			[32m$age = $stored['ucache_entries'][1]['age_seconds'];[m
[32m+[m			[32m$ttl = $stored['ucache_entries'][1]['ttl_seconds'];[m
[32m+[m			[32m$hitcount = $stored['ucache_entries'][1]['hitcount'];[m
[32m+[m
[32m+[m			[32mreturn array([m
[32m+[m				[32m'expire'	=> $ttl - $age,[m
[32m+[m				[32m'hitcount'	=> $hitcount,[m
[32m+[m				[32m'age'		=> $age,[m
[32m+[m				[32m'ttl'		=> $ttl[m
[32m+[m			[32m);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * is_supported()[m
[32m+[m	[32m *[m
[32m+[m	[32m * Check to see if WinCache is available on this system, bail if it isn't.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function is_supported()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn (extension_loaded('wincache') && ini_get('wincache.ucenabled'));[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/libraries/Cache/drivers/index.html b/system/libraries/Cache/drivers/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/system/libraries/Cache/drivers/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/system/libraries/Cache/index.html b/system/libraries/Cache/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/system/libraries/Cache/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/system/libraries/Calendar.php b/system/libraries/Calendar.php[m
[1mnew file mode 100644[m
[1mindex 0000000..450350c[m
[1m--- /dev/null[m
[1m+++ b/system/libraries/Calendar.php[m
[36m@@ -0,0 +1,546 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter Calendar Class[m
[32m+[m[32m *[m
[32m+[m[32m * This class enables the creation of calendars[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Libraries[m
[32m+[m[32m * @category	Libraries[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/libraries/calendar.html[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_Calendar {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Calendar layout template[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $template = '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Replacements array for template[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $replacements = array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Day of the week to start the calendar on[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $start_day = 'sunday';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * How to display months[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $month_type = 'long';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * How to display names of days[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $day_type = 'abr';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Whether to show next/prev month links[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $show_next_prev = FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Url base to use for next/prev month links[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $next_prev_url = '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show days of other months[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $show_other_days = FALSE;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CI Singleton[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var object[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $CI;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * Loads the calendar language file and sets the default time reference.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @uses	CI_Lang::$is_loaded[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$config	Calendar options[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct($config = array())[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->CI =& get_instance();[m
[32m+[m		[32m$this->CI->lang->load('calendar');[m
[32m+[m
[32m+[m		[32mempty($config) OR $this->initialize($config);[m
[32m+[m
[32m+[m		[32mlog_message('info', 'Calendar Class Initialized');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Initialize the user preferences[m
[32m+[m	[32m *[m
[32m+[m	[32m * Accepts an associative array as input, containing display preferences[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	config preferences[m
[32m+[m	[32m * @return	CI_Calendar[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function initialize($config = array())[m
[32m+[m	[32m{[m
[32m+[m		[32mforeach ($config as $key => $val)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (isset($this->$key))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->$key = $val;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Set the next_prev_url to the controller if required but not defined[m
[32m+[m		[32mif ($this->show_next_prev === TRUE && empty($this->next_prev_url))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->next_prev_url = $this->CI->config->site_url($this->CI->router->class.'/'.$this->CI->router->method);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Generate the calendar[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	the year[m
[32m+[m	[32m * @param	int	the month[m
[32m+[m	[32m * @param	array	the data to be shown in the calendar cells[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function generate($year = '', $month = '', $data = array())[m
[32m+[m	[32m{[m
[32m+[m		[32m$local_time = time();[m
[32m+[m
[32m+[m		[32m// Set and validate the supplied month/year[m
[32m+[m		[32mif (empty($year))[m
[32m+[m		[32m{[m
[32m+[m			[32m$year = date('Y', $local_time);[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (strlen($year) === 1)[m
[32m+[m		[32m{[m
[32m+[m			[32m$year = '200'.$year;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (strlen($year) === 2)[m
[32m+[m		[32m{[m
[32m+[m			[32m$year = '20'.$year;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (empty($month))[m
[32m+[m		[32m{[m
[32m+[m			[32m$month = date('m', $local_time);[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (strlen($month) === 1)[m
[32m+[m		[32m{[m
[32m+[m			[32m$month = '0'.$month;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$adjusted_date = $this->adjust_date($month, $year);[m
[32m+[m
[32m+[m		[32m$month	= $adjusted_date['month'];[m
[32m+[m		[32m$year	= $adjusted_date['year'];[m
[32m+[m
[32m+[m		[32m// Determine the total days in the month[m
[32m+[m		[32m$total_days = $this->get_total_days($month, $year);[m
[32m+[m
[32m+[m		[32m// Set the starting day of the week[m
[32m+[m		[32m$start_days	= array('sunday' => 0, 'monday' => 1, 'tuesday' => 2, 'wednesday' => 3, 'thursday' => 4, 'friday' => 5, 'saturday' => 6);[m
[32m+[m		[32m$start_day	= isset($start_days[$this->start_day]) ? $start_days[$this->start_day] : 0;[m
[32m+[m
[32m+[m		[32m// Set the starting day number[m
[32m+[m		[32m$local_date = mktime(12, 0, 0, $month, 1, $year);[m
[32m+[m		[32m$date = getdate($local_date);[m
[32m+[m		[32m$day  = $start_day + 1 - $date['wday'];[m
[32m+[m
[32m+[m		[32mwhile ($day > 1)[m
[32m+[m		[32m{[m
[32m+[m			[32m$day -= 7;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Set the current month/year/day[m
[32m+[m		[32m// We use this to determine the "today" date[m
[32m+[m		[32m$cur_year	= date('Y', $local_time);[m
[32m+[m		[32m$cur_month	= date('m', $local_time);[m
[32m+[m		[32m$cur_day	= date('j', $local_time);[m
[32m+[m
[32m+[m		[32m$is_current_month = ($cur_year == $year && $cur_month == $month);[m
[32m+[m
[32m+[m		[32m// Generate the template data array[m
[32m+[m		[32m$this->parse_template();[m
[32m+[m
[32m+[m		[32m// Begin building the calendar output[m
[32m+[m		[32m$out = $this->replacements['table_open']."\n\n".$this->replacements['heading_row_start']."\n";[m
[32m+[m
[32m+[m		[32m// "previous" month link[m
[32m+[m		[32mif ($this->show_next_prev === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m// Add a trailing slash to the URL if needed[m
[32m+[m			[32m$this->next_prev_url = preg_replace('/(.+?)\/*$/', '\\1/', $this->next_prev_url);[m
[32m+[m
[32m+[m			[32m$adjusted_date = $this->adjust_date($month - 1, $year);[m
[32m+[m			[32m$out .= str_replace('{previous_url}', $this->next_prev_url.$adjusted_date['year'].'/'.$adjusted_date['month'], $this->replacements['heading_previous_cell'])."\n";[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Heading containing the month/year[m
[32m+[m		[32m$colspan = ($this->show_next_prev === TRUE) ? 5 : 7;[m
[32m+[m
[32m+[m		[32m$this->replacements['heading_title_cell'] = str_replace('{colspan}', $colspan,[m
[32m+[m								[32mstr_replace('{heading}', $this->get_month_name($month).'&nbsp;'.$year, $this->replacements['heading_title_cell']));[m
[32m+[m
[32m+[m		[32m$out .= $this->replacements['heading_title_cell']."\n";[m
[32m+[m
[32m+[m		[32m// "next" month link[m
[32m+[m		[32mif ($this->show_next_prev === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$adjusted_date = $this->adjust_date($month + 1, $year);[m
[32m+[m			[32m$out .= str_replace('{next_url}', $this->next_prev_url.$adjusted_date['year'].'/'.$adjusted_date['month'], $this->replacements['heading_next_cell']);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$out .= "\n".$this->replacements['heading_row_end']."\n\n"[m
[32m+[m			[32m// Write the cells containing the days of the week[m
[32m+[m			[32m.$this->replacements['week_row_start']."\n";[m
[32m+[m
[32m+[m		[32m$day_names = $this->get_day_names();[m
[32m+[m
[32m+[m		[32mfor ($i = 0; $i < 7; $i ++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$out .= str_replace('{week_day}', $day_names[($start_day + $i) %7], $this->replacements['week_day_cell']);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$out .= "\n".$this->replacements['week_row_end']."\n";[m
[32m+[m
[32m+[m		[32m// Build the main body of the calendar[m
[32m+[m		[32mwhile ($day <= $total_days)[m
[32m+[m		[32m{[m
[32m+[m			[32m$out .= "\n".$this->replacements['cal_row_start']."\n";[m
[32m+[m
[32m+[m			[32mfor ($i = 0; $i < 7; $i++)[m
[32m+[m			[32m{[m
[32m+[m				[32mif ($day > 0 && $day <= $total_days)[m
[32m+[m				[32m{[m
[32m+[m					[32m$out .= ($is_current_month === TRUE && $day == $cur_day) ? $this->replacements['cal_cell_start_today'] : $this->replacements['cal_cell_start'];[m
[32m+[m
[32m+[m					[32mif (isset($data[$day]))[m
[32m+[m					[32m{[m
[32m+[m						[32m// Cells with content[m
[32m+[m						[32m$temp = ($is_current_month === TRUE && $day == $cur_day) ?[m
[32m+[m								[32m$this->replacements['cal_cell_content_today'] : $this->replacements['cal_cell_content'];[m
[32m+[m						[32m$out .= str_replace(array('{content}', '{day}'), array($data[$day], $day), $temp);[m
[32m+[m					[32m}[m
[32m+[m					[32melse[m
[32m+[m					[32m{[m
[32m+[m						[32m// Cells with no content[m
[32m+[m						[32m$temp = ($is_current_month === TRUE && $day == $cur_day) ?[m
[32m+[m								[32m$this->replacements['cal_cell_no_content_today'] : $this->replacements['cal_cell_no_content'];[m
[32m+[m						[32m$out .= str_replace('{day}', $day, $temp);[m
[32m+[m					[32m}[m
[32m+[m
[32m+[m					[32m$out .= ($is_current_month === TRUE && $day == $cur_day) ? $this->replacements['cal_cell_end_today'] : $this->replacements['cal_cell_end'];[m
[32m+[m				[32m}[m
[32m+[m				[32melseif ($this->show_other_days === TRUE)[m
[32m+[m				[32m{[m
[32m+[m					[32m$out .= $this->replacements['cal_cell_start_other'];[m
[32m+[m
[32m+[m					[32mif ($day <= 0)[m
[32m+[m					[32m{[m
[32m+[m						[32m// Day of previous month[m
[32m+[m						[32m$prev_month = $this->adjust_date($month - 1, $year);[m
[32m+[m						[32m$prev_month_days = $this->get_total_days($prev_month['month'], $prev_month['year']);[m
[32m+[m						[32m$out .= str_replace('{day}', $prev_month_days + $day, $this->replacements['cal_cell_other']);[m
[32m+[m					[32m}[m
[32m+[m					[32melse[m
[32m+[m					[32m{[m
[32m+[m						[32m// Day of next month[m
[32m+[m						[32m$out .= str_replace('{day}', $day - $total_days, $this->replacements['cal_cell_other']);[m
[32m+[m					[32m}[m
[32m+[m
[32m+[m					[32m$out .= $this->replacements['cal_cell_end_other'];[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32m// Blank cells[m
[32m+[m					[32m$out .= $this->replacements['cal_cell_start'].$this->replacements['cal_cell_blank'].$this->replacements['cal_cell_end'];[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m$day++;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$out .= "\n".$this->replacements['cal_row_end']."\n";[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $out .= "\n".$this->replacements['table_close'];[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get Month Name[m
[32m+[m	[32m *[m
[32m+[m	[32m * Generates a textual month name based on the numeric[m
[32m+[m	[32m * month provided.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	the month[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get_month_name($month)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->month_type === 'short')[m
[32m+[m		[32m{[m
[32m+[m			[32m$month_names = array('01' => 'cal_jan', '02' => 'cal_feb', '03' => 'cal_mar', '04' => 'cal_apr', '05' => 'cal_may', '06' => 'cal_jun', '07' => 'cal_jul', '08' => 'cal_aug', '09' => 'cal_sep', '10' => 'cal_oct', '11' => 'cal_nov', '12' => 'cal_dec');[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$month_names = array('01' => 'cal_january', '02' => 'cal_february', '03' => 'cal_march', '04' => 'cal_april', '05' => 'cal_mayl', '06' => 'cal_june', '07' => 'cal_july', '08' => 'cal_august', '09' => 'cal_september', '10' => 'cal_october', '11' => 'cal_november', '12' => 'cal_december');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn ($this->CI->lang->line($month_names[$month]) === FALSE)[m
[32m+[m			[32m? ucfirst(substr($month_names[$month], 4))[m
[32m+[m			[32m: $this->CI->lang->line($month_names[$month]);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get Day Names[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns an array of day names (Sunday, Monday, etc.) based[m
[32m+[m	[32m * on the type. Options: long, short, abr[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get_day_names($day_type = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($day_type !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->day_type = $day_type;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($this->day_type === 'long')[m
[32m+[m		[32m{[m
[32m+[m			[32m$day_names = array('sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday');[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($this->day_type === 'short')[m
[32m+[m		[32m{[m
[32m+[m			[32m$day_names = array('sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat');[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$day_names = array('su', 'mo', 'tu', 'we', 'th', 'fr', 'sa');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$days = array();[m
[32m+[m		[32mfor ($i = 0, $c = count($day_names); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$days[] = ($this->CI->lang->line('cal_'.$day_names[$i]) === FALSE) ? ucfirst($day_names[$i]) : $this->CI->lang->line('cal_'.$day_names[$i]);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $days;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Adjust Date[m
[32m+[m	[32m *[m
[32m+[m	[32m * This function makes sure that we have a valid month/year.[m
[32m+[m	[32m * For example, if you submit 13 as the month, the year will[m
[32m+[m	[32m * increment and the month will become January.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	the month[m
[32m+[m	[32m * @param	int	the year[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function adjust_date($month, $year)[m
[32m+[m	[32m{[m
[32m+[m		[32m$date = array();[m
[32m+[m
[32m+[m		[32m$date['month']	= $month;[m
[32m+[m		[32m$date['year']	= $year;[m
[32m+[m
[32m+[m		[32mwhile ($date['month'] > 12)[m
[32m+[m		[32m{[m
[32m+[m			[32m$date['month'] -= 12;[m
[32m+[m			[32m$date['year']++;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mwhile ($date['month'] <= 0)[m
[32m+[m		[32m{[m
[32m+[m			[32m$date['month'] += 12;[m
[32m+[m			[32m$date['year']--;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (strlen($date['month']) === 1)[m
[32m+[m		[32m{[m
[32m+[m			[32m$date['month'] = '0'.$date['month'];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $date;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Total days in a given month[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	the month[m
[32m+[m	[32m * @param	int	the year[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get_total_days($month, $year)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->CI->load->helper('date');[m
[32m+[m		[32mreturn days_in_month($month, $year);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set Default Template Data[m
[32m+[m	[32m *[m
[32m+[m	[32m * This is used in the event that the user has not created their own template[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function default_template()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn array([m
[32m+[m			[32m'table_open'				=> '<table border="0" cellpadding="4" cellspacing="0">',[m
[32m+[m			[32m'heading_row_start'			=> '<tr>',[m
[32m+[m			[32m'heading_previous_cell'		=> '<th><a href="{previous_url}">&lt;&lt;</a></th>',[m
[32m+[m			[32m'heading_title_cell'		=> '<th colspan="{colspan}">{heading}</th>',[m
[32m+[m			[32m'heading_next_cell'			=> '<th><a href="{next_url}">&gt;&gt;</a></th>',[m
[32m+[m			[32m'heading_row_end'			=> '</tr>',[m
[32m+[m			[32m'week_row_start'			=> '<tr>',[m
[32m+[m			[32m'week_day_cell'				=> '<td>{week_day}</td>',[m
[32m+[m			[32m'week_row_end'				=> '</tr>',[m
[32m+[m			[32m'cal_row_start'				=> '<tr>',[m
[32m+[m			[32m'cal_cell_start'			=> '<td>',[m
[32m+[m			[32m'cal_cell_start_today'		=> '<td>',[m
[32m+[m			[32m'cal_cell_start_other'		=> '<td style="color: #666;">',[m
[32m+[m			[32m'cal_cell_content'			=> '<a href="{content}">{day}</a>',[m
[32m+[m			[32m'cal_cell_content_today'	=> '<a href="{content}"><strong>{day}</strong></a>',[m
[32m+[m			[32m'cal_cell_no_content'		=> '{day}',[m
[32m+[m			[32m'cal_cell_no_content_today'	=> '<strong>{day}</strong>',[m
[32m+[m			[32m'cal_cell_blank'			=> '&nbsp;',[m
[32m+[m			[32m'cal_cell_other'			=> '{day}',[m
[32m+[m			[32m'cal_cell_end'				=> '</td>',[m
[32m+[m			[32m'cal_cell_end_today'		=> '</td>',[m
[32m+[m			[32m'cal_cell_end_other'		=> '</td>',[m
[32m+[m			[32m'cal_row_end'				=> '</tr>',[m
[32m+[m			[32m'table_close'				=> '</table>'[m
[32m+[m		[32m);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Parse Template[m
[32m+[m	[32m *[m
[32m+[m	[32m * Harvests the data within the template {pseudo-variables}[m
[32m+[m	[32m * used to display the calendar[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	CI_Calendar[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function parse_template()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->replacements = $this->default_template();[m
[32m+[m
[32m+[m		[32mif (empty($this->template))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (is_string($this->template))[m
[32m+[m		[32m{[m
[32m+[m			[32m$today = array('cal_cell_start_today', 'cal_cell_content_today', 'cal_cell_no_content_today', 'cal_cell_end_today');[m
[32m+[m
[32m+[m			[32mforeach (array('table_open', 'table_close', 'heading_row_start', 'heading_previous_cell', 'heading_title_cell', 'heading_next_cell', 'heading_row_end', 'week_row_start', 'week_day_cell', 'week_row_end', 'cal_row_start', 'cal_cell_start', 'cal_cell_content', 'cal_cell_no_content', 'cal_cell_blank', 'cal_cell_end', 'cal_row_end', 'cal_cell_start_today', 'cal_cell_content_today', 'cal_cell_no_content_today', 'cal_cell_end_today', 'cal_cell_start_other', 'cal_cell_other', 'cal_cell_end_other') as $val)[m
[32m+[m			[32m{[m
[32m+[m				[32mif (preg_match('/\{'.$val.'\}(.*?)\{\/'.$val.'\}/si', $this->template, $match))[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->replacements[$val] = $match[1];[m
[32m+[m				[32m}[m
[32m+[m				[32melseif (in_array($val, $today, TRUE))[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->replacements[$val] = $this->replacements[substr($val, 0, -6)];[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (is_array($this->template))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->replacements = array_merge($this->replacements, $this->template);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/libraries/Cart.php b/system/libraries/Cart.php[m
[1mnew file mode 100644[m
[1mindex 0000000..4c51e7a[m
[1m--- /dev/null[m
[1m+++ b/system/libraries/Cart.php[m
[36m@@ -0,0 +1,567 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Shopping Cart Class[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Libraries[m
[32m+[m[32m * @category	Shopping Cart[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/libraries/cart.html[m
[32m+[m[32m * @deprecated	3.0.0	This class is too specific for CI.[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_Cart {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * These are the regular expression rules that we use to validate the product ID and product name[m
[32m+[m	[32m * alpha-numeric, dashes, underscores, or periods[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $product_id_rules = '\.a-z0-9_-';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * These are the regular expression rules that we use to validate the product ID and product name[m
[32m+[m	[32m * alpha-numeric, dashes, underscores, colons or periods[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $product_name_rules = '\w \-\.\:';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * only allow safe product names[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $product_name_safe = TRUE;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Reference to CodeIgniter instance[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var object[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $CI;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Contents of the cart[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_cart_contents = array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Shopping Class Constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * The constructor loads the Session class, used to store the shopping cart contents.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct($params = array())[m
[32m+[m	[32m{[m
[32m+[m		[32m// Set the super object to a local variable for use later[m
[32m+[m		[32m$this->CI =& get_instance();[m
[32m+[m
[32m+[m		[32m// Are any config settings being passed manually?  If so, set them[m
[32m+[m		[32m$config = is_array($params) ? $params : array();[m
[32m+[m
[32m+[m		[32m// Load the Sessions class[m
[32m+[m		[32m$this->CI->load->driver('session', $config);[m
[32m+[m
[32m+[m		[32m// Grab the shopping cart array from the session table[m
[32m+[m		[32m$this->_cart_contents = $this->CI->session->userdata('cart_contents');[m
[32m+[m		[32mif ($this->_cart_contents === NULL)[m
[32m+[m		[32m{[m
[32m+[m			[32m// No cart exists so we'll set some base values[m
[32m+[m			[32m$this->_cart_contents = array('cart_total' => 0, 'total_items' => 0);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mlog_message('info', 'Cart Class Initialized');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Insert items into the cart and save it to the session table[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function insert($items = array())[m
[32m+[m	[32m{[m
[32m+[m		[32m// Was any cart data passed? No? Bah...[m
[32m+[m		[32mif ( ! is_array($items) OR count($items) === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mlog_message('error', 'The insert method must be passed an array containing data.');[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// You can either insert a single product using a one-dimensional array,[m
[32m+[m		[32m// or multiple products using a multi-dimensional one. The way we[m
[32m+[m		[32m// determine the array type is by looking for a required array key named "id"[m
[32m+[m		[32m// at the top level. If it's not found, we will assume it's a multi-dimensional array.[m
[32m+[m
[32m+[m		[32m$save_cart = FALSE;[m
[32m+[m		[32mif (isset($items['id']))[m
[32m+[m		[32m{[m
[32m+[m			[32mif (($rowid = $this->_insert($items)))[m
[32m+[m			[32m{[m
[32m+[m				[32m$save_cart = TRUE;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($items as $val)[m
[32m+[m			[32m{[m
[32m+[m				[32mif (is_array($val) && isset($val['id']))[m
[32m+[m				[32m{[m
[32m+[m					[32mif ($this->_insert($val))[m
[32m+[m					[32m{[m
[32m+[m						[32m$save_cart = TRUE;[m
[32m+[m					[32m}[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Save the cart data if the insert was successful[m
[32m+[m		[32mif ($save_cart === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_save_cart();[m
[32m+[m			[32mreturn isset($rowid) ? $rowid : TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Insert[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _insert($items = array())[m
[32m+[m	[32m{[m
[32m+[m		[32m// Was any cart data passed? No? Bah...[m
[32m+[m		[32mif ( ! is_array($items) OR count($items) === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mlog_message('error', 'The insert method must be passed an array containing data.');[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m		[32m// Does the $items array contain an id, quantity, price, and name?  These are required[m
[32m+[m		[32mif ( ! isset($items['id'], $items['qty'], $items['price'], $items['name']))[m
[32m+[m		[32m{[m
[32m+[m			[32mlog_message('error', 'The cart array must contain a product ID, quantity, price, and name.');[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m		[32m// Prep the quantity. It can only be a number.  Duh... also trim any leading zeros[m
[32m+[m		[32m$items['qty'] = (float) $items['qty'];[m
[32m+[m
[32m+[m		[32m// If the quantity is zero or blank there's nothing for us to do[m
[32m+[m		[32mif ($items['qty'] == 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m		[32m// Validate the product ID. It can only be alpha-numeric, dashes, underscores or periods[m
[32m+[m		[32m// Not totally sure we should impose this rule, but it seems prudent to standardize IDs.[m
[32m+[m		[32m// Note: These can be user-specified by setting the $this->product_id_rules variable.[m
[32m+[m		[32mif ( ! preg_match('/^['.$this->product_id_rules.']+$/i', $items['id']))[m
[32m+[m		[32m{[m
[32m+[m			[32mlog_message('error', 'Invalid product ID.  The product ID can only contain alpha-numeric characters, dashes, and underscores');[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m		[32m// Validate the product name. It can only be alpha-numeric, dashes, underscores, colons or periods.[m
[32m+[m		[32m// Note: These can be user-specified by setting the $this->product_name_rules variable.[m
[32m+[m		[32mif ($this->product_name_safe && ! preg_match('/^['.$this->product_name_rules.']+$/i'.(UTF8_ENABLED ? 'u' : ''), $items['name']))[m
[32m+[m		[32m{[m
[32m+[m			[32mlog_message('error', 'An invalid name was submitted as the product name: '.$items['name'].' The name can only contain alpha-numeric characters, dashes, underscores, colons, and spaces');[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m		[32m// Prep the price. Remove leading zeros and anything that isn't a number or decimal point.[m
[32m+[m		[32m$items['price'] = (float) $items['price'];[m
[32m+[m
[32m+[m		[32m// We now need to create a unique identifier for the item being inserted into the cart.[m
[32m+[m		[32m// Every time something is added to the cart it is stored in the master cart array.[m
[32m+[m		[32m// Each row in the cart array, however, must have a unique index that identifies not only[m
[32m+[m		[32m// a particular product, but makes it possible to store identical products with different options.[m
[32m+[m		[32m// For example, what if someone buys two identical t-shirts (same product ID), but in[m
[32m+[m		[32m// different sizes?  The product ID (and other attributes, like the name) will be identical for[m
[32m+[m		[32m// both sizes because it's the same shirt. The only difference will be the size.[m
[32m+[m		[32m// Internally, we need to treat identical submissions, but with different options, as a unique product.[m
[32m+[m		[32m// Our solution is to convert the options array to a string and MD5 it along with the product ID.[m
[32m+[m		[32m// This becomes the unique "row ID"[m
[32m+[m		[32mif (isset($items['options']) && count($items['options']) > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32m$rowid = md5($items['id'].serialize($items['options']));[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m// No options were submitted so we simply MD5 the product ID.[m
[32m+[m			[32m// Technically, we don't need to MD5 the ID in this case, but it makes[m
[32m+[m			[32m// sense to standardize the format of array indexes for both conditions[m
[32m+[m			[32m$rowid = md5($items['id']);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m		[32m// Now that we have our unique "row ID", we'll add our cart items to the master array[m
[32m+[m		[32m// grab quantity if it's already there and add it on[m
[32m+[m		[32m$old_quantity = isset($this->_cart_contents[$rowid]['qty']) ? (int) $this->_cart_contents[$rowid]['qty'] : 0;[m
[32m+[m
[32m+[m		[32m// Re-create the entry, just to make sure our index contains only the data from this submission[m
[32m+[m		[32m$items['rowid'] = $rowid;[m
[32m+[m		[32m$items['qty'] += $old_quantity;[m
[32m+[m		[32m$this->_cart_contents[$rowid] = $items;[m
[32m+[m
[32m+[m		[32mreturn $rowid;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Update the cart[m
[32m+[m	[32m *[m
[32m+[m	[32m * This function permits the quantity of a given item to be changed.[m
[32m+[m	[32m * Typically it is called from the "view cart" page if a user makes[m
[32m+[m	[32m * changes to the quantity before checkout. That array must contain the[m
[32m+[m	[32m * product ID and quantity for each item.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function update($items = array())[m
[32m+[m	[32m{[m
[32m+[m		[32m// Was any cart data passed?[m
[32m+[m		[32mif ( ! is_array($items) OR count($items) === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// You can either update a single product using a one-dimensional array,[m
[32m+[m		[32m// or multiple products using a multi-dimensional one.  The way we[m
[32m+[m		[32m// determine the array type is by looking for a required array key named "rowid".[m
[32m+[m		[32m// If it's not found we assume it's a multi-dimensional array[m
[32m+[m		[32m$save_cart = FALSE;[m
[32m+[m		[32mif (isset($items['rowid']))[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($this->_update($items) === TRUE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$save_cart = TRUE;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($items as $val)[m
[32m+[m			[32m{[m
[32m+[m				[32mif (is_array($val) && isset($val['rowid']))[m
[32m+[m				[32m{[m
[32m+[m					[32mif ($this->_update($val) === TRUE)[m
[32m+[m					[32m{[m
[32m+[m						[32m$save_cart = TRUE;[m
[32m+[m					[32m}[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Save the cart data if the insert was successful[m
[32m+[m		[32mif ($save_cart === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_save_cart();[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Update the cart[m
[32m+[m	[32m *[m
[32m+[m	[32m * This function permits changing item properties.[m
[32m+[m	[32m * Typically it is called from the "view cart" page if a user makes[m
[32m+[m	[32m * changes to the quantity before checkout. That array must contain the[m
[32m+[m	[32m * rowid and quantity for each item.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _update($items = array())[m
[32m+[m	[32m{[m
[32m+[m		[32m// Without these array indexes there is nothing we can do[m
[32m+[m		[32mif ( ! isset($items['rowid'], $this->_cart_contents[$items['rowid']]))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Prep the quantity[m
[32m+[m		[32mif (isset($items['qty']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$items['qty'] = (float) $items['qty'];[m
[32m+[m			[32m// Is the quantity zero?  If so we will remove the item from the cart.[m
[32m+[m			[32m// If the quantity is greater than zero we are updating[m
[32m+[m			[32mif ($items['qty'] == 0)[m
[32m+[m			[32m{[m
[32m+[m				[32munset($this->_cart_contents[$items['rowid']]);[m
[32m+[m				[32mreturn TRUE;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// find updatable keys[m
[32m+[m		[32m$keys = array_intersect(array_keys($this->_cart_contents[$items['rowid']]), array_keys($items));[m
[32m+[m		[32m// if a price was passed, make sure it contains valid data[m
[32m+[m		[32mif (isset($items['price']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$items['price'] = (float) $items['price'];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// product id & name shouldn't be changed[m
[32m+[m		[32mforeach (array_diff($keys, array('id', 'name')) as $key)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_cart_contents[$items['rowid']][$key] = $items[$key];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Save the cart array to the session DB[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _save_cart()[m
[32m+[m	[32m{[m
[32m+[m		[32m// Let's add up the individual prices and set the cart sub-total[m
[32m+[m		[32m$this->_cart_contents['total_items'] = $this->_cart_contents['cart_total'] = 0;[m
[32m+[m		[32mforeach ($this->_cart_contents as $key => $val)[m
[32m+[m		[32m{[m
[32m+[m			[32m// We make sure the array contains the proper indexes[m
[32m+[m			[32mif ( ! is_array($val) OR ! isset($val['price'], $val['qty']))[m
[32m+[m			[32m{[m
[32m+[m				[32mcontinue;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$this->_cart_contents['cart_total'] += ($val['price'] * $val['qty']);[m
[32m+[m			[32m$this->_cart_contents['total_items'] += $val['qty'];[m
[32m+[m			[32m$this->_cart_contents[$key]['subtotal'] = ($this->_cart_contents[$key]['price'] * $this->_cart_contents[$key]['qty']);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Is our cart empty? If so we delete it from the session[m
[32m+[m		[32mif (count($this->_cart_contents) <= 2)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->CI->session->unset_userdata('cart_contents');[m
[32m+[m
[32m+[m			[32m// Nothing more to do... coffee time![m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// If we made it this far it means that our cart has data.[m
[32m+[m		[32m// Let's pass it to the Session class so it can be stored[m
[32m+[m		[32m$this->CI->session->set_userdata(array('cart_contents' => $this->_cart_contents));[m
[32m+[m
[32m+[m		[32m// Woot![m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Cart Total[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function total()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_cart_contents['cart_total'];[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Remove Item[m
[32m+[m	[32m *[m
[32m+[m	[32m * Removes an item from the cart[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32m public function remove($rowid)[m
[32m+[m	[32m {[m
[32m+[m		[32m// unset & save[m
[32m+[m		[32munset($this->_cart_contents[$rowid]);[m
[32m+[m		[32m$this->_save_cart();[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m }[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Total Items[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the total item count[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function total_items()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_cart_contents['total_items'];[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Cart Contents[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the entire cart array[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function contents($newest_first = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m// do we want the newest first?[m
[32m+[m		[32m$cart = ($newest_first) ? array_reverse($this->_cart_contents) : $this->_cart_contents;[m
[32m+[m
[32m+[m		[32m// Remove these so they don't create a problem when showing the cart table[m
[32m+[m		[32munset($cart['total_items']);[m
[32m+[m		[32munset($cart['cart_total']);[m
[32m+[m
[32m+[m		[32mreturn $cart;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get cart item[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the details of a specific item in the cart[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$row_id[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get_item($row_id)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn (in_array($row_id, array('total_items', 'cart_total'), TRUE) OR ! isset($this->_cart_contents[$row_id]))[m
[32m+[m			[32m? FALSE[m
[32m+[m			[32m: $this->_cart_contents[$row_id];[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Has options[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns TRUE if the rowid passed to this function correlates to an item[m
[32m+[m	[32m * that has options associated with it.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$row_id = ''[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function has_options($row_id = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn (isset($this->_cart_contents[$row_id]['options']) && count($this->_cart_contents[$row_id]['options']) !== 0);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Product options[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the an array of options, for a particular product row ID[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$row_id = ''[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function product_options($row_id = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn isset($this->_cart_contents[$row_id]['options']) ? $this->_cart_contents[$row_id]['options'] : array();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Format Number[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the supplied number with commas and a decimal point.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	float[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function format_number($n = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn ($n === '') ? '' : number_format( (float) $n, 2, '.', ',');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Destroy the cart[m
[32m+[m	[32m *[m
[32m+[m	[32m * Empties the cart and kills the session[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function destroy()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->_cart_contents = array('cart_total' => 0, 'total_items' => 0);[m
[32m+[m		[32m$this->CI->session->unset_userdata('cart_contents');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/libraries/Driver.php b/system/libraries/Driver.php[m
[1mnew file mode 100644[m
[1mindex 0000000..7dd66ec[m
[1m--- /dev/null[m
[1m+++ b/system/libraries/Driver.php[m
[36m@@ -0,0 +1,342 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter Driver Library Class[m
[32m+[m[32m *[m
[32m+[m[32m * This class enables you to create "Driver" libraries that add runtime ability[m
[32m+[m[32m * to extend the capabilities of a class via additional driver objects[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Libraries[m
[32m+[m[32m * @category	Libraries[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_Driver_Library {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Array of drivers that are available to use with the driver class[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $valid_drivers = array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Name of the current class - usually the driver class[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $lib_name;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get magic method[m
[32m+[m	[32m *[m
[32m+[m	[32m * The first time a child is used it won't exist, so we instantiate it[m
[32m+[m	[32m * subsequents calls will go straight to the proper child.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	Child class name[m
[32m+[m	[32m * @return	object	Child class[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __get($child)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Try to load the driver[m
[32m+[m		[32mreturn $this->load_driver($child);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Load driver[m
[32m+[m	[32m *[m
[32m+[m	[32m * Separate load_driver call to support explicit driver load by library or user[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	Driver name (w/o parent prefix)[m
[32m+[m	[32m * @return	object	Child class[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function load_driver($child)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Get CodeIgniter instance and subclass prefix[m
[32m+[m		[32m$prefix = config_item('subclass_prefix');[m
[32m+[m
[32m+[m		[32mif ( ! isset($this->lib_name))[m
[32m+[m		[32m{[m
[32m+[m			[32m// Get library name without any prefix[m
[32m+[m			[32m$this->lib_name = str_replace(array('CI_', $prefix), '', get_class($this));[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// The child will be prefixed with the parent lib[m
[32m+[m		[32m$child_name = $this->lib_name.'_'.$child;[m
[32m+[m
[32m+[m		[32m// See if requested child is a valid driver[m
[32m+[m		[32mif ( ! in_array($child, $this->valid_drivers))[m
[32m+[m		[32m{[m
[32m+[m			[32m// The requested driver isn't valid![m
[32m+[m			[32m$msg = 'Invalid driver requested: '.$child_name;[m
[32m+[m			[32mlog_message('error', $msg);[m
[32m+[m			[32mshow_error($msg);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Get package paths and filename case variations to search[m
[32m+[m		[32m$CI = get_instance();[m
[32m+[m		[32m$paths = $CI->load->get_package_paths(TRUE);[m
[32m+[m
[32m+[m		[32m// Is there an extension?[m
[32m+[m		[32m$class_name = $prefix.$child_name;[m
[32m+[m		[32m$found = class_exists($class_name, FALSE);[m
[32m+[m		[32mif ( ! $found)[m
[32m+[m		[32m{[m
[32m+[m			[32m// Check for subclass file[m
[32m+[m			[32mforeach ($paths as $path)[m
[32m+[m			[32m{[m
[32m+[m				[32m// Does the file exist?[m
[32m+[m				[32m$file = $path.'libraries/'.$this->lib_name.'/drivers/'.$prefix.$child_name.'.php';[m
[32m+[m				[32mif (file_exists($file))[m
[32m+[m				[32m{[m
[32m+[m					[32m// Yes - require base class from BASEPATH[m
[32m+[m					[32m$basepath = BASEPATH.'libraries/'.$this->lib_name.'/drivers/'.$child_name.'.php';[m
[32m+[m					[32mif ( ! file_exists($basepath))[m
[32m+[m					[32m{[m
[32m+[m						[32m$msg = 'Unable to load the requested class: CI_'.$child_name;[m
[32m+[m						[32mlog_message('error', $msg);[m
[32m+[m						[32mshow_error($msg);[m
[32m+[m					[32m}[m
[32m+[m
[32m+[m					[32m// Include both sources and mark found[m
[32m+[m					[32minclude_once($basepath);[m
[32m+[m					[32minclude_once($file);[m
[32m+[m					[32m$found = TRUE;[m
[32m+[m					[32mbreak;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Do we need to search for the class?[m
[32m+[m		[32mif ( ! $found)[m
[32m+[m		[32m{[m
[32m+[m			[32m// Use standard class name[m
[32m+[m			[32m$class_name = 'CI_'.$child_name;[m
[32m+[m			[32mif ( ! class_exists($class_name, FALSE))[m
[32m+[m			[32m{[m
[32m+[m				[32m// Check package paths[m
[32m+[m				[32mforeach ($paths as $path)[m
[32m+[m				[32m{[m
[32m+[m					[32m// Does the file exist?[m
[32m+[m					[32m$file = $path.'libraries/'.$this->lib_name.'/drivers/'.$child_name.'.php';[m
[32m+[m					[32mif (file_exists($file))[m
[32m+[m					[32m{[m
[32m+[m						[32m// Include source[m
[32m+[m						[32minclude_once($file);[m
[32m+[m						[32mbreak;[m
[32m+[m					[32m}[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Did we finally find the class?[m
[32m+[m		[32mif ( ! class_exists($class_name, FALSE))[m
[32m+[m		[32m{[m
[32m+[m			[32mif (class_exists($child_name, FALSE))[m
[32m+[m			[32m{[m
[32m+[m				[32m$class_name = $child_name;[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$msg = 'Unable to load the requested driver: '.$class_name;[m
[32m+[m				[32mlog_message('error', $msg);[m
[32m+[m				[32mshow_error($msg);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Instantiate, decorate and add child[m
[32m+[m		[32m$obj = new $class_name();[m
[32m+[m		[32m$obj->decorate($this);[m
[32m+[m		[32m$this->$child = $obj;[m
[32m+[m		[32mreturn $this->$child;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// --------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter Driver Class[m
[32m+[m[32m *[m
[32m+[m[32m * This class enables you to create drivers for a Library based on the Driver Library.[m
[32m+[m[32m * It handles the drivers' access to the parent library[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Libraries[m
[32m+[m[32m * @category	Libraries[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_Driver {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Instance of the parent class[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var object[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_parent;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of methods in the parent class[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_methods = array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of properties in the parent class[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_properties = array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Array of methods and properties for the parent class(es)[m
[32m+[m	[32m *[m
[32m+[m	[32m * @static[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected static $_reflections = array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Decorate[m
[32m+[m	[32m *[m
[32m+[m	[32m * Decorates the child with the parent driver lib's methods and properties[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	object[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function decorate($parent)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->_parent = $parent;[m
[32m+[m
[32m+[m		[32m// Lock down attributes to what is defined in the class[m
[32m+[m		[32m// and speed up references in magic methods[m
[32m+[m
[32m+[m		[32m$class_name = get_class($parent);[m
[32m+[m
[32m+[m		[32mif ( ! isset(self::$_reflections[$class_name]))[m
[32m+[m		[32m{[m
[32m+[m			[32m$r = new ReflectionObject($parent);[m
[32m+[m
[32m+[m			[32mforeach ($r->getMethods() as $method)[m
[32m+[m			[32m{[m
[32m+[m				[32mif ($method->isPublic())[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->_methods[] = $method->getName();[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mforeach ($r->getProperties() as $prop)[m
[32m+[m			[32m{[m
[32m+[m				[32mif ($prop->isPublic())[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->_properties[] = $prop->getName();[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mself::$_reflections[$class_name] = array($this->_methods, $this->_properties);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32mlist($this->_methods, $this->_properties) = self::$_reflections[$class_name];[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * __call magic method[m
[32m+[m	[32m *[m
[32m+[m	[32m * Handles access to the parent driver library's methods[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	array[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __call($method, $args = array())[m
[32m+[m	[32m{[m
[32m+[m		[32mif (in_array($method, $this->_methods))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn call_user_func_array(array($this->_parent, $method), $args);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mthrow new BadMethodCallException('No such method: '.$method.'()');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * __get magic method[m
[32m+[m	[32m *[m
[32m+[m	[32m * Handles reading of the parent driver library's properties[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __get($var)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (in_array($var, $this->_properties))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->_parent->$var;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * __set magic method[m
[32m+[m	[32m *[m
[32m+[m	[32m * Handles writing to the parent driver library's properties[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	array[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __set($var, $val)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (in_array($var, $this->_properties))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_parent->$var = $val;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/libraries/Email.php b/system/libraries/Email.php[m
[1mnew file mode 100644[m
[1mindex 0000000..cd74d6d[m
[1m--- /dev/null[m
[1m+++ b/system/libraries/Email.php[m
[36m@@ -0,0 +1,2490 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter Email Class[m
[32m+[m[32m *[m
[32m+[m[32m * Permits email to be sent using Mail, Sendmail, or SMTP.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Libraries[m
[32m+[m[32m * @category	Libraries[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/libraries/email.html[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_Email {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Used as the User-Agent and X-Mailer headers' value.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $useragent	= 'CodeIgniter';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Path to the Sendmail binary.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $mailpath	= '/usr/sbin/sendmail';	// Sendmail path[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Which method to use for sending e-mails.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string	'mail', 'sendmail' or 'smtp'[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $protocol	= 'mail';		// mail/sendmail/smtp[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * STMP Server host[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $smtp_host	= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * SMTP Username[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $smtp_user	= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * SMTP Password[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $smtp_pass	= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * SMTP Server port[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $smtp_port	= 25;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * SMTP connection timeout in seconds[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $smtp_timeout	= 5;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * SMTP persistent connection[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $smtp_keepalive	= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * SMTP Encryption[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string	empty, 'tls' or 'ssl'[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $smtp_crypto	= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Whether to apply word-wrapping to the message body.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $wordwrap	= TRUE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Number of characters to wrap at.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @see	CI_Email::$wordwrap[m
[32m+[m	[32m * @var	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $wrapchars	= 76;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Message format.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string	'text' or 'html'[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $mailtype	= 'text';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Character set (default: utf-8)[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $charset		= 'UTF-8';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Alternative message (for HTML messages only)[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $alt_message	= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Whether to validate e-mail addresses.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $validate	= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * X-Priority header value.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	int	1-5[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $priority	= 3;			// Default priority (1 - 5)[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Newline character sequence.[m
[32m+[m	[32m * Use "\r\n" to comply with RFC 822.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @link	http://www.ietf.org/rfc/rfc822.txt[m
[32m+[m	[32m * @var	string	"\r\n" or "\n"[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $newline		= "\n";			// Default newline. "\r\n" or "\n" (Use "\r\n" to comply with RFC 822)[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CRLF character sequence[m
[32m+[m	[32m *[m
[32m+[m	[32m * RFC 2045 specifies that for 'quoted-printable' encoding,[m
[32m+[m	[32m * "\r\n" must be used. However, it appears that some servers[m
[32m+[m	[32m * (even on the receiving end) don't handle it properly and[m
[32m+[m	[32m * switching to "\n", while improper, is the only solution[m
[32m+[m	[32m * that seems to work for all environments.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @link	http://www.ietf.org/rfc/rfc822.txt[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $crlf		= "\n";[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Whether to use Delivery Status Notification.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $dsn		= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Whether to send multipart alternatives.[m
[32m+[m	[32m * Yahoo! doesn't seem to like these.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $send_multipart	= TRUE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Whether to send messages to BCC recipients in batches.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $bcc_batch_mode	= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * BCC Batch max number size.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @see	CI_Email::$bcc_batch_mode[m
[32m+[m	[32m * @var	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $bcc_batch_size	= 200;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Whether PHP is running in safe mode. Initialized by the class constructor.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_safe_mode		= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Subject header[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_subject		= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Message body[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_body		= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Final message body to be sent.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_finalbody		= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Final headers to send[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_header_str		= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * SMTP Connection socket placeholder[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	resource[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_smtp_connect	= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Mail encoding[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string	'8bit' or '7bit'[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_encoding		= '8bit';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Whether to perform SMTP authentication[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_smtp_auth		= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Whether to send a Reply-To header[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_replyto_flag	= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Debug messages[m
[32m+[m	[32m *[m
[32m+[m	[32m * @see	CI_Email::print_debugger()[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_debug_msg		= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Recipients[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[][m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_recipients		= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CC Recipients[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[][m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_cc_array		= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * BCC Recipients[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[][m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_bcc_array		= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Message headers[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[][m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_headers		= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Attachment data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_attachments		= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Valid $protocol values[m
[32m+[m	[32m *[m
[32m+[m	[32m * @see	CI_Email::$protocol[m
[32m+[m	[32m * @var	string[][m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_protocols		= array('mail', 'sendmail', 'smtp');[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Base charsets[m
[32m+[m	[32m *[m
[32m+[m	[32m * Character sets valid for 7-bit encoding,[m
[32m+[m	[32m * excluding language suffix.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[][m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_base_charsets	= array('us-ascii', 'iso-2022-');[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Bit depths[m
[32m+[m	[32m *[m
[32m+[m	[32m * Valid mail encodings[m
[32m+[m	[32m *[m
[32m+[m	[32m * @see	CI_Email::$_encoding[m
[32m+[m	[32m * @var	string[][m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_bit_depths		= array('7bit', '8bit');[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * $priority translations[m
[32m+[m	[32m *[m
[32m+[m	[32m * Actual values to send with the X-Priority header[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[][m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_priorities = array([m
[32m+[m		[32m1 => '1 (Highest)',[m
[32m+[m		[32m2 => '2 (High)',[m
[32m+[m		[32m3 => '3 (Normal)',[m
[32m+[m		[32m4 => '4 (Low)',[m
[32m+[m		[32m5 => '5 (Lowest)'[m
[32m+[m	[32m);[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * mbstring.func_overload flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected static $func_overload;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Constructor - Sets Email Preferences[m
[32m+[m	[32m *[m
[32m+[m	[32m * The constructor can be passed an array of config values[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$config = array()[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct(array $config = array())[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->charset = config_item('charset');[m
[32m+[m		[32m$this->initialize($config);[m
[32m+[m		[32m$this->_safe_mode = ( ! is_php('5.4') && ini_get('safe_mode'));[m
[32m+[m
[32m+[m		[32misset(self::$func_overload) OR self::$func_overload = (extension_loaded('mbstring') && ini_get('mbstring.func_overload'));[m
[32m+[m
[32m+[m		[32mlog_message('info', 'Email Class Initialized');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Initialize preferences[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$config[m
[32m+[m	[32m * @return	CI_Email[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function initialize(array $config = array())[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->clear();[m
[32m+[m
[32m+[m		[32mforeach ($config as $key => $val)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (isset($this->$key))[m
[32m+[m			[32m{[m
[32m+[m				[32m$method = 'set_'.$key;[m
[32m+[m
[32m+[m				[32mif (method_exists($this, $method))[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->$method($val);[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->$key = $val;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->charset = strtoupper($this->charset);[m
[32m+[m		[32m$this->_smtp_auth = isset($this->smtp_user[0], $this->smtp_pass[0]);[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Initialize the Email Data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool[m
[32m+[m	[32m * @return	CI_Email[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function clear($clear_attachments = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->_subject		= '';[m
[32m+[m		[32m$this->_body		= '';[m
[32m+[m		[32m$this->_finalbody	= '';[m
[32m+[m		[32m$this->_header_str	= '';[m
[32m+[m		[32m$this->_replyto_flag	= FALSE;[m
[32m+[m		[32m$this->_recipients	= array();[m
[32m+[m		[32m$this->_cc_array	= array();[m
[32m+[m		[32m$this->_bcc_array	= array();[m
[32m+[m		[32m$this->_headers		= array();[m
[32m+[m		[32m$this->_debug_msg	= array();[m
[32m+[m
[32m+[m		[32m$this->set_header('Date', $this->_set_date());[m
[32m+[m
[32m+[m		[32mif ($clear_attachments !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_attachments = array();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set FROM[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$from[m
[32m+[m	[32m * @param	string	$name[m
[32m+[m	[32m * @param	string	$return_path = NULL	Return-Path[m
[32m+[m	[32m * @return	CI_Email[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function from($from, $name = '', $return_path = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (preg_match('/\<(.*)\>/', $from, $match))[m
[32m+[m		[32m{[m
[32m+[m			[32m$from = $match[1];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($this->validate)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->validate_email($this->_str_to_array($from));[m
[32m+[m			[32mif ($return_path)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->validate_email($this->_str_to_array($return_path));[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// prepare the display name[m
[32m+[m		[32mif ($name !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m// only use Q encoding if there are characters that would require it[m
[32m+[m			[32mif ( ! preg_match('/[\200-\377]/', $name))[m
[32m+[m			[32m{[m
[32m+[m				[32m// add slashes for non-printing characters, slashes, and double quotes, and surround it in double quotes[m
[32m+[m				[32m$name = '"'.addcslashes($name, "\0..\37\177'\"\\").'"';[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$name = $this->_prep_q_encoding($name);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->set_header('From', $name.' <'.$from.'>');[m
[32m+[m
[32m+[m		[32misset($return_path) OR $return_path = $from;[m
[32m+[m		[32m$this->set_header('Return-Path', '<'.$return_path.'>');[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set Reply-to[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	CI_Email[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function reply_to($replyto, $name = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif (preg_match('/\<(.*)\>/', $replyto, $match))[m
[32m+[m		[32m{[m
[32m+[m			[32m$replyto = $match[1];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($this->validate)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->validate_email($this->_str_to_array($replyto));[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($name !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m// only use Q encoding if there are characters that would require it[m
[32m+[m			[32mif ( ! preg_match('/[\200-\377]/', $name))[m
[32m+[m			[32m{[m
[32m+[m				[32m// add slashes for non-printing characters, slashes, and double quotes, and surround it in double quotes[m
[32m+[m				[32m$name = '"'.addcslashes($name, "\0..\37\177'\"\\").'"';[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$name = $this->_prep_q_encoding($name);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->set_header('Reply-To', $name.' <'.$replyto.'>');[m
[32m+[m		[32m$this->_replyto_flag = TRUE;[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set Recipients[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	CI_Email[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function to($to)[m
[32m+[m	[32m{[m
[32m+[m		[32m$to = $this->_str_to_array($to);[m
[32m+[m		[32m$to = $this->clean_email($to);[m
[32m+[m
[32m+[m		[32mif ($this->validate)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->validate_email($to);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($this->_get_protocol() !== 'mail')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->set_header('To', implode(', ', $to));[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->_recipients = $to;[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set CC[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	CI_Email[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function cc($cc)[m
[32m+[m	[32m{[m
[32m+[m		[32m$cc = $this->clean_email($this->_str_to_array($cc));[m
[32m+[m
[32m+[m		[32mif ($this->validate)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->validate_email($cc);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->set_header('Cc', implode(', ', $cc));[m
[32m+[m
[32m+[m		[32mif ($this->_get_protocol() === 'smtp')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_cc_array = $cc;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set BCC[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	CI_Email[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function bcc($bcc, $limit = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($limit !== '' && is_numeric($limit))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->bcc_batch_mode = TRUE;[m
[32m+[m			[32m$this->bcc_batch_size = $limit;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$bcc = $this->clean_email($this->_str_to_array($bcc));[m
[32m+[m
[32m+[m		[32mif ($this->validate)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->validate_email($bcc);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($this->_get_protocol() === 'smtp' OR ($this->bcc_batch_mode && count($bcc) > $this->bcc_batch_size))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_bcc_array = $bcc;[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->set_header('Bcc', implode(', ', $bcc));[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set Email Subject[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	CI_Email[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function subject($subject)[m
[32m+[m	[32m{[m
[32m+[m		[32m$subject = $this->_prep_q_encoding($subject);[m
[32m+[m		[32m$this->set_header('Subject', $subject);[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set Body[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	CI_Email[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function message($body)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->_body = rtrim(str_replace("\r", '', $body));[m
[32m+[m
[32m+[m		[32m/* strip slashes only if magic quotes is ON[m
[32m+[m		[32m   if we do it with magic quotes OFF, it strips real, user-inputted chars.[m
[32m+[m
[32m+[m		[32m   NOTE: In PHP 5.4 get_magic_quotes_gpc() will always return 0 and[m
[32m+[m			[32m it will probably not exist in future versions at all.[m
[32m+[m		[32m*/[m
[32m+[m		[32mif ( ! is_php('5.4') && get_magic_quotes_gpc())[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_body = stripslashes($this->_body);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Assign file attachments[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$file	Can be local path, URL or buffered content[m
[32m+[m	[32m * @param	string	$disposition = 'attachment'[m
[32m+[m	[32m * @param	string	$newname = NULL[m
[32m+[m	[32m * @param	string	$mime = ''[m
[32m+[m	[32m * @return	CI_Email[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function attach($file, $disposition = '', $newname = NULL, $mime = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($mime === '')[m
[32m+[m		[32m{[m
[32m+[m			[32mif (strpos($file, '://') === FALSE && ! file_exists($file))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_set_error_message('lang:email_attachment_missing', $file);[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif ( ! $fp = @fopen($file, 'rb'))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_set_error_message('lang:email_attachment_unreadable', $file);[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$file_content = stream_get_contents($fp);[m
[32m+[m			[32m$mime = $this->_mime_types(pathinfo($file, PATHINFO_EXTENSION));[m
[32m+[m			[32mfclose($fp);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$file_content =& $file; // buffered file[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->_attachments[] = array([m
[32m+[m			[32m'name'		=> array($file, $newname),[m
[32m+[m			[32m'disposition'	=> empty($disposition) ? 'attachment' : $disposition,  // Can also be 'inline'  Not sure if it matters[m
[32m+[m			[32m'type'		=> $mime,[m
[32m+[m			[32m'content'	=> chunk_split(base64_encode($file_content)),[m
[32m+[m			[32m'multipart'	=> 'mixed'[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set and return attachment Content-ID[m
[32m+[m	[32m *[m
[32m+[m	[32m * Useful for attached inline pictures[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$filename[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function attachment_cid($filename)[m
[32m+[m	[32m{[m
[32m+[m		[32mfor ($i = 0, $c = count($this->_attachments); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($this->_attachments[$i]['name'][0] === $filename)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_attachments[$i]['multipart'] = 'related';[m
[32m+[m				[32m$this->_attachments[$i]['cid'] = uniqid(basename($this->_attachments[$i]['name'][0]).'@');[m
[32m+[m				[32mreturn $this->_attachments[$i]['cid'];[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Add a Header Item[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	CI_Email[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_header($header, $value)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->_headers[$header] = str_replace(array("\n", "\r"), '', $value);[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Convert a String to an Array[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _str_to_array($email)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! is_array($email))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn (strpos($email, ',') !== FALSE)[m
[32m+[m				[32m? preg_split('/[\s,]/', $email, -1, PREG_SPLIT_NO_EMPTY)[m
[32m+[m				[32m: (array) trim($email);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $email;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set Multipart Value[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	CI_Email[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_alt_message($str)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->alt_message = (string) $str;[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set Mailtype[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	CI_Email[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_mailtype($type = 'text')[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->mailtype = ($type === 'html') ? 'html' : 'text';[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set Wordwrap[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool[m
[32m+[m	[32m * @return	CI_Email[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_wordwrap($wordwrap = TRUE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->wordwrap = (bool) $wordwrap;[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set Protocol[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	CI_Email[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_protocol($protocol = 'mail')[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->protocol = in_array($protocol, $this->_protocols, TRUE) ? strtolower($protocol) : 'mail';[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set Priority[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int[m
[32m+[m	[32m * @return	CI_Email[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_priority($n = 3)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->priority = preg_match('/^[1-5]$/', $n) ? (int) $n : 3;[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set Newline Character[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	CI_Email[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_newline($newline = "\n")[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->newline = in_array($newline, array("\n", "\r\n", "\r")) ? $newline : "\n";[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set CRLF[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	CI_Email[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_crlf($crlf = "\n")[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->crlf = ($crlf !== "\n" && $crlf !== "\r\n" && $crlf !== "\r") ? "\n" : $crlf;[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get the Message ID[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _get_message_id()[m
[32m+[m	[32m{[m
[32m+[m		[32m$from = str_replace(array('>', '<'), '', $this->_headers['Return-Path']);[m
[32m+[m		[32mreturn '<'.uniqid('').strstr($from, '@').'>';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get Mail Protocol[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _get_protocol()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->protocol = strtolower($this->protocol);[m
[32m+[m		[32min_array($this->protocol, $this->_protocols, TRUE) OR $this->protocol = 'mail';[m
[32m+[m		[32mreturn $this->protocol;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get Mail Encoding[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _get_encoding()[m
[32m+[m	[32m{[m
[32m+[m		[32min_array($this->_encoding, $this->_bit_depths) OR $this->_encoding = '8bit';[m
[32m+[m
[32m+[m		[32mforeach ($this->_base_charsets as $charset)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (strpos($this->charset, $charset) === 0)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_encoding = '7bit';[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->_encoding;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get content type (text/html/attachment)[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _get_content_type()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->mailtype === 'html')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn empty($this->_attachments) ? 'html' : 'html-attach';[m
[32m+[m		[32m}[m
[32m+[m		[32melseif	($this->mailtype === 'text' && ! empty($this->_attachments))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn 'plain-attach';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn 'plain';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set RFC 822 Date[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _set_date()[m
[32m+[m	[32m{[m
[32m+[m		[32m$timezone = date('Z');[m
[32m+[m		[32m$operator = ($timezone[0] === '-') ? '-' : '+';[m
[32m+[m		[32m$timezone = abs($timezone);[m
[32m+[m		[32m$timezone = floor($timezone/3600) * 100 + ($timezone % 3600) / 60;[m
[32m+[m
[32m+[m		[32mreturn sprintf('%s %s%04d', date('D, j M Y H:i:s'), $operator, $timezone);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Mime message[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _get_mime_message()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn 'This is a multi-part message in MIME format.'.$this->newline.'Your email application may not support this format.';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Validate Email Address[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function validate_email($email)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! is_array($email))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_set_error_message('lang:email_must_be_array');[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mforeach ($email as $val)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ( ! $this->valid_email($val))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_set_error_message('lang:email_invalid_address', $val);[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Email Validation[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function valid_email($email)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (function_exists('idn_to_ascii') && strpos($email, '@'))[m
[32m+[m		[32m{[m
[32m+[m			[32mlist($account, $domain) = explode('@', $email, 2);[m
[32m+[m			[32m$domain = defined('INTL_IDNA_VARIANT_UTS46')[m
[32m+[m				[32m? idn_to_ascii($domain, 0, INTL_IDNA_VARIANT_UTS46)[m
[32m+[m				[32m: idn_to_ascii($domain);[m
[32m+[m
[32m+[m			[32mif ($domain !== FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$email = $account.'@'.$domain;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn (bool) filter_var($email, FILTER_VALIDATE_EMAIL);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Clean Extended Email Address: Joe Smith <joe@smith.com>[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function clean_email($email)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! is_array($email))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn preg_match('/\<(.*)\>/', $email, $match) ? $match[1] : $email;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$clean_email = array();[m
[32m+[m
[32m+[m		[32mforeach ($email as $addy)[m
[32m+[m		[32m{[m
[32m+[m			[32m$clean_email[] = preg_match('/\<(.*)\>/', $addy, $match) ? $match[1] : $addy;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $clean_email;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Build alternative plain text message[m
[32m+[m	[32m *[m
[32m+[m	[32m * Provides the raw message for use in plain-text headers of[m
[32m+[m	[32m * HTML-formatted emails.[m
[32m+[m	[32m * If the user hasn't specified his own alternative message[m
[32m+[m	[32m * it creates one by stripping the HTML[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _get_alt_message()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! empty($this->alt_message))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($this->wordwrap)[m
[32m+[m				[32m? $this->word_wrap($this->alt_message, 76)[m
[32m+[m				[32m: $this->alt_message;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$body = preg_match('/\<body.*?\>(.*)\<\/body\>/si', $this->_body, $match) ? $match[1] : $this->_body;[m
[32m+[m		[32m$body = str_replace("\t", '', preg_replace('#<!--(.*)--\>#', '', trim(strip_tags($body))));[m
[32m+[m
[32m+[m		[32mfor ($i = 20; $i >= 3; $i--)[m
[32m+[m		[32m{[m
[32m+[m			[32m$body = str_replace(str_repeat("\n", $i), "\n\n", $body);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Reduce multiple spaces[m
[32m+[m		[32m$body = preg_replace('| +|', ' ', $body);[m
[32m+[m
[32m+[m		[32mreturn ($this->wordwrap)[m
[32m+[m			[32m? $this->word_wrap($body, 76)[m
[32m+[m			[32m: $body;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Word Wrap[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	int	line-length limit[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function word_wrap($str, $charlim = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Set the character limit, if not already present[m
[32m+[m		[32mif (empty($charlim))[m
[32m+[m		[32m{[m
[32m+[m			[32m$charlim = empty($this->wrapchars) ? 76 : $this->wrapchars;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Standardize newlines[m
[32m+[m		[32mif (strpos($str, "\r") !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$str = str_replace(array("\r\n", "\r"), "\n", $str);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Reduce multiple spaces at end of line[m
[32m+[m		[32m$str = preg_replace('| +\n|', "\n", $str);[m
[32m+[m
[32m+[m		[32m// If the current word is surrounded by {unwrap} tags we'll[m
[32m+[m		[32m// strip the entire chunk and replace it with a marker.[m
[32m+[m		[32m$unwrap = array();[m
[32m+[m		[32mif (preg_match_all('|\{unwrap\}(.+?)\{/unwrap\}|s', $str, $matches))[m
[32m+[m		[32m{[m
[32m+[m			[32mfor ($i = 0, $c = count($matches[0]); $i < $c; $i++)[m
[32m+[m			[32m{[m
[32m+[m				[32m$unwrap[] = $matches[1][$i];[m
[32m+[m				[32m$str = str_replace($matches[0][$i], '{{unwrapped'.$i.'}}', $str);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Use PHP's native function to do the initial wordwrap.[m
[32m+[m		[32m// We set the cut flag to FALSE so that any individual words that are[m
[32m+[m		[32m// too long get left alone. In the next step we'll deal with them.[m
[32m+[m		[32m$str = wordwrap($str, $charlim, "\n", FALSE);[m
[32m+[m
[32m+[m		[32m// Split the string into individual lines of text and cycle through them[m
[32m+[m		[32m$output = '';[m
[32m+[m		[32mforeach (explode("\n", $str) as $line)[m
[32m+[m		[32m{[m
[32m+[m			[32m// Is the line within the allowed character count?[m
[32m+[m			[32m// If so we'll join it to the output and continue[m
[32m+[m			[32mif (self::strlen($line) <= $charlim)[m
[32m+[m			[32m{[m
[32m+[m				[32m$output .= $line.$this->newline;[m
[32m+[m				[32mcontinue;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$temp = '';[m
[32m+[m			[32mdo[m
[32m+[m			[32m{[m
[32m+[m				[32m// If the over-length word is a URL we won't wrap it[m
[32m+[m				[32mif (preg_match('!\[url.+\]|://|www\.!', $line))[m
[32m+[m				[32m{[m
[32m+[m					[32mbreak;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m// Trim the word down[m
[32m+[m				[32m$temp .= self::substr($line, 0, $charlim - 1);[m
[32m+[m				[32m$line = self::substr($line, $charlim - 1);[m
[32m+[m			[32m}[m
[32m+[m			[32mwhile (self::strlen($line) > $charlim);[m
[32m+[m
[32m+[m			[32m// If $temp contains data it means we had to split up an over-length[m
[32m+[m			[32m// word into smaller chunks so we'll add it back to our current line[m
[32m+[m			[32mif ($temp !== '')[m
[32m+[m			[32m{[m
[32m+[m				[32m$output .= $temp.$this->newline;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$output .= $line.$this->newline;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Put our markers back[m
[32m+[m		[32mif (count($unwrap) > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($unwrap as $key => $val)[m
[32m+[m			[32m{[m
[32m+[m				[32m$output = str_replace('{{unwrapped'.$key.'}}', $val, $output);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $output;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Build final headers[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _build_headers()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->set_header('User-Agent', $this->useragent);[m
[32m+[m		[32m$this->set_header('X-Sender', $this->clean_email($this->_headers['From']));[m
[32m+[m		[32m$this->set_header('X-Mailer', $this->useragent);[m
[32m+[m		[32m$this->set_header('X-Priority', $this->_priorities[$this->priority]);[m
[32m+[m		[32m$this->set_header('Message-ID', $this->_get_message_id());[m
[32m+[m		[32m$this->set_header('Mime-Version', '1.0');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Write Headers as a string[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _write_headers()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->protocol === 'mail')[m
[32m+[m		[32m{[m
[32m+[m			[32mif (isset($this->_headers['Subject']))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_subject = $this->_headers['Subject'];[m
[32m+[m				[32munset($this->_headers['Subject']);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreset($this->_headers);[m
[32m+[m		[32m$this->_header_str = '';[m
[32m+[m
[32m+[m		[32mforeach ($this->_headers as $key => $val)[m
[32m+[m		[32m{[m
[32m+[m			[32m$val = trim($val);[m
[32m+[m
[32m+[m			[32mif ($val !== '')[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_header_str .= $key.': '.$val.$this->newline;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($this->_get_protocol() === 'mail')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_header_str = rtrim($this->_header_str);[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Build Final Body and attachments[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _build_message()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->wordwrap === TRUE && $this->mailtype !== 'html')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_body = $this->word_wrap($this->_body);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->_write_headers();[m
[32m+[m
[32m+[m		[32m$hdr = ($this->_get_protocol() === 'mail') ? $this->newline : '';[m
[32m+[m		[32m$body = '';[m
[32m+[m
[32m+[m		[32mswitch ($this->_get_content_type())[m
[32m+[m		[32m{[m
[32m+[m			[32mcase 'plain':[m
[32m+[m
[32m+[m				[32m$hdr .= 'Content-Type: text/plain; charset='.$this->charset.$this->newline[m
[32m+[m					[32m.'Content-Transfer-Encoding: '.$this->_get_encoding();[m
[32m+[m
[32m+[m				[32mif ($this->_get_protocol() === 'mail')[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->_header_str .= $hdr;[m
[32m+[m					[32m$this->_finalbody = $this->_body;[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->_finalbody = $hdr.$this->newline.$this->newline.$this->_body;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mreturn;[m
[32m+[m
[32m+[m			[32mcase 'html':[m
[32m+[m
[32m+[m				[32mif ($this->send_multipart === FALSE)[m
[32m+[m				[32m{[m
[32m+[m					[32m$hdr .= 'Content-Type: text/html; charset='.$this->charset.$this->newline[m
[32m+[m						[32m.'Content-Transfer-Encoding: quoted-printable';[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32m$boundary = uniqid('B_ALT_');[m
[32m+[m					[32m$hdr .= 'Content-Type: multipart/alternative; boundary="'.$boundary.'"';[m
[32m+[m
[32m+[m					[32m$body .= $this->_get_mime_message().$this->newline.$this->newline[m
[32m+[m						[32m.'--'.$boundary.$this->newline[m
[32m+[m
[32m+[m						[32m.'Content-Type: text/plain; charset='.$this->charset.$this->newline[m
[32m+[m						[32m.'Content-Transfer-Encoding: '.$this->_get_encoding().$this->newline.$this->newline[m
[32m+[m						[32m.$this->_get_alt_message().$this->newline.$this->newline[m
[32m+[m						[32m.'--'.$boundary.$this->newline[m
[32m+[m
[32m+[m						[32m.'Content-Type: text/html; charset='.$this->charset.$this->newline[m
[32m+[m						[32m.'Content-Transfer-Encoding: quoted-printable'.$this->newline.$this->newline;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m$this->_finalbody = $body.$this->_prep_quoted_printable($this->_body).$this->newline.$this->newline;[m
[32m+[m
[32m+[m				[32mif ($this->_get_protocol() === 'mail')[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->_header_str .= $hdr;[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->_finalbody = $hdr.$this->newline.$this->newline.$this->_finalbody;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mif ($this->send_multipart !== FALSE)[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->_finalbody .= '--'.$boundary.'--';[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mreturn;[m
[32m+[m
[32m+[m			[32mcase 'plain-attach':[m
[32m+[m
[32m+[m				[32m$boundary = uniqid('B_ATC_');[m
[32m+[m				[32m$hdr .= 'Content-Type: multipart/mixed; boundary="'.$boundary.'"';[m
[32m+[m
[32m+[m				[32mif ($this->_get_protocol() === 'mail')[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->_header_str .= $hdr;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m$body .= $this->_get_mime_message().$this->newline[m
[32m+[m					[32m.$this->newline[m
[32m+[m					[32m.'--'.$boundary.$this->newline[m
[32m+[m					[32m.'Content-Type: text/plain; charset='.$this->charset.$this->newline[m
[32m+[m					[32m.'Content-Transfer-Encoding: '.$this->_get_encoding().$this->newline[m
[32m+[m					[32m.$this->newline[m
[32m+[m					[32m.$this->_body.$this->newline.$this->newline;[m
[32m+[m
[32m+[m				[32m$this->_append_attachments($body, $boundary);[m
[32m+[m
[32m+[m				[32mbreak;[m
[32m+[m			[32mcase 'html-attach':[m
[32m+[m
[32m+[m				[32m$alt_boundary = uniqid('B_ALT_');[m
[32m+[m				[32m$last_boundary = NULL;[m
[32m+[m
[32m+[m				[32mif ($this->_attachments_have_multipart('mixed'))[m
[32m+[m				[32m{[m
[32m+[m					[32m$atc_boundary = uniqid('B_ATC_');[m
[32m+[m					[32m$hdr .= 'Content-Type: multipart/mixed; boundary="'.$atc_boundary.'"';[m
[32m+[m					[32m$last_boundary = $atc_boundary;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mif ($this->_attachments_have_multipart('related'))[m
[32m+[m				[32m{[m
[32m+[m					[32m$rel_boundary = uniqid('B_REL_');[m
[32m+[m					[32m$rel_boundary_header = 'Content-Type: multipart/related; boundary="'.$rel_boundary.'"';[m
[32m+[m
[32m+[m					[32mif (isset($last_boundary))[m
[32m+[m					[32m{[m
[32m+[m						[32m$body .= '--'.$last_boundary.$this->newline.$rel_boundary_header;[m
[32m+[m					[32m}[m
[32m+[m					[32melse[m
[32m+[m					[32m{[m
[32m+[m						[32m$hdr .= $rel_boundary_header;[m
[32m+[m					[32m}[m
[32m+[m
[32m+[m					[32m$last_boundary = $rel_boundary;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mif ($this->_get_protocol() === 'mail')[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->_header_str .= $hdr;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mself::strlen($body) && $body .= $this->newline.$this->newline;[m
[32m+[m				[32m$body .= $this->_get_mime_message().$this->newline.$this->newline[m
[32m+[m					[32m.'--'.$last_boundary.$this->newline[m
[32m+[m
[32m+[m					[32m.'Content-Type: multipart/alternative; boundary="'.$alt_boundary.'"'.$this->newline.$this->newline[m
[32m+[m					[32m.'--'.$alt_boundary.$this->newline[m
[32m+[m
[32m+[m					[32m.'Content-Type: text/plain; charset='.$this->charset.$this->newline[m
[32m+[m					[32m.'Content-Transfer-Encoding: '.$this->_get_encoding().$this->newline.$this->newline[m
[32m+[m					[32m.$this->_get_alt_message().$this->newline.$this->newline[m
[32m+[m					[32m.'--'.$alt_boundary.$this->newline[m
[32m+[m
[32m+[m					[32m.'Content-Type: text/html; charset='.$this->charset.$this->newline[m
[32m+[m					[32m.'Content-Transfer-Encoding: quoted-printable'.$this->newline.$this->newline[m
[32m+[m
[32m+[m					[32m.$this->_prep_quoted_printable($this->_body).$this->newline.$this->newline[m
[32m+[m					[32m.'--'.$alt_boundary.'--'.$this->newline.$this->newline;[m
[32m+[m
[32m+[m				[32mif ( ! empty($rel_boundary))[m
[32m+[m				[32m{[m
[32m+[m					[32m$body .= $this->newline.$this->newline;[m
[32m+[m					[32m$this->_append_attachments($body, $rel_boundary, 'related');[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m// multipart/mixed attachments[m
[32m+[m				[32mif ( ! empty($atc_boundary))[m
[32m+[m				[32m{[m
[32m+[m					[32m$body .= $this->newline.$this->newline;[m
[32m+[m					[32m$this->_append_attachments($body, $atc_boundary, 'mixed');[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mbreak;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->_finalbody = ($this->_get_protocol() === 'mail')[m
[32m+[m			[32m? $body[m
[32m+[m			[32m: $hdr.$this->newline.$this->newline.$body;[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32mprotected function _attachments_have_multipart($type)[m
[32m+[m	[32m{[m
[32m+[m		[32mforeach ($this->_attachments as &$attachment)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($attachment['multipart'] === $type)[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn TRUE;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Prepares attachment string[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$body		Message body to append to[m
[32m+[m	[32m * @param	string	$boundary	Multipart boundary[m
[32m+[m	[32m * @param	string	$multipart	When provided, only attachments of this type will be processed[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _append_attachments(&$body, $boundary, $multipart = null)[m
[32m+[m	[32m{[m
[32m+[m		[32mfor ($i = 0, $c = count($this->_attachments); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (isset($multipart) && $this->_attachments[$i]['multipart'] !== $multipart)[m
[32m+[m			[32m{[m
[32m+[m				[32mcontinue;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$name = isset($this->_attachments[$i]['name'][1])[m
[32m+[m				[32m? $this->_attachments[$i]['name'][1][m
[32m+[m				[32m: basename($this->_attachments[$i]['name'][0]);[m
[32m+[m
[32m+[m			[32m$body .= '--'.$boundary.$this->newline[m
[32m+[m				[32m.'Content-Type: '.$this->_attachments[$i]['type'].'; name="'.$name.'"'.$this->newline[m
[32m+[m				[32m.'Content-Disposition: '.$this->_attachments[$i]['disposition'].';'.$this->newline[m
[32m+[m				[32m.'Content-Transfer-Encoding: base64'.$this->newline[m
[32m+[m				[32m.(empty($this->_attachments[$i]['cid']) ? '' : 'Content-ID: <'.$this->_attachments[$i]['cid'].'>'.$this->newline)[m
[32m+[m				[32m.$this->newline[m
[32m+[m				[32m.$this->_attachments[$i]['content'].$this->newline;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// $name won't be set if no attachments were appended,[m
[32m+[m		[32m// and therefore a boundary wouldn't be necessary[m
[32m+[m		[32mempty($name) OR $body .= '--'.$boundary.'--';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Prep Quoted Printable[m
[32m+[m	[32m *[m
[32m+[m	[32m * Prepares string for Quoted-Printable Content-Transfer-Encoding[m
[32m+[m	[32m * Refer to RFC 2045 http://www.ietf.org/rfc/rfc2045.txt[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _prep_quoted_printable($str)[m
[32m+[m	[32m{[m
[32m+[m		[32m// ASCII code numbers for "safe" characters that can always be[m
[32m+[m		[32m// used literally, without encoding, as described in RFC 2049.[m
[32m+[m		[32m// http://www.ietf.org/rfc/rfc2049.txt[m
[32m+[m		[32mstatic $ascii_safe_chars = array([m
[32m+[m			[32m// ' (  )   +   ,   -   .   /   :   =   ?[m
[32m+[m			[32m39, 40, 41, 43, 44, 45, 46, 47, 58, 61, 63,[m
[32m+[m			[32m// numbers[m
[32m+[m			[32m48, 49, 50, 51, 52, 53, 54, 55, 56, 57,[m
[32m+[m			[32m// upper-case letters[m
[32m+[m			[32m65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,[m
[32m+[m			[32m// lower-case letters[m
[32m+[m			[32m97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32m// We are intentionally wrapping so mail servers will encode characters[m
[32m+[m		[32m// properly and MUAs will behave, so {unwrap} must go![m
[32m+[m		[32m$str = str_replace(array('{unwrap}', '{/unwrap}'), '', $str);[m
[32m+[m
[32m+[m		[32m// RFC 2045 specifies CRLF as "\r\n".[m
[32m+[m		[32m// However, many developers choose to override that and violate[m
[32m+[m		[32m// the RFC rules due to (apparently) a bug in MS Exchange,[m
[32m+[m		[32m// which only works with "\n".[m
[32m+[m		[32mif ($this->crlf === "\r\n")[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn quoted_printable_encode($str);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Reduce multiple spaces & remove nulls[m
[32m+[m		[32m$str = preg_replace(array('| +|', '/\x00+/'), array(' ', ''), $str);[m
[32m+[m
[32m+[m		[32m// Standardize newlines[m
[32m+[m		[32mif (strpos($str, "\r") !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$str = str_replace(array("\r\n", "\r"), "\n", $str);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$escape = '=';[m
[32m+[m		[32m$output = '';[m
[32m+[m
[32m+[m		[32mforeach (explode("\n", $str) as $line)[m
[32m+[m		[32m{[m
[32m+[m			[32m$length = self::strlen($line);[m
[32m+[m			[32m$temp = '';[m
[32m+[m
[32m+[m			[32m// Loop through each character in the line to add soft-wrap[m
[32m+[m			[32m// characters at the end of a line " =\r\n" and add the newly[m
[32m+[m			[32m// processed line(s) to the output (see comment on $crlf class property)[m
[32m+[m			[32mfor ($i = 0; $i < $length; $i++)[m
[32m+[m			[32m{[m
[32m+[m				[32m// Grab the next character[m
[32m+[m				[32m$char = $line[$i];[m
[32m+[m				[32m$ascii = ord($char);[m
[32m+[m
[32m+[m				[32m// Convert spaces and tabs but only if it's the end of the line[m
[32m+[m				[32mif ($ascii === 32 OR $ascii === 9)[m
[32m+[m				[32m{[m
[32m+[m					[32mif ($i === ($length - 1))[m
[32m+[m					[32m{[m
[32m+[m						[32m$char = $escape.sprintf('%02s', dechex($ascii));[m
[32m+[m					[32m}[m
[32m+[m				[32m}[m
[32m+[m				[32m// DO NOT move this below the $ascii_safe_chars line![m
[32m+[m				[32m//[m
[32m+[m				[32m// = (equals) signs are allowed by RFC2049, but must be encoded[m
[32m+[m				[32m// as they are the encoding delimiter![m
[32m+[m				[32melseif ($ascii === 61)[m
[32m+[m				[32m{[m
[32m+[m					[32m$char = $escape.strtoupper(sprintf('%02s', dechex($ascii)));  // =3D[m
[32m+[m				[32m}[m
[32m+[m				[32melseif ( ! in_array($ascii, $ascii_safe_chars, TRUE))[m
[32m+[m				[32m{[m
[32m+[m					[32m$char = $escape.strtoupper(sprintf('%02s', dechex($ascii)));[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m// If we're at the character limit, add the line to the output,[m
[32m+[m				[32m// reset our temp variable, and keep on chuggin'[m
[32m+[m				[32mif ((self::strlen($temp) + self::strlen($char)) >= 76)[m
[32m+[m				[32m{[m
[32m+[m					[32m$output .= $temp.$escape.$this->crlf;[m
[32m+[m					[32m$temp = '';[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m// Add the character to our temporary line[m
[32m+[m				[32m$temp .= $char;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// Add our completed line to the output[m
[32m+[m			[32m$output .= $temp.$this->crlf;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// get rid of extra CRLF tacked onto the end[m
[32m+[m		[32mreturn self::substr($output, 0, self::strlen($this->crlf) * -1);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Prep Q Encoding[m
[32m+[m	[32m *[m
[32m+[m	[32m * Performs "Q Encoding" on a string for use in email headers.[m
[32m+[m	[32m * It's related but not identical to quoted-printable, so it has its[m
[32m+[m	[32m * own method.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _prep_q_encoding($str)[m
[32m+[m	[32m{[m
[32m+[m		[32m$str = str_replace(array("\r", "\n"), '', $str);[m
[32m+[m
[32m+[m		[32mif ($this->charset === 'UTF-8')[m
[32m+[m		[32m{[m
[32m+[m			[32m// Note: We used to have mb_encode_mimeheader() as the first choice[m
[32m+[m			[32m//       here, but it turned out to be buggy and unreliable. DO NOT[m
[32m+[m			[32m//       re-add it! -- Narf[m
[32m+[m			[32mif (ICONV_ENABLED === TRUE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$output = @iconv_mime_encode('', $str,[m
[32m+[m					[32marray([m
[32m+[m						[32m'scheme' => 'Q',[m
[32m+[m						[32m'line-length' => 76,[m
[32m+[m						[32m'input-charset' => $this->charset,[m
[32m+[m						[32m'output-charset' => $this->charset,[m
[32m+[m						[32m'line-break-chars' => $this->crlf[m
[32m+[m					[32m)[m
[32m+[m				[32m);[m
[32m+[m
[32m+[m				[32m// There are reports that iconv_mime_encode() might fail and return FALSE[m
[32m+[m				[32mif ($output !== FALSE)[m
[32m+[m				[32m{[m
[32m+[m					[32m// iconv_mime_encode() will always put a header field name.[m
[32m+[m					[32m// We've passed it an empty one, but it still prepends our[m
[32m+[m					[32m// encoded string with ': ', so we need to strip it.[m
[32m+[m					[32mreturn self::substr($output, 2);[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m$chars = iconv_strlen($str, 'UTF-8');[m
[32m+[m			[32m}[m
[32m+[m			[32melseif (MB_ENABLED === TRUE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$chars = mb_strlen($str, 'UTF-8');[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// We might already have this set for UTF-8[m
[32m+[m		[32misset($chars) OR $chars = self::strlen($str);[m
[32m+[m
[32m+[m		[32m$output = '=?'.$this->charset.'?Q?';[m
[32m+[m		[32mfor ($i = 0, $length = self::strlen($output); $i < $chars; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$chr = ($this->charset === 'UTF-8' && ICONV_ENABLED === TRUE)[m
[32m+[m				[32m? '='.implode('=', str_split(strtoupper(bin2hex(iconv_substr($str, $i, 1, $this->charset))), 2))[m
[32m+[m				[32m: '='.strtoupper(bin2hex($str[$i]));[m
[32m+[m
[32m+[m			[32m// RFC 2045 sets a limit of 76 characters per line.[m
[32m+[m			[32m// We'll append ?= to the end of each line though.[m
[32m+[m			[32mif ($length + ($l = self::strlen($chr)) > 74)[m
[32m+[m			[32m{[m
[32m+[m				[32m$output .= '?='.$this->crlf // EOL[m
[32m+[m					[32m.' =?'.$this->charset.'?Q?'.$chr; // New line[m
[32m+[m				[32m$length = 6 + self::strlen($this->charset) + $l; // Reset the length for the new line[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$output .= $chr;[m
[32m+[m				[32m$length += $l;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// End the header[m
[32m+[m		[32mreturn $output.'?=';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Send Email[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	bool	$auto_clear = TRUE[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function send($auto_clear = TRUE)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! isset($this->_headers['From']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_set_error_message('lang:email_no_from');[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($this->_replyto_flag === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->reply_to($this->_headers['From']);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! isset($this->_recipients) && ! isset($this->_headers['To'])[m
[32m+[m			[32m&& ! isset($this->_bcc_array) && ! isset($this->_headers['Bcc'])[m
[32m+[m			[32m&& ! isset($this->_headers['Cc']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_set_error_message('lang:email_no_recipients');[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->_build_headers();[m
[32m+[m
[32m+[m		[32mif ($this->bcc_batch_mode && count($this->_bcc_array) > $this->bcc_batch_size)[m
[32m+[m		[32m{[m
[32m+[m			[32m$result = $this->batch_bcc_send();[m
[32m+[m
[32m+[m			[32mif ($result && $auto_clear)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->clear();[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn $result;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($this->_build_message() === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$result = $this->_spool_email();[m
[32m+[m
[32m+[m		[32mif ($result && $auto_clear)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->clear();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $result;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Batch Bcc Send. Sends groups of BCCs in batches[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function batch_bcc_send()[m
[32m+[m	[32m{[m
[32m+[m		[32m$float = $this->bcc_batch_size - 1;[m
[32m+[m		[32m$set = '';[m
[32m+[m		[32m$chunk = array();[m
[32m+[m
[32m+[m		[32mfor ($i = 0, $c = count($this->_bcc_array); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (isset($this->_bcc_array[$i]))[m
[32m+[m			[32m{[m
[32m+[m				[32m$set .= ', '.$this->_bcc_array[$i];[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif ($i === $float)[m
[32m+[m			[32m{[m
[32m+[m				[32m$chunk[] = self::substr($set, 1);[m
[32m+[m				[32m$float += $this->bcc_batch_size;[m
[32m+[m				[32m$set = '';[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif ($i === $c-1)[m
[32m+[m			[32m{[m
[32m+[m				[32m$chunk[] = self::substr($set, 1);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mfor ($i = 0, $c = count($chunk); $i < $c; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32munset($this->_headers['Bcc']);[m
[32m+[m
[32m+[m			[32m$bcc = $this->clean_email($this->_str_to_array($chunk[$i]));[m
[32m+[m
[32m+[m			[32mif ($this->protocol !== 'smtp')[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->set_header('Bcc', implode(', ', $bcc));[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_bcc_array = $bcc;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif ($this->_build_message() === FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$this->_spool_email();[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Unwrap special elements[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _unwrap_specials()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->_finalbody = preg_replace_callback('/\{unwrap\}(.*?)\{\/unwrap\}/si', array($this, '_remove_nl_callback'), $this->_finalbody);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Strip line-breaks via callback[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$matches[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _remove_nl_callback($matches)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (strpos($matches[1], "\r") !== FALSE OR strpos($matches[1], "\n") !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$matches[1] = str_replace(array("\r\n", "\r", "\n"), '', $matches[1]);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $matches[1];[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Spool mail to the mail server[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _spool_email()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->_unwrap_specials();[m
[32m+[m
[32m+[m		[32m$protocol = $this->_get_protocol();[m
[32m+[m		[32m$method   = '_send_with_'.$protocol;[m
[32m+[m		[32mif ( ! $this->$method())[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_set_error_message('lang:email_send_failure_'.($protocol === 'mail' ? 'phpmail' : $protocol));[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->_set_error_message('lang:email_sent', $protocol);[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Validate email for shell[m
[32m+[m	[32m *[m
[32m+[m	[32m * Applies stricter, shell-safe validation to email addresses.[m
[32m+[m	[32m * Introduced to prevent RCE via sendmail's -f option.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @see	https://github.com/bcit-ci/CodeIgniter/issues/4963[m
[32m+[m	[32m * @see	https://gist.github.com/Zenexer/40d02da5e07f151adeaeeaa11af9ab36[m
[32m+[m	[32m * @license	https://creativecommons.org/publicdomain/zero/1.0/	CC0 1.0, Public Domain[m
[32m+[m	[32m *[m
[32m+[m	[32m * Credits for the base concept go to Paul Buonopane <paul@namepros.com>[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$email[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _validate_email_for_shell(&$email)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (function_exists('idn_to_ascii') && strpos($email, '@'))[m
[32m+[m		[32m{[m
[32m+[m			[32mlist($account, $domain) = explode('@', $email, 2);[m
[32m+[m			[32m$domain = defined('INTL_IDNA_VARIANT_UTS46')[m
[32m+[m				[32m? idn_to_ascii($domain, 0, INTL_IDNA_VARIANT_UTS46)[m
[32m+[m				[32m: idn_to_ascii($domain);[m
[32m+[m
[32m+[m			[32mif ($domain !== FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$email = $account.'@'.$domain;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn (filter_var($email, FILTER_VALIDATE_EMAIL) === $email && preg_match('#\A[a-z0-9._+-]+@[a-z0-9.-]{1,253}\z#i', $email));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Send using mail()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _send_with_mail()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (is_array($this->_recipients))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_recipients = implode(', ', $this->_recipients);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// _validate_email_for_shell() below accepts by reference,[m
[32m+[m		[32m// so this needs to be assigned to a variable[m
[32m+[m		[32m$from = $this->clean_email($this->_headers['Return-Path']);[m
[32m+[m
[32m+[m		[32mif ($this->_safe_mode === TRUE || ! $this->_validate_email_for_shell($from))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn mail($this->_recipients, $this->_subject, $this->_finalbody, $this->_header_str);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m// most documentation of sendmail using the "-f" flag lacks a space after it, however[m
[32m+[m			[32m// we've encountered servers that seem to require it to be in place.[m
[32m+[m			[32mreturn mail($this->_recipients, $this->_subject, $this->_finalbody, $this->_header_str, '-f '.$from);[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Send using Sendmail[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _send_with_sendmail()[m
[32m+[m	[32m{[m
[32m+[m		[32m// _validate_email_for_shell() below accepts by reference,[m
[32m+[m		[32m// so this needs to be assigned to a variable[m
[32m+[m		[32m$from = $this->clean_email($this->_headers['From']);[m
[32m+[m		[32mif ($this->_validate_email_for_shell($from))[m
[32m+[m		[32m{[m
[32m+[m			[32m$from = '-f '.$from;[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$from = '';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// is popen() enabled?[m
[32m+[m		[32mif ( ! function_usable('popen')	OR FALSE === ($fp = @popen($this->mailpath.' -oi '.$from.' -t', 'w')))[m
[32m+[m		[32m{[m
[32m+[m			[32m// server probably has popen disabled, so nothing we can do to get a verbose error.[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mfputs($fp, $this->_header_str);[m
[32m+[m		[32mfputs($fp, $this->_finalbody);[m
[32m+[m
[32m+[m		[32m$status = pclose($fp);[m
[32m+[m
[32m+[m		[32mif ($status !== 0)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_set_error_message('lang:email_exit_status', $status);[m
[32m+[m			[32m$this->_set_error_message('lang:email_no_socket');[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Send using SMTP[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _send_with_smtp()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->smtp_host === '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_set_error_message('lang:email_no_hostname');[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! $this->_smtp_connect() OR ! $this->_smtp_authenticate())[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! $this->_send_command('from', $this->clean_email($this->_headers['From'])))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_smtp_end();[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mforeach ($this->_recipients as $val)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ( ! $this->_send_command('to', $val))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_smtp_end();[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (count($this->_cc_array) > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($this->_cc_array as $val)[m
[32m+[m			[32m{[m
[32m+[m				[32mif ($val !== '' && ! $this->_send_command('to', $val))[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->_smtp_end();[m
[32m+[m					[32mreturn FALSE;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (count($this->_bcc_array) > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($this->_bcc_array as $val)[m
[32m+[m			[32m{[m
[32m+[m				[32mif ($val !== '' && ! $this->_send_command('to', $val))[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->_smtp_end();[m
[32m+[m					[32mreturn FALSE;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! $this->_send_command('data'))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_smtp_end();[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// perform dot transformation on any lines that begin with a dot[m
[32m+[m		[32m$this->_send_data($this->_header_str.preg_replace('/^\./m', '..$1', $this->_finalbody));[m
[32m+[m
[32m+[m		[32m$this->_send_data('.');[m
[32m+[m
[32m+[m		[32m$reply = $this->_get_smtp_data();[m
[32m+[m		[32m$this->_set_error_message($reply);[m
[32m+[m
[32m+[m		[32m$this->_smtp_end();[m
[32m+[m
[32m+[m		[32mif (strpos($reply, '250') !== 0)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_set_error_message('lang:email_smtp_error', $reply);[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * SMTP End[m
[32m+[m	[32m *[m
[32m+[m	[32m * Shortcut to send RSET or QUIT depending on keep-alive[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _smtp_end()[m
[32m+[m	[32m{[m
[32m+[m		[32m($this->smtp_keepalive)[m
[32m+[m			[32m? $this->_send_command('reset')[m
[32m+[m			[32m: $this->_send_command('quit');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * SMTP Connect[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _smtp_connect()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (is_resource($this->_smtp_connect))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$ssl = ($this->smtp_crypto === 'ssl') ? 'ssl://' : '';[m
[32m+[m
[32m+[m		[32m$this->_smtp_connect = fsockopen($ssl.$this->smtp_host,[m
[32m+[m							[32m$this->smtp_port,[m
[32m+[m							[32m$errno,[m
[32m+[m							[32m$errstr,[m
[32m+[m							[32m$this->smtp_timeout);[m
[32m+[m
[32m+[m		[32mif ( ! is_resource($this->_smtp_connect))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_set_error_message('lang:email_smtp_error', $errno.' '.$errstr);[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mstream_set_timeout($this->_smtp_connect, $this->smtp_timeout);[m
[32m+[m		[32m$this->_set_error_message($this->_get_smtp_data());[m
[32m+[m
[32m+[m		[32mif ($this->smtp_crypto === 'tls')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_send_command('hello');[m
[32m+[m			[32m$this->_send_command('starttls');[m
[32m+[m
[32m+[m			[32m/**[m
[32m+[m			[32m * STREAM_CRYPTO_METHOD_TLS_CLIENT is quite the mess ...[m
[32m+[m			[32m *[m
[32m+[m			[32m * - On PHP <5.6 it doesn't even mean TLS, but SSL 2.0, and there's no option to use actual TLS[m
[32m+[m			[32m * - On PHP 5.6.0-5.6.6, >=7.2 it means negotiation with any of TLS 1.0, 1.1, 1.2[m
[32m+[m			[32m * - On PHP 5.6.7-7.1.* it means only TLS 1.0[m
[32m+[m			[32m *[m
[32m+[m			[32m * We want the negotiation, so we'll force it below ...[m
[32m+[m			[32m */[m
[32m+[m			[32m$method = is_php('5.6')[m
[32m+[m				[32m? STREAM_CRYPTO_METHOD_TLSv1_0_CLIENT | STREAM_CRYPTO_METHOD_TLSv1_1_CLIENT | STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT[m
[32m+[m				[32m: STREAM_CRYPTO_METHOD_TLS_CLIENT;[m
[32m+[m			[32m$crypto = stream_socket_enable_crypto($this->_smtp_connect, TRUE, $method);[m
[32m+[m
[32m+[m			[32mif ($crypto !== TRUE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_set_error_message('lang:email_smtp_error', $this->_get_smtp_data());[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->_send_command('hello');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Send SMTP command[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _send_command($cmd, $data = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mswitch ($cmd)[m
[32m+[m		[32m{[m
[32m+[m			[32mcase 'hello' :[m
[32m+[m
[32m+[m						[32mif ($this->_smtp_auth OR $this->_get_encoding() === '8bit')[m
[32m+[m						[32m{[m
[32m+[m							[32m$this->_send_data('EHLO '.$this->_get_hostname());[m
[32m+[m						[32m}[m
[32m+[m						[32melse[m
[32m+[m						[32m{[m
[32m+[m							[32m$this->_send_data('HELO '.$this->_get_hostname());[m
[32m+[m						[32m}[m
[32m+[m
[32m+[m						[32m$resp = 250;[m
[32m+[m			[32mbreak;[m
[32m+[m			[32mcase 'starttls'	:[m
[32m+[m
[32m+[m						[32m$this->_send_data('STARTTLS');[m
[32m+[m						[32m$resp = 220;[m
[32m+[m			[32mbreak;[m
[32m+[m			[32mcase 'from' :[m
[32m+[m
[32m+[m						[32m$this->_send_data('MAIL FROM:<'.$data.'>');[m
[32m+[m						[32m$resp = 250;[m
[32m+[m			[32mbreak;[m
[32m+[m			[32mcase 'to' :[m
[32m+[m
[32m+[m						[32mif ($this->dsn)[m
[32m+[m						[32m{[m
[32m+[m							[32m$this->_send_data('RCPT TO:<'.$data.'> NOTIFY=SUCCESS,DELAY,FAILURE ORCPT=rfc822;'.$data);[m
[32m+[m						[32m}[m
[32m+[m						[32melse[m
[32m+[m						[32m{[m
[32m+[m							[32m$this->_send_data('RCPT TO:<'.$data.'>');[m
[32m+[m						[32m}[m
[32m+[m
[32m+[m						[32m$resp = 250;[m
[32m+[m			[32mbreak;[m
[32m+[m			[32mcase 'data'	:[m
[32m+[m
[32m+[m						[32m$this->_send_data('DATA');[m
[32m+[m						[32m$resp = 354;[m
[32m+[m			[32mbreak;[m
[32m+[m			[32mcase 'reset':[m
[32m+[m
[32m+[m						[32m$this->_send_data('RSET');[m
[32m+[m						[32m$resp = 250;[m
[32m+[m			[32mbreak;[m
[32m+[m			[32mcase 'quit'	:[m
[32m+[m
[32m+[m						[32m$this->_send_data('QUIT');[m
[32m+[m						[32m$resp = 221;[m
[32m+[m			[32mbreak;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$reply = $this->_get_smtp_data();[m
[32m+[m
[32m+[m		[32m$this->_debug_msg[] = '<pre>'.$cmd.': '.$reply.'</pre>';[m
[32m+[m
[32m+[m		[32mif ((int) self::substr($reply, 0, 3) !== $resp)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_set_error_message('lang:email_smtp_error', $reply);[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($cmd === 'quit')[m
[32m+[m		[32m{[m
[32m+[m			[32mfclose($this->_smtp_connect);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * SMTP Authenticate[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _smtp_authenticate()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! $this->_smtp_auth)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($this->smtp_user === '' && $this->smtp_pass === '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_set_error_message('lang:email_no_smtp_unpw');[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->_send_data('AUTH LOGIN');[m
[32m+[m
[32m+[m		[32m$reply = $this->_get_smtp_data();[m
[32m+[m
[32m+[m		[32mif (strpos($reply, '503') === 0)	// Already authenticated[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (strpos($reply, '334') !== 0)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_set_error_message('lang:email_failed_smtp_login', $reply);[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->_send_data(base64_encode($this->smtp_user));[m
[32m+[m
[32m+[m		[32m$reply = $this->_get_smtp_data();[m
[32m+[m
[32m+[m		[32mif (strpos($reply, '334') !== 0)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_set_error_message('lang:email_smtp_auth_un', $reply);[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->_send_data(base64_encode($this->smtp_pass));[m
[32m+[m
[32m+[m		[32m$reply = $this->_get_smtp_data();[m
[32m+[m
[32m+[m		[32mif (strpos($reply, '235') !== 0)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_set_error_message('lang:email_smtp_auth_pw', $reply);[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($this->smtp_keepalive)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_smtp_auth = FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Send SMTP data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$data[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _send_data($data)[m
[32m+[m	[32m{[m
[32m+[m		[32m$data .= $this->newline;[m
[32m+[m		[32mfor ($written = $timestamp = 0, $length = self::strlen($data); $written < $length; $written += $result)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (($result = fwrite($this->_smtp_connect, self::substr($data, $written))) === FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32mbreak;[m
[32m+[m			[32m}[m
[32m+[m			[32m// See https://bugs.php.net/bug.php?id=39598 and http://php.net/manual/en/function.fwrite.php#96951[m
[32m+[m			[32melseif ($result === 0)[m
[32m+[m			[32m{[m
[32m+[m				[32mif ($timestamp === 0)[m
[32m+[m				[32m{[m
[32m+[m					[32m$timestamp = time();[m
[32m+[m				[32m}[m
[32m+[m				[32melseif ($timestamp < (time() - $this->smtp_timeout))[m
[32m+[m				[32m{[m
[32m+[m					[32m$result = FALSE;[m
[32m+[m					[32mbreak;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32musleep(250000);[m
[32m+[m				[32mcontinue;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$timestamp = 0;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($result === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_set_error_message('lang:email_smtp_data_failure', $data);[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get SMTP data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _get_smtp_data()[m
[32m+[m	[32m{[m
[32m+[m		[32m$data = '';[m
[32m+[m
[32m+[m		[32mwhile ($str = fgets($this->_smtp_connect, 512))[m
[32m+[m		[32m{[m
[32m+[m			[32m$data .= $str;[m
[32m+[m
[32m+[m			[32mif ($str[3] === ' ')[m
[32m+[m			[32m{[m
[32m+[m				[32mbreak;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $data;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get Hostname[m
[32m+[m	[32m *[m
[32m+[m	[32m * There are only two legal types of hostname - either a fully[m
[32m+[m	[32m * qualified domain name (eg: "mail.example.com") or an IP literal[m
[32m+[m	[32m * (eg: "[1.2.3.4]").[m
[32m+[m	[32m *[m
[32m+[m	[32m * @link	https://tools.ietf.org/html/rfc5321#section-2.3.5[m
[32m+[m	[32m * @link	http://cbl.abuseat.org/namingproblems.html[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _get_hostname()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (isset($_SERVER['SERVER_NAME']))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $_SERVER['SERVER_NAME'];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn isset($_SERVER['SERVER_ADDR']) ? '['.$_SERVER['SERVER_ADDR'].']' : '[127.0.0.1]';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get Debug Message[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$include	List of raw data chunks to include in the output[m
[32m+[m	[32m *					Valid options are: 'headers', 'subject', 'body'[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function print_debugger($include = array('headers', 'subject', 'body'))[m
[32m+[m	[32m{[m
[32m+[m		[32m$msg = '';[m
[32m+[m
[32m+[m		[32mif (count($this->_debug_msg) > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($this->_debug_msg as $val)[m
[32m+[m			[32m{[m
[32m+[m				[32m$msg .= $val;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Determine which parts of our raw data needs to be printed[m
[32m+[m		[32m$raw_data = '';[m
[32m+[m		[32mis_array($include) OR $include = array($include);[m
[32m+[m
[32m+[m		[32mif (in_array('headers', $include, TRUE))[m
[32m+[m		[32m{[m
[32m+[m			[32m$raw_data = htmlspecialchars($this->_header_str)."\n";[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (in_array('subject', $include, TRUE))[m
[32m+[m		[32m{[m
[32m+[m			[32m$raw_data .= htmlspecialchars($this->_subject)."\n";[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (in_array('body', $include, TRUE))[m
[32m+[m		[32m{[m
[32m+[m			[32m$raw_data .= htmlspecialchars($this->_finalbody);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $msg.($raw_data === '' ? '' : '<pre>'.$raw_data.'</pre>');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set Message[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$msg[m
[32m+[m	[32m * @param	string	$val = ''[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _set_error_message($msg, $val = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$CI =& get_instance();[m
[32m+[m		[32m$CI->lang->load('email');[m
[32m+[m
[32m+[m		[32mif (sscanf($msg, 'lang:%s', $line) !== 1 OR FALSE === ($line = $CI->lang->line($line)))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_debug_msg[] = str_replace('%s', $val, $msg).'<br />';[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_debug_msg[] = str_replace('%s', $val, $line).'<br />';[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Mime Types[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _mime_types($ext = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$ext = strtolower($ext);[m
[32m+[m
[32m+[m		[32m$mimes =& get_mimes();[m
[32m+[m
[32m+[m		[32mif (isset($mimes[$ext]))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn is_array($mimes[$ext])[m
[32m+[m				[32m? current($mimes[$ext])[m
[32m+[m				[32m: $mimes[$ext];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn 'application/x-unknown-content-type';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Destructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __destruct()[m
[32m+[m	[32m{[m
[32m+[m		[32mis_resource($this->_smtp_connect) && $this->_send_command('quit');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Byte-safe strlen()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$str[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected static function strlen($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn (self::$func_overload)[m
[32m+[m			[32m? mb_strlen($str, '8bit')[m
[32m+[m			[32m: strlen($str);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Byte-safe substr()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$str[m
[32m+[m	[32m * @param	int	$start[m
[32m+[m	[32m * @param	int	$length[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected static function substr($str, $start, $length = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (self::$func_overload)[m
[32m+[m		[32m{[m
[32m+[m			[32m// mb_substr($str, $start, null, '8bit') returns an empty[m
[32m+[m			[32m// string on PHP 5.3[m
[32m+[m			[32misset($length) OR $length = ($start >= 0 ? self::strlen($str) - $start : -$start);[m
[32m+[m			[32mreturn mb_substr($str, $start, $length, '8bit');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn isset($length)[m
[32m+[m			[32m? substr($str, $start, $length)[m
[32m+[m			[32m: substr($str, $start);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/libraries/Encrypt.php b/system/libraries/Encrypt.php[m
[1mnew file mode 100644[m
[1mindex 0000000..17a3fe2[m
[1m--- /dev/null[m
[1m+++ b/system/libraries/Encrypt.php[m
[36m@@ -0,0 +1,521 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter Encryption Class[m
[32m+[m[32m *[m
[32m+[m[32m * Provides two-way keyed encoding using Mcrypt[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Libraries[m
[32m+[m[32m * @category	Libraries[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/libraries/encryption.html[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_Encrypt {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Reference to the user's encryption key[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $encryption_key		= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Type of hash operation[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_hash_type		= 'sha1';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Flag for the existence of mcrypt[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_mcrypt_exists	= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Current cipher to be used with mcrypt[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_mcrypt_cipher;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Method for encrypting/decrypting data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var int[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_mcrypt_mode;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Initialize Encryption class[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (($this->_mcrypt_exists = function_exists('mcrypt_encrypt')) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mshow_error('The Encrypt library requires the Mcrypt extension.');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mlog_message('info', 'Encrypt Class Initialized');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fetch the encryption key[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns it as MD5 in order to have an exact-length 128 bit key.[m
[32m+[m	[32m * Mcrypt is sensitive to keys that are not the correct length[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get_key($key = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($key === '')[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($this->encryption_key !== '')[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn $this->encryption_key;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$key = config_item('encryption_key');[m
[32m+[m
[32m+[m			[32mif ( ! self::strlen($key))[m
[32m+[m			[32m{[m
[32m+[m				[32mshow_error('In order to use the encryption class requires that you set an encryption key in your config file.');[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn md5($key);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set the encryption key[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	CI_Encrypt[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_key($key = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->encryption_key = $key;[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Encode[m
[32m+[m	[32m *[m
[32m+[m	[32m * Encodes the message string using bitwise XOR encoding.[m
[32m+[m	[32m * The key is combined with a random hash, and then it[m
[32m+[m	[32m * too gets converted using XOR. The whole thing is then run[m
[32m+[m	[32m * through mcrypt using the randomized key. The end result[m
[32m+[m	[32m * is a double-encrypted message string that is randomized[m
[32m+[m	[32m * with each call to this function, even if the supplied[m
[32m+[m	[32m * message and key are the same.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the string to encode[m
[32m+[m	[32m * @param	string	the key[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function encode($string, $key = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn base64_encode($this->mcrypt_encode($string, $this->get_key($key)));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Decode[m
[32m+[m	[32m *[m
[32m+[m	[32m * Reverses the above process[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function decode($string, $key = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif (preg_match('/[^a-zA-Z0-9\/\+=]/', $string) OR base64_encode(base64_decode($string)) !== $string)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->mcrypt_decode(base64_decode($string), $this->get_key($key));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Encode from Legacy[m
[32m+[m	[32m *[m
[32m+[m	[32m * Takes an encoded string from the original Encryption class algorithms and[m
[32m+[m	[32m * returns a newly encoded string using the improved method added in 2.0.0[m
[32m+[m	[32m * This allows for backwards compatibility and a method to transition to the[m
[32m+[m	[32m * new encryption algorithms.[m
[32m+[m	[32m *[m
[32m+[m	[32m * For more details, see https://codeigniter.com/user_guide/installation/upgrade_200.html#encryption[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	int		(mcrypt mode constant)[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function encode_from_legacy($string, $legacy_mode = MCRYPT_MODE_ECB, $key = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif (preg_match('/[^a-zA-Z0-9\/\+=]/', $string))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// decode it first[m
[32m+[m		[32m// set mode temporarily to what it was when string was encoded with the legacy[m
[32m+[m		[32m// algorithm - typically MCRYPT_MODE_ECB[m
[32m+[m		[32m$current_mode = $this->_get_mode();[m
[32m+[m		[32m$this->set_mode($legacy_mode);[m
[32m+[m
[32m+[m		[32m$key = $this->get_key($key);[m
[32m+[m		[32m$dec = base64_decode($string);[m
[32m+[m		[32mif (($dec = $this->mcrypt_decode($dec, $key)) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->set_mode($current_mode);[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$dec = $this->_xor_decode($dec, $key);[m
[32m+[m
[32m+[m		[32m// set the mcrypt mode back to what it should be, typically MCRYPT_MODE_CBC[m
[32m+[m		[32m$this->set_mode($current_mode);[m
[32m+[m
[32m+[m		[32m// and re-encode[m
[32m+[m		[32mreturn base64_encode($this->mcrypt_encode($dec, $key));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * XOR Decode[m
[32m+[m	[32m *[m
[32m+[m	[32m * Takes an encoded string and key as input and generates the[m
[32m+[m	[32m * plain-text original message[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _xor_decode($string, $key)[m
[32m+[m	[32m{[m
[32m+[m		[32m$string = $this->_xor_merge($string, $key);[m
[32m+[m
[32m+[m		[32m$dec = '';[m
[32m+[m		[32mfor ($i = 0, $l = self::strlen($string); $i < $l; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$dec .= ($string[$i++] ^ $string[$i]);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $dec;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * XOR key + string Combiner[m
[32m+[m	[32m *[m
[32m+[m	[32m * Takes a string and key as input and computes the difference using XOR[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _xor_merge($string, $key)[m
[32m+[m	[32m{[m
[32m+[m		[32m$hash = $this->hash($key);[m
[32m+[m		[32m$str = '';[m
[32m+[m
[32m+[m		[32mfor ($i = 0, $ls = self::strlen($string), $lh = self::strlen($hash); $i < $ls; $i++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$str .= $string[$i] ^ $hash[($i % $lh)];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $str;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Encrypt using Mcrypt[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function mcrypt_encode($data, $key)[m
[32m+[m	[32m{[m
[32m+[m		[32m$init_size = mcrypt_get_iv_size($this->_get_cipher(), $this->_get_mode());[m
[32m+[m		[32m$init_vect = mcrypt_create_iv($init_size, MCRYPT_DEV_URANDOM);[m
[32m+[m		[32mreturn $this->_add_cipher_noise($init_vect.mcrypt_encrypt($this->_get_cipher(), $key, $data, $this->_get_mode(), $init_vect), $key);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Decrypt using Mcrypt[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function mcrypt_decode($data, $key)[m
[32m+[m	[32m{[m
[32m+[m		[32m$data = $this->_remove_cipher_noise($data, $key);[m
[32m+[m		[32m$init_size = mcrypt_get_iv_size($this->_get_cipher(), $this->_get_mode());[m
[32m+[m
[32m+[m		[32mif ($init_size > self::strlen($data))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$init_vect = self::substr($data, 0, $init_size);[m
[32m+[m		[32m$data      = self::substr($data, $init_size);[m
[32m+[m
[32m+[m		[32mreturn rtrim(mcrypt_decrypt($this->_get_cipher(), $key, $data, $this->_get_mode(), $init_vect), "\0");[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Adds permuted noise to the IV + encrypted data to protect[m
[32m+[m	[32m * against Man-in-the-middle attacks on CBC mode ciphers[m
[32m+[m	[32m * http://www.ciphersbyritter.com/GLOSSARY.HTM#IV[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _add_cipher_noise($data, $key)[m
[32m+[m	[32m{[m
[32m+[m		[32m$key = $this->hash($key);[m
[32m+[m		[32m$str = '';[m
[32m+[m
[32m+[m		[32mfor ($i = 0, $j = 0, $ld = self::strlen($data), $lk = self::strlen($key); $i < $ld; ++$i, ++$j)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($j >= $lk)[m
[32m+[m			[32m{[m
[32m+[m				[32m$j = 0;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$str .= chr((ord($data[$i]) + ord($key[$j])) % 256);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $str;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Removes permuted noise from the IV + encrypted data, reversing[m
[32m+[m	[32m * _add_cipher_noise()[m
[32m+[m	[32m *[m
[32m+[m	[32m * Function description[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$data[m
[32m+[m	[32m * @param	string	$key[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _remove_cipher_noise($data, $key)[m
[32m+[m	[32m{[m
[32m+[m		[32m$key = $this->hash($key);[m
[32m+[m		[32m$str = '';[m
[32m+[m
[32m+[m		[32mfor ($i = 0, $j = 0, $ld = self::strlen($data), $lk = self::strlen($key); $i < $ld; ++$i, ++$j)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($j >= $lk)[m
[32m+[m			[32m{[m
[32m+[m				[32m$j = 0;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$temp = ord($data[$i]) - ord($key[$j]);[m
[32m+[m
[32m+[m			[32mif ($temp < 0)[m
[32m+[m			[32m{[m
[32m+[m				[32m$temp += 256;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$str .= chr($temp);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $str;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set the Mcrypt Cipher[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int[m
[32m+[m	[32m * @return	CI_Encrypt[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_cipher($cipher)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->_mcrypt_cipher = $cipher;[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set the Mcrypt Mode[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int[m
[32m+[m	[32m * @return	CI_Encrypt[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_mode($mode)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->_mcrypt_mode = $mode;[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get Mcrypt cipher Value[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _get_cipher()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->_mcrypt_cipher === NULL)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->_mcrypt_cipher = MCRYPT_RIJNDAEL_256;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->_mcrypt_cipher;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get Mcrypt Mode Value[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _get_mode()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->_mcrypt_mode === NULL)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->_mcrypt_mode = MCRYPT_MODE_CBC;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->_mcrypt_mode;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set the Hash type[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_hash($type = 'sha1')[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->_hash_type = in_array($type, hash_algos()) ? $type : 'sha1';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Hash encode a string[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function hash($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn hash($this->_hash_type, $str);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Byte-safe strlen()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$str[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected static function strlen($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn defined('MB_OVERLOAD_STRING')[m
[32m+[m			[32m? mb_strlen($str, '8bit')[m
[32m+[m			[32m: strlen($str);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Byte-safe substr()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$str[m
[32m+[m	[32m * @param	int	$start[m
[32m+[m	[32m * @param	int	$length[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected static function substr($str, $start, $length = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (defined('MB_OVERLOAD_STRING'))[m
[32m+[m		[32m{[m
[32m+[m			[32m// mb_substr($str, $start, null, '8bit') returns an empty[m
[32m+[m			[32m// string on PHP 5.3[m
[32m+[m			[32misset($length) OR $length = ($start >= 0 ? self::strlen($str) - $start : -$start);[m
[32m+[m			[32mreturn mb_substr($str, $start, $length, '8bit');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn isset($length)[m
[32m+[m			[32m? substr($str, $start, $length)[m
[32m+[m			[32m: substr($str, $start);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/libraries/Encryption.php b/system/libraries/Encryption.php[m
[1mnew file mode 100644[m
[1mindex 0000000..62f8556[m
[1m--- /dev/null[m
[1m+++ b/system/libraries/Encryption.php[m
[36m@@ -0,0 +1,941 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter Encryption Class[m
[32m+[m[32m *[m
[32m+[m[32m * Provides two-way keyed encryption via PHP's MCrypt and/or OpenSSL extensions.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Libraries[m
[32m+[m[32m * @category	Libraries[m
[32m+[m[32m * @author		Andrey Andreev[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/libraries/encryption.html[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_Encryption {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Encryption cipher[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_cipher = 'aes-128';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Cipher mode[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_mode = 'cbc';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Cipher handle[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_handle;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Encryption key[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_key;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * PHP extension to be used[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_driver;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of usable drivers (PHP extensions)[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_drivers = array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of available modes[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_modes = array([m
[32m+[m		[32m'mcrypt' => array([m
[32m+[m			[32m'cbc' => 'cbc',[m
[32m+[m			[32m'ecb' => 'ecb',[m
[32m+[m			[32m'ofb' => 'nofb',[m
[32m+[m			[32m'ofb8' => 'ofb',[m
[32m+[m			[32m'cfb' => 'ncfb',[m
[32m+[m			[32m'cfb8' => 'cfb',[m
[32m+[m			[32m'ctr' => 'ctr',[m
[32m+[m			[32m'stream' => 'stream'[m
[32m+[m		[32m),[m
[32m+[m		[32m'openssl' => array([m
[32m+[m			[32m'cbc' => 'cbc',[m
[32m+[m			[32m'ecb' => 'ecb',[m
[32m+[m			[32m'ofb' => 'ofb',[m
[32m+[m			[32m'cfb' => 'cfb',[m
[32m+[m			[32m'cfb8' => 'cfb8',[m
[32m+[m			[32m'ctr' => 'ctr',[m
[32m+[m			[32m'stream' => '',[m
[32m+[m			[32m'xts' => 'xts'[m
[32m+[m		[32m)[m
[32m+[m	[32m);[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * List of supported HMAC algorithms[m
[32m+[m	[32m *[m
[32m+[m	[32m * name => digest size pairs[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_digests = array([m
[32m+[m		[32m'sha224' => 28,[m
[32m+[m		[32m'sha256' => 32,[m
[32m+[m		[32m'sha384' => 48,[m
[32m+[m		[32m'sha512' => 64[m
[32m+[m	[32m);[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * mbstring.func_overload flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected static $func_overload;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Class constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params	Configuration parameters[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct(array $params = array())[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->_drivers = array([m
[32m+[m			[32m'mcrypt'  => defined('MCRYPT_DEV_URANDOM'),[m
[32m+[m			[32m'openssl' => extension_loaded('openssl')[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32mif ( ! $this->_drivers['mcrypt'] && ! $this->_drivers['openssl'])[m
[32m+[m		[32m{[m
[32m+[m			[32mshow_error('Encryption: Unable to find an available encryption driver.');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32misset(self::$func_overload) OR self::$func_overload = (extension_loaded('mbstring') && ini_get('mbstring.func_overload'));[m
[32m+[m		[32m$this->initialize($params);[m
[32m+[m
[32m+[m		[32mif ( ! isset($this->_key) && self::strlen($key = config_item('encryption_key')) > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_key = $key;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mlog_message('info', 'Encryption Class Initialized');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Initialize[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params	Configuration parameters[m
[32m+[m	[32m * @return	CI_Encryption[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function initialize(array $params)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! empty($params['driver']))[m
[32m+[m		[32m{[m
[32m+[m			[32mif (isset($this->_drivers[$params['driver']]))[m
[32m+[m			[32m{[m
[32m+[m				[32mif ($this->_drivers[$params['driver']])[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->_driver = $params['driver'];[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32mlog_message('error', "Encryption: Driver '".$params['driver']."' is not available.");[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32mlog_message('error', "Encryption: Unknown driver '".$params['driver']."' cannot be configured.");[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (empty($this->_driver))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_driver = ($this->_drivers['openssl'] === TRUE)[m
[32m+[m				[32m? 'openssl'[m
[32m+[m				[32m: 'mcrypt';[m
[32m+[m
[32m+[m			[32mlog_message('debug', "Encryption: Auto-configured driver '".$this->_driver."'.");[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mempty($params['cipher']) && $params['cipher'] = $this->_cipher;[m
[32m+[m		[32mempty($params['key']) OR $this->_key = $params['key'];[m
[32m+[m		[32m$this->{'_'.$this->_driver.'_initialize'}($params);[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Initialize MCrypt[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params	Configuration parameters[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _mcrypt_initialize($params)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! empty($params['cipher']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$params['cipher'] = strtolower($params['cipher']);[m
[32m+[m			[32m$this->_cipher_alias($params['cipher']);[m
[32m+[m
[32m+[m			[32mif ( ! in_array($params['cipher'], mcrypt_list_algorithms(), TRUE))[m
[32m+[m			[32m{[m
[32m+[m				[32mlog_message('error', 'Encryption: MCrypt cipher '.strtoupper($params['cipher']).' is not available.');[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_cipher = $params['cipher'];[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! empty($params['mode']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$params['mode'] = strtolower($params['mode']);[m
[32m+[m			[32mif ( ! isset($this->_modes['mcrypt'][$params['mode']]))[m
[32m+[m			[32m{[m
[32m+[m				[32mlog_message('error', 'Encryption: MCrypt mode '.strtoupper($params['mode']).' is not available.');[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_mode = $this->_modes['mcrypt'][$params['mode']];[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (isset($this->_cipher, $this->_mode))[m
[32m+[m		[32m{[m
[32m+[m			[32mif (is_resource($this->_handle)[m
[32m+[m				[32m&& (strtolower(mcrypt_enc_get_algorithms_name($this->_handle)) !== $this->_cipher[m
[32m+[m					[32mOR strtolower(mcrypt_enc_get_modes_name($this->_handle)) !== $this->_mode)[m
[32m+[m			[32m)[m
[32m+[m			[32m{[m
[32m+[m				[32mmcrypt_module_close($this->_handle);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif ($this->_handle = mcrypt_module_open($this->_cipher, '', $this->_mode, ''))[m
[32m+[m			[32m{[m
[32m+[m				[32mlog_message('info', 'Encryption: MCrypt cipher '.strtoupper($this->_cipher).' initialized in '.strtoupper($this->_mode).' mode.');[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32mlog_message('error', 'Encryption: Unable to initialize MCrypt with cipher '.strtoupper($this->_cipher).' in '.strtoupper($this->_mode).' mode.');[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Initialize OpenSSL[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params	Configuration parameters[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _openssl_initialize($params)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! empty($params['cipher']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$params['cipher'] = strtolower($params['cipher']);[m
[32m+[m			[32m$this->_cipher_alias($params['cipher']);[m
[32m+[m			[32m$this->_cipher = $params['cipher'];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! empty($params['mode']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$params['mode'] = strtolower($params['mode']);[m
[32m+[m			[32mif ( ! isset($this->_modes['openssl'][$params['mode']]))[m
[32m+[m			[32m{[m
[32m+[m				[32mlog_message('error', 'Encryption: OpenSSL mode '.strtoupper($params['mode']).' is not available.');[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_mode = $this->_modes['openssl'][$params['mode']];[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (isset($this->_cipher, $this->_mode))[m
[32m+[m		[32m{[m
[32m+[m			[32m// This is mostly for the stream mode, which doesn't get suffixed in OpenSSL[m
[32m+[m			[32m$handle = empty($this->_mode)[m
[32m+[m				[32m? $this->_cipher[m
[32m+[m				[32m: $this->_cipher.'-'.$this->_mode;[m
[32m+[m
[32m+[m			[32mif ( ! in_array($handle, openssl_get_cipher_methods(), TRUE))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_handle = NULL;[m
[32m+[m				[32mlog_message('error', 'Encryption: Unable to initialize OpenSSL with method '.strtoupper($handle).'.');[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_handle = $handle;[m
[32m+[m				[32mlog_message('info', 'Encryption: OpenSSL initialized with method '.strtoupper($handle).'.');[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Create a random key[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	int	$length	Output length[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function create_key($length)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (function_exists('random_bytes'))[m
[32m+[m		[32m{[m
[32m+[m			[32mtry[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn random_bytes((int) $length);[m
[32m+[m			[32m}[m
[32m+[m			[32mcatch (Exception $e)[m
[32m+[m			[32m{[m
[32m+[m				[32mlog_message('error', $e->getMessage());[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (defined('MCRYPT_DEV_URANDOM'))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn mcrypt_create_iv($length, MCRYPT_DEV_URANDOM);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$is_secure = NULL;[m
[32m+[m		[32m$key = openssl_random_pseudo_bytes($length, $is_secure);[m
[32m+[m		[32mreturn ($is_secure === TRUE)[m
[32m+[m			[32m? $key[m
[32m+[m			[32m: FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Encrypt[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$data	Input data[m
[32m+[m	[32m * @param	array	$params	Input parameters[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function encrypt($data, array $params = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (($params = $this->_get_params($params)) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32misset($params['key']) OR $params['key'] = $this->hkdf($this->_key, 'sha512', NULL, self::strlen($this->_key), 'encryption');[m
[32m+[m
[32m+[m		[32mif (($data = $this->{'_'.$this->_driver.'_encrypt'}($data, $params)) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$params['base64'] && $data = base64_encode($data);[m
[32m+[m
[32m+[m		[32mif (isset($params['hmac_digest']))[m
[32m+[m		[32m{[m
[32m+[m			[32misset($params['hmac_key']) OR $params['hmac_key'] = $this->hkdf($this->_key, 'sha512', NULL, NULL, 'authentication');[m
[32m+[m			[32mreturn hash_hmac($params['hmac_digest'], $data, $params['hmac_key'], ! $params['base64']).$data;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $data;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Encrypt via MCrypt[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$data	Input data[m
[32m+[m	[32m * @param	array	$params	Input parameters[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _mcrypt_encrypt($data, $params)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! is_resource($params['handle']))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// The greater-than-1 comparison is mostly a work-around for a bug,[m
[32m+[m		[32m// where 1 is returned for ARCFour instead of 0.[m
[32m+[m		[32m$iv = (($iv_size = mcrypt_enc_get_iv_size($params['handle'])) > 1)[m
[32m+[m			[32m? $this->create_key($iv_size)[m
[32m+[m			[32m: NULL;[m
[32m+[m
[32m+[m		[32mif (mcrypt_generic_init($params['handle'], $params['key'], $iv) < 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($params['handle'] !== $this->_handle)[m
[32m+[m			[32m{[m
[32m+[m				[32mmcrypt_module_close($params['handle']);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Use PKCS#7 padding in order to ensure compatibility with OpenSSL[m
[32m+[m		[32m// and other implementations outside of PHP.[m
[32m+[m		[32mif (in_array(strtolower(mcrypt_enc_get_modes_name($params['handle'])), array('cbc', 'ecb'), TRUE))[m
[32m+[m		[32m{[m
[32m+[m			[32m$block_size = mcrypt_enc_get_block_size($params['handle']);[m
[32m+[m			[32m$pad = $block_size - (self::strlen($data) % $block_size);[m
[32m+[m			[32m$data .= str_repeat(chr($pad), $pad);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Work-around for yet another strange behavior in MCrypt.[m
[32m+[m		[32m//[m
[32m+[m		[32m// When encrypting in ECB mode, the IV is ignored. Yet[m
[32m+[m		[32m// mcrypt_enc_get_iv_size() returns a value larger than 0[m
[32m+[m		[32m// even if ECB is used AND mcrypt_generic_init() complains[m
[32m+[m		[32m// if you don't pass an IV with length equal to the said[m
[32m+[m		[32m// return value.[m
[32m+[m		[32m//[m
[32m+[m		[32m// This probably would've been fine (even though still wasteful),[m
[32m+[m		[32m// but OpenSSL isn't that dumb and we need to make the process[m
[32m+[m		[32m// portable, so ...[m
[32m+[m		[32m$data = (mcrypt_enc_get_modes_name($params['handle']) !== 'ECB')[m
[32m+[m			[32m? $iv.mcrypt_generic($params['handle'], $data)[m
[32m+[m			[32m: mcrypt_generic($params['handle'], $data);[m
[32m+[m
[32m+[m		[32mmcrypt_generic_deinit($params['handle']);[m
[32m+[m		[32mif ($params['handle'] !== $this->_handle)[m
[32m+[m		[32m{[m
[32m+[m			[32mmcrypt_module_close($params['handle']);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $data;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Encrypt via OpenSSL[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$data	Input data[m
[32m+[m	[32m * @param	array	$params	Input parameters[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _openssl_encrypt($data, $params)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (empty($params['handle']))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$iv = ($iv_size = openssl_cipher_iv_length($params['handle']))[m
[32m+[m			[32m? $this->create_key($iv_size)[m
[32m+[m			[32m: NULL;[m
[32m+[m
[32m+[m		[32m$data = openssl_encrypt([m
[32m+[m			[32m$data,[m
[32m+[m			[32m$params['handle'],[m
[32m+[m			[32m$params['key'],[m
[32m+[m			[32m1, // DO NOT TOUCH![m
[32m+[m			[32m$iv[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32mif ($data === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $iv.$data;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Decrypt[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$data	Encrypted data[m
[32m+[m	[32m * @param	array	$params	Input parameters[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function decrypt($data, array $params = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (($params = $this->_get_params($params)) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (isset($params['hmac_digest']))[m
[32m+[m		[32m{[m
[32m+[m			[32m// This might look illogical, but it is done during encryption as well ...[m
[32m+[m			[32m// The 'base64' value is effectively an inverted "raw data" parameter[m
[32m+[m			[32m$digest_size = ($params['base64'])[m
[32m+[m				[32m? $this->_digests[$params['hmac_digest']] * 2[m
[32m+[m				[32m: $this->_digests[$params['hmac_digest']];[m
[32m+[m
[32m+[m			[32mif (self::strlen($data) <= $digest_size)[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$hmac_input = self::substr($data, 0, $digest_size);[m
[32m+[m			[32m$data = self::substr($data, $digest_size);[m
[32m+[m
[32m+[m			[32misset($params['hmac_key']) OR $params['hmac_key'] = $this->hkdf($this->_key, 'sha512', NULL, NULL, 'authentication');[m
[32m+[m			[32m$hmac_check = hash_hmac($params['hmac_digest'], $data, $params['hmac_key'], ! $params['base64']);[m
[32m+[m
[32m+[m			[32m// Time-attack-safe comparison[m
[32m+[m			[32m$diff = 0;[m
[32m+[m			[32mfor ($i = 0; $i < $digest_size; $i++)[m
[32m+[m			[32m{[m
[32m+[m				[32m$diff |= ord($hmac_input[$i]) ^ ord($hmac_check[$i]);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif ($diff !== 0)[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($params['base64'])[m
[32m+[m		[32m{[m
[32m+[m			[32m$data = base64_decode($data);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32misset($params['key']) OR $params['key'] = $this->hkdf($this->_key, 'sha512', NULL, self::strlen($this->_key), 'encryption');[m
[32m+[m
[32m+[m		[32mreturn $this->{'_'.$this->_driver.'_decrypt'}($data, $params);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Decrypt via MCrypt[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$data	Encrypted data[m
[32m+[m	[32m * @param	array	$params	Input parameters[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _mcrypt_decrypt($data, $params)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! is_resource($params['handle']))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// The greater-than-1 comparison is mostly a work-around for a bug,[m
[32m+[m		[32m// where 1 is returned for ARCFour instead of 0.[m
[32m+[m		[32mif (($iv_size = mcrypt_enc_get_iv_size($params['handle'])) > 1)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (mcrypt_enc_get_modes_name($params['handle']) !== 'ECB')[m
[32m+[m			[32m{[m
[32m+[m				[32m$iv = self::substr($data, 0, $iv_size);[m
[32m+[m				[32m$data = self::substr($data, $iv_size);[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m// MCrypt is dumb and this is ignored, only size matters[m
[32m+[m				[32m$iv = str_repeat("\x0", $iv_size);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$iv = NULL;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (mcrypt_generic_init($params['handle'], $params['key'], $iv) < 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($params['handle'] !== $this->_handle)[m
[32m+[m			[32m{[m
[32m+[m				[32mmcrypt_module_close($params['handle']);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$data = mdecrypt_generic($params['handle'], $data);[m
[32m+[m		[32m// Remove PKCS#7 padding, if necessary[m
[32m+[m		[32mif (in_array(strtolower(mcrypt_enc_get_modes_name($params['handle'])), array('cbc', 'ecb'), TRUE))[m
[32m+[m		[32m{[m
[32m+[m			[32m$data = self::substr($data, 0, -ord($data[self::strlen($data)-1]));[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mmcrypt_generic_deinit($params['handle']);[m
[32m+[m		[32mif ($params['handle'] !== $this->_handle)[m
[32m+[m		[32m{[m
[32m+[m			[32mmcrypt_module_close($params['handle']);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $data;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Decrypt via OpenSSL[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$data	Encrypted data[m
[32m+[m	[32m * @param	array	$params	Input parameters[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _openssl_decrypt($data, $params)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($iv_size = openssl_cipher_iv_length($params['handle']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$iv = self::substr($data, 0, $iv_size);[m
[32m+[m			[32m$data = self::substr($data, $iv_size);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$iv = NULL;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn empty($params['handle'])[m
[32m+[m			[32m? FALSE[m
[32m+[m			[32m: openssl_decrypt([m
[32m+[m				[32m$data,[m
[32m+[m				[32m$params['handle'],[m
[32m+[m				[32m$params['key'],[m
[32m+[m				[32m1, // DO NOT TOUCH![m
[32m+[m				[32m$iv[m
[32m+[m			[32m);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get params[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params	Input parameters[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _get_params($params)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (empty($params))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn isset($this->_cipher, $this->_mode, $this->_key, $this->_handle)[m
[32m+[m				[32m? array([m
[32m+[m					[32m'handle' => $this->_handle,[m
[32m+[m					[32m'cipher' => $this->_cipher,[m
[32m+[m					[32m'mode' => $this->_mode,[m
[32m+[m					[32m'key' => NULL,[m
[32m+[m					[32m'base64' => TRUE,[m
[32m+[m					[32m'hmac_digest' => 'sha512',[m
[32m+[m					[32m'hmac_key' => NULL[m
[32m+[m				[32m)[m
[32m+[m				[32m: FALSE;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! isset($params['cipher'], $params['mode'], $params['key']))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (isset($params['mode']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$params['mode'] = strtolower($params['mode']);[m
[32m+[m			[32mif ( ! isset($this->_modes[$this->_driver][$params['mode']]))[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$params['mode'] = $this->_modes[$this->_driver][$params['mode']];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (isset($params['hmac']) && $params['hmac'] === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$params['hmac_digest'] = $params['hmac_key'] = NULL;[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32mif ( ! isset($params['hmac_key']))[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m			[32melseif (isset($params['hmac_digest']))[m
[32m+[m			[32m{[m
[32m+[m				[32m$params['hmac_digest'] = strtolower($params['hmac_digest']);[m
[32m+[m				[32mif ( ! isset($this->_digests[$params['hmac_digest']]))[m
[32m+[m				[32m{[m
[32m+[m					[32mreturn FALSE;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$params['hmac_digest'] = 'sha512';[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$params = array([m
[32m+[m			[32m'handle' => NULL,[m
[32m+[m			[32m'cipher' => $params['cipher'],[m
[32m+[m			[32m'mode' => $params['mode'],[m
[32m+[m			[32m'key' => $params['key'],[m
[32m+[m			[32m'base64' => isset($params['raw_data']) ? ! $params['raw_data'] : FALSE,[m
[32m+[m			[32m'hmac_digest' => $params['hmac_digest'],[m
[32m+[m			[32m'hmac_key' => $params['hmac_key'][m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32m$this->_cipher_alias($params['cipher']);[m
[32m+[m		[32m$params['handle'] = ($params['cipher'] !== $this->_cipher OR $params['mode'] !== $this->_mode)[m
[32m+[m			[32m? $this->{'_'.$this->_driver.'_get_handle'}($params['cipher'], $params['mode'])[m
[32m+[m			[32m: $this->_handle;[m
[32m+[m
[32m+[m		[32mreturn $params;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get MCrypt handle[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$cipher	Cipher name[m
[32m+[m	[32m * @param	string	$mode	Encryption mode[m
[32m+[m	[32m * @return	resource[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _mcrypt_get_handle($cipher, $mode)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn mcrypt_module_open($cipher, '', $mode, '');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get OpenSSL handle[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$cipher	Cipher name[m
[32m+[m	[32m * @param	string	$mode	Encryption mode[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _openssl_get_handle($cipher, $mode)[m
[32m+[m	[32m{[m
[32m+[m		[32m// OpenSSL methods aren't suffixed with '-stream' for this mode[m
[32m+[m		[32mreturn ($mode === 'stream')[m
[32m+[m			[32m? $cipher[m
[32m+[m			[32m: $cipher.'-'.$mode;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Cipher alias[m
[32m+[m	[32m *[m
[32m+[m	[32m * Tries to translate cipher names between MCrypt and OpenSSL's "dialects".[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$cipher	Cipher name[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _cipher_alias(&$cipher)[m
[32m+[m	[32m{[m
[32m+[m		[32mstatic $dictionary;[m
[32m+[m
[32m+[m		[32mif (empty($dictionary))[m
[32m+[m		[32m{[m
[32m+[m			[32m$dictionary = array([m
[32m+[m				[32m'mcrypt' => array([m
[32m+[m					[32m'aes-128' => 'rijndael-128',[m
[32m+[m					[32m'aes-192' => 'rijndael-128',[m
[32m+[m					[32m'aes-256' => 'rijndael-128',[m
[32m+[m					[32m'des3-ede3' => 'tripledes',[m
[32m+[m					[32m'bf' => 'blowfish',[m
[32m+[m					[32m'cast5' => 'cast-128',[m
[32m+[m					[32m'rc4' => 'arcfour',[m
[32m+[m					[32m'rc4-40' => 'arcfour'[m
[32m+[m				[32m),[m
[32m+[m				[32m'openssl' => array([m
[32m+[m					[32m'rijndael-128' => 'aes-128',[m
[32m+[m					[32m'tripledes' => 'des-ede3',[m
[32m+[m					[32m'blowfish' => 'bf',[m
[32m+[m					[32m'cast-128' => 'cast5',[m
[32m+[m					[32m'arcfour' => 'rc4-40',[m
[32m+[m					[32m'rc4' => 'rc4-40'[m
[32m+[m				[32m)[m
[32m+[m			[32m);[m
[32m+[m
[32m+[m			[32m// Notes:[m
[32m+[m			[32m//[m
[32m+[m			[32m// - Rijndael-128 is, at the same time all three of AES-128,[m
[32m+[m			[32m//   AES-192 and AES-256. The only difference between them is[m
[32m+[m			[32m//   the key size. Rijndael-192, Rijndael-256 on the other hand[m
[32m+[m			[32m//   also have different block sizes and are NOT AES-compatible.[m
[32m+[m			[32m//[m
[32m+[m			[32m// - Blowfish is said to be supporting key sizes between[m
[32m+[m			[32m//   4 and 56 bytes, but it appears that between MCrypt and[m
[32m+[m			[32m//   OpenSSL, only those of 16 and more bytes are compatible.[m
[32m+[m			[32m//   Also, don't know what MCrypt's 'blowfish-compat' is.[m
[32m+[m			[32m//[m
[32m+[m			[32m// - CAST-128/CAST5 produces a longer cipher when encrypted via[m
[32m+[m			[32m//   OpenSSL, but (strangely enough) can be decrypted by either[m
[32m+[m			[32m//   extension anyway.[m
[32m+[m			[32m//   Also, it appears that OpenSSL uses 16 rounds regardless of[m
[32m+[m			[32m//   the key size, while RFC2144 says that for key sizes lower[m
[32m+[m			[32m//   than 11 bytes, only 12 rounds should be used. This makes[m
[32m+[m			[32m//   it portable only with keys of between 11 and 16 bytes.[m
[32m+[m			[32m//[m
[32m+[m			[32m// - RC4 (ARCFour) has a strange implementation under OpenSSL.[m
[32m+[m			[32m//   Its 'rc4-40' cipher method seems to work flawlessly, yet[m
[32m+[m			[32m//   there's another one, 'rc4' that only works with a 16-byte key.[m
[32m+[m			[32m//[m
[32m+[m			[32m// - DES is compatible, but doesn't need an alias.[m
[32m+[m			[32m//[m
[32m+[m			[32m// Other seemingly matching ciphers between MCrypt, OpenSSL:[m
[32m+[m			[32m//[m
[32m+[m			[32m// - RC2 is NOT compatible and only an obscure forum post[m
[32m+[m			[32m//   confirms that it is MCrypt's fault.[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (isset($dictionary[$this->_driver][$cipher]))[m
[32m+[m		[32m{[m
[32m+[m			[32m$cipher = $dictionary[$this->_driver][$cipher];[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * HKDF[m
[32m+[m	[32m *[m
[32m+[m	[32m * @link	https://tools.ietf.org/rfc/rfc5869.txt[m
[32m+[m	[32m * @param	$key	Input key[m
[32m+[m	[32m * @param	$digest	A SHA-2 hashing algorithm[m
[32m+[m	[32m * @param	$salt	Optional salt[m
[32m+[m	[32m * @param	$length	Output length (defaults to the selected digest size)[m
[32m+[m	[32m * @param	$info	Optional context/application-specific info[m
[32m+[m	[32m * @return	string	A pseudo-random key[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function hkdf($key, $digest = 'sha512', $salt = NULL, $length = NULL, $info = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! isset($this->_digests[$digest]))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (empty($length) OR ! is_int($length))[m
[32m+[m		[32m{[m
[32m+[m			[32m$length = $this->_digests[$digest];[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($length > (255 * $this->_digests[$digest]))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mself::strlen($salt) OR $salt = str_repeat("\0", $this->_digests[$digest]);[m
[32m+[m
[32m+[m		[32m$prk = hash_hmac($digest, $key, $salt, TRUE);[m
[32m+[m		[32m$key = '';[m
[32m+[m		[32mfor ($key_block = '', $block_index = 1; self::strlen($key) < $length; $block_index++)[m
[32m+[m		[32m{[m
[32m+[m			[32m$key_block = hash_hmac($digest, $key_block.$info.chr($block_index), $prk, TRUE);[m
[32m+[m			[32m$key .= $key_block;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn self::substr($key, 0, $length);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * __get() magic[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$key	Property name[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __get($key)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Because aliases[m
[32m+[m		[32mif ($key === 'mode')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn array_search($this->_mode, $this->_modes[$this->_driver], TRUE);[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (in_array($key, array('cipher', 'driver', 'drivers', 'digests'), TRUE))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->{'_'.$key};[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn NULL;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Byte-safe strlen()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$str[m
[32m+[m	[32m * @return	int[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected static function strlen($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn (self::$func_overload)[m
[32m+[m			[32m? mb_strlen($str, '8bit')[m
[32m+[m			[32m: strlen($str);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Byte-safe substr()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$str[m
[32m+[m	[32m * @param	int	$start[m
[32m+[m	[32m * @param	int	$length[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected static function substr($str, $start, $length = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (self::$func_overload)[m
[32m+[m		[32m{[m
[32m+[m			[32m// mb_substr($str, $start, null, '8bit') returns an empty[m
[32m+[m			[32m// string on PHP 5.3[m
[32m+[m			[32misset($length) OR $length = ($start >= 0 ? self::strlen($str) - $start : -$start);[m
[32m+[m			[32mreturn mb_substr($str, $start, $length, '8bit');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn isset($length)[m
[32m+[m			[32m? substr($str, $start, $length)[m
[32m+[m			[32m: substr($str, $start);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/system/libraries/Form_validation.php b/system/libraries/Form_validation.php[m
[1mnew file mode 100644[m
[1mindex 0000000..27187df[m
[1m--- /dev/null[m
[1m+++ b/system/libraries/Form_validation.php[m
[36m@@ -0,0 +1,1591 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Form Validation Class[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Libraries[m
[32m+[m[32m * @category	Validation[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/libraries/form_validation.html[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_Form_validation {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Reference to the CodeIgniter instance[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var object[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $CI;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Validation data for the current form submission[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_field_data		= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Validation rules for the current form[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_config_rules	= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Array of validation errors[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_error_array		= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Array of custom error messages[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_error_messages	= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Start tag for error wrapping[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_error_prefix	= '<p>';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * End tag for error wrapping[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_error_suffix	= '</p>';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Custom error message[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $error_string		= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Whether the form data has been validated as safe[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_safe_form_data	= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Custom data to validate[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $validation_data	= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Initialize Form_Validation class[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$rules[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct($rules = array())[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->CI =& get_instance();[m
[32m+[m
[32m+[m		[32m// applies delimiters set in config file.[m
[32m+[m		[32mif (isset($rules['error_prefix']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_error_prefix = $rules['error_prefix'];[m
[32m+[m			[32munset($rules['error_prefix']);[m
[32m+[m		[32m}[m
[32m+[m		[32mif (isset($rules['error_suffix']))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_error_suffix = $rules['error_suffix'];[m
[32m+[m			[32munset($rules['error_suffix']);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Validation rules can be stored in a config file.[m
[32m+[m		[32m$this->_config_rules = $rules;[m
[32m+[m
[32m+[m		[32m// Automatically load the form helper[m
[32m+[m		[32m$this->CI->load->helper('form');[m
[32m+[m
[32m+[m		[32mlog_message('info', 'Form Validation Class Initialized');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set Rules[m
[32m+[m	[32m *[m
[32m+[m	[32m * This function takes an array of field names and validation[m
[32m+[m	[32m * rules as input, any custom error messages, validates the info,[m
[32m+[m	[32m * and stores it[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	$field[m
[32m+[m	[32m * @param	string	$label[m
[32m+[m	[32m * @param	mixed	$rules[m
[32m+[m	[32m * @param	array	$errors[m
[32m+[m	[32m * @return	CI_Form_validation[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_rules($field, $label = '', $rules = array(), $errors = array())[m
[32m+[m	[32m{[m
[32m+[m		[32m// No reason to set rules if we have no POST data[m
[32m+[m		[32m// or a validation array has not been specified[m
[32m+[m		[32mif ($this->CI->input->method() !== 'post' && empty($this->validation_data))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// If an array was passed via the first parameter instead of individual string[m
[32m+[m		[32m// values we cycle through it and recursively call this function.[m
[32m+[m		[32mif (is_array($field))[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($field as $row)[m
[32m+[m			[32m{[m
[32m+[m				[32m// Houston, we have a problem...[m
[32m+[m				[32mif ( ! isset($row['field'], $row['rules']))[m
[32m+[m				[32m{[m
[32m+[m					[32mcontinue;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m// If the field label wasn't passed we use the field name[m
[32m+[m				[32m$label = isset($row['label']) ? $row['label'] : $row['field'];[m
[32m+[m
[32m+[m				[32m// Add the custom error message array[m
[32m+[m				[32m$errors = (isset($row['errors']) && is_array($row['errors'])) ? $row['errors'] : array();[m
[32m+[m
[32m+[m				[32m// Here we go![m
[32m+[m				[32m$this->set_rules($row['field'], $label, $row['rules'], $errors);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn $this;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// No fields or no rules? Nothing to do...[m
[32m+[m		[32mif ( ! is_string($field) OR $field === '' OR empty($rules))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! is_array($rules))[m
[32m+[m		[32m{[m
[32m+[m			[32m// BC: Convert pipe-separated rules string to an array[m
[32m+[m			[32mif ( ! is_string($rules))[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn $this;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$rules = preg_split('/\|(?![^\[]*\])/', $rules);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// If the field label wasn't passed we use the field name[m
[32m+[m		[32m$label = ($label === '') ? $field : $label;[m
[32m+[m
[32m+[m		[32m$indexes = array();[m
[32m+[m
[32m+[m		[32m// Is the field name an array? If it is an array, we break it apart[m
[32m+[m		[32m// into its components so that we can fetch the corresponding POST data later[m
[32m+[m		[32mif (($is_array = (bool) preg_match_all('/\[(.*?)\]/', $field, $matches)) === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32msscanf($field, '%[^[][', $indexes[0]);[m
[32m+[m
[32m+[m			[32mfor ($i = 0, $c = count($matches[0]); $i < $c; $i++)[m
[32m+[m			[32m{[m
[32m+[m				[32mif ($matches[1][$i] !== '')[m
[32m+[m				[32m{[m
[32m+[m					[32m$indexes[] = $matches[1][$i];[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Build our master array[m
[32m+[m		[32m$this->_field_data[$field] = array([m
[32m+[m			[32m'field'		=> $field,[m
[32m+[m			[32m'label'		=> $label,[m
[32m+[m			[32m'rules'		=> $rules,[m
[32m+[m			[32m'errors'	=> $errors,[m
[32m+[m			[32m'is_array'	=> $is_array,[m
[32m+[m			[32m'keys'		=> $indexes,[m
[32m+[m			[32m'postdata'	=> NULL,[m
[32m+[m			[32m'error'		=> ''[m
[32m+[m		[32m);[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * By default, form validation uses the $_POST array to validate[m
[32m+[m	[32m *[m
[32m+[m	[32m * If an array is set through this method, then this array will[m
[32m+[m	[32m * be used instead of the $_POST array[m
[32m+[m	[32m *[m
[32m+[m	[32m * Note that if you are validating multiple arrays, then the[m
[32m+[m	[32m * reset_validation() function should be called after validating[m
[32m+[m	[32m * each array due to the limitations of CI's singleton[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$data[m
[32m+[m	[32m * @return	CI_Form_validation[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_data(array $data)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! empty($data))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->validation_data = $data;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set Error Message[m
[32m+[m	[32m *[m
[32m+[m	[32m * Lets users set their own error messages on the fly. Note:[m
[32m+[m	[32m * The key name has to match the function name that it corresponds to.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	CI_Form_validation[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_message($lang, $val = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! is_array($lang))[m
[32m+[m		[32m{[m
[32m+[m			[32m$lang = array($lang => $val);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->_error_messages = array_merge($this->_error_messages, $lang);[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set The Error Delimiter[m
[32m+[m	[32m *[m
[32m+[m	[32m * Permits a prefix/suffix to be added to each error message[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	CI_Form_validation[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_error_delimiters($prefix = '<p>', $suffix = '</p>')[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->_error_prefix = $prefix;[m
[32m+[m		[32m$this->_error_suffix = $suffix;[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get Error Message[m
[32m+[m	[32m *[m
[32m+[m	[32m * Gets the error message associated with a particular field[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$field	Field name[m
[32m+[m	[32m * @param	string	$prefix	HTML start tag[m
[32m+[m	[32m * @param 	string	$suffix	HTML end tag[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function error($field, $prefix = '', $suffix = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif (empty($this->_field_data[$field]['error']))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn '';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($prefix === '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$prefix = $this->_error_prefix;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($suffix === '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$suffix = $this->_error_suffix;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $prefix.$this->_field_data[$field]['error'].$suffix;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get Array of Error Messages[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the error messages as an array[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function error_array()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_error_array;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Error String[m
[32m+[m	[32m *[m
[32m+[m	[32m * Returns the error messages as a string, wrapped in the error delimiters[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function error_string($prefix = '', $suffix = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m// No errors, validation passes![m
[32m+[m		[32mif (count($this->_error_array) === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn '';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($prefix === '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$prefix = $this->_error_prefix;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($suffix === '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$suffix = $this->_error_suffix;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Generate the error string[m
[32m+[m		[32m$str = '';[m
[32m+[m		[32mforeach ($this->_error_array as $val)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($val !== '')[m
[32m+[m			[32m{[m
[32m+[m				[32m$str .= $prefix.$val.$suffix."\n";[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $str;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Run the Validator[m
[32m+[m	[32m *[m
[32m+[m	[32m * This function does all the work.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$group[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function run($group = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$validation_array = empty($this->validation_data)[m
[32m+[m			[32m? $_POST[m
[32m+[m			[32m: $this->validation_data;[m
[32m+[m
[32m+[m		[32m// Does the _field_data array containing the validation rules exist?[m
[32m+[m		[32m// If not, we look to see if they were assigned via a config file[m
[32m+[m		[32mif (count($this->_field_data) === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32m// No validation rules?  We're done...[m
[32m+[m			[32mif (count($this->_config_rules) === 0)[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (empty($group))[m
[32m+[m			[32m{[m
[32m+[m				[32m// Is there a validation rule for the particular URI being accessed?[m
[32m+[m				[32m$group = trim($this->CI->uri->ruri_string(), '/');[m
[32m+[m				[32misset($this->_config_rules[$group]) OR $group = $this->CI->router->class.'/'.$this->CI->router->method;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$this->set_rules(isset($this->_config_rules[$group]) ? $this->_config_rules[$group] : $this->_config_rules);[m
[32m+[m
[32m+[m			[32m// Were we able to set the rules correctly?[m
[32m+[m			[32mif (count($this->_field_data) === 0)[m
[32m+[m			[32m{[m
[32m+[m				[32mlog_message('debug', 'Unable to find validation rules');[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Load the language file containing error messages[m
[32m+[m		[32m$this->CI->lang->load('form_validation');[m
[32m+[m
[32m+[m		[32m// Cycle through the rules for each field and match the corresponding $validation_data item[m
[32m+[m		[32mforeach ($this->_field_data as $field => &$row)[m
[32m+[m		[32m{[m
[32m+[m			[32m// Fetch the data from the validation_data array item and cache it in the _field_data array.[m
[32m+[m			[32m// Depending on whether the field name is an array or a string will determine where we get it from.[m
[32m+[m			[32mif ($row['is_array'] === TRUE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_field_data[$field]['postdata'] = $this->_reduce_array($validation_array, $row['keys']);[m
[32m+[m			[32m}[m
[32m+[m			[32melseif (isset($validation_array[$field]))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_field_data[$field]['postdata'] = $validation_array[$field];[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Execute validation rules[m
[32m+[m		[32m// Note: A second foreach (for now) is required in order to avoid false-positives[m
[32m+[m		[32m//	 for rules like 'matches', which correlate to other validation fields.[m
[32m+[m		[32mforeach ($this->_field_data as $field => &$row)[m
[32m+[m		[32m{[m
[32m+[m			[32m// Don't try to validate if we have no rules set[m
[32m+[m			[32mif (empty($row['rules']))[m
[32m+[m			[32m{[m
[32m+[m				[32mcontinue;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$this->_execute($row, $row['rules'], $row['postdata']);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Did we end up with any errors?[m
[32m+[m		[32m$total_errors = count($this->_error_array);[m
[32m+[m		[32mif ($total_errors > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_safe_form_data = TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Now we need to re-set the POST data with the new, processed data[m
[32m+[m		[32mempty($this->validation_data) && $this->_reset_post_array();[m
[32m+[m
[32m+[m		[32mreturn ($total_errors === 0);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Prepare rules[m
[32m+[m	[32m *[m
[32m+[m	[32m * Re-orders the provided rules in order of importance, so that[m
[32m+[m	[32m * they can easily be executed later without weird checks ...[m
[32m+[m	[32m *[m
[32m+[m	[32m * "Callbacks" are given the highest priority (always called),[m
[32m+[m	[32m * followed by 'required' (called if callbacks didn't fail),[m
[32m+[m	[32m * and then every next rule depends on the previous one passing.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$rules[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _prepare_rules($rules)[m
[32m+[m	[32m{[m
[32m+[m		[32m$new_rules = array();[m
[32m+[m		[32m$callbacks = array();[m
[32m+[m
[32m+[m		[32mforeach ($rules as &$rule)[m
[32m+[m		[32m{[m
[32m+[m			[32m// Let 'required' always be the first (non-callback) rule[m
[32m+[m			[32mif ($rule === 'required')[m
[32m+[m			[32m{[m
[32m+[m				[32marray_unshift($new_rules, 'required');[m
[32m+[m			[32m}[m
[32m+[m			[32m// 'isset' is a kind of a weird alias for 'required' ...[m
[32m+[m			[32melseif ($rule === 'isset' && (empty($new_rules) OR $new_rules[0] !== 'required'))[m
[32m+[m			[32m{[m
[32m+[m				[32marray_unshift($new_rules, 'isset');[m
[32m+[m			[32m}[m
[32m+[m			[32m// The old/classic 'callback_'-prefixed rules[m
[32m+[m			[32melseif (is_string($rule) && strncmp('callback_', $rule, 9) === 0)[m
[32m+[m			[32m{[m
[32m+[m				[32m$callbacks[] = $rule;[m
[32m+[m			[32m}[m
[32m+[m			[32m// Proper callables[m
[32m+[m			[32melseif (is_callable($rule))[m
[32m+[m			[32m{[m
[32m+[m				[32m$callbacks[] = $rule;[m
[32m+[m			[32m}[m
[32m+[m			[32m// "Named" callables; i.e. array('name' => $callable)[m
[32m+[m			[32melseif (is_array($rule) && isset($rule[0], $rule[1]) && is_callable($rule[1]))[m
[32m+[m			[32m{[m
[32m+[m				[32m$callbacks[] = $rule;[m
[32m+[m			[32m}[m
[32m+[m			[32m// Everything else goes at the end of the queue[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$new_rules[] = $rule;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn array_merge($callbacks, $new_rules);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Traverse a multidimensional $_POST array index until the data is found[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array[m
[32m+[m	[32m * @param	array[m
[32m+[m	[32m * @param	int[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _reduce_array($array, $keys, $i = 0)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (is_array($array) && isset($keys[$i]))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn isset($array[$keys[$i]]) ? $this->_reduce_array($array[$keys[$i]], $keys, ($i+1)) : NULL;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// NULL must be returned for empty fields[m
[32m+[m		[32mreturn ($array === '') ? NULL : $array;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Re-populate the _POST array with our finalized and processed data[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _reset_post_array()[m
[32m+[m	[32m{[m
[32m+[m		[32mforeach ($this->_field_data as $field => $row)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($row['postdata'] !== NULL)[m
[32m+[m			[32m{[m
[32m+[m				[32mif ($row['is_array'] === FALSE)[m
[32m+[m				[32m{[m
[32m+[m					[32misset($_POST[$field]) && $_POST[$field] = $row['postdata'];[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32m// start with a reference[m
[32m+[m					[32m$post_ref =& $_POST;[m
[32m+[m
[32m+[m					[32m// before we assign values, make a reference to the right POST key[m
[32m+[m					[32mif (count($row['keys']) === 1)[m
[32m+[m					[32m{[m
[32m+[m						[32m$post_ref =& $post_ref[current($row['keys'])];[m
[32m+[m					[32m}[m
[32m+[m					[32melse[m
[32m+[m					[32m{[m
[32m+[m						[32mforeach ($row['keys'] as $val)[m
[32m+[m						[32m{[m
[32m+[m							[32m$post_ref =& $post_ref[$val];[m
[32m+[m						[32m}[m
[32m+[m					[32m}[m
[32m+[m
[32m+[m					[32m$post_ref = $row['postdata'];[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Executes the Validation routines[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array[m
[32m+[m	[32m * @param	array[m
[32m+[m	[32m * @param	mixed[m
[32m+[m	[32m * @param	int[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _execute($row, $rules, $postdata = NULL, $cycles = 0)[m
[32m+[m	[32m{[m
[32m+[m		[32m// If the $_POST data is an array we will run a recursive call[m
[32m+[m		[32m//[m
[32m+[m		[32m// Note: We MUST check if the array is empty or not![m
[32m+[m		[32m//       Otherwise empty arrays will always pass validation.[m
[32m+[m		[32mif (is_array($postdata) && ! empty($postdata))[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($postdata as $key => $val)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_execute($row, $rules, $val, $key);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$rules = $this->_prepare_rules($rules);[m
[32m+[m		[32mforeach ($rules as $rule)[m
[32m+[m		[32m{[m
[32m+[m			[32m$_in_array = FALSE;[m
[32m+[m
[32m+[m			[32m// We set the $postdata variable with the current data in our master array so that[m
[32m+[m			[32m// each cycle of the loop is dealing with the processed data from the last cycle[m
[32m+[m			[32mif ($row['is_array'] === TRUE && is_array($this->_field_data[$row['field']]['postdata']))[m
[32m+[m			[32m{[m
[32m+[m				[32m// We shouldn't need this safety, but just in case there isn't an array index[m
[32m+[m				[32m// associated with this cycle we'll bail out[m
[32m+[m				[32mif ( ! isset($this->_field_data[$row['field']]['postdata'][$cycles]))[m
[32m+[m				[32m{[m
[32m+[m					[32mcontinue;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m$postdata = $this->_field_data[$row['field']]['postdata'][$cycles];[m
[32m+[m				[32m$_in_array = TRUE;[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m// If we get an array field, but it's not expected - then it is most likely[m
[32m+[m				[32m// somebody messing with the form on the client side, so we'll just consider[m
[32m+[m				[32m// it an empty field[m
[32m+[m				[32m$postdata = is_array($this->_field_data[$row['field']]['postdata'])[m
[32m+[m					[32m? NULL[m
[32m+[m					[32m: $this->_field_data[$row['field']]['postdata'];[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// Is the rule a callback?[m
[32m+[m			[32m$callback = $callable = FALSE;[m
[32m+[m			[32mif (is_string($rule))[m
[32m+[m			[32m{[m
[32m+[m				[32mif (strpos($rule, 'callback_') === 0)[m
[32m+[m				[32m{[m
[32m+[m					[32m$rule = substr($rule, 9);[m
[32m+[m					[32m$callback = TRUE;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m			[32melseif (is_callable($rule))[m
[32m+[m			[32m{[m
[32m+[m				[32m$callable = TRUE;[m
[32m+[m			[32m}[m
[32m+[m			[32melseif (is_array($rule) && isset($rule[0], $rule[1]) && is_callable($rule[1]))[m
[32m+[m			[32m{[m
[32m+[m				[32m// We have a "named" callable, so save the name[m
[32m+[m				[32m$callable = $rule[0];[m
[32m+[m				[32m$rule = $rule[1];[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// Strip the parameter (if exists) from the rule[m
[32m+[m			[32m// Rules can contain a parameter: max_length[5][m
[32m+[m			[32m$param = FALSE;[m
[32m+[m			[32mif ( ! $callable && preg_match('/(.*?)\[(.*)\]/', $rule, $match))[m
[32m+[m			[32m{[m
[32m+[m				[32m$rule = $match[1];[m
[32m+[m				[32m$param = $match[2];[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// Ignore empty, non-required inputs with a few exceptions ...[m
[32m+[m			[32mif ([m
[32m+[m				[32m($postdata === NULL OR $postdata === '')[m
[32m+[m				[32m&& $callback === FALSE[m
[32m+[m				[32m&& $callable === FALSE[m
[32m+[m				[32m&& ! in_array($rule, array('required', 'isset', 'matches'), TRUE)[m
[32m+[m			[32m)[m
[32m+[m			[32m{[m
[32m+[m				[32mcontinue;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// Call the function that corresponds to the rule[m
[32m+[m			[32mif ($callback OR $callable !== FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32mif ($callback)[m
[32m+[m				[32m{[m
[32m+[m					[32mif ( ! method_exists($this->CI, $rule))[m
[32m+[m					[32m{[m
[32m+[m						[32mlog_message('debug', 'Unable to find callback validation rule: '.$rule);[m
[32m+[m						[32m$result = FALSE;[m
[32m+[m					[32m}[m
[32m+[m					[32melse[m
[32m+[m					[32m{[m
[32m+[m						[32m// Run the function and grab the result[m
[32m+[m						[32m$result = $this->CI->$rule($postdata, $param);[m
[32m+[m					[32m}[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32m$result = is_array($rule)[m
[32m+[m						[32m? $rule[0]->{$rule[1]}($postdata)[m
[32m+[m						[32m: $rule($postdata);[m
[32m+[m
[32m+[m					[32m// Is $callable set to a rule name?[m
[32m+[m					[32mif ($callable !== FALSE)[m
[32m+[m					[32m{[m
[32m+[m						[32m$rule = $callable;[m
[32m+[m					[32m}[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m// Re-assign the result to the master data array[m
[32m+[m				[32mif ($_in_array === TRUE)[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->_field_data[$row['field']]['postdata'][$cycles] = is_bool($result) ? $postdata : $result;[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->_field_data[$row['field']]['postdata'] = is_bool($result) ? $postdata : $result;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m			[32melseif ( ! method_exists($this, $rule))[m
[32m+[m			[32m{[m
[32m+[m				[32m// If our own wrapper function doesn't exist we see if a native PHP function does.[m
[32m+[m				[32m// Users can use any native PHP function call that has one param.[m
[32m+[m				[32mif (function_exists($rule))[m
[32m+[m				[32m{[m
[32m+[m					[32m// Native PHP functions issue warnings if you pass them more parameters than they use[m
[32m+[m					[32m$result = ($param !== FALSE) ? $rule($postdata, $param) : $rule($postdata);[m
[32m+[m
[32m+[m					[32mif ($_in_array === TRUE)[m
[32m+[m					[32m{[m
[32m+[m						[32m$this->_field_data[$row['field']]['postdata'][$cycles] = is_bool($result) ? $postdata : $result;[m
[32m+[m					[32m}[m
[32m+[m					[32melse[m
[32m+[m					[32m{[m
[32m+[m						[32m$this->_field_data[$row['field']]['postdata'] = is_bool($result) ? $postdata : $result;[m
[32m+[m					[32m}[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32mlog_message('debug', 'Unable to find validation rule: '.$rule);[m
[32m+[m					[32m$result = FALSE;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$result = $this->$rule($postdata, $param);[m
[32m+[m
[32m+[m				[32mif ($_in_array === TRUE)[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->_field_data[$row['field']]['postdata'][$cycles] = is_bool($result) ? $postdata : $result;[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->_field_data[$row['field']]['postdata'] = is_bool($result) ? $postdata : $result;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// Did the rule test negatively? If so, grab the error.[m
[32m+[m			[32mif ($result === FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32m// Callable rules might not have named error messages[m
[32m+[m				[32mif ( ! is_string($rule))[m
[32m+[m				[32m{[m
[32m+[m					[32m$line = $this->CI->lang->line('form_validation_error_message_not_set').'(Anonymous function)';[m
[32m+[m				[32m}[m
[32m+[m				[32melse[m
[32m+[m				[32m{[m
[32m+[m					[32m$line = $this->_get_error_message($rule, $row['field']);[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m// Is the parameter we are inserting into the error message the name[m
[32m+[m				[32m// of another field? If so we need to grab its "field label"[m
[32m+[m				[32mif (isset($this->_field_data[$param], $this->_field_data[$param]['label']))[m
[32m+[m				[32m{[m
[32m+[m					[32m$param = $this->_translate_fieldname($this->_field_data[$param]['label']);[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m// Build the error message[m
[32m+[m				[32m$message = $this->_build_error_msg($line, $this->_translate_fieldname($row['label']), $param);[m
[32m+[m
[32m+[m				[32m// Save the error message[m
[32m+[m				[32m$this->_field_data[$row['field']]['error'] = $message;[m
[32m+[m
[32m+[m				[32mif ( ! isset($this->_error_array[$row['field']]))[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->_error_array[$row['field']] = $message;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mreturn;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get the error message for the rule[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param 	string $rule 	The rule name[m
[32m+[m	[32m * @param 	string $field	The field name[m
[32m+[m	[32m * @return 	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _get_error_message($rule, $field)[m
[32m+[m	[32m{[m
[32m+[m		[32m// check if a custom message is defined through validation config row.[m
[32m+[m		[32mif (isset($this->_field_data[$field]['errors'][$rule]))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->_field_data[$field]['errors'][$rule];[m
[32m+[m		[32m}[m
[32m+[m		[32m// check if a custom message has been set using the set_message() function[m
[32m+[m		[32melseif (isset($this->_error_messages[$rule]))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->_error_messages[$rule];[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (FALSE !== ($line = $this->CI->lang->line('form_validation_'.$rule)))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $line;[m
[32m+[m		[32m}[m
[32m+[m		[32m// DEPRECATED support for non-prefixed keys, lang file again[m
[32m+[m		[32melseif (FALSE !== ($line = $this->CI->lang->line($rule, FALSE)))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $line;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->CI->lang->line('form_validation_error_message_not_set').'('.$rule.')';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Translate a field name[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the field name[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _translate_fieldname($fieldname)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Do we need to translate the field name? We look for the prefix 'lang:' to determine this[m
[32m+[m		[32m// If we find one, but there's no translation for the string - just return it[m
[32m+[m		[32mif (sscanf($fieldname, 'lang:%s', $line) === 1 && FALSE === ($fieldname = $this->CI->lang->line($line, FALSE)))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $line;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $fieldname;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Build an error message using the field and param.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The error message line[m
[32m+[m	[32m * @param	string	A field's human name[m
[32m+[m	[32m * @param	mixed	A rule's optional parameter[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _build_error_msg($line, $field = '', $param = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m// Check for %s in the string for legacy support.[m
[32m+[m		[32mif (strpos($line, '%s') !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn sprintf($line, $field, $param);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn str_replace(array('{field}', '{param}'), array($field, $param), $line);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Checks if the rule is present within the validator[m
[32m+[m	[32m *[m
[32m+[m	[32m * Permits you to check if a rule is present within the validator[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the field name[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function has_rule($field)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn isset($this->_field_data[$field]);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get the value from a form[m
[32m+[m	[32m *[m
[32m+[m	[32m * Permits you to repopulate a form field with the value it was submitted[m
[32m+[m	[32m * with, or, if that value doesn't exist, with the default[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	the field name[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_value($field = '', $default = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! isset($this->_field_data[$field], $this->_field_data[$field]['postdata']))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $default;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// If the data is an array output them one at a time.[m
[32m+[m		[32m//	E.g: form_input('name[]', set_value('name[]');[m
[32m+[m		[32mif (is_array($this->_field_data[$field]['postdata']))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn array_shift($this->_field_data[$field]['postdata']);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->_field_data[$field]['postdata'];[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set Select[m
[32m+[m	[32m *[m
[32m+[m	[32m * Enables pull-down lists to be set to the value the user[m
[32m+[m	[32m * selected in the event of an error[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	bool[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_select($field = '', $value = '', $default = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! isset($this->_field_data[$field], $this->_field_data[$field]['postdata']))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($default === TRUE && count($this->_field_data) === 0) ? ' selected="selected"' : '';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$field = $this->_field_data[$field]['postdata'];[m
[32m+[m		[32m$value = (string) $value;[m
[32m+[m		[32mif (is_array($field))[m
[32m+[m		[32m{[m
[32m+[m			[32m// Note: in_array('', array(0)) returns TRUE, do not use it[m
[32m+[m			[32mforeach ($field as &$v)[m
[32m+[m			[32m{[m
[32m+[m				[32mif ($value === $v)[m
[32m+[m				[32m{[m
[32m+[m					[32mreturn ' selected="selected"';[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn '';[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (($field === '' OR $value === '') OR ($field !== $value))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn '';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn ' selected="selected"';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set Radio[m
[32m+[m	[32m *[m
[32m+[m	[32m * Enables radio buttons to be set to the value the user[m
[32m+[m	[32m * selected in the event of an error[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	bool[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_radio($field = '', $value = '', $default = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! isset($this->_field_data[$field], $this->_field_data[$field]['postdata']))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($default === TRUE && count($this->_field_data) === 0) ? ' checked="checked"' : '';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$field = $this->_field_data[$field]['postdata'];[m
[32m+[m		[32m$value = (string) $value;[m
[32m+[m		[32mif (is_array($field))[m
[32m+[m		[32m{[m
[32m+[m			[32m// Note: in_array('', array(0)) returns TRUE, do not use it[m
[32m+[m			[32mforeach ($field as &$v)[m
[32m+[m			[32m{[m
[32m+[m				[32mif ($value === $v)[m
[32m+[m				[32m{[m
[32m+[m					[32mreturn ' checked="checked"';[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn '';[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (($field === '' OR $value === '') OR ($field !== $value))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn '';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn ' checked="checked"';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set Checkbox[m
[32m+[m	[32m *[m
[32m+[m	[32m * Enables checkboxes to be set to the value the user[m
[32m+[m	[32m * selected in the event of an error[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	bool[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_checkbox($field = '', $value = '', $default = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Logic is exactly the same as for radio fields[m
[32m+[m		[32mreturn $this->set_radio($field, $value, $default);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Required[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function required($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn is_array($str)[m
[32m+[m			[32m? (empty($str) === FALSE)[m
[32m+[m			[32m: (trim($str) !== '');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Performs a Regular Expression match test.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	string	regex[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function regex_match($str, $regex)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn (bool) preg_match($regex, $str);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Match one field to another[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$str	string to compare against[m
[32m+[m	[32m * @param	string	$field[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function matches($str, $field)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn isset($this->_field_data[$field], $this->_field_data[$field]['postdata'])[m
[32m+[m			[32m? ($str === $this->_field_data[$field]['postdata'])[m
[32m+[m			[32m: FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Differs from another field[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	string	field[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function differs($str, $field)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn ! (isset($this->_field_data[$field]) && $this->_field_data[$field]['postdata'] === $str);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Is Unique[m
[32m+[m	[32m *[m
[32m+[m	[32m * Check if the input value doesn't already exist[m
[32m+[m	[32m * in the specified database field.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$str[m
[32m+[m	[32m * @param	string	$field[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function is_unique($str, $field)[m
[32m+[m	[32m{[m
[32m+[m		[32msscanf($field, '%[^.].%[^.]', $table, $field);[m
[32m+[m		[32mreturn isset($this->CI->db)[m
[32m+[m			[32m? ($this->CI->db->limit(1)->get_where($table, array($field => $str))->num_rows() === 0)[m
[32m+[m			[32m: FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Minimum Length[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function min_length($str, $val)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! is_numeric($val))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn ($val <= mb_strlen($str));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Max Length[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function max_length($str, $val)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! is_numeric($val))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn ($val >= mb_strlen($str));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Exact Length[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function exact_length($str, $val)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! is_numeric($val))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn (mb_strlen($str) === (int) $val);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Valid URL[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$str[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function valid_url($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (empty($str))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (preg_match('/^(?:([^:]*)\:)?\/\/(.+)$/', $str, $matches))[m
[32m+[m		[32m{[m
[32m+[m			[32mif (empty($matches[2]))[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m			[32melseif ( ! in_array(strtolower($matches[1]), array('http', 'https'), TRUE))[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$str = $matches[2];[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// PHP 7 accepts IPv6 addresses within square brackets as hostnames,[m
[32m+[m		[32m// but it appears that the PR that came in with https://bugs.php.net/bug.php?id=68039[m
[32m+[m		[32m// was never merged into a PHP 5 branch ... https://3v4l.org/8PsSN[m
[32m+[m		[32mif (preg_match('/^\[([^\]]+)\]/', $str, $matches) && ! is_php('7') && filter_var($matches[1], FILTER_VALIDATE_IP, FILTER_FLAG_IPV6) !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$str = 'ipv6.host'.substr($str, strlen($matches[1]) + 2);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn (filter_var('http://'.$str, FILTER_VALIDATE_URL) !== FALSE);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Valid Email[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function valid_email($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (function_exists('idn_to_ascii') && preg_match('#\A([^@]+)@(.+)\z#', $str, $matches))[m
[32m+[m		[32m{[m
[32m+[m			[32m$domain = defined('INTL_IDNA_VARIANT_UTS46')[m
[32m+[m				[32m? idn_to_ascii($matches[2], 0, INTL_IDNA_VARIANT_UTS46)[m
[32m+[m				[32m: idn_to_ascii($matches[2]);[m
[32m+[m
[32m+[m			[32mif ($domain !== FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$str = $matches[1].'@'.$domain;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn (bool) filter_var($str, FILTER_VALIDATE_EMAIL);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Valid Emails[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function valid_emails($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (strpos($str, ',') === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $this->valid_email(trim($str));[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mforeach (explode(',', $str) as $email)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (trim($email) !== '' && $this->valid_email(trim($email)) === FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Validate IP Address[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	string	'ipv4' or 'ipv6' to validate a specific IP format[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function valid_ip($ip, $which = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->CI->input->valid_ip($ip, $which);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Alpha[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function alpha($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn ctype_alpha($str);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Alpha-numeric[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function alpha_numeric($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn ctype_alnum((string) $str);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Alpha-numeric w/ spaces[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function alpha_numeric_spaces($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn (bool) preg_match('/^[A-Z0-9 ]+$/i', $str);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Alpha-numeric with underscores and dashes[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function alpha_dash($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn (bool) preg_match('/^[a-z0-9_-]+$/i', $str);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Numeric[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function numeric($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn (bool) preg_match('/^[\-+]?[0-9]*\.?[0-9]+$/', $str);[m
[32m+[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Integer[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function integer($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn (bool) preg_match('/^[\-+]?[0-9]+$/', $str);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Decimal number[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function decimal($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn (bool) preg_match('/^[\-+]?[0-9]+\.[0-9]+$/', $str);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Greater than[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	int[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function greater_than($str, $min)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn is_numeric($str) ? ($str > $min) : FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Equal to or Greater than[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	int[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function greater_than_equal_to($str, $min)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn is_numeric($str) ? ($str >= $min) : FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Less than[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	int[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function less_than($str, $max)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn is_numeric($str) ? ($str < $max) : FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Equal to or Less than[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	int[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function less_than_equal_to($str, $max)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn is_numeric($str) ? ($str <= $max) : FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Value should be within an array of values[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function in_list($value, $list)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn in_array($value, explode(',', $list), TRUE);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Is a Natural number  (0,1,2,3, etc.)[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function is_natural($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn ctype_digit((string) $str);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Is a Natural number, but not a zero  (1,2,3, etc.)[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function is_natural_no_zero($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn ($str != 0 && ctype_digit((string) $str));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Valid Base64[m
[32m+[m	[32m *[m
[32m+[m	[32m * Tests a string for characters outside of the Base64 alphabet[m
[32m+[m	[32m * as defined by RFC 2045 http://www.faqs.org/rfcs/rfc2045[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function valid_base64($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn (base64_encode(base64_decode($str)) === $str);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Prep data for form[m
[32m+[m	[32m *[m
[32m+[m	[32m * This function allows HTML to be safely shown in a form.[m
[32m+[m	[32m * Special characters are converted.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @deprecated	3.0.6	Not used anywhere within the framework and pretty much useless[m
[32m+[m	[32m * @param	mixed	$data	Input data[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function prep_for_form($data)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->_safe_form_data === FALSE OR empty($data))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $data;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (is_array($data))[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($data as $key => $val)[m
[32m+[m			[32m{[m
[32m+[m				[32m$data[$key] = $this->prep_for_form($val);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn $data;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn str_replace(array("'", '"', '<', '>'), array('&#39;', '&quot;', '&lt;', '&gt;'), stripslashes($data));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Prep URL[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function prep_url($str = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($str === 'http://' OR $str === '')[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn '';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (strpos($str, 'http://') !== 0 && strpos($str, 'https://') !== 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn 'http://'.$str;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $str;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Strip Image Tags[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function strip_image_tags($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->CI->security->strip_image_tags($str);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Convert PHP tags to entities[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function encode_php_tags($str)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn str_replace(array('<?', '?>'), array('&lt;?', '?&gt;'), $str);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Reset validation vars[m
[32m+[m	[32m *[m
[32m+[m	[32m * Prevents subsequent validation routines from being affected by the[m
[32m+[m	[32m * results of any previous validation routine due to the CI singleton.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	CI_Form_validation[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function reset_validation()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->_field_data = array();[m
[32m+[m		[32m$this->_error_array = array();[m
[32m+[m		[32m$this->_error_messages = array();[m
[32m+[m		[32m$this->error_string = '';[m
[32m+[m		[32mreturn $this;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/libraries/Ftp.php b/system/libraries/Ftp.php[m
[1mnew file mode 100644[m
[1mindex 0000000..2885b55[m
[1m--- /dev/null[m
[1m+++ b/system/libraries/Ftp.php[m
[36m@@ -0,0 +1,667 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * FTP Class[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Libraries[m
[32m+[m[32m * @category	Libraries[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/libraries/ftp.html[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_FTP {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * FTP Server hostname[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $hostname = '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * FTP Username[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $username = '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * FTP Password[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $password = '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * FTP Server port[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $port = 21;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Passive mode flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $passive = TRUE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Debug flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * Specifies whether to display error messages.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $debug = FALSE;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Connection ID[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	resource[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $conn_id;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$config[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct($config = array())[m
[32m+[m	[32m{[m
[32m+[m		[32mempty($config) OR $this->initialize($config);[m
[32m+[m		[32mlog_message('info', 'FTP Class Initialized');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Initialize preferences[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$config[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function initialize($config = array())[m
[32m+[m	[32m{[m
[32m+[m		[32mforeach ($config as $key => $val)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (isset($this->$key))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->$key = $val;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Prep the hostname[m
[32m+[m		[32m$this->hostname = preg_replace('|.+?://|', '', $this->hostname);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * FTP Connect[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	 $config	Connection values[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function connect($config = array())[m
[32m+[m	[32m{[m
[32m+[m		[32mif (count($config) > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->initialize($config);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (FALSE === ($this->conn_id = @ftp_connect($this->hostname, $this->port)))[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($this->debug === TRUE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_error('ftp_unable_to_connect');[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! $this->_login())[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($this->debug === TRUE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_error('ftp_unable_to_login');[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Set passive mode if needed[m
[32m+[m		[32mif ($this->passive === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32mftp_pasv($this->conn_id, TRUE);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * FTP Login[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _login()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn @ftp_login($this->conn_id, $this->username, $this->password);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Validates the connection ID[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _is_conn()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! is_resource($this->conn_id))[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($this->debug === TRUE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_error('ftp_no_connection');[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Change directory[m
[32m+[m	[32m *[m
[32m+[m	[32m * The second parameter lets us momentarily turn off debugging so that[m
[32m+[m	[32m * this function can be used to test for the existence of a folder[m
[32m+[m	[32m * without throwing an error. There's no FTP equivalent to is_dir()[m
[32m+[m	[32m * so we do it by trying to change to a particular directory.[m
[32m+[m	[32m * Internally, this parameter is only used by the "mirror" function below.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$path[m
[32m+[m	[32m * @param	bool	$suppress_debug[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function changedir($path, $suppress_debug = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! $this->_is_conn())[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$result = @ftp_chdir($this->conn_id, $path);[m
[32m+[m
[32m+[m		[32mif ($result === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($this->debug === TRUE && $suppress_debug === FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_error('ftp_unable_to_changedir');[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Create a directory[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$path[m
[32m+[m	[32m * @param	int	$permissions[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function mkdir($path, $permissions = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($path === '' OR ! $this->_is_conn())[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$result = @ftp_mkdir($this->conn_id, $path);[m
[32m+[m
[32m+[m		[32mif ($result === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($this->debug === TRUE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_error('ftp_unable_to_mkdir');[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Set file permissions if needed[m
[32m+[m		[32mif ($permissions !== NULL)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->chmod($path, (int) $permissions);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Upload a file to the server[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$locpath[m
[32m+[m	[32m * @param	string	$rempath[m
[32m+[m	[32m * @param	string	$mode[m
[32m+[m	[32m * @param	int	$permissions[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function upload($locpath, $rempath, $mode = 'auto', $permissions = NULL)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! $this->_is_conn())[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! file_exists($locpath))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_error('ftp_no_source_file');[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Set the mode if not specified[m
[32m+[m		[32mif ($mode === 'auto')[m
[32m+[m		[32m{[m
[32m+[m			[32m// Get the file extension so we can set the upload type[m
[32m+[m			[32m$ext = $this->_getext($locpath);[m
[32m+[m			[32m$mode = $this->_settype($ext);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$mode = ($mode === 'ascii') ? FTP_ASCII : FTP_BINARY;[m
[32m+[m
[32m+[m		[32m$result = @ftp_put($this->conn_id, $rempath, $locpath, $mode);[m
[32m+[m
[32m+[m		[32mif ($result === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($this->debug === TRUE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_error('ftp_unable_to_upload');[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Set file permissions if needed[m
[32m+[m		[32mif ($permissions !== NULL)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->chmod($rempath, (int) $permissions);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Download a file from a remote server to the local server[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$rempath[m
[32m+[m	[32m * @param	string	$locpath[m
[32m+[m	[32m * @param	string	$mode[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function download($rempath, $locpath, $mode = 'auto')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! $this->_is_conn())[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Set the mode if not specified[m
[32m+[m		[32mif ($mode === 'auto')[m
[32m+[m		[32m{[m
[32m+[m			[32m// Get the file extension so we can set the upload type[m
[32m+[m			[32m$ext = $this->_getext($rempath);[m
[32m+[m			[32m$mode = $this->_settype($ext);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$mode = ($mode === 'ascii') ? FTP_ASCII : FTP_BINARY;[m
[32m+[m
[32m+[m		[32m$result = @ftp_get($this->conn_id, $locpath, $rempath, $mode);[m
[32m+[m
[32m+[m		[32mif ($result === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($this->debug === TRUE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_error('ftp_unable_to_download');[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Rename (or move) a file[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$old_file[m
[32m+[m	[32m * @param	string	$new_file[m
[32m+[m	[32m * @param	bool	$move[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function rename($old_file, $new_file, $move = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! $this->_is_conn())[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$result = @ftp_rename($this->conn_id, $old_file, $new_file);[m
[32m+[m
[32m+[m		[32mif ($result === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($this->debug === TRUE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_error('ftp_unable_to_'.($move === FALSE ? 'rename' : 'move'));[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Move a file[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$old_file[m
[32m+[m	[32m * @param	string	$new_file[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function move($old_file, $new_file)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->rename($old_file, $new_file, TRUE);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Rename (or move) a file[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$filepath[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function delete_file($filepath)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! $this->_is_conn())[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$result = @ftp_delete($this->conn_id, $filepath);[m
[32m+[m
[32m+[m		[32mif ($result === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($this->debug === TRUE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_error('ftp_unable_to_delete');[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Delete a folder and recursively delete everything (including sub-folders)[m
[32m+[m	[32m * contained within it.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$filepath[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function delete_dir($filepath)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! $this->_is_conn())[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Add a trailing slash to the file path if needed[m
[32m+[m		[32m$filepath = preg_replace('/(.+?)\/*$/', '\\1/', $filepath);[m
[32m+[m
[32m+[m		[32m$list = $this->list_files($filepath);[m
[32m+[m		[32mif ( ! empty($list))[m
[32m+[m		[32m{[m
[32m+[m			[32mfor ($i = 0, $c = count($list); $i < $c; $i++)[m
[32m+[m			[32m{[m
[32m+[m				[32m// If we can't delete the item it's probably a directory,[m
[32m+[m				[32m// so we'll recursively call delete_dir()[m
[32m+[m				[32mif ( ! preg_match('#/\.\.?$#', $list[$i]) && ! @ftp_delete($this->conn_id, $list[$i]))[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->delete_dir($filepath.$list[$i]);[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (@ftp_rmdir($this->conn_id, $filepath) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($this->debug === TRUE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_error('ftp_unable_to_delete');[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set file permissions[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$path	File path[m
[32m+[m	[32m * @param	int	$perm	Permissions[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function chmod($path, $perm)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! $this->_is_conn())[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (@ftp_chmod($this->conn_id, $perm, $path) === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($this->debug === TRUE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_error('ftp_unable_to_chmod');[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * FTP List files in the specified directory[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$path[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function list_files($path = '.')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_is_conn()[m
[32m+[m			[32m? ftp_nlist($this->conn_id, $path)[m
[32m+[m			[32m: FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Read a directory and recreate it remotely[m
[32m+[m	[32m *[m
[32m+[m	[32m * This function recursively reads a folder and everything it contains[m
[32m+[m	[32m * (including sub-folders) and creates a mirror via FTP based on it.[m
[32m+[m	[32m * Whatever the directory structure of the original file path will be[m
[32m+[m	[32m * recreated on the server.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$locpath	Path to source with trailing slash[m
[32m+[m	[32m * @param	string	$rempath	Path to destination - include the base folder with trailing slash[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function mirror($locpath, $rempath)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! $this->_is_conn())[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Open the local file path[m
[32m+[m		[32mif ($fp = @opendir($locpath))[m
[32m+[m		[32m{[m
[32m+[m			[32m// Attempt to open the remote file path and try to create it, if it doesn't exist[m
[32m+[m			[32mif ( ! $this->changedir($rempath, TRUE) && ( ! $this->mkdir($rempath) OR ! $this->changedir($rempath)))[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// Recursively read the local directory[m
[32m+[m			[32mwhile (FALSE !== ($file = readdir($fp)))[m
[32m+[m			[32m{[m
[32m+[m				[32mif (is_dir($locpath.$file) && $file[0] !== '.')[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->mirror($locpath.$file.'/', $rempath.$file.'/');[m
[32m+[m				[32m}[m
[32m+[m				[32melseif ($file[0] !== '.')[m
[32m+[m				[32m{[m
[32m+[m					[32m// Get the file extension so we can se the upload type[m
[32m+[m					[32m$ext = $this->_getext($file);[m
[32m+[m					[32m$mode = $this->_settype($ext);[m
[32m+[m
[32m+[m					[32m$this->upload($locpath.$file, $rempath.$file, $mode);[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Extract the file extension[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$filename[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _getext($filename)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn (($dot = strrpos($filename, '.')) === FALSE)[m
[32m+[m			[32m? 'txt'[m
[32m+[m			[32m: substr($filename, $dot + 1);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set the upload type[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$ext	Filename extension[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _settype($ext)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn in_array($ext, array('txt', 'text', 'php', 'phps', 'php4', 'js', 'css', 'htm', 'html', 'phtml', 'shtml', 'log', 'xml'), TRUE)[m
[32m+[m			[32m? 'ascii'[m
[32m+[m			[32m: 'binary';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Close the connection[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function close()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_is_conn()[m
[32m+[m			[32m? @ftp_close($this->conn_id)[m
[32m+[m			[32m: FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// ------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Display error message[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$line[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _error($line)[m
[32m+[m	[32m{[m
[32m+[m		[32m$CI =& get_instance();[m
[32m+[m		[32m$CI->lang->load('ftp');[m
[32m+[m		[32mshow_error($CI->lang->line($line));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/libraries/Image_lib.php b/system/libraries/Image_lib.php[m
[1mnew file mode 100644[m
[1mindex 0000000..a5cb6fb[m
[1m--- /dev/null[m
[1m+++ b/system/libraries/Image_lib.php[m
[36m@@ -0,0 +1,1842 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Image Manipulation class[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Libraries[m
[32m+[m[32m * @category	Image_lib[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/libraries/image_lib.html[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_Image_lib {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * PHP extension/library to use for image manipulation[m
[32m+[m	[32m * Can be: imagemagick, netpbm, gd, gd2[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $image_library		= 'gd2';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Path to the graphic library (if applicable)[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $library_path		= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Whether to send to browser or write to disk[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $dynamic_output		= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Path to original image[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $source_image		= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Path to the modified image[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $new_image		= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Image width[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $width			= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Image height[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $height			= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Quality percentage of new image[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $quality			= 90;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Whether to create a thumbnail[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $create_thumb		= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * String to add to thumbnail version of image[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $thumb_marker		= '_thumb';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Whether to maintain aspect ratio when resizing or use hard values[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $maintain_ratio		= TRUE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * auto, height, or width.  Determines what to use as the master dimension[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $master_dim		= 'auto';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Angle at to rotate image[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $rotation_angle		= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * X Coordinate for manipulation of the current image[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $x_axis			= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Y Coordinate for manipulation of the current image[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $y_axis			= '';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------------[m
[32m+[m	[32m// Watermark Vars[m
[32m+[m	[32m// --------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Watermark text if graphic is not used[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $wm_text			= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Type of watermarking.  Options:  text/overlay[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $wm_type			= 'text';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Default transparency for watermark[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $wm_x_transp		= 4;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Default transparency for watermark[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $wm_y_transp		= 4;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Watermark image path[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $wm_overlay_path		= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * TT font[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $wm_font_path		= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Font size (different versions of GD will either use points or pixels)[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $wm_font_size		= 17;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Vertical alignment:   T M B[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $wm_vrt_alignment	= 'B';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Horizontal alignment: L R C[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $wm_hor_alignment	= 'C';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Padding around text[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $wm_padding			= 0;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Lets you push text to the right[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $wm_hor_offset		= 0;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Lets you push text down[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $wm_vrt_offset		= 0;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Text color[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $wm_font_color	= '#ffffff';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Dropshadow color[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $wm_shadow_color	= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Dropshadow distance[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $wm_shadow_distance	= 2;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Image opacity: 1 - 100  Only works with image[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $wm_opacity		= 50;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------------[m
[32m+[m	[32m// Private Vars[m
[32m+[m	[32m// --------------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Source image folder[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $source_folder		= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Destination image folder[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $dest_folder		= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Image mime-type[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $mime_type		= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Original image width[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $orig_width		= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Original image height[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $orig_height		= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Image format[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $image_type		= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Size of current image[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $size_str		= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Full path to source image[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $full_src_path		= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Full path to destination image[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $full_dst_path		= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * File permissions[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $file_permissions = 0644;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Name of function to create image[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $create_fnc		= 'imagecreatetruecolor';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Name of function to copy image[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $copy_fnc		= 'imagecopyresampled';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Error messages[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $error_msg		= array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Whether to have a drop shadow on watermark[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $wm_use_drop_shadow	= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Whether to use truetype fonts[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $wm_use_truetype	= FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Initialize Image Library[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$props[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct($props = array())[m
[32m+[m	[32m{[m
[32m+[m		[32mif (count($props) > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->initialize($props);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m/**[m
[32m+[m		[32m * A work-around for some improperly formatted, but[m
[32m+[m		[32m * usable JPEGs; known to be produced by Samsung[m
[32m+[m		[32m * smartphones' front-facing cameras.[m
[32m+[m		[32m *[m
[32m+[m		[32m * @see	https://github.com/bcit-ci/CodeIgniter/issues/4967[m
[32m+[m		[32m * @see	https://bugs.php.net/bug.php?id=72404[m
[32m+[m		[32m */[m
[32m+[m		[32mini_set('gd.jpeg_ignore_warning', 1);[m
[32m+[m
[32m+[m		[32mlog_message('info', 'Image Lib Class Initialized');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Initialize image properties[m
[32m+[m	[32m *[m
[32m+[m	[32m * Resets values in case this class is used in a loop[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function clear()[m
[32m+[m	[32m{[m
[32m+[m		[32m$props = array('thumb_marker', 'library_path', 'source_image', 'new_image', 'width', 'height', 'rotation_angle', 'x_axis', 'y_axis', 'wm_text', 'wm_overlay_path', 'wm_font_path', 'wm_shadow_color', 'source_folder', 'dest_folder', 'mime_type', 'orig_width', 'orig_height', 'image_type', 'size_str', 'full_src_path', 'full_dst_path');[m
[32m+[m
[32m+[m		[32mforeach ($props as $val)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->$val = '';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->image_library 		= 'gd2';[m
[32m+[m		[32m$this->dynamic_output 		= FALSE;[m
[32m+[m		[32m$this->quality 				= 90;[m
[32m+[m		[32m$this->create_thumb 		= FALSE;[m
[32m+[m		[32m$this->thumb_marker 		= '_thumb';[m
[32m+[m		[32m$this->maintain_ratio 		= TRUE;[m
[32m+[m		[32m$this->master_dim 			= 'auto';[m
[32m+[m		[32m$this->wm_type 				= 'text';[m
[32m+[m		[32m$this->wm_x_transp 			= 4;[m
[32m+[m		[32m$this->wm_y_transp 			= 4;[m
[32m+[m		[32m$this->wm_font_size 		= 17;[m
[32m+[m		[32m$this->wm_vrt_alignment 	= 'B';[m
[32m+[m		[32m$this->wm_hor_alignment 	= 'C';[m
[32m+[m		[32m$this->wm_padding 			= 0;[m
[32m+[m		[32m$this->wm_hor_offset 		= 0;[m
[32m+[m		[32m$this->wm_vrt_offset 		= 0;[m
[32m+[m		[32m$this->wm_font_color		= '#ffffff';[m
[32m+[m		[32m$this->wm_shadow_distance 	= 2;[m
[32m+[m		[32m$this->wm_opacity 			= 50;[m
[32m+[m		[32m$this->create_fnc 			= 'imagecreatetruecolor';[m
[32m+[m		[32m$this->copy_fnc 			= 'imagecopyresampled';[m
[32m+[m		[32m$this->error_msg 			= array();[m
[32m+[m		[32m$this->wm_use_drop_shadow 	= FALSE;[m
[32m+[m		[32m$this->wm_use_truetype 		= FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * initialize image preferences[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function initialize($props = array())[m
[32m+[m	[32m{[m
[32m+[m		[32m// Convert array elements into class variables[m
[32m+[m		[32mif (count($props) > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($props as $key => $val)[m
[32m+[m			[32m{[m
[32m+[m				[32mif (property_exists($this, $key))[m
[32m+[m				[32m{[m
[32m+[m					[32mif (in_array($key, array('wm_font_color', 'wm_shadow_color'), TRUE))[m
[32m+[m					[32m{[m
[32m+[m						[32mif (preg_match('/^#?([0-9a-f]{3}|[0-9a-f]{6})$/i', $val, $matches))[m
[32m+[m						[32m{[m
[32m+[m							[32m/* $matches[1] contains our hex color value, but it might be[m
[32m+[m							[32m * both in the full 6-length format or the shortened 3-length[m
[32m+[m							[32m * value.[m
[32m+[m							[32m * We'll later need the full version, so we keep it if it's[m
[32m+[m							[32m * already there and if not - we'll convert to it. We can[m
[32m+[m							[32m * access string characters by their index as in an array,[m
[32m+[m							[32m * so we'll do that and use concatenation to form the final[m
[32m+[m							[32m * value:[m
[32m+[m							[32m */[m
[32m+[m							[32m$val = (strlen($matches[1]) === 6)[m
[32m+[m								[32m? '#'.$matches[1][m
[32m+[m								[32m: '#'.$matches[1][0].$matches[1][0].$matches[1][1].$matches[1][1].$matches[1][2].$matches[1][2];[m
[32m+[m						[32m}[m
[32m+[m						[32melse[m
[32m+[m						[32m{[m
[32m+[m							[32mcontinue;[m
[32m+[m						[32m}[m
[32m+[m					[32m}[m
[32m+[m					[32melseif (in_array($key, array('width', 'height'), TRUE) && ! ctype_digit((string) $val))[m
[32m+[m					[32m{[m
[32m+[m						[32mcontinue;[m
[32m+[m					[32m}[m
[32m+[m
[32m+[m					[32m$this->$key = $val;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Is there a source image? If not, there's no reason to continue[m
[32m+[m		[32mif ($this->source_image === '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->set_error('imglib_source_image_required');[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m/* Is getimagesize() available?[m
[32m+[m		[32m *[m
[32m+[m		[32m * We use it to determine the image properties (width/height).[m
[32m+[m		[32m * Note: We need to figure out how to determine image[m
[32m+[m		[32m * properties using ImageMagick and NetPBM[m
[32m+[m		[32m */[m
[32m+[m		[32mif ( ! function_exists('getimagesize'))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->set_error('imglib_gd_required_for_props');[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->image_library = strtolower($this->image_library);[m
[32m+[m
[32m+[m		[32m/* Set the full server path[m
[32m+[m		[32m *[m
[32m+[m		[32m * The source image may or may not contain a path.[m
[32m+[m		[32m * Either way, we'll try use realpath to generate the[m
[32m+[m		[32m * full server path in order to more reliably read it.[m
[32m+[m		[32m */[m
[32m+[m		[32mif (($full_source_path = realpath($this->source_image)) !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$full_source_path = str_replace('\\', '/', $full_source_path);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$full_source_path = $this->source_image;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$x = explode('/', $full_source_path);[m
[32m+[m		[32m$this->source_image = end($x);[m
[32m+[m		[32m$this->source_folder = str_replace($this->source_image, '', $full_source_path);[m
[32m+[m
[32m+[m		[32m// Set the Image Properties[m
[32m+[m		[32mif ( ! $this->get_image_properties($this->source_folder.$this->source_image))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m/*[m
[32m+[m		[32m * Assign the "new" image name/path[m
[32m+[m		[32m *[m
[32m+[m		[32m * If the user has set a "new_image" name it means[m
[32m+[m		[32m * we are making a copy of the source image. If not[m
[32m+[m		[32m * it means we are altering the original. We'll[m
[32m+[m		[32m * set the destination filename and path accordingly.[m
[32m+[m		[32m */[m
[32m+[m		[32mif ($this->new_image === '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->dest_image  = $this->source_image;[m
[32m+[m			[32m$this->dest_folder = $this->source_folder;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (strpos($this->new_image, '/') === FALSE && strpos($this->new_image, '\\') === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->dest_image  = $this->new_image;[m
[32m+[m			[32m$this->dest_folder = $this->source_folder;[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m// Is there a file name?[m
[32m+[m			[32mif ( ! preg_match('#\.(jpg|jpeg|gif|png)$#i', $this->new_image))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->dest_image  = $this->source_image;[m
[32m+[m				[32m$this->dest_folder = $this->new_image;[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$x = explode('/', str_replace('\\', '/', $this->new_image));[m
[32m+[m				[32m$this->dest_image  = end($x);[m
[32m+[m				[32m$this->dest_folder = str_replace($this->dest_image, '', $this->new_image);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$this->dest_folder = realpath($this->dest_folder).'/';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m/* Compile the finalized filenames/paths[m
[32m+[m		[32m *[m
[32m+[m		[32m * We'll create two master strings containing the[m
[32m+[m		[32m * full server path to the source image and the[m
[32m+[m		[32m * full server path to the destination image.[m
[32m+[m		[32m * We'll also split the destination image name[m
[32m+[m		[32m * so we can insert the thumbnail marker if needed.[m
[32m+[m		[32m */[m
[32m+[m		[32mif ($this->create_thumb === FALSE OR $this->thumb_marker === '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->thumb_marker = '';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$xp = $this->explode_name($this->dest_image);[m
[32m+[m
[32m+[m		[32m$filename = $xp['name'];[m
[32m+[m		[32m$file_ext = $xp['ext'];[m
[32m+[m
[32m+[m		[32m$this->full_src_path = $this->source_folder.$this->source_image;[m
[32m+[m		[32m$this->full_dst_path = $this->dest_folder.$filename.$this->thumb_marker.$file_ext;[m
[32m+[m
[32m+[m		[32m/* Should we maintain image proportions?[m
[32m+[m		[32m *[m
[32m+[m		[32m * When creating thumbs or copies, the target width/height[m
[32m+[m		[32m * might not be in correct proportion with the source[m
[32m+[m		[32m * image's width/height. We'll recalculate it here.[m
[32m+[m		[32m */[m
[32m+[m		[32mif ($this->maintain_ratio === TRUE && ($this->width !== 0 OR $this->height !== 0))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->image_reproportion();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m/* Was a width and height specified?[m
[32m+[m		[32m *[m
[32m+[m		[32m * If the destination width/height was not submitted we[m
[32m+[m		[32m * will use the values from the actual file[m
[32m+[m		[32m */[m
[32m+[m		[32mif ($this->width === '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->width = $this->orig_width;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($this->height === '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->height = $this->orig_height;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Set the quality[m
[32m+[m		[32m$this->quality = trim(str_replace('%', '', $this->quality));[m
[32m+[m
[32m+[m		[32mif ($this->quality === '' OR $this->quality === 0 OR ! ctype_digit($this->quality))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->quality = 90;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Set the x/y coordinates[m
[32m+[m		[32mis_numeric($this->x_axis) OR $this->x_axis = 0;[m
[32m+[m		[32mis_numeric($this->y_axis) OR $this->y_axis = 0;[m
[32m+[m
[32m+[m		[32m// Watermark-related Stuff...[m
[32m+[m		[32mif ($this->wm_overlay_path !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->wm_overlay_path = str_replace('\\', '/', realpath($this->wm_overlay_path));[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($this->wm_shadow_color !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->wm_use_drop_shadow = TRUE;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($this->wm_use_drop_shadow === TRUE && $this->wm_shadow_color === '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->wm_use_drop_shadow = FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($this->wm_font_path !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->wm_use_truetype = TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Image Resize[m
[32m+[m	[32m *[m
[32m+[m	[32m * This is a wrapper function that chooses the proper[m
[32m+[m	[32m * resize function based on the protocol specified[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function resize()[m
[32m+[m	[32m{[m
[32m+[m		[32m$protocol = ($this->image_library === 'gd2') ? 'image_process_gd' : 'image_process_'.$this->image_library;[m
[32m+[m		[32mreturn $this->$protocol('resize');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Image Crop[m
[32m+[m	[32m *[m
[32m+[m	[32m * This is a wrapper function that chooses the proper[m
[32m+[m	[32m * cropping function based on the protocol specified[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function crop()[m
[32m+[m	[32m{[m
[32m+[m		[32m$protocol = ($this->image_library === 'gd2') ? 'image_process_gd' : 'image_process_'.$this->image_library;[m
[32m+[m		[32mreturn $this->$protocol('crop');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Image Rotate[m
[32m+[m	[32m *[m
[32m+[m	[32m * This is a wrapper function that chooses the proper[m
[32m+[m	[32m * rotation function based on the protocol specified[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function rotate()[m
[32m+[m	[32m{[m
[32m+[m		[32m// Allowed rotation values[m
[32m+[m		[32m$degs = array(90, 180, 270, 'vrt', 'hor');[m
[32m+[m
[32m+[m		[32mif ($this->rotation_angle === '' OR ! in_array($this->rotation_angle, $degs))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->set_error('imglib_rotation_angle_required');[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Reassign the width and height[m
[32m+[m		[32mif ($this->rotation_angle === 90 OR $this->rotation_angle === 270)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->width	= $this->orig_height;[m
[32m+[m			[32m$this->height	= $this->orig_width;[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->width	= $this->orig_width;[m
[32m+[m			[32m$this->height	= $this->orig_height;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Choose resizing function[m
[32m+[m		[32mif ($this->image_library === 'imagemagick' OR $this->image_library === 'netpbm')[m
[32m+[m		[32m{[m
[32m+[m			[32m$protocol = 'image_process_'.$this->image_library;[m
[32m+[m			[32mreturn $this->$protocol('rotate');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn ($this->rotation_angle === 'hor' OR $this->rotation_angle === 'vrt')[m
[32m+[m			[32m? $this->image_mirror_gd()[m
[32m+[m			[32m: $this->image_rotate_gd();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Image Process Using GD/GD2[m
[32m+[m	[32m *[m
[32m+[m	[32m * This function will resize or crop[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function image_process_gd($action = 'resize')[m
[32m+[m	[32m{[m
[32m+[m		[32m$v2_override = FALSE;[m
[32m+[m
[32m+[m		[32m// If the target width/height match the source, AND if the new file name is not equal to the old file name[m
[32m+[m		[32m// we'll simply make a copy of the original with the new name... assuming dynamic rendering is off.[m
[32m+[m		[32mif ($this->dynamic_output === FALSE && $this->orig_width === $this->width && $this->orig_height === $this->height)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($this->source_image !== $this->new_image && @copy($this->full_src_path, $this->full_dst_path))[m
[32m+[m			[32m{[m
[32m+[m				[32mchmod($this->full_dst_path, $this->file_permissions);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Let's set up our values based on the action[m
[32m+[m		[32mif ($action === 'crop')[m
[32m+[m		[32m{[m
[32m+[m			[32m// Reassign the source width/height if cropping[m
[32m+[m			[32m$this->orig_width  = $this->width;[m
[32m+[m			[32m$this->orig_height = $this->height;[m
[32m+[m
[32m+[m			[32m// GD 2.0 has a cropping bug so we'll test for it[m
[32m+[m			[32mif ($this->gd_version() !== FALSE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$gd_version = str_replace('0', '', $this->gd_version());[m
[32m+[m				[32m$v2_override = ($gd_version == 2);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m// If resizing the x/y axis must be zero[m
[32m+[m			[32m$this->x_axis = 0;[m
[32m+[m			[32m$this->y_axis = 0;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Create the image handle[m
[32m+[m		[32mif ( ! ($src_img = $this->image_create_gd()))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m/* Create the image[m
[32m+[m		[32m *[m
[32m+[m		[32m * Old conditional which users report cause problems with shared GD libs who report themselves as "2.0 or greater"[m
[32m+[m		[32m * it appears that this is no longer the issue that it was in 2004, so we've removed it, retaining it in the comment[m
[32m+[m		[32m * below should that ever prove inaccurate.[m
[32m+[m		[32m *[m
[32m+[m		[32m * if ($this->image_library === 'gd2' && function_exists('imagecreatetruecolor') && $v2_override === FALSE)[m
[32m+[m		[32m */[m
[32m+[m		[32mif ($this->image_library === 'gd2' && function_exists('imagecreatetruecolor'))[m
[32m+[m		[32m{[m
[32m+[m			[32m$create	= 'imagecreatetruecolor';[m
[32m+[m			[32m$copy	= 'imagecopyresampled';[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$create	= 'imagecreate';[m
[32m+[m			[32m$copy	= 'imagecopyresized';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$dst_img = $create($this->width, $this->height);[m
[32m+[m
[32m+[m		[32mif ($this->image_type === 3) // png we can actually preserve transparency[m
[32m+[m		[32m{[m
[32m+[m			[32mimagealphablending($dst_img, FALSE);[m
[32m+[m			[32mimagesavealpha($dst_img, TRUE);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$copy($dst_img, $src_img, 0, 0, $this->x_axis, $this->y_axis, $this->width, $this->height, $this->orig_width, $this->orig_height);[m
[32m+[m
[32m+[m		[32m// Show the image[m
[32m+[m		[32mif ($this->dynamic_output === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->image_display_gd($dst_img);[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! $this->image_save_gd($dst_img)) // Or save it[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Kill the file handles[m
[32m+[m		[32mimagedestroy($dst_img);[m
[32m+[m		[32mimagedestroy($src_img);[m
[32m+[m
[32m+[m		[32mif ($this->dynamic_output !== TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32mchmod($this->full_dst_path, $this->file_permissions);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Image Process Using ImageMagick[m
[32m+[m	[32m *[m
[32m+[m	[32m * This function will resize, crop or rotate[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function image_process_imagemagick($action = 'resize')[m
[32m+[m	[32m{[m
[32m+[m		[32m// Do we have a vaild library path?[m
[32m+[m		[32mif ($this->library_path === '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->set_error('imglib_libpath_invalid');[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! preg_match('/convert$/i', $this->library_path))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->library_path = rtrim($this->library_path, '/').'/convert';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Execute the command[m
[32m+[m		[32m$cmd = $this->library_path.' -quality '.$this->quality;[m
[32m+[m
[32m+[m		[32mif ($action === 'crop')[m
[32m+[m		[32m{[m
[32m+[m			[32m$cmd .= ' -crop '.$this->width.'x'.$this->height.'+'.$this->x_axis.'+'.$this->y_axis;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($action === 'rotate')[m
[32m+[m		[32m{[m
[32m+[m			[32m$cmd .= ($this->rotation_angle === 'hor' OR $this->rotation_angle === 'vrt')[m
[32m+[m					[32m? ' -flop'[m
[32m+[m					[32m: ' -rotate '.$this->rotation_angle;[m
[32m+[m		[32m}[m
[32m+[m		[32melse // Resize[m
[32m+[m		[32m{[m
[32m+[m			[32mif($this->maintain_ratio === TRUE)[m
[32m+[m			[32m{[m
[32m+[m				[32m$cmd .= ' -resize '.$this->width.'x'.$this->height;[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$cmd .= ' -resize '.$this->width.'x'.$this->height.'\!';[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$cmd .= ' '.escapeshellarg($this->full_src_path).' '.escapeshellarg($this->full_dst_path).' 2>&1';[m
[32m+[m
[32m+[m		[32m$retval = 1;[m
[32m+[m		[32m// exec() might be disabled[m
[32m+[m		[32mif (function_usable('exec'))[m
[32m+[m		[32m{[m
[32m+[m			[32m@exec($cmd, $output, $retval);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Did it work?[m
[32m+[m		[32mif ($retval > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->set_error('imglib_image_process_failed');[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mchmod($this->full_dst_path, $this->file_permissions);[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Image Process Using NetPBM[m
[32m+[m	[32m *[m
[32m+[m	[32m * This function will resize, crop or rotate[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function image_process_netpbm($action = 'resize')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($this->library_path === '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->set_error('imglib_libpath_invalid');[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Build the resizing command[m
[32m+[m		[32mswitch ($this->image_type)[m
[32m+[m		[32m{[m
[32m+[m			[32mcase 1 :[m
[32m+[m				[32m$cmd_in		= 'giftopnm';[m
[32m+[m				[32m$cmd_out	= 'ppmtogif';[m
[32m+[m				[32mbreak;[m
[32m+[m			[32mcase 2 :[m
[32m+[m				[32m$cmd_in		= 'jpegtopnm';[m
[32m+[m				[32m$cmd_out	= 'ppmtojpeg';[m
[32m+[m				[32mbreak;[m
[32m+[m			[32mcase 3 :[m
[32m+[m				[32m$cmd_in		= 'pngtopnm';[m
[32m+[m				[32m$cmd_out	= 'ppmtopng';[m
[32m+[m				[32mbreak;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($action === 'crop')[m
[32m+[m		[32m{[m
[32m+[m			[32m$cmd_inner = 'pnmcut -left '.$this->x_axis.' -top '.$this->y_axis.' -width '.$this->width.' -height '.$this->height;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($action === 'rotate')[m
[32m+[m		[32m{[m
[32m+[m			[32mswitch ($this->rotation_angle)[m
[32m+[m			[32m{[m
[32m+[m				[32mcase 90:	$angle = 'r270';[m
[32m+[m					[32mbreak;[m
[32m+[m				[32mcase 180:	$angle = 'r180';[m
[32m+[m					[32mbreak;[m
[32m+[m				[32mcase 270:	$angle = 'r90';[m
[32m+[m					[32mbreak;[m
[32m+[m				[32mcase 'vrt':	$angle = 'tb';[m
[32m+[m					[32mbreak;[m
[32m+[m				[32mcase 'hor':	$angle = 'lr';[m
[32m+[m					[32mbreak;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$cmd_inner = 'pnmflip -'.$angle.' ';[m
[32m+[m		[32m}[m
[32m+[m		[32melse // Resize[m
[32m+[m		[32m{[m
[32m+[m			[32m$cmd_inner = 'pnmscale -xysize '.$this->width.' '.$this->height;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$cmd = $this->library_path.$cmd_in.' '.escapeshellarg($this->full_src_path).' | '.$cmd_inner.' | '.$cmd_out.' > '.$this->dest_folder.'netpbm.tmp';[m
[32m+[m
[32m+[m		[32m$retval = 1;[m
[32m+[m		[32m// exec() might be disabled[m
[32m+[m		[32mif (function_usable('exec'))[m
[32m+[m		[32m{[m
[32m+[m			[32m@exec($cmd, $output, $retval);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Did it work?[m
[32m+[m		[32mif ($retval > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->set_error('imglib_image_process_failed');[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// With NetPBM we have to create a temporary image.[m
[32m+[m		[32m// If you try manipulating the original it fails so[m
[32m+[m		[32m// we have to rename the temp file.[m
[32m+[m		[32mcopy($this->dest_folder.'netpbm.tmp', $this->full_dst_path);[m
[32m+[m		[32munlink($this->dest_folder.'netpbm.tmp');[m
[32m+[m		[32mchmod($this->full_dst_path, $this->file_permissions);[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Image Rotate Using GD[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function image_rotate_gd()[m
[32m+[m	[32m{[m
[32m+[m		[32m// Create the image handle[m
[32m+[m		[32mif ( ! ($src_img = $this->image_create_gd()))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Set the background color[m
[32m+[m		[32m// This won't work with transparent PNG files so we are[m
[32m+[m		[32m// going to have to figure out how to determine the color[m
[32m+[m		[32m// of the alpha channel in a future release.[m
[32m+[m
[32m+[m		[32m$white = imagecolorallocate($src_img, 255, 255, 255);[m
[32m+[m
[32m+[m		[32m// Rotate it![m
[32m+[m		[32m$dst_img = imagerotate($src_img, $this->rotation_angle, $white);[m
[32m+[m
[32m+[m		[32m// Show the image[m
[32m+[m		[32mif ($this->dynamic_output === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->image_display_gd($dst_img);[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! $this->image_save_gd($dst_img)) // ... or save it[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Kill the file handles[m
[32m+[m		[32mimagedestroy($dst_img);[m
[32m+[m		[32mimagedestroy($src_img);[m
[32m+[m
[32m+[m		[32mchmod($this->full_dst_path, $this->file_permissions);[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Create Mirror Image using GD[m
[32m+[m	[32m *[m
[32m+[m	[32m * This function will flip horizontal or vertical[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function image_mirror_gd()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! $src_img = $this->image_create_gd())[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$width  = $this->orig_width;[m
[32m+[m		[32m$height = $this->orig_height;[m
[32m+[m
[32m+[m		[32mif ($this->rotation_angle === 'hor')[m
[32m+[m		[32m{[m
[32m+[m			[32mfor ($i = 0; $i < $height; $i++)[m
[32m+[m			[32m{[m
[32m+[m				[32m$left = 0;[m
[32m+[m				[32m$right = $width - 1;[m
[32m+[m
[32m+[m				[32mwhile ($left < $right)[m
[32m+[m				[32m{[m
[32m+[m					[32m$cl = imagecolorat($src_img, $left, $i);[m
[32m+[m					[32m$cr = imagecolorat($src_img, $right, $i);[m
[32m+[m
[32m+[m					[32mimagesetpixel($src_img, $left, $i, $cr);[m
[32m+[m					[32mimagesetpixel($src_img, $right, $i, $cl);[m
[32m+[m
[32m+[m					[32m$left++;[m
[32m+[m					[32m$right--;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32mfor ($i = 0; $i < $width; $i++)[m
[32m+[m			[32m{[m
[32m+[m				[32m$top = 0;[m
[32m+[m				[32m$bottom = $height - 1;[m
[32m+[m
[32m+[m				[32mwhile ($top < $bottom)[m
[32m+[m				[32m{[m
[32m+[m					[32m$ct = imagecolorat($src_img, $i, $top);[m
[32m+[m					[32m$cb = imagecolorat($src_img, $i, $bottom);[m
[32m+[m
[32m+[m					[32mimagesetpixel($src_img, $i, $top, $cb);[m
[32m+[m					[32mimagesetpixel($src_img, $i, $bottom, $ct);[m
[32m+[m
[32m+[m					[32m$top++;[m
[32m+[m					[32m$bottom--;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Show the image[m
[32m+[m		[32mif ($this->dynamic_output === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->image_display_gd($src_img);[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! $this->image_save_gd($src_img)) // ... or save it[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Kill the file handles[m
[32m+[m		[32mimagedestroy($src_img);[m
[32m+[m
[32m+[m		[32mchmod($this->full_dst_path, $this->file_permissions);[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Image Watermark[m
[32m+[m	[32m *[m
[32m+[m	[32m * This is a wrapper function that chooses the type[m
[32m+[m	[32m * of watermarking based on the specified preference.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function watermark()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn ($this->wm_type === 'overlay') ? $this->overlay_watermark() : $this->text_watermark();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Watermark - Graphic Version[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function overlay_watermark()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! function_exists('imagecolortransparent'))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->set_error('imglib_gd_required');[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Fetch source image properties[m
[32m+[m		[32m$this->get_image_properties();[m
[32m+[m
[32m+[m		[32m// Fetch watermark image properties[m
[32m+[m		[32m$props		= $this->get_image_properties($this->wm_overlay_path, TRUE);[m
[32m+[m		[32m$wm_img_type	= $props['image_type'];[m
[32m+[m		[32m$wm_width	= $props['width'];[m
[32m+[m		[32m$wm_height	= $props['height'];[m
[32m+[m
[32m+[m		[32m// Create two image resources[m
[32m+[m		[32m$wm_img  = $this->image_create_gd($this->wm_overlay_path, $wm_img_type);[m
[32m+[m		[32m$src_img = $this->image_create_gd($this->full_src_path);[m
[32m+[m
[32m+[m		[32m// Reverse the offset if necessary[m
[32m+[m		[32m// When the image is positioned at the bottom[m
[32m+[m		[32m// we don't want the vertical offset to push it[m
[32m+[m		[32m// further down. We want the reverse, so we'll[m
[32m+[m		[32m// invert the offset. Same with the horizontal[m
[32m+[m		[32m// offset when the image is at the right[m
[32m+[m
[32m+[m		[32m$this->wm_vrt_alignment = strtoupper($this->wm_vrt_alignment[0]);[m
[32m+[m		[32m$this->wm_hor_alignment = strtoupper($this->wm_hor_alignment[0]);[m
[32m+[m
[32m+[m		[32mif ($this->wm_vrt_alignment === 'B')[m
[32m+[m			[32m$this->wm_vrt_offset = $this->wm_vrt_offset * -1;[m
[32m+[m
[32m+[m		[32mif ($this->wm_hor_alignment === 'R')[m
[32m+[m			[32m$this->wm_hor_offset = $this->wm_hor_offset * -1;[m
[32m+[m
[32m+[m		[32m// Set the base x and y axis values[m
[32m+[m		[32m$x_axis = $this->wm_hor_offset + $this->wm_padding;[m
[32m+[m		[32m$y_axis = $this->wm_vrt_offset + $this->wm_padding;[m
[32m+[m
[32m+[m		[32m// Set the vertical position[m
[32m+[m		[32mif ($this->wm_vrt_alignment === 'M')[m
[32m+[m		[32m{[m
[32m+[m			[32m$y_axis += ($this->orig_height / 2) - ($wm_height / 2);[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($this->wm_vrt_alignment === 'B')[m
[32m+[m		[32m{[m
[32m+[m			[32m$y_axis += $this->orig_height - $wm_height;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Set the horizontal position[m
[32m+[m		[32mif ($this->wm_hor_alignment === 'C')[m
[32m+[m		[32m{[m
[32m+[m			[32m$x_axis += ($this->orig_width / 2) - ($wm_width / 2);[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($this->wm_hor_alignment === 'R')[m
[32m+[m		[32m{[m
[32m+[m			[32m$x_axis += $this->orig_width - $wm_width;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Build the finalized image[m
[32m+[m		[32mif ($wm_img_type === 3 && function_exists('imagealphablending'))[m
[32m+[m		[32m{[m
[32m+[m			[32m@imagealphablending($src_img, TRUE);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Set RGB values for text and shadow[m
[32m+[m		[32m$rgba = imagecolorat($wm_img, $this->wm_x_transp, $this->wm_y_transp);[m
[32m+[m		[32m$alpha = ($rgba & 0x7F000000) >> 24;[m
[32m+[m
[32m+[m		[32m// make a best guess as to whether we're dealing with an image with alpha transparency or no/binary transparency[m
[32m+[m		[32mif ($alpha > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32m// copy the image directly, the image's alpha transparency being the sole determinant of blending[m
[32m+[m			[32mimagecopy($src_img, $wm_img, $x_axis, $y_axis, 0, 0, $wm_width, $wm_height);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m// set our RGB value from above to be transparent and merge the images with the specified opacity[m
[32m+[m			[32mimagecolortransparent($wm_img, imagecolorat($wm_img, $this->wm_x_transp, $this->wm_y_transp));[m
[32m+[m			[32mimagecopymerge($src_img, $wm_img, $x_axis, $y_axis, 0, 0, $wm_width, $wm_height, $this->wm_opacity);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// We can preserve transparency for PNG images[m
[32m+[m		[32mif ($this->image_type === 3)[m
[32m+[m		[32m{[m
[32m+[m			[32mimagealphablending($src_img, FALSE);[m
[32m+[m			[32mimagesavealpha($src_img, TRUE);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Output the image[m
[32m+[m		[32mif ($this->dynamic_output === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->image_display_gd($src_img);[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ( ! $this->image_save_gd($src_img)) // ... or save it[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mimagedestroy($src_img);[m
[32m+[m		[32mimagedestroy($wm_img);[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Watermark - Text Version[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function text_watermark()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! ($src_img = $this->image_create_gd()))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($this->wm_use_truetype === TRUE && ! file_exists($this->wm_font_path))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->set_error('imglib_missing_font');[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Fetch source image properties[m
[32m+[m		[32m$this->get_image_properties();[m
[32m+[m
[32m+[m		[32m// Reverse the vertical offset[m
[32m+[m		[32m// When the image is positioned at the bottom[m
[32m+[m		[32m// we don't want the vertical offset to push it[m
[32m+[m		[32m// further down. We want the reverse, so we'll[m
[32m+[m		[32m// invert the offset. Note: The horizontal[m
[32m+[m		[32m// offset flips itself automatically[m
[32m+[m
[32m+[m		[32mif ($this->wm_vrt_alignment === 'B')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->wm_vrt_offset = $this->wm_vrt_offset * -1;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($this->wm_hor_alignment === 'R')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->wm_hor_offset = $this->wm_hor_offset * -1;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Set font width and height[m
[32m+[m		[32m// These are calculated differently depending on[m
[32m+[m		[32m// whether we are using the true type font or not[m
[32m+[m		[32mif ($this->wm_use_truetype === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (empty($this->wm_font_size))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->wm_font_size = 17;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mif (function_exists('imagettfbbox'))[m
[32m+[m			[32m{[m
[32m+[m				[32m$temp = imagettfbbox($this->wm_font_size, 0, $this->wm_font_path, $this->wm_text);[m
[32m+[m				[32m$temp = $temp[2] - $temp[0];[m
[32m+[m
[32m+[m				[32m$fontwidth = $temp / strlen($this->wm_text);[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$fontwidth = $this->wm_font_size - ($this->wm_font_size / 4);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$fontheight = $this->wm_font_size;[m
[32m+[m			[32m$this->wm_vrt_offset += $this->wm_font_size;[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$fontwidth  = imagefontwidth($this->wm_font_size);[m
[32m+[m			[32m$fontheight = imagefontheight($this->wm_font_size);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Set base X and Y axis values[m
[32m+[m		[32m$x_axis = $this->wm_hor_offset + $this->wm_padding;[m
[32m+[m		[32m$y_axis = $this->wm_vrt_offset + $this->wm_padding;[m
[32m+[m
[32m+[m		[32mif ($this->wm_use_drop_shadow === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->wm_shadow_distance = 0;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->wm_vrt_alignment = strtoupper($this->wm_vrt_alignment[0]);[m
[32m+[m		[32m$this->wm_hor_alignment = strtoupper($this->wm_hor_alignment[0]);[m
[32m+[m
[32m+[m		[32m// Set vertical alignment[m
[32m+[m		[32mif ($this->wm_vrt_alignment === 'M')[m
[32m+[m		[32m{[m
[32m+[m			[32m$y_axis += ($this->orig_height / 2) + ($fontheight / 2);[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($this->wm_vrt_alignment === 'B')[m
[32m+[m		[32m{[m
[32m+[m			[32m$y_axis += $this->orig_height - $fontheight - $this->wm_shadow_distance - ($fontheight / 2);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Set horizontal alignment[m
[32m+[m		[32mif ($this->wm_hor_alignment === 'R')[m
[32m+[m		[32m{[m
[32m+[m			[32m$x_axis += $this->orig_width - ($fontwidth * strlen($this->wm_text)) - $this->wm_shadow_distance;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($this->wm_hor_alignment === 'C')[m
[32m+[m		[32m{[m
[32m+[m			[32m$x_axis += floor(($this->orig_width - ($fontwidth * strlen($this->wm_text))) / 2);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($this->wm_use_drop_shadow)[m
[32m+[m		[32m{[m
[32m+[m			[32m// Offset from text[m
[32m+[m			[32m$x_shad = $x_axis + $this->wm_shadow_distance;[m
[32m+[m			[32m$y_shad = $y_axis + $this->wm_shadow_distance;[m
[32m+[m
[32m+[m			[32m/* Set RGB values for shadow[m
[32m+[m			[32m *[m
[32m+[m			[32m * First character is #, so we don't really need it.[m
[32m+[m			[32m * Get the rest of the string and split it into 2-length[m
[32m+[m			[32m * hex values:[m
[32m+[m			[32m */[m
[32m+[m			[32m$drp_color = str_split(substr($this->wm_shadow_color, 1, 6), 2);[m
[32m+[m			[32m$drp_color = imagecolorclosest($src_img, hexdec($drp_color[0]), hexdec($drp_color[1]), hexdec($drp_color[2]));[m
[32m+[m
[32m+[m			[32m// Add the shadow to the source image[m
[32m+[m			[32mif ($this->wm_use_truetype)[m
[32m+[m			[32m{[m
[32m+[m				[32mimagettftext($src_img, $this->wm_font_size, 0, $x_shad, $y_shad, $drp_color, $this->wm_font_path, $this->wm_text);[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32mimagestring($src_img, $this->wm_font_size, $x_shad, $y_shad, $this->wm_text, $drp_color);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m/* Set RGB values for text[m
[32m+[m		[32m *[m
[32m+[m		[32m * First character is #, so we don't really need it.[m
[32m+[m		[32m * Get the rest of the string and split it into 2-length[m
[32m+[m		[32m * hex values:[m
[32m+[m		[32m */[m
[32m+[m		[32m$txt_color = str_split(substr($this->wm_font_color, 1, 6), 2);[m
[32m+[m		[32m$txt_color = imagecolorclosest($src_img, hexdec($txt_color[0]), hexdec($txt_color[1]), hexdec($txt_color[2]));[m
[32m+[m
[32m+[m		[32m// Add the text to the source image[m
[32m+[m		[32mif ($this->wm_use_truetype)[m
[32m+[m		[32m{[m
[32m+[m			[32mimagettftext($src_img, $this->wm_font_size, 0, $x_axis, $y_axis, $txt_color, $this->wm_font_path, $this->wm_text);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32mimagestring($src_img, $this->wm_font_size, $x_axis, $y_axis, $this->wm_text, $txt_color);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// We can preserve transparency for PNG images[m
[32m+[m		[32mif ($this->image_type === 3)[m
[32m+[m		[32m{[m
[32m+[m			[32mimagealphablending($src_img, FALSE);[m
[32m+[m			[32mimagesavealpha($src_img, TRUE);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Output the final image[m
[32m+[m		[32mif ($this->dynamic_output === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->image_display_gd($src_img);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->image_save_gd($src_img);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mimagedestroy($src_img);[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Create Image - GD[m
[32m+[m	[32m *[m
[32m+[m	[32m * This simply creates an image resource handle[m
[32m+[m	[32m * based on the type of image being processed[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	resource[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function image_create_gd($path = '', $image_type = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($path === '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$path = $this->full_src_path;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($image_type === '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$image_type = $this->image_type;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mswitch ($image_type)[m
[32m+[m		[32m{[m
[32m+[m			[32mcase 1:[m
[32m+[m				[32mif ( ! function_exists('imagecreatefromgif'))[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->set_error(array('imglib_unsupported_imagecreate', 'imglib_gif_not_supported'));[m
[32m+[m					[32mreturn FALSE;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mreturn imagecreatefromgif($path);[m
[32m+[m			[32mcase 2:[m
[32m+[m				[32mif ( ! function_exists('imagecreatefromjpeg'))[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->set_error(array('imglib_unsupported_imagecreate', 'imglib_jpg_not_supported'));[m
[32m+[m					[32mreturn FALSE;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mreturn imagecreatefromjpeg($path);[m
[32m+[m			[32mcase 3:[m
[32m+[m				[32mif ( ! function_exists('imagecreatefrompng'))[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->set_error(array('imglib_unsupported_imagecreate', 'imglib_png_not_supported'));[m
[32m+[m					[32mreturn FALSE;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mreturn imagecreatefrompng($path);[m
[32m+[m			[32mdefault:[m
[32m+[m				[32m$this->set_error(array('imglib_unsupported_imagecreate'));[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Write image file to disk - GD[m
[32m+[m	[32m *[m
[32m+[m	[32m * Takes an image resource as input and writes the file[m
[32m+[m	[32m * to the specified destination[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	resource[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function image_save_gd($resource)[m
[32m+[m	[32m{[m
[32m+[m		[32mswitch ($this->image_type)[m
[32m+[m		[32m{[m
[32m+[m			[32mcase 1:[m
[32m+[m				[32mif ( ! function_exists('imagegif'))[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->set_error(array('imglib_unsupported_imagecreate', 'imglib_gif_not_supported'));[m
[32m+[m					[32mreturn FALSE;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mif ( ! @imagegif($resource, $this->full_dst_path))[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->set_error('imglib_save_failed');[m
[32m+[m					[32mreturn FALSE;[m
[32m+[m				[32m}[m
[32m+[m			[32mbreak;[m
[32m+[m			[32mcase 2:[m
[32m+[m				[32mif ( ! function_exists('imagejpeg'))[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->set_error(array('imglib_unsupported_imagecreate', 'imglib_jpg_not_supported'));[m
[32m+[m					[32mreturn FALSE;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mif ( ! @imagejpeg($resource, $this->full_dst_path, $this->quality))[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->set_error('imglib_save_failed');[m
[32m+[m					[32mreturn FALSE;[m
[32m+[m				[32m}[m
[32m+[m			[32mbreak;[m
[32m+[m			[32mcase 3:[m
[32m+[m				[32mif ( ! function_exists('imagepng'))[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->set_error(array('imglib_unsupported_imagecreate', 'imglib_png_not_supported'));[m
[32m+[m					[32mreturn FALSE;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32mif ( ! @imagepng($resource, $this->full_dst_path))[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->set_error('imglib_save_failed');[m
[32m+[m					[32mreturn FALSE;[m
[32m+[m				[32m}[m
[32m+[m			[32mbreak;[m
[32m+[m			[32mdefault:[m
[32m+[m				[32m$this->set_error(array('imglib_unsupported_imagecreate'));[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32mbreak;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Dynamically outputs an image[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	resource[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function image_display_gd($resource)[m
[32m+[m	[32m{[m
[32m+[m		[32mheader('Content-Disposition: filename='.$this->source_image.';');[m
[32m+[m		[32mheader('Content-Type: '.$this->mime_type);[m
[32m+[m		[32mheader('Content-Transfer-Encoding: binary');[m
[32m+[m		[32mheader('Last-Modified: '.gmdate('D, d M Y H:i:s', time()).' GMT');[m
[32m+[m
[32m+[m		[32mswitch ($this->image_type)[m
[32m+[m		[32m{[m
[32m+[m			[32mcase 1	:	imagegif($resource);[m
[32m+[m				[32mbreak;[m
[32m+[m			[32mcase 2	:	imagejpeg($resource, NULL, $this->quality);[m
[32m+[m				[32mbreak;[m
[32m+[m			[32mcase 3	:	imagepng($resource);[m
[32m+[m				[32mbreak;[m
[32m+[m			[32mdefault:	echo 'Unable to display the image';[m
[32m+[m				[32mbreak;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Re-proportion Image Width/Height[m
[32m+[m	[32m *[m
[32m+[m	[32m * When creating thumbs, the desired width/height[m
[32m+[m	[32m * can end up warping the image due to an incorrect[m
[32m+[m	[32m * ratio between the full-sized image and the thumb.[m
[32m+[m	[32m *[m
[32m+[m	[32m * This function lets us re-proportion the width/height[m
[32m+[m	[32m * if users choose to maintain the aspect ratio when resizing.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function image_reproportion()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (($this->width === 0 && $this->height === 0) OR $this->orig_width === 0 OR $this->orig_height === 0[m
[32m+[m			[32mOR ( ! ctype_digit((string) $this->width) && ! ctype_digit((string) $this->height))[m
[32m+[m			[32mOR ! ctype_digit((string) $this->orig_width) OR ! ctype_digit((string) $this->orig_height))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Sanitize[m
[32m+[m		[32m$this->width = (int) $this->width;[m
[32m+[m		[32m$this->height = (int) $this->height;[m
[32m+[m
[32m+[m		[32mif ($this->master_dim !== 'width' && $this->master_dim !== 'height')[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($this->width > 0 && $this->height > 0)[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->master_dim = ((($this->orig_height/$this->orig_width) - ($this->height/$this->width)) < 0)[m
[32m+[m							[32m? 'width' : 'height';[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->master_dim = ($this->height === 0) ? 'width' : 'height';[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (($this->master_dim === 'width' && $this->width === 0)[m
[32m+[m			[32mOR ($this->master_dim === 'height' && $this->height === 0))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($this->master_dim === 'width')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->height = (int) ceil($this->width*$this->orig_height/$this->orig_width);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->width = (int) ceil($this->orig_width*$this->height/$this->orig_height);[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get image properties[m
[32m+[m	[32m *[m
[32m+[m	[32m * A helper function that gets info about the file[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	bool[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function get_image_properties($path = '', $return = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m// For now we require GD but we should[m
[32m+[m		[32m// find a way to determine this using IM or NetPBM[m
[32m+[m
[32m+[m		[32mif ($path === '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$path = $this->full_src_path;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ( ! file_exists($path))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->set_error('imglib_invalid_path');[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$vals = getimagesize($path);[m
[32m+[m		[32mif ($vals === FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->set_error('imglib_invalid_image');[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$types = array(1 => 'gif', 2 => 'jpeg', 3 => 'png');[m
[32m+[m		[32m$mime = isset($types[$vals[2]]) ? 'image/'.$types[$vals[2]] : 'image/jpg';[m
[32m+[m
[32m+[m		[32mif ($return === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn array([m
[32m+[m				[32m'width'      => $vals[0],[m
[32m+[m				[32m'height'     => $vals[1],[m
[32m+[m				[32m'image_type' => $vals[2],[m
[32m+[m				[32m'size_str'   => $vals[3],[m
[32m+[m				[32m'mime_type'  => $mime[m
[32m+[m			[32m);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$this->orig_width  = $vals[0];[m
[32m+[m		[32m$this->orig_height = $vals[1];[m
[32m+[m		[32m$this->image_type  = $vals[2];[m
[32m+[m		[32m$this->size_str    = $vals[3];[m
[32m+[m		[32m$this->mime_type   = $mime;[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Size calculator[m
[32m+[m	[32m *[m
[32m+[m	[32m * This function takes a known width x height and[m
[32m+[m	[32m * recalculates it to a new size. Only one[m
[32m+[m	[32m * new variable needs to be known[m
[32m+[m	[32m *[m
[32m+[m	[32m *	$props = array([m
[32m+[m	[32m *			'width'		=> $width,[m
[32m+[m	[32m *			'height'	=> $height,[m
[32m+[m	[32m *			'new_width'	=> 40,[m
[32m+[m	[32m *			'new_height'	=> ''[m
[32m+[m	[32m *		);[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function size_calculator($vals)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! is_array($vals))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$allowed = array('new_width', 'new_height', 'width', 'height');[m
[32m+[m
[32m+[m		[32mforeach ($allowed as $item)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (empty($vals[$item]))[m
[32m+[m			[32m{[m
[32m+[m				[32m$vals[$item] = 0;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($vals['width'] === 0 OR $vals['height'] === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $vals;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($vals['new_width'] === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32m$vals['new_width'] = ceil($vals['width']*$vals['new_height']/$vals['height']);[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($vals['new_height'] === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32m$vals['new_height'] = ceil($vals['new_width']*$vals['height']/$vals['width']);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $vals;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Explode source_image[m
[32m+[m	[32m *[m
[32m+[m	[32m * This is a helper function that extracts the extension[m
[32m+[m	[32m * from the source_image.  This function lets us deal with[m
[32m+[m	[32m * source_images with multiple periods, like: my.cool.jpg[m
[32m+[m	[32m * It returns an associative array with two elements:[m
[32m+[m	[32m * $array['ext']  = '.jpg';[m
[32m+[m	[32m * $array['name'] = 'my.cool';[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array[m
[32m+[m	[32m * @return	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function explode_name($source_image)[m
[32m+[m	[32m{[m
[32m+[m		[32m$ext = strrchr($source_image, '.');[m
[32m+[m		[32m$name = ($ext === FALSE) ? $source_image : substr($source_image, 0, -strlen($ext));[m
[32m+[m
[32m+[m		[32mreturn array('ext' => $ext, 'name' => $name);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Is GD Installed?[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function gd_loaded()[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! extension_loaded('gd'))[m
[32m+[m		[32m{[m
[32m+[m			[32m/* As it is stated in the PHP manual, dl() is not always available[m
[32m+[m			[32m * and even if so - it could generate an E_WARNING message on failure[m
[32m+[m			[32m */[m
[32m+[m			[32mreturn (function_exists('dl') && @dl('gd.so'));[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn TRUE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Get GD version[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function gd_version()[m
[32m+[m	[32m{[m
[32m+[m		[32mif (function_exists('gd_info'))[m
[32m+[m		[32m{[m
[32m+[m			[32m$gd_version = @gd_info();[m
[32m+[m			[32mreturn preg_replace('/\D/', '', $gd_version['GD Version']);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Set error message[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function set_error($msg)[m
[32m+[m	[32m{[m
[32m+[m		[32m$CI =& get_instance();[m
[32m+[m		[32m$CI->lang->load('imglib');[m
[32m+[m
[32m+[m		[32mif (is_array($msg))[m
[32m+[m		[32m{[m
[32m+[m			[32mforeach ($msg as $val)[m
[32m+[m			[32m{[m
[32m+[m				[32m$msg = ($CI->lang->line($val) === FALSE) ? $val : $CI->lang->line($val);[m
[32m+[m				[32m$this->error_msg[] = $msg;[m
[32m+[m				[32mlog_message('error', $msg);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$msg = ($CI->lang->line($msg) === FALSE) ? $msg : $CI->lang->line($msg);[m
[32m+[m			[32m$this->error_msg[] = $msg;[m
[32m+[m			[32mlog_message('error', $msg);[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show error messages[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function display_errors($open = '<p>', $close = '</p>')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn (count($this->error_msg) > 0) ? $open.implode($close.$open, $this->error_msg).$close : '';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/libraries/Javascript.php b/system/libraries/Javascript.php[m
[1mnew file mode 100644[m
[1mindex 0000000..ec5fe59[m
[1m--- /dev/null[m
[1m+++ b/system/libraries/Javascript.php[m
[36m@@ -0,0 +1,856 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Javascript Class[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Libraries[m
[32m+[m[32m * @category	Javascript[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/libraries/javascript.html[m
[32m+[m[32m * @deprecated	3.0.0	This was never a good idea in the first place.[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_Javascript {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * JavaScript location[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_javascript_location = 'js';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct($params = array())[m
[32m+[m	[32m{[m
[32m+[m		[32m$defaults = array('js_library_driver' => 'jquery', 'autoload' => TRUE);[m
[32m+[m
[32m+[m		[32mforeach ($defaults as $key => $val)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (isset($params[$key]) && $params[$key] !== '')[m
[32m+[m			[32m{[m
[32m+[m				[32m$defaults[$key] = $params[$key];[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mextract($defaults);[m
[32m+[m
[32m+[m		[32m$this->CI =& get_instance();[m
[32m+[m
[32m+[m		[32m// load the requested js library[m
[32m+[m		[32m$this->CI->load->library('Javascript/'.$js_library_driver, array('autoload' => $autoload));[m
[32m+[m		[32m// make js to refer to current library[m
[32m+[m		[32m$this->js =& $this->CI->$js_library_driver;[m
[32m+[m
[32m+[m		[32mlog_message('info', 'Javascript Class Initialized and loaded. Driver used: '.$js_library_driver);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m	[32m// Event Code[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Blur[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a javascript library blur event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The element to attach the event to[m
[32m+[m	[32m * @param	string	The code to execute[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function blur($element = 'this', $js = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->js->_blur($element, $js);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Change[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a javascript library change event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The element to attach the event to[m
[32m+[m	[32m * @param	string	The code to execute[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function change($element = 'this', $js = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->js->_change($element, $js);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Click[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a javascript library click event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The element to attach the event to[m
[32m+[m	[32m * @param	string	The code to execute[m
[32m+[m	[32m * @param	bool	whether or not to return false[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function click($element = 'this', $js = '', $ret_false = TRUE)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->js->_click($element, $js, $ret_false);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Double Click[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a javascript library dblclick event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The element to attach the event to[m
[32m+[m	[32m * @param	string	The code to execute[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function dblclick($element = 'this', $js = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->js->_dblclick($element, $js);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Error[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a javascript library error event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The element to attach the event to[m
[32m+[m	[32m * @param	string	The code to execute[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function error($element = 'this', $js = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->js->_error($element, $js);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Focus[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a javascript library focus event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The element to attach the event to[m
[32m+[m	[32m * @param	string	The code to execute[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function focus($element = 'this', $js = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->js->_focus($element, $js);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Hover[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a javascript library hover event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	- element[m
[32m+[m	[32m * @param	string	- Javascript code for mouse over[m
[32m+[m	[32m * @param	string	- Javascript code for mouse out[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function hover($element = 'this', $over = '', $out = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->js->_hover($element, $over, $out);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Keydown[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a javascript library keydown event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The element to attach the event to[m
[32m+[m	[32m * @param	string	The code to execute[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function keydown($element = 'this', $js = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->js->_keydown($element, $js);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Keyup[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a javascript library keydown event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The element to attach the event to[m
[32m+[m	[32m * @param	string	The code to execute[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function keyup($element = 'this', $js = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->js->_keyup($element, $js);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Load[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a javascript library load event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The element to attach the event to[m
[32m+[m	[32m * @param	string	The code to execute[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function load($element = 'this', $js = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->js->_load($element, $js);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Mousedown[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a javascript library mousedown event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The element to attach the event to[m
[32m+[m	[32m * @param	string	The code to execute[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function mousedown($element = 'this', $js = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->js->_mousedown($element, $js);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Mouse Out[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a javascript library mouseout event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The element to attach the event to[m
[32m+[m	[32m * @param	string	The code to execute[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function mouseout($element = 'this', $js = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->js->_mouseout($element, $js);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Mouse Over[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a javascript library mouseover event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The element to attach the event to[m
[32m+[m	[32m * @param	string	The code to execute[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function mouseover($element = 'this', $js = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->js->_mouseover($element, $js);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Mouseup[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a javascript library mouseup event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The element to attach the event to[m
[32m+[m	[32m * @param	string	The code to execute[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function mouseup($element = 'this', $js = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->js->_mouseup($element, $js);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Output[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs the called javascript to the screen[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The code to output[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function output($js)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->js->_output($js);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Ready[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a javascript library mouseup event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$js	Code to execute[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function ready($js)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->js->_document_ready($js);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Resize[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a javascript library resize event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The element to attach the event to[m
[32m+[m	[32m * @param	string	The code to execute[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function resize($element = 'this', $js = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->js->_resize($element, $js);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Scroll[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a javascript library scroll event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The element to attach the event to[m
[32m+[m	[32m * @param	string	The code to execute[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function scroll($element = 'this', $js = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->js->_scroll($element, $js);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Unload[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a javascript library unload event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The element to attach the event to[m
[32m+[m	[32m * @param	string	The code to execute[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function unload($element = 'this', $js = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->js->_unload($element, $js);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m	[32m// Effects[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Add Class[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a javascript library addClass event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	- element[m
[32m+[m	[32m * @param	string	- Class to add[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function addClass($element = 'this', $class = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->js->_addClass($element, $class);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Animate[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a javascript library animate event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$element = 'this'[m
[32m+[m	[32m * @param	array	$params = array()[m
[32m+[m	[32m * @param	mixed	$speed			'slow', 'normal', 'fast', or time in milliseconds[m
[32m+[m	[32m * @param	string	$extra[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function animate($element = 'this', $params = array(), $speed = '', $extra = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->js->_animate($element, $params, $speed, $extra);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fade In[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a javascript library hide event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	- element[m
[32m+[m	[32m * @param	string	- One of 'slow', 'normal', 'fast', or time in milliseconds[m
[32m+[m	[32m * @param	string	- Javascript callback function[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function fadeIn($element = 'this', $speed = '', $callback = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->js->_fadeIn($element, $speed, $callback);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fade Out[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a javascript library hide event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	- element[m
[32m+[m	[32m * @param	string	- One of 'slow', 'normal', 'fast', or time in milliseconds[m
[32m+[m	[32m * @param	string	- Javascript callback function[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function fadeOut($element = 'this', $speed = '', $callback = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->js->_fadeOut($element, $speed, $callback);[m
[32m+[m	[32m}[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Slide Up[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a javascript library slideUp event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	- element[m
[32m+[m	[32m * @param	string	- One of 'slow', 'normal', 'fast', or time in milliseconds[m
[32m+[m	[32m * @param	string	- Javascript callback function[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function slideUp($element = 'this', $speed = '', $callback = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->js->_slideUp($element, $speed, $callback);[m
[32m+[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Remove Class[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a javascript library removeClass event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	- element[m
[32m+[m	[32m * @param	string	- Class to add[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function removeClass($element = 'this', $class = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->js->_removeClass($element, $class);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Slide Down[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a javascript library slideDown event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	- element[m
[32m+[m	[32m * @param	string	- One of 'slow', 'normal', 'fast', or time in milliseconds[m
[32m+[m	[32m * @param	string	- Javascript callback function[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function slideDown($element = 'this', $speed = '', $callback = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->js->_slideDown($element, $speed, $callback);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Slide Toggle[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a javascript library slideToggle event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	- element[m
[32m+[m	[32m * @param	string	- One of 'slow', 'normal', 'fast', or time in milliseconds[m
[32m+[m	[32m * @param	string	- Javascript callback function[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function slideToggle($element = 'this', $speed = '', $callback = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->js->_slideToggle($element, $speed, $callback);[m
[32m+[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Hide[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a javascript library hide action[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	- element[m
[32m+[m	[32m * @param	string	- One of 'slow', 'normal', 'fast', or time in milliseconds[m
[32m+[m	[32m * @param	string	- Javascript callback function[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function hide($element = 'this', $speed = '', $callback = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->js->_hide($element, $speed, $callback);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Toggle[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a javascript library toggle event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	- element[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function toggle($element = 'this')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->js->_toggle($element);[m
[32m+[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Toggle Class[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a javascript library toggle class event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$element = 'this'[m
[32m+[m	[32m * @param	string	$class = ''[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function toggleClass($element = 'this', $class = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->js->_toggleClass($element, $class);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a javascript library show event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	- element[m
[32m+[m	[32m * @param	string	- One of 'slow', 'normal', 'fast', or time in milliseconds[m
[32m+[m	[32m * @param	string	- Javascript callback function[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function show($element = 'this', $speed = '', $callback = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->js->_show($element, $speed, $callback);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Compile[m
[32m+[m	[32m *[m
[32m+[m	[32m * gather together all script needing to be output[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$view_var[m
[32m+[m	[32m * @param	bool	$script_tags[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function compile($view_var = 'script_foot', $script_tags = TRUE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->js->_compile($view_var, $script_tags);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Clear Compile[m
[32m+[m	[32m *[m
[32m+[m	[32m * Clears any previous javascript collected for output[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function clear_compile()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->js->_clear_compile();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * External[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a <script> tag with the source as an external js file[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$external_file[m
[32m+[m	[32m * @param	bool	$relative[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function external($external_file = '', $relative = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($external_file !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_javascript_location = $external_file;[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($this->CI->config->item('javascript_location') !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_javascript_location = $this->CI->config->item('javascript_location');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($relative === TRUE OR strpos($external_file, 'http://') === 0 OR strpos($external_file, 'https://') === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32m$str = $this->_open_script($external_file);[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (strpos($this->_javascript_location, 'http://') !== FALSE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$str = $this->_open_script($this->_javascript_location.$external_file);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$str = $this->_open_script($this->CI->config->slash_item('base_url').$this->_javascript_location.$external_file);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $str.$this->_close_script();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Inline[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a <script> tag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The element to attach the event to[m
[32m+[m	[32m * @param	bool	If a CDATA section should be added[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function inline($script, $cdata = TRUE)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_open_script()[m
[32m+[m			[32m. ($cdata ? "\n// <![CDATA[\n".$script."\n// ]]>\n" : "\n".$script."\n")[m
[32m+[m			[32m. $this->_close_script();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Open Script[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs an opening <script>[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _open_script($src = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn '<script type="text/javascript" charset="'.strtolower($this->CI->config->item('charset')).'"'[m
[32m+[m			[32m.($src === '' ? '>' : ' src="'.$src.'">');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Close Script[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs an closing </script>[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _close_script($extra = "\n")[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn '</script>'.$extra;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m	[32m// AJAX-Y STUFF - still a testbed[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Update[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a javascript library slideDown event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	- element[m
[32m+[m	[32m * @param	string	- One of 'slow', 'normal', 'fast', or time in milliseconds[m
[32m+[m	[32m * @param	string	- Javascript callback function[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function update($element = 'this', $speed = '', $callback = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->js->_updater($element, $speed, $callback);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Generate JSON[m
[32m+[m	[32m *[m
[32m+[m	[32m * Can be passed a database result or associative array and returns a JSON formatted string[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	result set or array[m
[32m+[m	[32m * @param	bool	match array types (defaults to objects)[m
[32m+[m	[32m * @return	string	a json formatted string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function generate_json($result = NULL, $match_array_type = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m// JSON data can optionally be passed to this function[m
[32m+[m		[32m// either as a database result object or an array, or a user supplied array[m
[32m+[m		[32mif ($result !== NULL)[m
[32m+[m		[32m{[m
[32m+[m			[32mif (is_object($result))[m
[32m+[m			[32m{[m
[32m+[m				[32m$json_result = is_callable(array($result, 'result_array')) ? $result->result_array() : (array) $result;[m
[32m+[m			[32m}[m
[32m+[m			[32melseif (is_array($result))[m
[32m+[m			[32m{[m
[32m+[m				[32m$json_result = $result;[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn $this->_prep_args($result);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn 'null';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$json = array();[m
[32m+[m		[32m$_is_assoc = TRUE;[m
[32m+[m
[32m+[m		[32mif ( ! is_array($json_result) && empty($json_result))[m
[32m+[m		[32m{[m
[32m+[m			[32mshow_error('Generate JSON Failed - Illegal key, value pair.');[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($match_array_type)[m
[32m+[m		[32m{[m
[32m+[m			[32m$_is_assoc = $this->_is_associative_array($json_result);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mforeach ($json_result as $k => $v)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($_is_assoc)[m
[32m+[m			[32m{[m
[32m+[m				[32m$json[] = $this->_prep_args($k, TRUE).':'.$this->generate_json($v, $match_array_type);[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32m$json[] = $this->generate_json($v, $match_array_type);[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$json = implode(',', $json);[m
[32m+[m
[32m+[m		[32mreturn $_is_assoc ? '{'.$json.'}' : '['.$json.']';[m
[32m+[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Is associative array[m
[32m+[m	[32m *[m
[32m+[m	[32m * Checks for an associative array[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array[m
[32m+[m	[32m * @return	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _is_associative_array($arr)[m
[32m+[m	[32m{[m
[32m+[m		[32mforeach (array_keys($arr) as $key => $val)[m
[32m+[m		[32m{[m
[32m+[m			[32mif ($key !== $val)[m
[32m+[m			[32m{[m
[32m+[m				[32mreturn TRUE;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn FALSE;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Prep Args[m
[32m+[m	[32m *[m
[32m+[m	[32m * Ensures a standard json value and escapes values[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	mixed	$result[m
[32m+[m	[32m * @param	bool	$is_key = FALSE[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _prep_args($result, $is_key = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($result === NULL)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn 'null';[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (is_bool($result))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn ($result === TRUE) ? 'true' : 'false';[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (is_string($result) OR $is_key)[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn '"'.str_replace(array('\\', "\t", "\n", "\r", '"', '/'), array('\\\\', '\\t', '\\n', "\\r", '\"', '\/'), $result).'"';[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (is_scalar($result))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn $result;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/libraries/Javascript/Jquery.php b/system/libraries/Javascript/Jquery.php[m
[1mnew file mode 100644[m
[1mindex 0000000..70f9aac[m
[1m--- /dev/null[m
[1m+++ b/system/libraries/Javascript/Jquery.php[m
[36m@@ -0,0 +1,1076 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 1.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Jquery Class[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Libraries[m
[32m+[m[32m * @category	Loader[m
[32m+[m[32m * @author		EllisLab Dev Team[m
[32m+[m[32m * @link		https://codeigniter.com/user_guide/libraries/javascript.html[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_Jquery extends CI_Javascript {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * JavaScript directory location[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_javascript_folder = 'js';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * JQuery code for load[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $jquery_code_for_load = array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * JQuery code for compile[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $jquery_code_for_compile = array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * JQuery corner active flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $jquery_corner_active = FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * JQuery table sorter active flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $jquery_table_sorter_active = FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * JQuery table sorter pager active[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $jquery_table_sorter_pager_active = FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * JQuery AJAX image[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $jquery_ajax_img = '';[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct($params)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->CI =& get_instance();[m
[32m+[m		[32mextract($params);[m
[32m+[m
[32m+[m		[32mif ($autoload === TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->script();[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mlog_message('info', 'Jquery Class Initialized');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m	[32m// Event Code[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Blur[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a jQuery blur event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The element to attach the event to[m
[32m+[m	[32m * @param	string	The code to execute[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _blur($element = 'this', $js = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_add_event($element, $js, 'blur');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Change[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a jQuery change event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The element to attach the event to[m
[32m+[m	[32m * @param	string	The code to execute[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _change($element = 'this', $js = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_add_event($element, $js, 'change');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Click[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a jQuery click event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The element to attach the event to[m
[32m+[m	[32m * @param	string	The code to execute[m
[32m+[m	[32m * @param	bool	whether or not to return false[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _click($element = 'this', $js = '', $ret_false = TRUE)[m
[32m+[m	[32m{[m
[32m+[m		[32mis_array($js) OR $js = array($js);[m
[32m+[m
[32m+[m		[32mif ($ret_false)[m
[32m+[m		[32m{[m
[32m+[m			[32m$js[] = 'return false;';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $this->_add_event($element, $js, 'click');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Double Click[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a jQuery dblclick event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The element to attach the event to[m
[32m+[m	[32m * @param	string	The code to execute[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _dblclick($element = 'this', $js = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_add_event($element, $js, 'dblclick');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Error[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a jQuery error event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The element to attach the event to[m
[32m+[m	[32m * @param	string	The code to execute[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _error($element = 'this', $js = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_add_event($element, $js, 'error');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Focus[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a jQuery focus event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The element to attach the event to[m
[32m+[m	[32m * @param	string	The code to execute[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _focus($element = 'this', $js = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_add_event($element, $js, 'focus');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Hover[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a jQuery hover event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	- element[m
[32m+[m	[32m * @param	string	- Javascript code for mouse over[m
[32m+[m	[32m * @param	string	- Javascript code for mouse out[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _hover($element = 'this', $over = '', $out = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$event = "\n\t$(".$this->_prep_element($element).").hover(\n\t\tfunction()\n\t\t{\n\t\t\t{$over}\n\t\t}, \n\t\tfunction()\n\t\t{\n\t\t\t{$out}\n\t\t});\n";[m
[32m+[m
[32m+[m		[32m$this->jquery_code_for_compile[] = $event;[m
[32m+[m
[32m+[m		[32mreturn $event;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Keydown[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a jQuery keydown event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The element to attach the event to[m
[32m+[m	[32m * @param	string	The code to execute[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _keydown($element = 'this', $js = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_add_event($element, $js, 'keydown');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Keyup[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a jQuery keydown event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The element to attach the event to[m
[32m+[m	[32m * @param	string	The code to execute[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _keyup($element = 'this', $js = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_add_event($element, $js, 'keyup');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Load[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a jQuery load event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The element to attach the event to[m
[32m+[m	[32m * @param	string	The code to execute[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _load($element = 'this', $js = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_add_event($element, $js, 'load');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Mousedown[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a jQuery mousedown event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The element to attach the event to[m
[32m+[m	[32m * @param	string	The code to execute[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _mousedown($element = 'this', $js = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_add_event($element, $js, 'mousedown');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Mouse Out[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a jQuery mouseout event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The element to attach the event to[m
[32m+[m	[32m * @param	string	The code to execute[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _mouseout($element = 'this', $js = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_add_event($element, $js, 'mouseout');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Mouse Over[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a jQuery mouseover event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The element to attach the event to[m
[32m+[m	[32m * @param	string	The code to execute[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _mouseover($element = 'this', $js = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_add_event($element, $js, 'mouseover');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Mouseup[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a jQuery mouseup event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The element to attach the event to[m
[32m+[m	[32m * @param	string	The code to execute[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _mouseup($element = 'this', $js = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_add_event($element, $js, 'mouseup');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Output[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs script directly[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$array_js = array()[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _output($array_js = array())[m
[32m+[m	[32m{[m
[32m+[m		[32mif ( ! is_array($array_js))[m
[32m+[m		[32m{[m
[32m+[m			[32m$array_js = array($array_js);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mforeach ($array_js as $js)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->jquery_code_for_compile[] = "\t".$js."\n";[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Resize[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a jQuery resize event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The element to attach the event to[m
[32m+[m	[32m * @param	string	The code to execute[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _resize($element = 'this', $js = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_add_event($element, $js, 'resize');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Scroll[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a jQuery scroll event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The element to attach the event to[m
[32m+[m	[32m * @param	string	The code to execute[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _scroll($element = 'this', $js = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_add_event($element, $js, 'scroll');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Unload[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a jQuery unload event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The element to attach the event to[m
[32m+[m	[32m * @param	string	The code to execute[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _unload($element = 'this', $js = '')[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_add_event($element, $js, 'unload');[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m	[32m// Effects[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Add Class[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a jQuery addClass event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$element[m
[32m+[m	[32m * @param	string	$class[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _addClass($element = 'this', $class = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$element = $this->_prep_element($element);[m
[32m+[m		[32mreturn '$('.$element.').addClass("'.$class.'");';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Animate[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a jQuery animate event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$element[m
[32m+[m	[32m * @param	array	$params[m
[32m+[m	[32m * @param	string	$speed	'slow', 'normal', 'fast', or time in milliseconds[m
[32m+[m	[32m * @param	string	$extra[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _animate($element = 'this', $params = array(), $speed = '', $extra = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$element = $this->_prep_element($element);[m
[32m+[m		[32m$speed = $this->_validate_speed($speed);[m
[32m+[m
[32m+[m		[32m$animations = "\t\t\t";[m
[32m+[m
[32m+[m		[32mforeach ($params as $param => $value)[m
[32m+[m		[32m{[m
[32m+[m			[32m$animations .= $param.": '".$value."', ";[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$animations = substr($animations, 0, -2); // remove the last ", "[m
[32m+[m
[32m+[m		[32mif ($speed !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$speed = ', '.$speed;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($extra !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$extra = ', '.$extra;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn "$({$element}).animate({\n$animations\n\t\t}".$speed.$extra.');';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fade In[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a jQuery hide event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	- element[m
[32m+[m	[32m * @param	string	- One of 'slow', 'normal', 'fast', or time in milliseconds[m
[32m+[m	[32m * @param	string	- Javascript callback function[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _fadeIn($element = 'this', $speed = '', $callback = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$element = $this->_prep_element($element);[m
[32m+[m		[32m$speed = $this->_validate_speed($speed);[m
[32m+[m
[32m+[m		[32mif ($callback !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$callback = ", function(){\n{$callback}\n}";[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn "$({$element}).fadeIn({$speed}{$callback});";[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Fade Out[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a jQuery hide event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	- element[m
[32m+[m	[32m * @param	string	- One of 'slow', 'normal', 'fast', or time in milliseconds[m
[32m+[m	[32m * @param	string	- Javascript callback function[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _fadeOut($element = 'this', $speed = '', $callback = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$element = $this->_prep_element($element);[m
[32m+[m		[32m$speed = $this->_validate_speed($speed);[m
[32m+[m
[32m+[m		[32mif ($callback !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$callback = ", function(){\n{$callback}\n}";[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn '$('.$element.').fadeOut('.$speed.$callback.');';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Hide[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a jQuery hide action[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	- element[m
[32m+[m	[32m * @param	string	- One of 'slow', 'normal', 'fast', or time in milliseconds[m
[32m+[m	[32m * @param	string	- Javascript callback function[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _hide($element = 'this', $speed = '', $callback = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$element = $this->_prep_element($element);[m
[32m+[m		[32m$speed = $this->_validate_speed($speed);[m
[32m+[m
[32m+[m		[32mif ($callback !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$callback = ", function(){\n{$callback}\n}";[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn "$({$element}).hide({$speed}{$callback});";[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Remove Class[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a jQuery remove class event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$element[m
[32m+[m	[32m * @param	string	$class[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _removeClass($element = 'this', $class = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$element = $this->_prep_element($element);[m
[32m+[m		[32mreturn '$('.$element.').removeClass("'.$class.'");';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Slide Up[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a jQuery slideUp event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	- element[m
[32m+[m	[32m * @param	string	- One of 'slow', 'normal', 'fast', or time in milliseconds[m
[32m+[m	[32m * @param	string	- Javascript callback function[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _slideUp($element = 'this', $speed = '', $callback = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$element = $this->_prep_element($element);[m
[32m+[m		[32m$speed = $this->_validate_speed($speed);[m
[32m+[m
[32m+[m		[32mif ($callback !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$callback = ", function(){\n{$callback}\n}";[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn '$('.$element.').slideUp('.$speed.$callback.');';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Slide Down[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a jQuery slideDown event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	- element[m
[32m+[m	[32m * @param	string	- One of 'slow', 'normal', 'fast', or time in milliseconds[m
[32m+[m	[32m * @param	string	- Javascript callback function[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _slideDown($element = 'this', $speed = '', $callback = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$element = $this->_prep_element($element);[m
[32m+[m		[32m$speed = $this->_validate_speed($speed);[m
[32m+[m
[32m+[m		[32mif ($callback !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$callback = ", function(){\n{$callback}\n}";[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn '$('.$element.').slideDown('.$speed.$callback.');';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Slide Toggle[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a jQuery slideToggle event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	- element[m
[32m+[m	[32m * @param	string	- One of 'slow', 'normal', 'fast', or time in milliseconds[m
[32m+[m	[32m * @param	string	- Javascript callback function[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _slideToggle($element = 'this', $speed = '', $callback = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$element = $this->_prep_element($element);[m
[32m+[m		[32m$speed = $this->_validate_speed($speed);[m
[32m+[m
[32m+[m		[32mif ($callback !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$callback = ", function(){\n{$callback}\n}";[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn '$('.$element.').slideToggle('.$speed.$callback.');';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Toggle[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a jQuery toggle event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	- element[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _toggle($element = 'this')[m
[32m+[m	[32m{[m
[32m+[m		[32m$element = $this->_prep_element($element);[m
[32m+[m		[32mreturn '$('.$element.').toggle();';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Toggle Class[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a jQuery toggle class event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$element[m
[32m+[m	[32m * @param	string	$class[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _toggleClass($element = 'this', $class = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$element = $this->_prep_element($element);[m
[32m+[m		[32mreturn '$('.$element.').toggleClass("'.$class.'");';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Show[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs a jQuery show event[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	- element[m
[32m+[m	[32m * @param	string	- One of 'slow', 'normal', 'fast', or time in milliseconds[m
[32m+[m	[32m * @param	string	- Javascript callback function[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _show($element = 'this', $speed = '', $callback = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$element = $this->_prep_element($element);[m
[32m+[m		[32m$speed = $this->_validate_speed($speed);[m
[32m+[m
[32m+[m		[32mif ($callback !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$callback = ", function(){\n{$callback}\n}";[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn '$('.$element.').show('.$speed.$callback.');';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Updater[m
[32m+[m	[32m *[m
[32m+[m	[32m * An Ajax call that populates the designated DOM node with[m
[32m+[m	[32m * returned content[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The element to attach the event to[m
[32m+[m	[32m * @param	string	the controller to run the call against[m
[32m+[m	[32m * @param	string	optional parameters[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m
[32m+[m	[32mprotected function _updater($container = 'this', $controller = '', $options = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$container = $this->_prep_element($container);[m
[32m+[m		[32m$controller = (strpos('://', $controller) === FALSE) ? $controller : $this->CI->config->site_url($controller);[m
[32m+[m
[32m+[m		[32m// ajaxStart and ajaxStop are better choices here... but this is a stop gap[m
[32m+[m		[32mif ($this->CI->config->item('javascript_ajax_img') === '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$loading_notifier = 'Loading...';[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$loading_notifier = '<img src="'.$this->CI->config->slash_item('base_url').$this->CI->config->item('javascript_ajax_img').'" alt="Loading" />';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$updater = '$('.$container.").empty();\n" // anything that was in... get it out[m
[32m+[m			[32m."\t\t$(".$container.').prepend("'.$loading_notifier."\");\n"; // to replace with an image[m
[32m+[m
[32m+[m		[32m$request_options = '';[m
[32m+[m		[32mif ($options !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$request_options .= ', {'[m
[32m+[m					[32m.(is_array($options) ? "'".implode("', '", $options)."'" : "'".str_replace(':', "':'", $options)."'")[m
[32m+[m					[32m.'}';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $updater."\t\t$($container).load('$controller'$request_options);";[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m	[32m// Pre-written handy stuff[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Zebra tables[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$class[m
[32m+[m	[32m * @param	string	$odd[m
[32m+[m	[32m * @param	string	$hover[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _zebraTables($class = '', $odd = 'odd', $hover = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$class = ($class !== '') ? '.'.$class : '';[m
[32m+[m		[32m$zebra = "\t\$(\"table{$class} tbody tr:nth-child(even)\").addClass(\"{$odd}\");";[m
[32m+[m
[32m+[m		[32m$this->jquery_code_for_compile[] = $zebra;[m
[32m+[m
[32m+[m		[32mif ($hover !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$hover = $this->hover("table{$class} tbody tr", "$(this).addClass('hover');", "$(this).removeClass('hover');");[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $zebra;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m	[32m// Plugins[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Corner Plugin[m
[32m+[m	[32m *[m
[32m+[m	[32m * @link	http://www.malsup.com/jquery/corner/[m
[32m+[m	[32m * @param	string	$element[m
[32m+[m	[32m * @param	string	$corner_style[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function corner($element = '', $corner_style = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m// may want to make this configurable down the road[m
[32m+[m		[32m$corner_location = '/plugins/jquery.corner.js';[m
[32m+[m
[32m+[m		[32mif ($corner_style !== '')[m
[32m+[m		[32m{[m
[32m+[m			[32m$corner_style = '"'.$corner_style.'"';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn '$('.$this->_prep_element($element).').corner('.$corner_style.');';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Modal window[m
[32m+[m	[32m *[m
[32m+[m	[32m * Load a thickbox modal window[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$src[m
[32m+[m	[32m * @param	bool	$relative[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function modal($src, $relative = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->jquery_code_for_load[] = $this->external($src, $relative);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Effect[m
[32m+[m	[32m *[m
[32m+[m	[32m * Load an Effect library[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$src[m
[32m+[m	[32m * @param	bool	$relative[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function effect($src, $relative = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->jquery_code_for_load[] = $this->external($src, $relative);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Plugin[m
[32m+[m	[32m *[m
[32m+[m	[32m * Load a plugin library[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$src[m
[32m+[m	[32m * @param	bool	$relative[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function plugin($src, $relative = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->jquery_code_for_load[] = $this->external($src, $relative);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * UI[m
[32m+[m	[32m *[m
[32m+[m	[32m * Load a user interface library[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$src[m
[32m+[m	[32m * @param	bool	$relative[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function ui($src, $relative = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->jquery_code_for_load[] = $this->external($src, $relative);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Sortable[m
[32m+[m	[32m *[m
[32m+[m	[32m * Creates a jQuery sortable[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$element[m
[32m+[m	[32m * @param	array	$options[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function sortable($element, $options = array())[m
[32m+[m	[32m{[m
[32m+[m		[32mif (count($options) > 0)[m
[32m+[m		[32m{[m
[32m+[m			[32m$sort_options = array();[m
[32m+[m			[32mforeach ($options as $k=>$v)[m
[32m+[m			[32m{[m
[32m+[m				[32m$sort_options[] = "\n\t\t".$k.': '.$v;[m
[32m+[m			[32m}[m
[32m+[m			[32m$sort_options = implode(',', $sort_options);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$sort_options = '';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn '$('.$this->_prep_element($element).').sortable({'.$sort_options."\n\t});";[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Table Sorter Plugin[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	table name[m
[32m+[m	[32m * @param	string	plugin location[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function tablesorter($table = '', $options = '')[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->jquery_code_for_compile[] = "\t$(".$this->_prep_element($table).').tablesorter('.$options.");\n";[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m	[32m// Class functions[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Add Event[m
[32m+[m	[32m *[m
[32m+[m	[32m * Constructs the syntax for an event, and adds to into the array for compilation[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	The element to attach the event to[m
[32m+[m	[32m * @param	string	The code to execute[m
[32m+[m	[32m * @param	string	The event to pass[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _add_event($element, $js, $event)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (is_array($js))[m
[32m+[m		[32m{[m
[32m+[m			[32m$js = implode("\n\t\t", $js);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$event = "\n\t$(".$this->_prep_element($element).').'.$event."(function(){\n\t\t{$js}\n\t});\n";[m
[32m+[m		[32m$this->jquery_code_for_compile[] = $event;[m
[32m+[m		[32mreturn $event;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Compile[m
[32m+[m	[32m *[m
[32m+[m	[32m * As events are specified, they are stored in an array[m
[32m+[m	[32m * This function compiles them all for output on a page[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$view_var[m
[32m+[m	[32m * @param	bool	$script_tags[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _compile($view_var = 'script_foot', $script_tags = TRUE)[m
[32m+[m	[32m{[m
[32m+[m		[32m// External references[m
[32m+[m		[32m$external_scripts = implode('', $this->jquery_code_for_load);[m
[32m+[m		[32m$this->CI->load->vars(array('library_src' => $external_scripts));[m
[32m+[m
[32m+[m		[32mif (count($this->jquery_code_for_compile) === 0)[m
[32m+[m		[32m{[m
[32m+[m			[32m// no inline references, let's just return[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Inline references[m
[32m+[m		[32m$script = '$(document).ready(function() {'."\n"[m
[32m+[m			[32m.implode('', $this->jquery_code_for_compile)[m
[32m+[m			[32m.'});';[m
[32m+[m
[32m+[m		[32m$output = ($script_tags === FALSE) ? $script : $this->inline($script);[m
[32m+[m
[32m+[m		[32m$this->CI->load->vars(array($view_var => $output));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Clear Compile[m
[32m+[m	[32m *[m
[32m+[m	[32m * Clears the array of script events collected for output[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _clear_compile()[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->jquery_code_for_compile = array();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Document Ready[m
[32m+[m	[32m *[m
[32m+[m	[32m * A wrapper for writing document.ready()[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$js[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _document_ready($js)[m
[32m+[m	[32m{[m
[32m+[m		[32mis_array($js) OR $js = array($js);[m
[32m+[m
[32m+[m		[32mforeach ($js as $script)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->jquery_code_for_compile[] = $script;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Script Tag[m
[32m+[m	[32m *[m
[32m+[m	[32m * Outputs the script tag that loads the jquery.js file into an HTML document[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$library_src[m
[32m+[m	[32m * @param	bool	$relative[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function script($library_src = '', $relative = FALSE)[m
[32m+[m	[32m{[m
[32m+[m		[32m$library_src = $this->external($library_src, $relative);[m
[32m+[m		[32m$this->jquery_code_for_load[] = $library_src;[m
[32m+[m		[32mreturn $library_src;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Prep Element[m
[32m+[m	[32m *[m
[32m+[m	[32m * Puts HTML element in quotes for use in jQuery code[m
[32m+[m	[32m * unless the supplied element is the Javascript 'this'[m
[32m+[m	[32m * object, in which case no quotes are added[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _prep_element($element)[m
[32m+[m	[32m{[m
[32m+[m		[32mif ($element !== 'this')[m
[32m+[m		[32m{[m
[32m+[m			[32m$element = '"'.$element.'"';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $element;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Validate Speed[m
[32m+[m	[32m *[m
[32m+[m	[32m * Ensures the speed parameter is valid for jQuery[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string[m
[32m+[m	[32m * @return	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _validate_speed($speed)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (in_array($speed, array('slow', 'normal', 'fast')))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn '"'.$speed.'"';[m
[32m+[m		[32m}[m
[32m+[m		[32melseif (preg_match('/[^0-9]/', $speed))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn '';[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn $speed;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/system/libraries/Javascript/index.html b/system/libraries/Javascript/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..b702fbc[m
[1m--- /dev/null[m
[1m+++ b/system/libraries/Javascript/index.html[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html>[m
[32m+[m[32m<head>[m
[32m+[m	[32m<title>403 Forbidden</title>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m
[32m+[m[32m<p>Directory access is forbidden.</p>[m
[32m+[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
[1mdiff --git a/system/libraries/Migration.php b/system/libraries/Migration.php[m
[1mnew file mode 100644[m
[1mindex 0000000..2c4f34a[m
[1m--- /dev/null[m
[1m+++ b/system/libraries/Migration.php[m
[36m@@ -0,0 +1,477 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m/**[m
[32m+[m[32m * CodeIgniter[m
[32m+[m[32m *[m
[32m+[m[32m * An open source application development framework for PHP[m
[32m+[m[32m *[m
[32m+[m[32m * This content is released under the MIT License (MIT)[m
[32m+[m[32m *[m
[32m+[m[32m * Copyright (c) 2014 - 2018, British Columbia Institute of Technology[m
[32m+[m[32m *[m
[32m+[m[32m * Permission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32m * of this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32m * in the Software without restriction, including without limitation the rights[m
[32m+[m[32m * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32m * copies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32m * furnished to do so, subject to the following conditions:[m
[32m+[m[32m *[m
[32m+[m[32m * The above copyright notice and this permission notice shall be included in[m
[32m+[m[32m * all copies or substantial portions of the Software.[m
[32m+[m[32m *[m
[32m+[m[32m * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32m * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32m * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32m * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32m * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32m * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[32m+[m[32m * THE SOFTWARE.[m
[32m+[m[32m *[m
[32m+[m[32m * @package	CodeIgniter[m
[32m+[m[32m * @author	EllisLab Dev Team[m
[32m+[m[32m * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)[m
[32m+[m[32m * @copyright	Copyright (c) 2014 - 2018, British Columbia Institute of Technology (http://bcit.ca/)[m
[32m+[m[32m * @license	http://opensource.org/licenses/MIT	MIT License[m
[32m+[m[32m * @link	https://codeigniter.com[m
[32m+[m[32m * @since	Version 3.0.0[m
[32m+[m[32m * @filesource[m
[32m+[m[32m */[m
[32m+[m[32mdefined('BASEPATH') OR exit('No direct script access allowed');[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Migration Class[m
[32m+[m[32m *[m
[32m+[m[32m * All migrations should implement this, forces up() and down() and gives[m
[32m+[m[32m * access to the CI super-global.[m
[32m+[m[32m *[m
[32m+[m[32m * @package		CodeIgniter[m
[32m+[m[32m * @subpackage	Libraries[m
[32m+[m[32m * @category	Libraries[m
[32m+[m[32m * @author		Reactor Engineers[m
[32m+[m[32m * @link[m
[32m+[m[32m */[m
[32m+[m[32mclass CI_Migration {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Whether the library is enabled[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_migration_enabled = FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Migration numbering type[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_migration_type = 'sequential';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Path to migration classes[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_migration_path = NULL;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Current migration version[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var mixed[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_migration_version = 0;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Database table with migration info[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_migration_table = 'migrations';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Whether to automatically run migrations[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_migration_auto_latest = FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Migration basename regex[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_migration_regex;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Error message[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_error_string = '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Initialize Migration Class[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$config[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct($config = array())[m
[32m+[m	[32m{[m
[32m+[m		[32m// Only run this constructor on main library load[m
[32m+[m		[32mif ( ! in_array(get_class($this), array('CI_Migration', config_item('subclass_prefix').'Migration'), TRUE))[m
[32m+[m		[32m{[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mforeach ($config as $key => $val)[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->{'_'.$key} = $val;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mlog_message('info', 'Migrations Class Initialized');[m
[32m+[m
[32m+[m		[32m// Are they trying to use migrations while it is disabled?[m
[32m+[m		[32mif ($this->_migration_enabled !== TRUE)[m
[32m+[m		[32m{[m
[32m+[m			[32mshow_error('Migrations has been loaded but is disabled or set up incorrectly.');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// If not set, set it[m
[32m+[m		[32m$this->_migration_path !== '' OR $this->_migration_path = APPPATH.'migrations/';[m
[32m+[m
[32m+[m		[32m// Add trailing slash if not set[m
[32m+[m		[32m$this->_migration_path = rtrim($this->_migration_path, '/').'/';[m
[32m+[m
[32m+[m		[32m// Load migration language[m
[32m+[m		[32m$this->lang->load('migration');[m
[32m+[m
[32m+[m		[32m// They'll probably be using dbforge[m
[32m+[m		[32m$this->load->dbforge();[m
[32m+[m
[32m+[m		[32m// Make sure the migration table name was set.[m
[32m+[m		[32mif (empty($this->_migration_table))[m
[32m+[m		[32m{[m
[32m+[m			[32mshow_error('Migrations configuration file (migration.php) must have "migration_table" set.');[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Migration basename regex[m
[32m+[m		[32m$this->_migration_regex = ($this->_migration_type === 'timestamp')[m
[32m+[m			[32m? '/^\d{14}_(\w+)$/'[m
[32m+[m			[32m: '/^\d{3}_(\w+)$/';[m
[32m+[m
[32m+[m		[32m// Make sure a valid migration numbering type was set.[m
[32m+[m		[32mif ( ! in_array($this->_migration_type, array('sequential', 'timestamp')))[m
[32m+[m		[32m{[m
[32m+[m			[32mshow_error('An invalid migration numbering type was specified: '.$this->_migration_type);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// If the migrations table is missing, make it[m
[32m+[m		[32mif ( ! $this->db->table_exists($this->_migration_table))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->dbforge->add_field(array([m
[32m+[m				[32m'version' => array('type' => 'BIGINT', 'constraint' => 20),[m
[32m+[m			[32m));[m
[32m+[m
[32m+[m			[32m$this->dbforge->create_table($this->_migration_table, TRUE);[m
[32m+[m
[32m+[m			[32m$this->db->insert($this->_migration_table, array('version' => 0));[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Do we auto migrate to the latest migration?[m
[32m+[m		[32mif ($this->_migration_auto_latest === TRUE && ! $this->latest())[m
[32m+[m		[32m{[m
[32m+[m			[32mshow_error($this->error_string());[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Migrate to a schema version[m
[32m+[m	[32m *[m
[32m+[m	[32m * Calls each migration step required to get to the schema version of[m
[32m+[m	[32m * choice[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$target_version	Target schema version[m
[32m+[m	[32m * @return	mixed	TRUE if no migrations are found, current version string on success, FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function version($target_version)[m
[32m+[m	[32m{[m
[32m+[m		[32m// Note: We use strings, so that timestamp versions work on 32-bit systems[m
[32m+[m		[32m$current_version = $this->_get_version();[m
[32m+[m
[32m+[m		[32mif ($this->_migration_type === 'sequential')[m
[32m+[m		[32m{[m
[32m+[m			[32m$target_version = sprintf('%03d', $target_version);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m$target_version = (string) $target_version;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$migrations = $this->find_migrations();[m
[32m+[m
[32m+[m		[32mif ($target_version > 0 && ! isset($migrations[$target_version]))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_error_string = sprintf($this->lang->line('migration_not_found'), $target_version);[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif ($target_version > $current_version)[m
[32m+[m		[32m{[m
[32m+[m			[32m$method = 'up';[m
[32m+[m		[32m}[m
[32m+[m		[32melseif ($target_version < $current_version)[m
[32m+[m		[32m{[m
[32m+[m			[32m$method = 'down';[m
[32m+[m			[32m// We need this so that migrations are applied in reverse order[m
[32m+[m			[32mkrsort($migrations);[m
[32m+[m		[32m}[m
[32m+[m		[32melse[m
[32m+[m		[32m{[m
[32m+[m			[32m// Well, there's nothing to migrate then ...[m
[32m+[m			[32mreturn TRUE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Validate all available migrations within our target range.[m
[32m+[m		[32m//[m
[32m+[m		[32m// Unfortunately, we'll have to use another loop to run them[m
[32m+[m		[32m// in order to avoid leaving the procedure in a broken state.[m
[32m+[m		[32m//[m
[32m+[m		[32m// See https://github.com/bcit-ci/CodeIgniter/issues/4539[m
[32m+[m		[32m$pending = array();[m
[32m+[m		[32mforeach ($migrations as $number => $file)[m
[32m+[m		[32m{[m
[32m+[m			[32m// Ignore versions out of our range.[m
[32m+[m			[32m//[m
[32m+[m			[32m// Because we've previously sorted the $migrations array depending on the direction,[m
[32m+[m			[32m// we can safely break the loop once we reach $target_version ...[m
[32m+[m			[32mif ($method === 'up')[m
[32m+[m			[32m{[m
[32m+[m				[32mif ($number <= $current_version)[m
[32m+[m				[32m{[m
[32m+[m					[32mcontinue;[m
[32m+[m				[32m}[m
[32m+[m				[32melseif ($number > $target_version)[m
[32m+[m				[32m{[m
[32m+[m					[32mbreak;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m			[32melse[m
[32m+[m			[32m{[m
[32m+[m				[32mif ($number > $current_version)[m
[32m+[m				[32m{[m
[32m+[m					[32mcontinue;[m
[32m+[m				[32m}[m
[32m+[m				[32melseif ($number <= $target_version)[m
[32m+[m				[32m{[m
[32m+[m					[32mbreak;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// Check for sequence gaps[m
[32m+[m			[32mif ($this->_migration_type === 'sequential')[m
[32m+[m			[32m{[m
[32m+[m				[32mif (isset($previous) && abs($number - $previous) > 1)[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->_error_string = sprintf($this->lang->line('migration_sequence_gap'), $number);[m
[32m+[m					[32mreturn FALSE;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m$previous = $number;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32minclude_once($file);[m
[32m+[m			[32m$class = 'Migration_'.ucfirst(strtolower($this->_get_migration_name(basename($file, '.php'))));[m
[32m+[m
[32m+[m			[32m// Validate the migration file structure[m
[32m+[m			[32mif ( ! class_exists($class, FALSE))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_error_string = sprintf($this->lang->line('migration_class_doesnt_exist'), $class);[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m			[32melseif ( ! is_callable(array($class, $method)))[m
[32m+[m			[32m{[m
[32m+[m				[32m$this->_error_string = sprintf($this->lang->line('migration_missing_'.$method.'_method'), $class);[m
[32m+[m				[32mreturn FALSE;[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m$pending[$number] = array($class, $method);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// Now just run the necessary migrations[m
[32m+[m		[32mforeach ($pending as $number => $migration)[m
[32m+[m		[32m{[m
[32m+[m			[32mlog_message('debug', 'Migrating '.$method.' from version '.$current_version.' to version '.$number);[m
[32m+[m
[32m+[m			[32m$migration[0] = new $migration[0];[m
[32m+[m			[32mcall_user_func($migration);[m
[32m+[m			[32m$current_version = $number;[m
[32m+[m			[32m$this->_update_version($current_version);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m// This is necessary when moving down, since the the last migration applied[m
[32m+[m		[32m// will be the down() method for the next migration up from the target[m
[32m+[m		[32mif ($current_version <> $target_version)[m
[32m+[m		[32m{[m
[32m+[m			[32m$current_version = $target_version;[m
[32m+[m			[32m$this->_update_version($current_version);[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mlog_message('debug', 'Finished migrating to '.$current_version);[m
[32m+[m		[32mreturn $current_version;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Sets the schema to the latest migration[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	mixed	Current version string on success, FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function latest()[m
[32m+[m	[32m{[m
[32m+[m		[32m$migrations = $this->find_migrations();[m
[32m+[m
[32m+[m		[32mif (empty($migrations))[m
[32m+[m		[32m{[m
[32m+[m			[32m$this->_error_string = $this->lang->line('migration_none_found');[m
[32m+[m			[32mreturn FALSE;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32m$last_migration = basename(end($migrations));[m
[32m+[m
[32m+[m		[32m// Calculate the last migration step from existing migration[m
[32m+[m		[32m// filenames and proceed to the standard version migration[m
[32m+[m		[32mreturn $this->version($this->_get_migration_number($last_migration));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Sets the schema to the migration version set in config[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	mixed	TRUE if no migrations are found, current version string on success, FALSE on failure[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function current()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->version($this->_migration_version);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Error string[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string	Error message returned as a string[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function error_string()[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn $this->_error_string;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Retrieves list of available migration scripts[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	array	list of migration file paths sorted by version[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function find_migrations()[m
[32m+[m	[32m{[m
[32m+[m		[32m$migrations = array();[m
[32m+[m
[32m+[m		[32m// Load all *_*.php files in the migrations path[m
[32m+[m		[32mforeach (glob($this->_migration_path.'*_*.php') as $file)[m
[32m+[m		[32m{[m
[32m+[m			[32m$name = basename($file, '.php');[m
[32m+[m
[32m+[m			[32m// Filter out non-migration files[m
[32m+[m			[32mif (preg_match($this->_migration_regex, $name))[m
[32m+[m			[32m{[m
[32m+[m				[32m$number = $this->_get_migration_number($name);[m
[32m+[m
[32m+[m				[32m// There cannot be duplicate migration numbers[m
[32m+[m				[32mif (isset($migrations[$number]))[m
[32m+[m				[32m{[m
[32m+[m					[32m$this->_error_string = sprintf($this->lang->line('migration_multiple_version'), $number);[m
[32m+[m					[32mshow_error($this->_error_string);[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32m$migrations[$number] = $file;[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mksort($migrations);[m
[32m+[m		[32mreturn $migrations;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Extracts the migration number from a filename[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$migration[m
[32m+[m	[32m * @return	string	Numeric portion of a migration filename[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _get_migration_number($migration)[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn sscanf($migration, '%[0-9]+', $number)[m
[32m+[m			[32m? $number : '0';[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Extracts the migration class name from a filename[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	string	$migration[m
[32m+[m	[32m * @return	string	text portion of a migration filename[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _get_migration_name($migration)[m
[32m+[m	[32m{[m
[32m+[m		[32m$parts = explode('_', $migration);[m
[32m+[m		[32marray_shift($parts);[m
[32m+[m		[32mreturn implode('_', $parts);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Retrieves current schema version[m
[32m+[m	[32m *[m
[32m+[m	[32m * @return	string	Current migration version[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected function _get_version()[m
[32m+[m	[32m{[m
[32m+[m		[32m$row = $this->db->select('version')->get($this->_migration_table)->row();[m
2m+[m[32mclass CI_Pagination {[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Base URL[m
[32m+[m	[32m *[m
[32m+[m	[32m * The page that we're linking to[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $base_url		= '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Prefix[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $prefix = '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Suffix[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $suffix = '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Total number of items[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	int[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $total_rows = 0;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Number of links to show[m
[32m+[m	[32m *[m
[32m+[m	[32m * Relates to "digit" type links shown before/after[m
[32m+[m	[32m * the currently viewed page.[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	int[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $num_links = 2;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Items per page[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $per_page = 10;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Current page[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	int[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic $cur_page = 0;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Use page numbers flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * Whether to use actual page numbers instead of an offset[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $use_page_numbers = FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * First link[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $first_link = '&lsaquo; First';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Next link[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $next_link = '&gt;';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Previous link[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $prev_link = '&lt;';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Last link[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $last_link = 'Last &rsaquo;';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * URI Segment[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	int[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $uri_segment = 0;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Full tag open[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $full_tag_open = '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Full tag close[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $full_tag_close = '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * First tag open[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $first_tag_open = '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * First tag close[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $first_tag_close = '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Last tag open[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $last_tag_open = '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Last tag close[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $last_tag_close = '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * First URL[m
[32m+[m	[32m *[m
[32m+[m	[32m * An alternative URL for the first page[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $first_url = '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Current tag open[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $cur_tag_open = '<strong>';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Current tag close[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $cur_tag_close = '</strong>';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Next tag open[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $next_tag_open = '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Next tag close[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $next_tag_close = '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Previous tag open[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $prev_tag_open = '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Previous tag close[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $prev_tag_close = '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Number tag open[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $num_tag_open = '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Number tag close[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $num_tag_close = '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Page query string flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $page_query_string = FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Query string segment[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $query_string_segment = 'per_page';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Display pages flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $display_pages = TRUE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Attributes[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_attributes = '';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Link types[m
[32m+[m	[32m *[m
[32m+[m	[32m * "rel" attribute[m
[32m+[m	[32m *[m
[32m+[m	[32m * @see	CI_Pagination::_attr_rel()[m
[32m+[m	[32m * @var	array[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $_link_types = array();[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Reuse query string flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $reuse_query_string = FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Use global URL suffix flag[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	bool[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $use_global_url_suffix = FALSE;[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Data page attribute[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	string[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $data_page_attr = 'data-ci-pagination-page';[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * CI Singleton[m
[32m+[m	[32m *[m
[32m+[m	[32m * @var	object[m
[32m+[m	[32m */[m
[32m+[m	[32mprotected $CI;[m
[32m+[m
[32m+[m	[32m// --------------------------------------------------------------------[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Constructor[m
[32m+[m	[32m *[m
[32m+[m	[32m * @param	array	$params	Initialization parameters[m
[32m+[m	[32m * @return	void[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic function __construct($params = array())[m
[32m+[m	[32m{[m
[32m+[m		[32m$this->CI =& get_instance();[m
[32m+[m		[32m$this->CI